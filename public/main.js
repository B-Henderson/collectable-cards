/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");

var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");

var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");

var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");

var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest(); // HTTP basic authentication

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout; // Listen for ready state

    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      } // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request


      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(resolve, reject, response); // Clean up request

      request = null;
    }; // Handle browser request cancellation (as opposed to a manual cancellation)


    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js"); // Add xsrf header


      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (config.withCredentials) {
      request.withCredentials = true;
    } // Add responseType to request if needed


    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel); // Clean up request

        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");

var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");

var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context);
  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Factory for creating new instances

axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
}; // Expose Cancel & CancelToken


axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js"); // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports["default"] = axios;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");

var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");

var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");

var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */


function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);
  config.method = config.method ? config.method.toLowerCase() : 'get'; // Hook up interceptors middleware

  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});
module.exports = Axios;

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");

var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");

var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Support baseURL config

  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  } // Ensure headers exist


  config.headers = config.headers || {}; // Transform request data

  config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData(response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;

  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function () {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };

  return error;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */


module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};
  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });
  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });
  utils.forEach(['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath'], function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });
  return config;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;

  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });
  return data;
};

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");

var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter; // Only Node.JS has a process variable that is of [[Class]] process

  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  }

  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {
        /* Ignore */
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};
defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js"); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/axios/node_modules/is-buffer/index.js");
/*global toString:true*/
// utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

function isArray(val) {
  return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */


function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && _typeof(val) === 'object';
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


function isDate(val) {
  return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */


function isFile(val) {
  return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */


function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */


function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */


function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (_typeof(obj) !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function merge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && _typeof(val) === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function deepMerge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && _typeof(val) === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (_typeof(val) === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};

/***/ }),

/***/ "./node_modules/axios/node_modules/is-buffer/index.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/node_modules/is-buffer/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
module.exports = function isBuffer(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_Navigation_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Navigation.vue */ "./src/components/Navigation.vue");
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    Navigation: _components_Navigation_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Card.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  data: function data() {
    return {
      cardContainer: null,
      innerCard: null,
      card: null,
      counter: 0,
      updateRate: 1,
      mouse: {
        _x: 0,
        _y: 0,
        x: 0,
        y: 0
      },
      parentEl: null,
      flipped: false,
      canTilt: true
    };
  },
  mounted: function mounted() {
    this.cardContainer = this.$el;
    this.innerCard = this.cardContainer.querySelector('.card');
    this.card = document.querySelector('.card');
    this.cardContainer.onmouseenter = this.onEnter;
    this.cardContainer.onmouseleave = this.onLeave;
    this.cardContainer.onmousemove = this.onMove;
    this.setMouseOrigin(this.cardContainer);
  },
  methods: {
    onEnter: function onEnter() {
      this.updatePerspective(event);
    },
    onLeave: function onLeave() {
      if (this.canTilt) {
        this.innerCard.style = '';
      }
    },
    flipCard: function flipCard() {
      var _this = this;

      this.flipped = !this.flipped;
      this.canTilt = false;
      var style = "rotateX(0deg) rotateY(".concat(this.flipped ? '-180' : '0', "deg)");
      this.flipped ? this.cardContainer.style.perspective = '800px' : setTimeout(function () {
        _this.canTilt = true;
        _this.cardContainer.style.perspective = '30px';
      }, 500);
      this.card.style.transform = style;
    },
    onMove: function onMove(event) {
      if (this.timeUpdate() && this.canTilt) {
        this.updatePerspective(event);
      }
    },
    updatePerspective: function updatePerspective(event) {
      this.updateMousePosition(event);
      this.updateTransform((this.mouse.y / this.innerCard.offsetHeight / 2).toFixed(2), (this.mouse.x / this.innerCard.offsetWidth / 2).toFixed(2));
    },
    timeUpdate: function timeUpdate() {
      return this.counter++ % this.updateRate === 0;
    },
    updateMousePosition: function updateMousePosition(event) {
      var e = event || window.event;
      this.mouse.x = e.clientX - this._x;
      this.mouse.y = (e.clientY - this._y) * -1;
    },
    setMouseOrigin: function setMouseOrigin(event) {
      this._x = event.offsetLeft + Math.floor(event.offsetWidth / 2);
      this._y = event.offsetTop + Math.floor(event.offsetHeight / 2);
    },
    updateTransform: function updateTransform(x, y) {
      if (this.flipped) return;
      var style = "rotateX(".concat(x, "deg) rotateY(").concat(y, "deg)");
      this.innerCard.style.transform = style;
      this.innerCard.style.webkitTransform = style;
      this.innerCard.style.mozTransform = style;
      this.innerCard.style.msTransform = style;
      this.innerCard.style.oTransform = style;
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=script&lang=js&":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeaderboardCard.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    data: {
      type: Object,
      required: true
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=script&lang=js&":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Collection.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_Card_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Card.vue */ "./src/components/Card.vue");
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    Card: _components_Card_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Leaderboard.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_LeaderboardCard_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/LeaderboardCard.vue */ "./src/components/LeaderboardCard.vue");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    LeaderboardCard: _components_LeaderboardCard_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  },
  data: function data() {
    return {
      leaderboardData: [{
        profileImage: 'fill-murray.jpg',
        position: '1st',
        username: 'Venkman',
        cardsCollected: 12
      }, {
        position: '2nd',
        username: 'Cyclone',
        cardsCollected: 9
      }, {
        profileImage: 'place-cage.jpg',
        position: '3rd',
        username: 'DoomAir',
        cardsCollected: 7
      }, {
        position: '4th',
        username: 'BitFun',
        cardsCollected: 4
      }, {
        profileImage: 'place-keanu.svg',
        position: '5rd',
        username: 'JohnWick',
        cardsCollected: 7
      }, {
        position: '6th',
        username: 'BitFun',
        cardsCollected: 4
      }, {
        position: '7th',
        username: 'Cheesecake',
        cardsCollected: 1
      }],
      showItems: false
    };
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      _this.showItems = true;
    });
  }
});

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=style&index=0&lang=scss&":
/*!*********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=scss& ***!
  \*********************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "* {\n  box-sizing: border-box;\n}\nhtml,\nbody {\n  align-items: center;\n  background: #666375;\n  display: flex;\n  font-size: 16px;\n  height: 100%;\n  justify-content: center;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n}\n#app {\n  background-color: #dfdfdf;\n  box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 rgba(0, 0, 0, 0.19);\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n}\n@media (min-width: 576px) {\n#app {\n    height: 731px;\n    width: 411px;\n}\n}\n.heading1 {\n  text-align: center;\n}\n.app-content {\n  height: calc(100% - 78px);\n}\n.card-collection__body {\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  overflow: auto;\n  padding: 0 30px;\n  position: relative;\n  width: 100%;\n}\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-active {\n  opacity: 0;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=style&index=0&lang=scss&":
/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Card.vue?vue&type=style&index=0&lang=scss& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".card-container {\n  perspective: 30px;\n  margin: 25px;\n}\n.card {\n  transition: transform 0.5s;\n  height: 450px;\n  width: 350px;\n  transform-style: preserve-3d;\n  border: 1px solid black;\n  background: #7773c1;\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\n  background: linear-gradient(0deg, #7773c1 0%, #092479 12%, rgba(255, 255, 255, 0.8715686958) 100%);\n}\n.card__front, .card__back {\n  backface-visibility: hidden;\n  background-color: #eee;\n  height: 100%;\n  width: 100%;\n  display: grid;\n  grid-template-columns: 100%;\n  grid-template-rows: [image] auto [footer] 1fr;\n  z-index: 2;\n  position: absolute;\n}\n.card__front_flip, .card__back_flip {\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin: 1rem;\n  padding: 1rem;\n  z-index: 10;\n}\n.card__front_image, .card__back_image {\n  grid-column: 1;\n  grid-row: image;\n  display: flex;\n  justify-content: center;\n}\n.card__front_image_src, .card__back_image_src {\n  object-fit: contain;\n}\n.card__front_footer, .card__back_footer {\n  grid-row: footer;\n  grid-column: 1;\n  display: grid;\n  background-color: #eee;\n  grid-template-rows: 100%;\n  grid-template-columns: [rarity] 1fr [name] 3fr;\n}\n.card__front_footer_name, .card__front_footer_rarity, .card__back_footer_name, .card__back_footer_rarity {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.card__front_footer_rarity, .card__back_footer_rarity {\n  margin: 1rem;\n  height: 60%;\n  background-color: lightblue;\n}\n.card__back {\n  padding: 1rem;\n  transform: rotateY(180deg);\n  display: flex;\n  justify-content: center;\n}\n.card__back h1 {\n  margin: 3rem 0 3rem 0;\n  font-size: 3rem;\n}\n.card__back p {\n  font-size: 1.2rem;\n  line-height: 1.3rem;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&":
/*!********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ../assets/default-profile.jpg */ "./src/assets/default-profile.jpg"));
// Module
exports.push([module.i, ".leaderboard-card {\n  background-color: #d9d9d9;\n  margin-bottom: 15px;\n  position: relative;\n  width: 100%;\n}\n.leaderboard-card__position {\n  background-color: #696969;\n  color: #d9d9d9;\n  font-size: 1.2em;\n  font-weight: bold;\n  padding: 7px 15px 7px 7px;\n  position: absolute;\n  top: 26px;\n  left: 0;\n}\n.leaderboard-card__content {\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  padding: 10px 20px;\n  width: 100%;\n}\n.leaderboard-card__image {\n  background-color: black;\n  background-image: url(" + ___CSS_LOADER_URL___0___ + ");\n  background-position: center;\n  background-size: cover;\n  height: 70px;\n  width: 70px;\n}\n.leaderboard-card__username {\n  font-size: 1.5em;\n  font-weight: bold;\n}\n.leaderboard-card__cards-collected {\n  text-align: center;\n}\n.leaderboard-card__cards-collected__number {\n  font-size: 1.5em;\n  font-weight: bold;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".navigation[data-v-81440b78] {\n  display: flex;\n  font-weight: bold;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n}\n.navigation__item[data-v-81440b78] {\n  background-color: #C6C6C6;\n  border-right: 1px solid #000;\n  color: #fff;\n  cursor: pointer;\n  padding: 30px 0;\n  text-align: center;\n  text-decoration: none;\n  width: calc(100% / 4);\n}\n.navigation__item[data-v-81440b78]:last-child {\n  border-right: none;\n}\n.navigation__item.router-link-exact-active[data-v-81440b78], .navigation__item[data-v-81440b78]:hover {\n  background-color: #696969;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".leaderboard[data-v-c7fd0e9a] {\n  width: 100%;\n}\n.slide-in-move[data-v-c7fd0e9a] {\n  transition: opacity 1s linear, transform 1s ease-in-out;\n}\n.slide-in-leave-active[data-v-c7fd0e9a] {\n  transition: opacity 0.4s linear, transform 0.4s cubic-bezier(0.5, 0, 0.7, 0.4);\n  transition-delay: calc( 0.3s * (var(--total) - var(--i)) );\n}\n.slide-in-enter-active[data-v-c7fd0e9a] {\n  transition: opacity 1s linear, transform 1.5s cubic-bezier(0.2, 0.5, 0.1, 1);\n  transition-delay: calc( 0.3s * var(--i) );\n}\n.slide-in-enter[data-v-c7fd0e9a], .slide-in-leave-to[data-v-c7fd0e9a] {\n  opacity: 0;\n}\n.slide-in-enter[data-v-c7fd0e9a] {\n  transform: translateY(5em);\n}\n.slide-in-leave-to[data-v-c7fd0e9a] {\n  transform: translateY(3em);\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names

module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], "{").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      // eslint-disable-next-line prefer-destructuring
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = modules[_i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(".concat(item[2], ") and (").concat(mediaQuery, ")");
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot).concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (url, needQuotes) {
  // eslint-disable-next-line no-underscore-dangle, no-param-reassign
  url = url.__esModule ? url["default"] : url;

  if (typeof url !== 'string') {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    // eslint-disable-next-line no-param-reassign
    url = url.slice(1, -1);
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url) || needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, '\\n'), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function registerImmediate(handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function onGlobalMessage(event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function registerImmediate(handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function registerImmediate(handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function registerImmediate(handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function registerImmediate(handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=style&index=0&lang=scss&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=scss& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??ref--2-2!../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=style&index=0&lang=scss&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=style&index=0&lang=scss&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Card.vue?vue&type=style&index=0&lang=scss& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Card.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=style&index=0&lang=scss&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./LeaderboardCard.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var stylesInDom = {};

var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

function listToStyles(list, options) {
  var styles = [];
  var newStyles = {};

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var css = item[1];
    var media = item[2];
    var sourceMap = item[3];
    var part = {
      css: css,
      media: media,
      sourceMap: sourceMap
    };

    if (!newStyles[id]) {
      styles.push(newStyles[id] = {
        id: id,
        parts: [part]
      });
    } else {
      newStyles[id].parts.push(part);
    }
  }

  return styles;
}

function addStylesToDom(styles, options) {
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i];
    var domStyle = stylesInDom[item.id];
    var j = 0;

    if (domStyle) {
      domStyle.refs++;

      for (; j < domStyle.parts.length; j++) {
        domStyle.parts[j](item.parts[j]);
      }

      for (; j < item.parts.length; j++) {
        domStyle.parts.push(addStyle(item.parts[j], options));
      }
    } else {
      var parts = [];

      for (; j < item.parts.length; j++) {
        parts.push(addStyle(item.parts[j], options));
      }

      stylesInDom[item.id] = {
        id: item.id,
        refs: 1,
        parts: parts
      };
    }
  }
}

function insertStyleElement(options) {
  var style = document.createElement('style');

  if (typeof options.attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      options.attributes.nonce = nonce;
    }
  }

  Object.keys(options.attributes).forEach(function (key) {
    style.setAttribute(key, options.attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {};
  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  var styles = listToStyles(list, options);
  addStylesToDom(styles, options);
  return function update(newList) {
    var mayRemove = [];

    for (var i = 0; i < styles.length; i++) {
      var item = styles[i];
      var domStyle = stylesInDom[item.id];

      if (domStyle) {
        domStyle.refs--;
        mayRemove.push(domStyle);
      }
    }

    if (newList) {
      var newStyles = listToStyles(newList, options);
      addStylesToDom(newStyles, options);
    }

    for (var _i = 0; _i < mayRemove.length; _i++) {
      var _domStyle = mayRemove[_i];

      if (_domStyle.refs === 0) {
        for (var j = 0; j < _domStyle.parts.length; j++) {
          _domStyle.parts[j]();
        }

        delete stylesInDom[_domStyle.id];
      }
    }
  };
};

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=template&id=7ba5bd90&":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90& ***!
  \**********************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "app-content" },
    [
      _c(
        "div",
        { staticClass: "card-collection__body" },
        [
          _c(
            "transition",
            { attrs: { name: "fade", mode: "out-in" } },
            [_c("router-view")],
            1
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("navigation")
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=template&id=54cdc180&":
/*!**********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Card.vue?vue&type=template&id=54cdc180& ***!
  \**********************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "card-container" }, [
    _c("div", { staticClass: "card", class: { flipped: this.flipped } }, [
      _c("div", { staticClass: "card__front" }, [
        _c(
          "button",
          { staticClass: "card__front_flip", on: { click: _vm.flipCard } },
          [_vm._v("Flip")]
        ),
        _vm._v(" "),
        _vm._m(0),
        _vm._v(" "),
        _vm._m(1)
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "card__back" }, [
        _c(
          "button",
          { staticClass: "card__back_flip", on: { click: _vm.flipCard } },
          [_vm._v("Flip")]
        ),
        _vm._v(" "),
        _vm._m(2)
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "card__front_image" }, [
      _c("img", {
        staticClass: "card__front_image_src",
        attrs: { src: "https://picsum.photos/350/375", alt: "image" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "card__front_footer" }, [
      _c("div", { staticClass: "card__front_footer_rarity" }, [
        _c("span", [_vm._v("rare")])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "card__front_footer_name" }, [
        _vm._v("Robert the Bruce(front)")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "card__back_info" }, [
      _c("h1", [_vm._v("Robert the Bruce")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Culpa\n          atque quae enim, accusamus recusandae pariatur. Sint dolore dicta\n          quod veniam nemo maiores, reiciendis fuga ratione. Sequi deleniti\n          maxime ex cum!\n        "
        )
      ])
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6&":
/*!*********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6& ***!
  \*********************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "leaderboard-card" }, [
    _c("div", { staticClass: "leaderboard-card__position" }, [
      _vm._v(_vm._s(_vm.data.position))
    ]),
    _vm._v(" "),
    _c("div", { staticClass: "leaderboard-card__content" }, [
      _c("div", {
        staticClass: "leaderboard-card__image",
        style: [
          _vm.data.profileImage
            ? {
                backgroundImage:
                  "url(" + __webpack_require__("./src/assets sync recursive ^\\.\\/.*$")("./" + _vm.data.profileImage) + ")"
              }
            : {}
        ]
      }),
      _vm._v(" "),
      _c("div", { staticClass: "leaderboard-card__username" }, [
        _vm._v(_vm._s(_vm.data.username))
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "leaderboard-card__cards-collected" }, [
        _c(
          "span",
          { staticClass: "leaderboard-card__cards-collected__number" },
          [_vm._v(_vm._s(_vm.data.cardsCollected))]
        ),
        _c("br"),
        _vm._v("\n            cards"),
        _c("br"),
        _vm._v("\n            collected\n        ")
      ])
    ])
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true&":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true& ***!
  \****************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "navigation" },
    [
      _c(
        "router-link",
        { staticClass: "navigation__item", attrs: { to: "/" } },
        [_vm._v("Home")]
      ),
      _vm._v(" "),
      _c(
        "router-link",
        { staticClass: "navigation__item", attrs: { to: "/collection" } },
        [_vm._v("Collection")]
      ),
      _vm._v(" "),
      _c(
        "router-link",
        { staticClass: "navigation__item", attrs: { to: "/leaderboard" } },
        [_vm._v("Leaderboard")]
      ),
      _vm._v(" "),
      _c(
        "router-link",
        { staticClass: "navigation__item", attrs: { to: "/settings" } },
        [_vm._v("Settings")]
      )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=template&id=55026158&":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Collection.vue?vue&type=template&id=55026158& ***!
  \***********************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    [
      _c("h1", { staticClass: "heading1" }, [_vm._v("Your collection")]),
      _vm._v(" "),
      _c("card")
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=template&id=fae5bece&":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=template&id=fae5bece& ***!
  \*****************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("h1", { staticClass: "heading1" }, [_vm._v("Welcome Home")])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true&":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "leaderboard" },
    [
      _c("h1", { staticClass: "heading1" }, [_vm._v("Leaderboard")]),
      _vm._v(" "),
      _c(
        "transition-group",
        {
          style: { "--total": _vm.leaderboardData.length },
          attrs: { tag: "div", name: "slide-in" }
        },
        [
          _vm._l(_vm.leaderboardData, function(item, index) {
            return [
              _vm.showItems
                ? _c(
                    "div",
                    { key: index, style: { "--i": index } },
                    [
                      _c("leaderboard-card", {
                        staticClass: "leaderboard-card",
                        attrs: { data: item, "data-index": index }
                      })
                    ],
                    1
                  )
                : _vm._e()
            ]
          })
        ],
        2
      ),
      _vm._v(" "),
      _c("img", { attrs: { src: "", alt: "" } })
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Settings.vue?vue&type=template&id=53cc84dd&":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Settings.vue?vue&type=template&id=53cc84dd& ***!
  \*********************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("h1", { staticClass: "heading1" }, [_vm._v("Settings")])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue-router/dist/vue-router.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-router/dist/vue-router.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
  * vue-router v3.1.3
  * (c) 2019 Evan You
  * @license MIT
  */

/*  */
function assert(condition, message) {
  if (!condition) {
    throw new Error("[vue-router] " + message);
  }
}

function warn(condition, message) {
  if ( true && !condition) {
    typeof console !== 'undefined' && console.warn("[vue-router] " + message);
  }
}

function isError(err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1;
}

function isExtendedError(constructor, err) {
  return err instanceof constructor || // _name is to support IE9 too
  err && (err.name === constructor.name || err._name === constructor._name);
}

function extend(a, b) {
  for (var key in b) {
    a[key] = b[key];
  }

  return a;
}

var View = {
  name: 'RouterView',
  functional: true,
  props: {
    name: {
      type: String,
      "default": 'default'
    }
  },
  render: function render(_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data; // used by devtools to display a router-view badge

    data.routerView = true; // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots

    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {}); // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.

    var depth = 0;
    var inactive = false;

    while (parent && parent._routerRoot !== parent) {
      var vnodeData = parent.$vnode && parent.$vnode.data;

      if (vnodeData) {
        if (vnodeData.routerView) {
          depth++;
        }

        if (vnodeData.keepAlive && parent._inactive) {
          inactive = true;
        }
      }

      parent = parent.$parent;
    }

    data.routerViewDepth = depth; // render previous view if the tree is inactive and kept-alive

    if (inactive) {
      return h(cache[name], data, children);
    }

    var matched = route.matched[depth]; // render empty node if no matched route

    if (!matched) {
      cache[name] = null;
      return h();
    }

    var component = cache[name] = matched.components[name]; // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks

    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];

      if (val && current !== vm || !val && current === vm) {
        matched.instances[name] = val;
      }
    } // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;

    (data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    }; // register instance in init hook
    // in case kept-alive component be actived when routes changed


    data.hook.init = function (vnode) {
      if (vnode.data.keepAlive && vnode.componentInstance && vnode.componentInstance !== matched.instances[name]) {
        matched.instances[name] = vnode.componentInstance;
      }
    }; // resolve props


    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);

    if (propsToPass) {
      // clone to prevent mutation
      propsToPass = data.props = extend({}, propsToPass); // pass non-declared props as attrs

      var attrs = data.attrs = data.attrs || {};

      for (var key in propsToPass) {
        if (!component.props || !(key in component.props)) {
          attrs[key] = propsToPass[key];
          delete propsToPass[key];
        }
      }
    }

    return h(component, data, children);
  }
};

function resolveProps(route, config) {
  switch (_typeof(config)) {
    case 'undefined':
      return;

    case 'object':
      return config;

    case 'function':
      return config(route);

    case 'boolean':
      return config ? route.params : undefined;

    default:
      if (true) {
        warn(false, "props in \"" + route.path + "\" is a " + _typeof(config) + ", " + "expecting an object, function or boolean.");
      }

  }
}
/*  */


var encodeReserveRE = /[!'()*]/g;

var encodeReserveReplacer = function encodeReserveReplacer(c) {
  return '%' + c.charCodeAt(0).toString(16);
};

var commaRE = /%2C/g; // fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas

var encode = function encode(str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
};

var decode = decodeURIComponent;

function resolveQuery(query, extraQuery, _parseQuery) {
  if (extraQuery === void 0) extraQuery = {};
  var parse = _parseQuery || parseQuery;
  var parsedQuery;

  try {
    parsedQuery = parse(query || '');
  } catch (e) {
     true && warn(false, e.message);
    parsedQuery = {};
  }

  for (var key in extraQuery) {
    parsedQuery[key] = extraQuery[key];
  }

  return parsedQuery;
}

function parseQuery(query) {
  var res = {};
  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res;
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });
  return res;
}

function stringifyQuery(obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return '';
    }

    if (val === null) {
      return encode(key);
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }

        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&');
    }

    return encode(key) + '=' + encode(val);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&') : null;
  return res ? "?" + res : '';
}
/*  */


var trailingSlashRE = /\/?$/;

function createRoute(record, location, redirectedFrom, router) {
  var stringifyQuery = router && router.options.stringifyQuery;
  var query = location.query || {};

  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || record && record.name,
    meta: record && record.meta || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery),
    matched: record ? formatMatch(record) : []
  };

  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);
  }

  return Object.freeze(route);
}

function clone(value) {
  if (Array.isArray(value)) {
    return value.map(clone);
  } else if (value && _typeof(value) === 'object') {
    var res = {};

    for (var key in value) {
      res[key] = clone(value[key]);
    }

    return res;
  } else {
    return value;
  }
} // the starting route that represents the initial state


var START = createRoute(null, {
  path: '/'
});

function formatMatch(record) {
  var res = [];

  while (record) {
    res.unshift(record);
    record = record.parent;
  }

  return res;
}

function getFullPath(ref, _stringifyQuery) {
  var path = ref.path;
  var query = ref.query;
  if (query === void 0) query = {};
  var hash = ref.hash;
  if (hash === void 0) hash = '';
  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash;
}

function isSameRoute(a, b) {
  if (b === START) {
    return a === b;
  } else if (!b) {
    return false;
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && a.hash === b.hash && isObjectEqual(a.query, b.query);
  } else if (a.name && b.name) {
    return a.name === b.name && a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params);
  } else {
    return false;
  }
}

function isObjectEqual(a, b) {
  if (a === void 0) a = {};
  if (b === void 0) b = {}; // handle null value #1566

  if (!a || !b) {
    return a === b;
  }

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);

  if (aKeys.length !== bKeys.length) {
    return false;
  }

  return aKeys.every(function (key) {
    var aVal = a[key];
    var bVal = b[key]; // check nested equality

    if (_typeof(aVal) === 'object' && _typeof(bVal) === 'object') {
      return isObjectEqual(aVal, bVal);
    }

    return String(aVal) === String(bVal);
  });
}

function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}

function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }

  return true;
}
/*  */


function resolvePath(relative, base, append) {
  var firstChar = relative.charAt(0);

  if (firstChar === '/') {
    return relative;
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative;
  }

  var stack = base.split('/'); // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)

  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  } // resolve relative path


  var segments = relative.replace(/^\//, '').split('/');

  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];

    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  } // ensure leading slash


  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/');
}

function parsePath(path) {
  var hash = '';
  var query = '';
  var hashIndex = path.indexOf('#');

  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');

  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  };
}

function cleanPath(path) {
  return path.replace(/\/\//g, '/');
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};
/**
 * Expose `pathToRegexp`.
 */


var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length; // Ignore already escaped sequences.

    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7]; // Push the current path onto the tokens.

    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  } // Match any characters still remaining.


  if (index < str.length) {
    path += str.substr(index);
  } // If the path exists, push it onto the end.


  if (path) {
    tokens.push(path);
  }

  return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */


function compile(str, options) {
  return tokensToFunction(parse(str, options));
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */


function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */


function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Expose a method for transforming tokens into the path function.
 */


function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length); // Compile all the patterns before compilation.

  for (var i = 0; i < tokens.length; i++) {
    if (_typeof(tokens[i]) === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */


function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */


function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */


function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */


function flags(options) {
  return options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */


function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
  return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */


function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = ''; // Iterate over the tokens and create our regexp string.

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';
      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".

  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */


function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path,
    /** @type {!Array} */
    keys);
  }

  if (isarray(path)) {
    return arrayToRegexp(
    /** @type {!Array} */
    path,
    /** @type {!Array} */
    keys, options);
  }

  return stringToRegexp(
  /** @type {string} */
  path,
  /** @type {!Array} */
  keys, options);
}

pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;
/*  */
// $flow-disable-line

var regexpCompileCache = Object.create(null);

function fillParams(path, params, routeMsg) {
  params = params || {};

  try {
    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = pathToRegexp_1.compile(path)); // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}

    if (params.pathMatch) {
      params[0] = params.pathMatch;
    }

    return filler(params, {
      pretty: true
    });
  } catch (e) {
    if (true) {
      warn(false, "missing param for " + routeMsg + ": " + e.message);
    }

    return '';
  } finally {
    // delete the 0 if it was added
    delete params[0];
  }
}
/*  */


function normalizeLocation(raw, current, append, router) {
  var next = typeof raw === 'string' ? {
    path: raw
  } : raw; // named target

  if (next._normalized) {
    return next;
  } else if (next.name) {
    return extend({}, raw);
  } // relative params


  if (!next.path && next.params && current) {
    next = extend({}, next);
    next._normalized = true;
    var params = extend(extend({}, current.params), next.params);

    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, "path " + current.path);
    } else if (true) {
      warn(false, "relative params navigation requires a current route.");
    }

    return next;
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = current && current.path || '/';
  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;
  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);
  var hash = next.hash || parsedPath.hash;

  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  };
}
/*  */
// work around weird flow bug


var toTypes = [String, Object];
var eventTypes = [String, Array];

var noop = function noop() {};

var Link = {
  name: 'RouterLink',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      "default": 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      "default": 'click'
    }
  },
  render: function render(h) {
    var this$1 = this;
    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;
    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass; // Support global empty active class

    var activeClassFallback = globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null ? 'router-link-exact-active' : globalExactActiveClass;
    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;
    var compareTarget = route.redirectedFrom ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router) : route;
    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);

    var handler = function handler(e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location, noop);
        } else {
          router.push(location, noop);
        }
      }
    };

    var on = {
      click: guardEvent
    };

    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = {
      "class": classes
    };
    var scopedSlot = !this.$scopedSlots.$hasNormal && this.$scopedSlots["default"] && this.$scopedSlots["default"]({
      href: href,
      route: route,
      navigate: handler,
      isActive: classes[activeClass],
      isExactActive: classes[exactActiveClass]
    });

    if (scopedSlot) {
      if (scopedSlot.length === 1) {
        return scopedSlot[0];
      } else if (scopedSlot.length > 1 || !scopedSlot.length) {
        if (true) {
          warn(false, "RouterLink with to=\"" + this.props.to + "\" is trying to use a scoped slot but it didn't provide exactly one child.");
        }

        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot);
      }
    }

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = {
        href: href
      };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots["default"]);

      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var aData = a.data = extend({}, a.data);
        aData.on = aData.on || {}; // transform existing events in both objects into arrays so we can push later

        for (var event in aData.on) {
          var handler$1 = aData.on[event];

          if (event in on) {
            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];
          }
        } // append new listeners for router-link


        for (var event$1 in on) {
          if (event$1 in aData.on) {
            // on[event] is always a function
            aData.on[event$1].push(on[event$1]);
          } else {
            aData.on[event$1] = handler;
          }
        }

        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots["default"]);
  }
};

function guardEvent(e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
    return;
  } // don't redirect when preventDefault called


  if (e.defaultPrevented) {
    return;
  } // don't redirect on right click


  if (e.button !== undefined && e.button !== 0) {
    return;
  } // don't redirect if `target="_blank"`


  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');

    if (/\b_blank\b/i.test(target)) {
      return;
    }
  } // this may be a Weex event which doesn't have this method


  if (e.preventDefault) {
    e.preventDefault();
  }

  return true;
}

function findAnchor(children) {
  if (children) {
    var child;

    for (var i = 0; i < children.length; i++) {
      child = children[i];

      if (child.tag === 'a') {
        return child;
      }

      if (child.children && (child = findAnchor(child.children))) {
        return child;
      }
    }
  }
}

var _Vue;

function install(Vue) {
  if (install.installed && _Vue === Vue) {
    return;
  }

  install.installed = true;
  _Vue = Vue;

  var isDef = function isDef(v) {
    return v !== undefined;
  };

  var registerInstance = function registerInstance(vm, callVal) {
    var i = vm.$options._parentVnode;

    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;

        this._router.init(this);

        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = this.$parent && this.$parent._routerRoot || this;
      }

      registerInstance(this, this);
    },
    destroyed: function destroyed() {
      registerInstance(this);
    }
  });
  Object.defineProperty(Vue.prototype, '$router', {
    get: function get() {
      return this._routerRoot._router;
    }
  });
  Object.defineProperty(Vue.prototype, '$route', {
    get: function get() {
      return this._routerRoot._route;
    }
  });
  Vue.component('RouterView', View);
  Vue.component('RouterLink', Link);
  var strats = Vue.config.optionMergeStrategies; // use the same hook merging strategy for route hooks

  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}
/*  */


var inBrowser = typeof window !== 'undefined';
/*  */

function createRouteMap(routes, oldPathList, oldPathMap, oldNameMap) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || []; // $flow-disable-line

  var pathMap = oldPathMap || Object.create(null); // $flow-disable-line

  var nameMap = oldNameMap || Object.create(null);
  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  }); // ensure wildcard routes are always at the end

  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  if (true) {
    // warn if routes do not include leading slashes
    var found = pathList // check for missing leading slash
    .filter(function (path) {
      return path && path.charAt(0) !== '*' && path.charAt(0) !== '/';
    });

    if (found.length > 0) {
      var pathNames = found.map(function (path) {
        return "- " + path;
      }).join('\n');
      warn(false, "Non-nested routes must include a leading slash character. Fix the following routes: \n" + pathNames);
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  };
}

function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {
  var path = route.path;
  var name = route.name;

  if (true) {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(typeof route.component !== 'string', "route config \"component\" for path: " + String(path || name) + " cannot be a " + "string id. Use an actual component instead.");
  }

  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || {
      "default": route.component
    },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null ? {} : route.components ? route.props : {
      "default": route.props
    }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (true) {
      if (route.name && !route.redirect && route.children.some(function (child) {
        return /^\/?$/.test(child.path);
      })) {
        warn(false, "Named Route '" + route.name + "' has a default child route. " + "When navigating to this named route (:to=\"{name: '" + route.name + "'\"), " + "the default child route will not be rendered. Remove the name from " + "this route and use the name of the default child route for named " + "links instead.");
      }
    }

    route.children.forEach(function (child) {
      var childMatchAs = matchAs ? cleanPath(matchAs + "/" + child.path) : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];

    for (var i = 0; i < aliases.length; ++i) {
      var alias = aliases[i];

      if ( true && alias === path) {
        warn(false, "Found an alias with the same value as the path: \"" + path + "\". You have to remove that alias. It will be ignored in development."); // skip in dev to make it work

        continue;
      }

      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || '/' // matchAs
      );
    }
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if ( true && !matchAs) {
      warn(false, "Duplicate named routes definition: " + "{ name: \"" + name + "\", path: \"" + record.path + "\" }");
    }
  }
}

function compileRouteRegex(path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);

  if (true) {
    var keys = Object.create(null);
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], "Duplicate param keys in route with path: \"" + path + "\"");
      keys[key.name] = true;
    });
  }

  return regex;
}

function normalizePath(path, parent, strict) {
  if (!strict) {
    path = path.replace(/\/$/, '');
  }

  if (path[0] === '/') {
    return path;
  }

  if (parent == null) {
    return path;
  }

  return cleanPath(parent.path + "/" + path);
}
/*  */


function createMatcher(routes, router) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes(routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match(raw, currentRoute, redirectedFrom) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];

      if (true) {
        warn(record, "Route with name '" + name + "' does not exist");
      }

      if (!record) {
        return _createRoute(null, location);
      }

      var paramNames = record.regex.keys.filter(function (key) {
        return !key.optional;
      }).map(function (key) {
        return key.name;
      });

      if (_typeof(location.params) !== 'object') {
        location.params = {};
      }

      if (currentRoute && _typeof(currentRoute.params) === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      location.path = fillParams(record.path, location.params, "named route \"" + name + "\"");
      return _createRoute(record, location, redirectedFrom);
    } else if (location.path) {
      location.params = {};

      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];

        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom);
        }
      }
    } // no match


    return _createRoute(null, location);
  }

  function redirect(record, location) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function' ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = {
        path: redirect
      };
    }

    if (!redirect || _typeof(redirect) !== 'object') {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];

      if (true) {
        assert(targetRecord, "redirect failed: named route \"" + name + "\" not found.");
      }

      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location);
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record); // 2. resolve params

      var resolvedPath = fillParams(rawPath, params, "redirect route with path \"" + rawPath + "\""); // 3. rematch with existing query and hash

      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location);
    } else {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }
  }

  function alias(record, location, matchAs) {
    var aliasedPath = fillParams(matchAs, location.params, "aliased route with path \"" + matchAs + "\"");
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });

    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location);
    }

    return _createRoute(null, location);
  }

  function _createRoute(record, location, redirectedFrom) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location);
    }

    if (record && record.matchAs) {
      return alias(record, location, record.matchAs);
    }

    return createRoute(record, location, redirectedFrom, router);
  }

  return {
    match: match,
    addRoutes: addRoutes
  };
}

function matchRoute(regex, path, params) {
  var m = path.match(regex);

  if (!m) {
    return false;
  } else if (!params) {
    return true;
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];

    if (key) {
      // Fix #1994: using * with props: true generates a param named 0
      params[key.name || 'pathMatch'] = val;
    }
  }

  return true;
}

function resolveRecordPath(path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true);
}
/*  */
// use User Timing api (if present) for more accurate key precision


var Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;

function genStateKey() {
  return Time.now().toFixed(3);
}

var _key = genStateKey();

function getStateKey() {
  return _key;
}

function setStateKey(key) {
  return _key = key;
}
/*  */


var positionStore = Object.create(null);

function setupScroll() {
  // Fix for #1585 for Firefox
  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with
  // window.location.protocol + '//' + window.location.host
  // location.host contains the port and location.hostname doesn't
  var protocolAndPath = window.location.protocol + '//' + window.location.host;
  var absolutePath = window.location.href.replace(protocolAndPath, '');
  window.history.replaceState({
    key: getStateKey()
  }, '', absolutePath);
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();

    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll(router, to, from, isPop) {
  if (!router.app) {
    return;
  }

  var behavior = router.options.scrollBehavior;

  if (!behavior) {
    return;
  }

  if (true) {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  } // wait until re-render finishes before scrolling


  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior.call(router, to, from, isPop ? position : null);

    if (!shouldScroll) {
      return;
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll.then(function (shouldScroll) {
        scrollToPosition(shouldScroll, position);
      })["catch"](function (err) {
        if (true) {
          assert(false, err.toString());
        }
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition() {
  var key = getStateKey();

  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition() {
  var key = getStateKey();

  if (key) {
    return positionStore[key];
  }
}

function getElementPosition(el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  };
}

function isValidPosition(obj) {
  return isNumber(obj.x) || isNumber(obj.y);
}

function normalizePosition(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  };
}

function normalizeOffset(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  };
}

function isNumber(v) {
  return typeof v === 'number';
}

var hashStartsWithNumberRE = /^#\d/;

function scrollToPosition(shouldScroll, position) {
  var isObject = _typeof(shouldScroll) === 'object';

  if (isObject && typeof shouldScroll.selector === 'string') {
    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]
    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector
    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line
    ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line
    : document.querySelector(shouldScroll.selector);

    if (el) {
      var offset = shouldScroll.offset && _typeof(shouldScroll.offset) === 'object' ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    window.scrollTo(position.x, position.y);
  }
}
/*  */


var supportsPushState = inBrowser && function () {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }

  return window.history && 'pushState' in window.history;
}();

function pushState(url, replace) {
  saveScrollPosition(); // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls

  var history = window.history;

  try {
    if (replace) {
      history.replaceState({
        key: getStateKey()
      }, '', url);
    } else {
      history.pushState({
        key: setStateKey(genStateKey())
      }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState(url) {
  pushState(url, true);
}
/*  */


function runQueue(queue, fn, cb) {
  var step = function step(index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };

  step(0);
}
/*  */


function resolveAsyncComponents(matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;
    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;
        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef["default"];
          } // save resolved on async factory in case it's used elsewhere


          def.resolved = typeof resolvedDef === 'function' ? resolvedDef : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;

          if (pending <= 0) {
            next();
          }
        });
        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
           true && warn(false, msg);

          if (!error) {
            error = isError(reason) ? reason : new Error(msg);
            next(error);
          }
        });
        var res;

        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }

        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;

            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) {
      next();
    }
  };
}

function flatMapComponents(matched, fn) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return fn(m.components[key], m.instances[key], m, key);
    });
  }));
}

function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}

var hasSymbol = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';

function isESModule(obj) {
  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';
} // in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.


function once(fn) {
  var called = false;
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    if (called) {
      return;
    }

    called = true;
    return fn.apply(this, args);
  };
}

var NavigationDuplicated =
/*@__PURE__*/
function (Error) {
  function NavigationDuplicated(normalizedLocation) {
    Error.call(this);
    this.name = this._name = 'NavigationDuplicated'; // passing the message to super() doesn't seem to work in the transpiled version

    this.message = "Navigating to current location (\"" + normalizedLocation.fullPath + "\") is not allowed"; // add a stack property so services like Sentry can correctly display it

    Object.defineProperty(this, 'stack', {
      value: new Error().stack,
      writable: true,
      configurable: true
    }); // we could also have used
    // Error.captureStackTrace(this, this.constructor)
    // but it only exists on node and chrome
  }

  if (Error) NavigationDuplicated.__proto__ = Error;
  NavigationDuplicated.prototype = Object.create(Error && Error.prototype);
  NavigationDuplicated.prototype.constructor = NavigationDuplicated;
  return NavigationDuplicated;
}(Error); // support IE9


NavigationDuplicated._name = 'NavigationDuplicated';
/*  */

var History = function History(router, base) {
  this.router = router;
  this.base = normalizeBase(base); // start with a route object that stands for "nowhere"

  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen(cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady(cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);

    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError(errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
  var this$1 = this;
  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL(); // fire ready cbs once

    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) {
        cb(route);
      });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }

    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) {
        cb(err);
      });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
  var this$1 = this;
  var current = this.current;

  var abort = function abort(err) {
    // after merging https://github.com/vuejs/vue-router/pull/2771 we
    // When the user navigates through history through back/forward buttons
    // we do not want to throw the error. We only throw it if directly calling
    // push/replace. That's why it's not included in isError
    if (!isExtendedError(NavigationDuplicated, err) && isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }

    onAbort && onAbort(err);
  };

  if (isSameRoute(route, current) && // in the case the route map has been dynamically appended to
  route.matched.length === current.matched.length) {
    this.ensureURL();
    return abort(new NavigationDuplicated(route));
  }

  var ref = resolveQueue(this.current.matched, route.matched);
  var updated = ref.updated;
  var deactivated = ref.deactivated;
  var activated = ref.activated;
  var queue = [].concat( // in-component leave guards
  extractLeaveGuards(deactivated), // global before hooks
  this.router.beforeHooks, // in-component update hooks
  extractUpdateHooks(updated), // in-config enter guards
  activated.map(function (m) {
    return m.beforeEnter;
  }), // async components
  resolveAsyncComponents(activated));
  this.pending = route;

  var iterator = function iterator(hook, next) {
    if (this$1.pending !== route) {
      return abort();
    }

    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (typeof to === 'string' || _typeof(to) === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();

          if (_typeof(to) === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];

    var isValid = function isValid() {
      return this$1.current === route;
    }; // wait until async components are resolved before
    // extracting in-component enter guards


    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort();
      }

      this$1.pending = null;
      onComplete(route);

      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) {
            cb();
          });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute(route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase(base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = baseEl && baseEl.getAttribute('href') || '/'; // strip full URL origin

      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  } // make sure there's the starting slash


  if (base.charAt(0) !== '/') {
    base = '/' + base;
  } // remove trailing slash


  return base.replace(/\/$/, '');
}

function resolveQueue(current, next) {
  var i;
  var max = Math.max(current.length, next.length);

  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break;
    }
  }

  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  };
}

function extractGuards(records, name, bind, reverse) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);

    if (guard) {
      return Array.isArray(guard) ? guard.map(function (guard) {
        return bind(guard, instance, match, key);
      }) : bind(guard, instance, match, key);
    }
  });
  return flatten(reverse ? guards.reverse() : guards);
}

function extractGuard(def, key) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }

  return def.options[key];
}

function extractLeaveGuards(deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true);
}

function extractUpdateHooks(updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard);
}

function bindGuard(guard, instance) {
  if (instance) {
    return function boundRouteGuard() {
      return guard.apply(instance, arguments);
    };
  }
}

function extractEnterGuards(activated, cbs, isValid) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid);
  });
}

function bindEnterGuard(guard, match, key, cbs, isValid) {
  return function routeEnterGuard(to, from, next) {
    return guard(to, from, function (cb) {
      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }

      next(cb);
    });
  };
}

function poll(cb, // somehow flow cannot infer this is a function
instances, key, isValid) {
  if (instances[key] && !instances[key]._isBeingDestroyed // do not reuse being destroyed instance
  ) {
      cb(instances[key]);
    } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}
/*  */


var HTML5History =
/*@__PURE__*/
function (History) {
  function HTML5History(router, base) {
    var this$1 = this;
    History.call(this, router, base);
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    var initLocation = getLocation(this.base);
    window.addEventListener('popstate', function (e) {
      var current = this$1.current; // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.

      var location = getLocation(this$1.base);

      if (this$1.current === START && location === initLocation) {
        return;
      }

      this$1.transitionTo(location, function (route) {
        if (supportsScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }

  if (History) HTML5History.__proto__ = History;
  HTML5History.prototype = Object.create(History && History.prototype);
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go(n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL(push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
    return getLocation(this.base);
  };

  return HTML5History;
}(History);

function getLocation(base) {
  var path = decodeURI(window.location.pathname);

  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }

  return (path || '/') + window.location.search + window.location.hash;
}
/*  */


var HashHistory =
/*@__PURE__*/
function (History) {
  function HashHistory(router, base, fallback) {
    History.call(this, router, base); // check history fallback deeplinking

    if (fallback && checkFallback(this.base)) {
      return;
    }

    ensureSlash();
  }

  if (History) HashHistory.__proto__ = History;
  HashHistory.prototype = Object.create(History && History.prototype);
  HashHistory.prototype.constructor = HashHistory; // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early

  HashHistory.prototype.setupListeners = function setupListeners() {
    var this$1 = this;
    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {
      var current = this$1.current;

      if (!ensureSlash()) {
        return;
      }

      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }

        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    });
  };

  HashHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go(n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL(push) {
    var current = this.current.fullPath;

    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    return getHash();
  };

  return HashHistory;
}(History);

function checkFallback(base) {
  var location = getLocation(base);

  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true;
  }
}

function ensureSlash() {
  var path = getHash();

  if (path.charAt(0) === '/') {
    return true;
  }

  replaceHash('/' + path);
  return false;
}

function getHash() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#'); // empty path

  if (index < 0) {
    return '';
  }

  href = href.slice(index + 1); // decode the hash but not the search or hash
  // as search(query) is already decoded
  // https://github.com/vuejs/vue-router/issues/2708

  var searchIndex = href.indexOf('?');

  if (searchIndex < 0) {
    var hashIndex = href.indexOf('#');

    if (hashIndex > -1) {
      href = decodeURI(href.slice(0, hashIndex)) + href.slice(hashIndex);
    } else {
      href = decodeURI(href);
    }
  } else {
    if (searchIndex > -1) {
      href = decodeURI(href.slice(0, searchIndex)) + href.slice(searchIndex);
    }
  }

  return href;
}

function getUrl(path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return base + "#" + path;
}

function pushHash(path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash(path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}
/*  */


var AbstractHistory =
/*@__PURE__*/
function (History) {
  function AbstractHistory(router, base) {
    History.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if (History) AbstractHistory.__proto__ = History;
  AbstractHistory.prototype = Object.create(History && History.prototype);
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go(n) {
    var this$1 = this;
    var targetIndex = this.index + n;

    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return;
    }

    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    }, function (err) {
      if (isExtendedError(NavigationDuplicated, err)) {
        this$1.index = targetIndex;
      }
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/';
  };

  AbstractHistory.prototype.ensureURL = function ensureURL() {// noop
  };

  return AbstractHistory;
}(History);
/*  */


var VueRouter = function VueRouter(options) {
  if (options === void 0) options = {};
  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);
  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;

  if (this.fallback) {
    mode = 'hash';
  }

  if (!inBrowser) {
    mode = 'abstract';
  }

  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break;

    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break;

    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break;

    default:
      if (true) {
        assert(false, "invalid mode: " + mode);
      }

  }
};

var prototypeAccessors = {
  currentRoute: {
    configurable: true
  }
};

VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom);
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current;
};

VueRouter.prototype.init = function init(app
/* Vue component instance */
) {
  var this$1 = this;
   true && assert(install.installed, "not installed. Make sure to call `Vue.use(VueRouter)` " + "before creating root instance.");
  this.apps.push(app); // set up app destroyed handler
  // https://github.com/vuejs/vue-router/issues/2639

  app.$once('hook:destroyed', function () {
    // clean out app from this.apps array once destroyed
    var index = this$1.apps.indexOf(app);

    if (index > -1) {
      this$1.apps.splice(index, 1);
    } // ensure we still have a main app or null if no apps
    // we do not release the router so it can be reused


    if (this$1.app === app) {
      this$1.app = this$1.apps[0] || null;
    }
  }); // main app previously initialized
  // return as we don't need to set up new history listener

  if (this.app) {
    return;
  }

  this.app = app;
  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function setupHashListener() {
      history.setupListeners();
    };

    history.transitionTo(history.getCurrentLocation(), setupHashListener, setupHashListener);
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach(fn) {
  return registerHook(this.beforeHooks, fn);
};

VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
  return registerHook(this.resolveHooks, fn);
};

VueRouter.prototype.afterEach = function afterEach(fn) {
  return registerHook(this.afterHooks, fn);
};

VueRouter.prototype.onReady = function onReady(cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError(errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push(location, onComplete, onAbort) {
  var this$1 = this; // $flow-disable-line

  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.push(location, resolve, reject);
    });
  } else {
    this.history.push(location, onComplete, onAbort);
  }
};

VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
  var this$1 = this; // $flow-disable-line

  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.replace(location, resolve, reject);
    });
  } else {
    this.history.replace(location, onComplete, onAbort);
  }
};

VueRouter.prototype.go = function go(n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back() {
  this.go(-1);
};

VueRouter.prototype.forward = function forward() {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;

  if (!route) {
    return [];
  }

  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key];
    });
  }));
};

VueRouter.prototype.resolve = function resolve(to, current, append) {
  current = current || this.history.current;
  var location = normalizeLocation(to, current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  };
};

VueRouter.prototype.addRoutes = function addRoutes(routes) {
  this.matcher.addRoutes(routes);

  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties(VueRouter.prototype, prototypeAccessors);

function registerHook(list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);

    if (i > -1) {
      list.splice(i, 1);
    }
  };
}

function createHref(base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path;
}

VueRouter.install = install;
VueRouter.version = '3.1.3';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ __webpack_exports__["default"] = (VueRouter);

/***/ }),

/***/ "./node_modules/vue/dist/vue.esm.js":
/*!******************************************!*\
  !*** ./node_modules/vue/dist/vue.esm.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  _typeof(value) === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val["catch"] === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function identity(_) {
  return _;
};
/**
 * Generate a string containing static keys from compiler modules.
 */


function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child["extends"]) {
      parent = mergeOptions(parent, child["extends"], vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop["default"]; // warn against non-factory defaults for Object & Array

  if ( true && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = _typeof(value);

    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) {
    args[len] = arguments[len];
  }

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res["catch"](function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function timerFunc() {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function timerFunc() {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function timerFunc() {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function timerFunc() {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */


var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };

    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function warnReservedPrefix(target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key]["default"];
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots["default"] || (slots["default"] = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function normalized() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && _typeof(res) === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options["abstract"])) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function merged(a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      "default": children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data["class"])) {
    traverse(data["class"]);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp["default"];
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function forceRender(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options["abstract"]) {
    while (parent.$options["abstract"] && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options["abstract"]) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function getNow() {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + _typeof(methods[key]) + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor["super"]) {
    var superOptions = resolveConstructorOptions(Ctor["super"]);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  "abstract": true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots["default"];
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue["delete"] = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.10';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function mustUseProp(tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function convertEnumeratedValue(key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function isXlink(name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function getXlinkProp(name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function isFalsyAttrValue(val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data["class"]);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    "class": isDef(child["class"]) ? [child["class"], parent["class"]] : parent["class"]
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isPreTag = function isPreTag(tag) {
  return tag === 'pre';
};

var isReservedTag = function isReservedTag(tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
       true && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function blocker(e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data["class"]) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData["class"]))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);

    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;
          break;
        // "

        case 0x27:
          inSingle = true;
          break;
        // '

        case 0x60:
          inTemplateString = true;
          break;
        // `

        case 0x28:
          paren++;
          break;
        // (

        case 0x29:
          paren--;
          break;
        // )

        case 0x5B:
          square++;
          break;
        // [

        case 0x5D:
          square--;
          break;
        // ]

        case 0x7B:
          curly++;
          break;
        // {

        case 0x7D:
          curly--;
          break;
        // }
      }

      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0; // find first non-whitespace prev char

        for (; j >= 0; j--) {
          p = exp.charAt(j);

          if (p !== ' ') {
            break;
          }
        }

        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');

  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}
/*  */

/* eslint-disable no-unused-vars */


function baseWarn(msg, range) {
  console.error("[Vue compiler]: " + msg);
}
/* eslint-enable no-unused-vars */


function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
}

function addAttr(el, name, value, range, dynamic) {
  var attrs = dynamic ? el.dynamicAttrs || (el.dynamicAttrs = []) : el.attrs || (el.attrs = []);
  attrs.push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
} // add a raw attr (use this in preTransforms)


function addRawAttr(el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({
    name: name,
    value: value
  }, range));
}

function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker(symbol, name, dynamic) {
  return dynamic ? "_p(" + name + ",\"" + symbol + "\")" : symbol + name; // mark the event as captured
}

function addHandler(el, name, value, modifiers, important, warn, range, dynamic) {
  modifiers = modifiers || emptyObject; // warn prevent and passive modifier

  /* istanbul ignore if */

  if ( true && warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.', range);
  } // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.


  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  } // check capture modifier


  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }

  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */


  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;

  if (modifiers["native"]) {
    delete modifiers["native"];
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({
    value: value.trim(),
    dynamic: dynamic
  }, range);

  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */

  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr(el, name) {
  return el.rawAttrsMap[':' + name] || el.rawAttrsMap['v-bind:' + name] || el.rawAttrsMap[name];
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);

  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);

    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
} // note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.


function getAndRemoveAttr(el, name, removeFromMap) {
  var val;

  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;

    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }

  if (removeFromMap) {
    delete el.attrsMap[name];
  }

  return val;
}

function getAndRemoveAttrByRegex(el, name) {
  var list = el.attrsList;

  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];

    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr;
    }
  }
}

function rangeSetItem(item, range) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }

    if (range.end != null) {
      item.end = range.end;
    }
  }

  return item;
}
/*  */

/**
 * Cross-platform code generation for component v-model
 */


function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;
  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;

  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: "(" + value + ")",
    expression: JSON.stringify(value),
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}
/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */


function genAssignmentCode(value, assignment) {
  var res = parseModel(value);

  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}
/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */


var len, str, chr, index$1, expressionPos, expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');

    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */

    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;

  while (!eof()) {
    chr = next();

    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }

    if (chr === 0x5B) {
      inBracket++;
    }

    if (chr === 0x5D) {
      inBracket--;
    }

    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;

  while (!eof()) {
    chr = next();

    if (chr === stringQuote) {
      break;
    }
  }
}
/*  */


var warn$1; // in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model(el, dir, _warn) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (true) {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1("<" + el.tag + " v-model=\"" + value + "\" type=\"file\">:\n" + "File inputs are read only. Use a v-on:change listener instead.", el.rawAttrsMap['v-model']);
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers); // component v-model doesn't need extra runtime

    return false;
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers); // component v-model doesn't need extra runtime

    return false;
  } else if (true) {
    warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "v-model is not supported on this element type. " + 'If you are working with contenteditable, it\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.', el.rawAttrsMap['v-model']);
  } // ensure runtime directive metadata


  return true;
}

function genCheckboxModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked', "Array.isArray(" + value + ")" + "?_i(" + value + "," + valueBinding + ")>-1" + (trueValueBinding === 'true' ? ":(" + value + ")" : ":_q(" + value + "," + trueValueBinding + ")"));
  addHandler(el, 'change', "var $$a=" + value + "," + '$$el=$event.target,' + "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" + 'if(Array.isArray($$a)){' + "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," + '$$i=_i($$a,$$v);' + "if($$el.checked){$$i<0&&(" + genAssignmentCode(value, '$$a.concat([$$v])') + ")}" + "else{$$i>-1&&(" + genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))') + ")}" + "}else{" + genAssignmentCode(value, '$$c') + "}", null, true);
}

function genRadioModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? "_n(" + valueBinding + ")" : valueBinding;
  addProp(el, 'checked', "_q(" + value + "," + valueBinding + ")");
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" + ".call($event.target.options,function(o){return o.selected})" + ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" + "return " + (number ? '_n(val)' : 'val') + "})";
  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + genAssignmentCode(value, assignment);
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel(el, value, modifiers) {
  var type = el.attrsMap.type; // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type

  if (true) {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];

    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " + 'because the latter already expands to a value binding internally', el.rawAttrsMap[binding]);
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';
  var valueExpression = '$event.target.value';

  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);

  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', "(" + value + ")");
  addHandler(el, event, code, null, true);

  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.


function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecesarry `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function setProp(el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (_typeof(def$$1) === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function end() {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function onEnd(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
     true && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options["abstract"]) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function isNotTextNode(c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function isVShowDirective(d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  "abstract": true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots["default"];

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots["default"] || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (true) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ( true && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;

  if (!tagRE.test(text)) {
    return;
  }

  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;

  while (match = tagRE.exec(text)) {
    index = match.index; // push text token

    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    } // tag token


    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({
      '@binding': exp
    });
    lastIndex = index + match[0].length;
  }

  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }

  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}
/*  */


function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');

  if ( true && staticClass) {
    var res = parseText(staticClass, options.delimiters);

    if (res) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.', el.rawAttrsMap['class']);
    }
  }

  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }

  var classBinding = getBindingAttr(el, 'class', false
  /* getStatic */
  );

  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData(el) {
  var data = '';

  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }

  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }

  return data;
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};
/*  */

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');

  if (staticStyle) {
    /* istanbul ignore if */
    if (true) {
      var res = parseText(staticStyle, options.delimiters);

      if (res) {
        warn("style=\"" + staticStyle + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style="{{ val }}">, use <div :style="val">.', el.rawAttrsMap['style']);
      }
    }

    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false
  /* getStatic */
  );

  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1(el) {
  var data = '';

  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }

  if (el.styleBinding) {
    data += "style:(" + el.styleBinding + "),";
  }

  return data;
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};
/*  */

var decoder;
var he = {
  decode: function decode(html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent;
  }
};
/*  */

var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr'); // Elements that you can, intentionally, leave open
// (and which close themselves)

var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'); // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');
/**
 * Not type-checking this file because it's mostly vendor code.
 */
// Regular Expressions for parsing tags and attributes

var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + unicodeRegExp.source + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i; // #7298: escape - to avoid being pased as HTML comment when inlined in page

var comment = /^<!\--/;
var conditionalComment = /^<!\[/; // Special Elements (can contain anything)

var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};
var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g; // #5992

var isIgnoreNewlineTag = makeMap('pre,textarea', true);

var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;

  while (html) {
    last = html; // Make sure we're not in a plaintext content element like script/style

    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');

      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }

            advance(commentEnd + 3);
            continue;
          }
        } // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment


        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        } // Doctype:


        var doctypeMatch = html.match(doctype);

        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        } // End tag:


        var endTagMatch = html.match(endTag);

        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        } // Start tag:


        var startTagMatch = parseStartTag();

        if (startTagMatch) {
          handleStartTag(startTagMatch);

          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }

          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;

      if (textEnd >= 0) {
        rest = html.slice(textEnd);

        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);

          if (next < 0) {
            break;
          }

          textEnd += next;
          rest = html.slice(textEnd);
        }

        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;

        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }

        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }

        if (options.chars) {
          options.chars(text);
        }

        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);

      if ( true && !stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"", {
          start: index + html.length
        });
      }

      break;
    }
  } // Clean up any remaining tags


  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);

    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;

      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }

      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }

      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;
    var l = match.attrs.length;
    var attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };

      if ( true && options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({
        tag: tagName,
        lowerCasedTag: tagName.toLowerCase(),
        attrs: attrs,
        start: match.start,
        end: match.end
      });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;

    if (start == null) {
      start = index;
    }

    if (end == null) {
      end = index;
    } // Find the closest opened tag of the same type


    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();

      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ( true && (i > pos || !tagName) && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.", {
            start: stack[i].start,
            end: stack[i].end
          });
        }

        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      } // Remove the open elements from the stack


      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }

      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}
/*  */


var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;
var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;
var slotRE = /^v-slot(:|$)|^#/;
var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;
var invalidAttributeRE = /[\s"'<>\/=]/;
var decodeHTMLCached = cached(he.decode);
var emptySlotScopeToken = "_empty_"; // configurable state

var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  };
}
/**
 * Convert HTML string to AST.
 */


function parse(template, options) {
  warn$2 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;

  maybeComponent = function maybeComponent(el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;
  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement(element) {
    trimEndingWhitespace(element);

    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    } // tree management


    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root["if"] && (element.elseif || element["else"])) {
        if (true) {
          checkRootConstraints(element);
        }

        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else if (true) {
        warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.", {
          start: element.start
        });
      }
    }

    if (currentParent && !element.forbidden) {
      if (element.elseif || element["else"]) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }

        currentParent.children.push(element);
        element.parent = currentParent;
      }
    } // final children cleanup
    // filter out scoped slots


    element.children = element.children.filter(function (c) {
      return !c.slotScope;
    }); // remove trailing whitespace node again

    trimEndingWhitespace(element); // check pre state

    if (element.pre) {
      inVPre = false;
    }

    if (platformIsPreTag(element.tag)) {
      inPre = false;
    } // apply post-transforms


    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace(el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;

      while ((lastNode = el.children[el.children.length - 1]) && lastNode.type === 3 && lastNode.text === ' ') {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints(el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.', {
        start: el.start
      });
    }

    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.', el.rawAttrsMap['v-for']);
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start(tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag); // handle IE svg bug

      /* istanbul ignore if */

      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);

      if (ns) {
        element.ns = ns;
      }

      if (true) {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated;
          }, {});
        }

        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2("Invalid dynamic argument expression: attribute names cannot contain " + "spaces, quotes, <, >, / or =.", {
              start: attr.start + attr.name.indexOf("["),
              end: attr.start + attr.name.length
            });
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
         true && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.', {
          start: element.start
        });
      } // apply pre-transforms


      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);

        if (element.pre) {
          inVPre = true;
        }
      }

      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }

      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;

        if (true) {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end: function end(tag, start, end$1) {
      var element = stack[stack.length - 1]; // pop stack

      stack.length -= 1;
      currentParent = stack[stack.length - 1];

      if ( true && options.outputSourceRange) {
        element.end = end$1;
      }

      closeElement(element);
    },
    chars: function chars(text, start, end) {
      if (!currentParent) {
        if (true) {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.', {
              start: start
            });
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.", {
              start: start
            });
          }
        }

        return;
      } // IE textarea placeholder bug

      /* istanbul ignore if */


      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }

      var children = currentParent.children;

      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }

      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }

        var res;
        var child;

        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }

        if (child) {
          if ( true && options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }

          children.push(child);
        }
      }
    },
    comment: function comment(text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };

        if ( true && options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }

        currentParent.children.push(child);
      }
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var list = el.attrsList;
  var len = list.length;

  if (len) {
    var attrs = el.attrs = new Array(len);

    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };

      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element); // determine whether this is a plain element after
  // removing structural attributes

  element.plain = !element.key && !element.scopedSlots && !element.attrsList.length;
  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);

  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }

  processAttrs(element);
  return element;
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');

  if (exp) {
    if (true) {
      if (el.tag === 'template') {
        warn$2("<template> cannot be keyed. Place the key on real elements instead.", getRawBindingAttr(el, 'key'));
      }

      if (el["for"]) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;

        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2("Do not use v-for index as key on <transition-group> children, " + "this is the same as not using keys.", getRawBindingAttr(el, 'key'), true
          /* tip */
          );
        }
      }
    }

    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');

  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;

  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);

    if (res) {
      extend(el, res);
    } else if (true) {
      warn$2("Invalid v-for expression: " + exp, el.rawAttrsMap['v-for']);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);

  if (!inMatch) {
    return;
  }

  var res = {};
  res["for"] = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);

  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();

    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }

  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');

  if (exp) {
    el["if"] = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el["else"] = true;
    }

    var elseif = getAndRemoveAttr(el, 'v-else-if');

    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);

  if (prev && prev["if"]) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (true) {
    warn$2("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.", el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);
  }
}

function findPrevElement(children) {
  var i = children.length;

  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if ( true && children[i].text !== ' ') {
        warn$2("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.", children[i]);
      }

      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }

  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');

  if (once$$1 != null) {
    el.once = true;
  }
} // handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">


function processSlotContent(el) {
  var slotScope;

  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */

    if ( true && slotScope) {
      warn$2("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", el.rawAttrsMap['scope'], true);
    }

    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
    /* istanbul ignore if */
    if ( true && el.attrsMap['v-for']) {
      warn$2("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", el.rawAttrsMap['slot-scope'], true);
    }

    el.slotScope = slotScope;
  } // slot="xxx"


  var slotTarget = getBindingAttr(el, 'slot');

  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']); // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.

    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  } // 2.6 v-slot syntax


  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding) {
        if (true) {
          if (el.slotTarget || el.slotScope) {
            warn$2("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.parent && !maybeComponent(el.parent)) {
            warn$2("<template v-slot> can only appear at the root level inside " + "the receiving the component", el);
          }
        }

        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding$1) {
        if (true) {
          if (!maybeComponent(el)) {
            warn$2("v-slot can only be used on components or <template>.", slotBinding$1);
          }

          if (el.slotScope || el.slotTarget) {
            warn$2("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.scopedSlots) {
            warn$2("To avoid scope ambiguity, the default slot should also use " + "<template> syntax when there are other named slots.", slotBinding$1);
          }
        } // add the component's children to its default slot


        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true;
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken; // remove children as they are returned from scopedSlots now

        el.children = []; // mark el non-plain so data gets generated

        el.plain = false;
      }
    }
  }
}

function getSlotName(binding) {
  var name = binding.name.replace(slotRE, '');

  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else if (true) {
      warn$2("v-slot shorthand syntax requires a slot name.", binding);
    }
  }

  return dynamicArgRE.test(name) // dynamic [name]
  ? {
    name: name.slice(1, -1),
    dynamic: true
  } // static name
  : {
    name: "\"" + name + "\"",
    dynamic: false
  };
} // handle <slot/> outlets


function processSlotOutlet(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');

    if ( true && el.key) {
      warn$2("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.", getRawBindingAttr(el, 'key'));
    }
  }
}

function processComponent(el) {
  var binding;

  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }

  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;

  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;

    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true; // modifiers

      modifiers = parseModifiers(name.replace(dirRE, '')); // support .foo shorthand syntax for the .prop modifier

      if (modifiers) {
        name = name.replace(modifierRE, '');
      }

      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        if ( true && value.trim().length === 0) {
          warn$2("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"");
        }

        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);

            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }

          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }

          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");

            if (!isDynamic) {
              addHandler(el, "update:" + camelize(name), syncGen, null, false, warn$2, list[i]);

              if (hyphenate(name) !== camelize(name)) {
                addHandler(el, "update:" + hyphenate(name), syncGen, null, false, warn$2, list[i]);
              }
            } else {
              // handler w/ dynamic event name
              addHandler(el, "\"update:\"+(" + name + ")", syncGen, null, false, warn$2, list[i], true // dynamic
              );
            }
          }
        }

        if (modifiers && modifiers.prop || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else {
        // normal directives
        name = name.replace(dirRE, ''); // parse arg

        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;

        if (arg) {
          name = name.slice(0, -(arg.length + 1));

          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }

        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);

        if ( true && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (true) {
        var res = parseText(value, delimiters);

        if (res) {
          warn$2(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.', list[i]);
        }
      }

      addAttr(el, name, JSON.stringify(value), list[i]); // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation

      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;

  while (parent) {
    if (parent["for"] !== undefined) {
      return true;
    }

    parent = parent.parent;
  }

  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);

  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};

  for (var i = 0, l = attrs.length; i < l; i++) {
    if ( true && map[attrs[i].name] && !isIE && !isEdge) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }

    map[attrs[i].name] = attrs[i].value;
  }

  return map;
} // for script (e.g. type="x/template") or style, do not decode content


function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;
/* istanbul ignore next */

function guardIESVGBug(attrs) {
  var res = [];

  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];

    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }

  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;

  while (_el) {
    if (_el["for"] && _el.alias === value) {
      warn$2("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.", el.rawAttrsMap['v-model']);
    }

    _el = _el.parent;
  }
}
/*  */


function preTransformNode(el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;

    if (!map['v-model']) {
      return;
    }

    var typeBinding;

    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }

    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + map['v-bind'] + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? "&&(" + ifCondition + ")" : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true); // 1. checkbox

      var branch0 = cloneASTElement(el); // process for on the main node

      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed

      branch0["if"] = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0["if"],
        block: branch0
      }); // 2. add radio else-if condition

      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      }); // 3. other

      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0["else"] = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0;
    }
  }
}

function cloneASTElement(el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent);
}

var model$1 = {
  preTransformNode: preTransformNode
};
var modules$1 = [klass$1, style$1, model$1];
/*  */

function text(el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', "_s(" + dir.value + ")", dir);
  }
}
/*  */


function html(el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', "_s(" + dir.value + ")", dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};
/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};
/*  */

var isStaticKey;
var isPlatformReservedTag;
var genStaticKeysCached = cached(genStaticKeys$1);
/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

function optimize(root, options) {
  if (!root) {
    return;
  }

  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no; // first pass: mark all non-static nodes.

  markStatic$1(root); // second pass: mark static roots.

  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' + (keys ? ',' + keys : ''));
}

function markStatic$1(node) {
  node["static"] = isStatic(node);

  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }

    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);

      if (!child["static"]) {
        node["static"] = false;
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);

        if (!block["static"]) {
          node["static"] = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node["static"] || node.once) {
      node.staticInFor = isInFor;
    } // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.


    if (node["static"] && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }

    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node["for"]);
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }

  if (node.type === 3) {
    // text
    return true;
  }

  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node["if"] && !node["for"] && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;

    if (node.tag !== 'template') {
      return false;
    }

    if (node["for"]) {
      return true;
    }
  }

  return false;
}
/*  */


var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // KeyboardEvent.keyCode aliases

var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
}; // KeyboardEvent.key aliases

var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
}; // #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once

var genGuard = function genGuard(condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";

  for (var name in events) {
    var handlerCode = genHandler(events[name]);

    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }

  staticHandlers = "{" + staticHandlers.slice(0, -1) + "}";

  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + dynamicHandlers.slice(0, -1) + "])";
  } else {
    return prefix + staticHandlers;
  }
}

function genHandler(handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }

    return "function($event){" + (isFunctionInvocation ? "return " + handler.value : handler.value) + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];

    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key]; // left/right

        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }

    if (keys.length) {
      code += genKeyFilter(keys);
    } // Make sure modifiers like prevent and stop get executed after key filtering


    if (genModifierCode) {
      code += genModifierCode;
    }

    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : isFunctionInvocation ? "return " + handler.value : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return (// make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" + keys.map(genFilterCode).join('&&') + ")return null;"
  );
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);

  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }

  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}
/*  */


function on(el, dir) {
  if ( true && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }

  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}
/*  */


function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}
/*  */


var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};
/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;

  this.maybeComponent = function (el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el["for"] && !el.forProcessed) {
    return genFor(el, state);
  } else if (el["if"] && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;

    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;

      if (!el.plain || el.pre && state.maybeComponent(el)) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    } // module transforms


    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }

    return code;
  }
} // hoist static sub-trees out


function genStatic(el, state) {
  el.staticProcessed = true; // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.

  var originalPreState = state.pre;

  if (el.pre) {
    state.pre = el.pre;
  }

  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  state.pre = originalPreState;
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
} // v-once


function genOnce(el, state) {
  el.onceProcessed = true;

  if (el["if"] && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;

    while (parent) {
      if (parent["for"]) {
        key = parent.key;
        break;
      }

      parent = parent.parent;
    }

    if (!key) {
       true && state.warn("v-once can only be used inside v-for that is keyed. ", el.rawAttrsMap['v-once']);
      return genElement(el, state);
    }

    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion

  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();

  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  } // v-if with v-once should generate code like (a)?_m(0):_m(1)


  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el["for"];
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if ( true && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", el.rawAttrsMap['v-for'], true
    /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion

  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData$2(el, state) {
  var data = '{'; // directives first.
  // directives may mutate the el's other properties before they are generated.

  var dirs = genDirectives(el, state);

  if (dirs) {
    data += dirs + ',';
  } // key


  if (el.key) {
    data += "key:" + el.key + ",";
  } // ref


  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }

  if (el.refInFor) {
    data += "refInFor:true,";
  } // pre


  if (el.pre) {
    data += "pre:true,";
  } // record original tag name for components using "is" attribute


  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  } // module data generation functions


  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  } // attributes


  if (el.attrs) {
    data += "attrs:" + genProps(el.attrs) + ",";
  } // DOM props


  if (el.props) {
    data += "domProps:" + genProps(el.props) + ",";
  } // event handlers


  if (el.events) {
    data += genHandlers(el.events, false) + ",";
  }

  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true) + ",";
  } // slot target
  // only for non-scoped slots


  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  } // scoped slots


  if (el.scopedSlots) {
    data += genScopedSlots(el, el.scopedSlots, state) + ",";
  } // component v-model


  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  } // inline-template


  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);

    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }

  data = data.replace(/,$/, '') + '}'; // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.

  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + el.tag + "\"," + genProps(el.dynamicAttrs) + ")";
  } // v-bind data wrap


  if (el.wrapData) {
    data = el.wrapData(data);
  } // v-on data wrap


  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }

  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;

  if (!dirs) {
    return;
  }

  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;

  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];

    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }

    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:" + (dir.isDynamicArg ? dir.arg : "\"" + dir.arg + "\"") : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }

  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];

  if ( true && (el.children.length !== 1 || ast.type !== 1)) {
    state.warn('Inline-template components must have exactly one child element.', {
      start: el.start
    });
  }

  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(el, slots, state) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el["for"] || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return slot.slotTargetDynamic || slot["if"] || slot["for"] || containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    ;
  }); // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.

  var needsKey = !!el["if"]; // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.

  if (!needsForceUpdate) {
    var parent = el.parent;

    while (parent) {
      if (parent.slotScope && parent.slotScope !== emptySlotScopeToken || parent["for"]) {
        needsForceUpdate = true;
        break;
      }

      if (parent["if"]) {
        needsKey = true;
      }

      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots).map(function (key) {
    return genScopedSlot(slots[key], state);
  }).join(',');
  return "scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? ",null,false," + hash(generatedSlots) : "") + ")";
}

function hash(str) {
  var hash = 5381;
  var i = str.length;

  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  return hash >>> 0;
}

function containsSlotChild(el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true;
    }

    return el.children.some(containsSlotChild);
  }

  return false;
}

function genScopedSlot(el, state) {
  var isLegacySyntax = el.attrsMap['slot-scope'];

  if (el["if"] && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null");
  }

  if (el["for"] && !el.forProcessed) {
    return genFor(el, state, genScopedSlot);
  }

  var slotScope = el.slotScope === emptySlotScopeToken ? "" : String(el.slotScope);
  var fn = "function(" + slotScope + "){" + "return " + (el.tag === 'template' ? el["if"] && isLegacySyntax ? "(" + el["if"] + ")?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}"; // reverse proxy v-slot without scope on this.$slots

  var reverseProxy = slotScope ? "" : ",proxy:true";
  return "{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}";
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;

  if (children.length) {
    var el$1 = children[0]; // optimize single v-for

    if (children.length === 1 && el$1["for"] && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      var normalizationType = checkSkip ? state.maybeComponent(el$1) ? ",1" : ",0" : "";
      return "" + (altGenElement || genElement)(el$1, state) + normalizationType;
    }

    var normalizationType$1 = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType$1 ? "," + normalizationType$1 : '');
  }
} // determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed


function getNormalizationType(children, maybeComponent) {
  var res = 0;

  for (var i = 0; i < children.length; i++) {
    var el = children[i];

    if (el.type !== 1) {
      continue;
    }

    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }

    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }

  return res;
}

function needsNormalization(el) {
  return el["for"] !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  } else if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs || el.dynamicAttrs ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) {
    return {
      // slot props are camelized
      name: camelize(attr.name),
      value: attr.value,
      dynamic: attr.dynamic
    };
  })) : null;
  var bind$$1 = el.attrsMap['v-bind'];

  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }

  if (attrs) {
    res += "," + attrs;
  }

  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }

  return res + ')';
} // componentName is el.component, take it as argument to shun flow's pessimistic refinement


function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData$2(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var staticProps = "";
  var dynamicProps = "";

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);

    if (prop.dynamic) {
      dynamicProps += prop.name + "," + value + ",";
    } else {
      staticProps += "\"" + prop.name + "\":" + value + ",";
    }
  }

  staticProps = "{" + staticProps.slice(0, -1) + "}";

  if (dynamicProps) {
    return "_d(" + staticProps + ",[" + dynamicProps.slice(0, -1) + "])";
  } else {
    return staticProps;
  }
} // #3895, #4268


function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
}
/*  */
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed


var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b'); // these unary operators should not be used as property/method names

var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)'); // strip strings in expressions

var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g; // detect problematic expressions in a template

function detectErrors(ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode(node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];

        if (value) {
          var range = node.rawAttrsMap[name];

          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", warn, range);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", warn, range);
          }
        }
      }
    }

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent(exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);

  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim(), range);
  }

  checkExpression(exp, text, warn, range);
}

function checkFor(node, text, warn, range) {
  checkExpression(node["for"] || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier(ident, type, text, warn, range) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      warn("invalid " + type + " \"" + ident + "\" in expression: " + text.trim(), range);
    }
  }
}

function checkExpression(exp, text, warn, range) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);

    if (keywordMatch) {
      warn("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim(), range);
    } else {
      warn("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n", range);
    }
  }
}
/*  */


var range = 2;

function generateCodeFrame(source, start, end) {
  if (start === void 0) start = 0;
  if (end === void 0) end = source.length;
  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];

  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;

    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) {
          continue;
        }

        res.push("" + (j + 1) + repeat$1(" ", 3 - String(j + 1).length) + "|  " + lines[j]);
        var lineLength = lines[j].length;

        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }

          count += lineLength + 1;
        }
      }

      break;
    }
  }

  return res.join('\n');
}

function repeat$1(str, n) {
  var result = '';

  if (n > 0) {
    while (true) {
      // eslint-disable-line
      if (n & 1) {
        result += str;
      }

      n >>>= 1;

      if (n <= 0) {
        break;
      }

      str += str;
    }
  }

  return result;
}
/*  */


function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({
      err: err,
      code: code
    });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);
  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;
    /* istanbul ignore if */

    if (true) {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    } // check cache


    var key = options.delimiters ? String(options.delimiters) + template : template;

    if (cache[key]) {
      return cache[key];
    } // compile


    var compiled = compile(template, options); // check compilation errors/tips

    if (true) {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1("Error compiling template:\n\n" + e.msg + "\n\n" + generateCodeFrame(template, e.start, e.end), vm);
          });
        } else {
          warn$$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
      }

      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) {
            return tip(e.msg, vm);
          });
        } else {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }
    } // turn code into functions


    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    }); // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use

    /* istanbul ignore if */

    if (true) {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;
          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }

    return cache[key] = res;
  };
}
/*  */


function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function warn(msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if ( true && options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function warn(msg, range, tip) {
            var data = {
              msg: msg
            };

            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }

              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }

            (tip ? tips : errors).push(data);
          };
        } // merge custom modules


        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        } // merge custom directives


        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        } // copy other options


        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;
      var compiled = baseCompile(template.trim(), finalOptions);

      if (true) {
        detectErrors(compiled.ast, warn);
      }

      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}
/*  */
// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.


var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);

  if (options.optimize !== false) {
    optimize(ast, options);
  }

  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});
/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;
/*  */
// check whether current browser encodes a char inside attribute values

var div;

function getShouldDecode(href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0;
} // #3663: IE encodes newlines inside attribute values while other browsers don't


var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false; // #6828: chrome encodes content in a[href]

var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;
/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML;
});
var mount = Vue.prototype.$mount;

Vue.prototype.$mount = function (el, hydrating) {
  el = el && query(el);
  /* istanbul ignore if */

  if (el === document.body || el === document.documentElement) {
     true && warn("Do not mount Vue to <html> or <body> - mount to normal elements instead.");
    return this;
  }

  var options = this.$options; // resolve template/el and convert to render function

  if (!options.render) {
    var template = options.template;

    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */

          if ( true && !template) {
            warn("Template element not found or is empty: " + options.template, this);
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (true) {
          warn('invalid template option:' + template, this);
        }

        return this;
      }
    } else if (el) {
      template = getOuterHTML(el);
    }

    if (template) {
      /* istanbul ignore if */
      if ( true && config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;
      /* istanbul ignore if */

      if ( true && config.performance && mark) {
        mark('compile end');
        measure("vue " + this._name + " compile", 'compile', 'compile end');
      }
    }
  }

  return mount.call(this, el, hydrating);
};
/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */


function getOuterHTML(el) {
  if (el.outerHTML) {
    return el.outerHTML;
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML;
  }
}

Vue.compile = compileToFunctions;
/* harmony default export */ __webpack_exports__["default"] = (Vue);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vuex/dist/vuex.esm.js":
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * vuex v3.1.1
 * (c) 2019 Evan You
 * @license MIT
 */
function applyMixin(Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({
      beforeCreate: vuexInit
    });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;

    Vue.prototype._init = function (options) {
      if (options === void 0) options = {};
      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;

      _init.call(this, options);
    };
  }
  /**
   * Vuex init hook, injected into each instances init hooks list.
   */


  function vuexInit() {
    var options = this.$options; // store injection

    if (options.store) {
      this.$store = typeof options.store === 'function' ? options.store() : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin(store) {
  if (!devtoolHook) {
    return;
  }

  store._devtoolHook = devtoolHook;
  devtoolHook.emit('vuex:init', store);
  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });
  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}
/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */

/**
 * forEach for object
 */


function forEachValue(obj, fn) {
  Object.keys(obj).forEach(function (key) {
    return fn(obj[key], key);
  });
}

function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}

function isPromise(val) {
  return val && typeof val.then === 'function';
}

function assert(condition, msg) {
  if (!condition) {
    throw new Error("[vuex] " + msg);
  }
}

function partial(fn, arg) {
  return function () {
    return fn(arg);
  };
} // Base data struct for store's module, package with some attribute and method


var Module = function Module(rawModule, runtime) {
  this.runtime = runtime; // Store some children item

  this._children = Object.create(null); // Store the origin module object which passed by programmer

  this._rawModule = rawModule;
  var rawState = rawModule.state; // Store the origin module's state

  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = {
  namespaced: {
    configurable: true
  }
};

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced;
};

Module.prototype.addChild = function addChild(key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild(key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild(key) {
  return this._children[key];
};

Module.prototype.update = function update(rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;

  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }

  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }

  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild(fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter(fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction(fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation(fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties(Module.prototype, prototypeAccessors);

var ModuleCollection = function ModuleCollection(rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get(path) {
  return path.reduce(function (module, key) {
    return module.getChild(key);
  }, this.root);
};

ModuleCollection.prototype.getNamespace = function getNamespace(path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '');
  }, '');
};

ModuleCollection.prototype.update = function update$1(rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
  var this$1 = this;
  if (runtime === void 0) runtime = true;

  if (true) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);

  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  } // register nested modules


  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister(path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (!parent.getChild(key).runtime) {
    return;
  }

  parent.removeChild(key);
};

function update(path, targetModule, newModule) {
  if (true) {
    assertRawModule(path, newModule);
  } // update target module


  targetModule.update(newModule); // update nested modules

  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (true) {
          console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, " + 'manual reload is needed');
        }

        return;
      }

      update(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
    }
  }
}

var functionAssert = {
  assert: function assert(value) {
    return typeof value === 'function';
  },
  expected: 'function'
};
var objectAssert = {
  assert: function assert(value) {
    return typeof value === 'function' || _typeof(value) === 'object' && typeof value.handler === 'function';
  },
  expected: 'function or object with "handler" function'
};
var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule(path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) {
      return;
    }

    var assertOptions = assertTypes[key];
    forEachValue(rawModule[key], function (value, type) {
      assert(assertOptions.assert(value), makeAssertionMessage(path, key, type, value, assertOptions.expected));
    });
  });
}

function makeAssertionMessage(path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";

  if (path.length > 0) {
    buf += " in module \"" + path.join('.') + "\"";
  }

  buf += " is " + JSON.stringify(value) + ".";
  return buf;
}

var Vue; // bind on install

var Store = function Store(options) {
  var this$1 = this;
  if (options === void 0) options = {}; // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731

  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if (true) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins;
  if (plugins === void 0) plugins = [];
  var strict = options.strict;
  if (strict === void 0) strict = false; // store internal state

  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue(); // bind commit and dispatch to self

  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;

  this.dispatch = function boundDispatch(type, payload) {
    return dispatch.call(store, type, payload);
  };

  this.commit = function boundCommit(type, payload, options) {
    return commit.call(store, type, payload, options);
  }; // strict mode


  this.strict = strict;
  var state = this._modules.root.state; // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters

  installModule(this, state, [], this._modules.root); // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)

  resetStoreVM(this, state); // apply plugins

  plugins.forEach(function (plugin) {
    return plugin(this$1);
  });
  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;

  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = {
  state: {
    configurable: true
  }
};

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state;
};

prototypeAccessors$1.state.set = function (v) {
  if (true) {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit(_type, _payload, _options) {
  var this$1 = this; // check object-style commit

  var ref = unifyObjectStyle(_type, _payload, _options);
  var type = ref.type;
  var payload = ref.payload;
  var options = ref.options;
  var mutation = {
    type: type,
    payload: payload
  };
  var entry = this._mutations[type];

  if (!entry) {
    if (true) {
      console.error("[vuex] unknown mutation type: " + type);
    }

    return;
  }

  this._withCommit(function () {
    entry.forEach(function commitIterator(handler) {
      handler(payload);
    });
  });

  this._subscribers.forEach(function (sub) {
    return sub(mutation, this$1.state);
  });

  if ( true && options && options.silent) {
    console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. " + 'Use the filter functionality in the vue-devtools');
  }
};

Store.prototype.dispatch = function dispatch(_type, _payload) {
  var this$1 = this; // check object-style dispatch

  var ref = unifyObjectStyle(_type, _payload);
  var type = ref.type;
  var payload = ref.payload;
  var action = {
    type: type,
    payload: payload
  };
  var entry = this._actions[type];

  if (!entry) {
    if (true) {
      console.error("[vuex] unknown action type: " + type);
    }

    return;
  }

  try {
    this._actionSubscribers.filter(function (sub) {
      return sub.before;
    }).forEach(function (sub) {
      return sub.before(action, this$1.state);
    });
  } catch (e) {
    if (true) {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1 ? Promise.all(entry.map(function (handler) {
    return handler(payload);
  })) : entry[0](payload);
  return result.then(function (res) {
    try {
      this$1._actionSubscribers.filter(function (sub) {
        return sub.after;
      }).forEach(function (sub) {
        return sub.after(action, this$1.state);
      });
    } catch (e) {
      if (true) {
        console.warn("[vuex] error in after action subscribers: ");
        console.error(e);
      }
    }

    return res;
  });
};

Store.prototype.subscribe = function subscribe(fn) {
  return genericSubscribe(fn, this._subscribers);
};

Store.prototype.subscribeAction = function subscribeAction(fn) {
  var subs = typeof fn === 'function' ? {
    before: fn
  } : fn;
  return genericSubscribe(subs, this._actionSubscribers);
};

Store.prototype.watch = function watch(getter, cb, options) {
  var this$1 = this;

  if (true) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }

  return this._watcherVM.$watch(function () {
    return getter(this$1.state, this$1.getters);
  }, cb, options);
};

Store.prototype.replaceState = function replaceState(state) {
  var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule(path, rawModule, options) {
  if (options === void 0) options = {};

  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);

  installModule(this, this.state, path, this._modules.get(path), options.preserveState); // reset store to update getters...

  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule(path) {
  var this$1 = this;

  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);

  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue["delete"](parentState, path[path.length - 1]);
  });

  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate(newOptions) {
  this._modules.update(newOptions);

  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit(fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties(Store.prototype, prototypeAccessors$1);

function genericSubscribe(fn, subs) {
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }

  return function () {
    var i = subs.indexOf(fn);

    if (i > -1) {
      subs.splice(i, 1);
    }
  };
}

function resetStore(store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state; // init all modules

  installModule(store, state, [], store._modules.root, true); // reset vm

  resetStoreVM(store, state, hot);
}

function resetStoreVM(store, state, hot) {
  var oldVm = store._vm; // bind store public getters

  store.getters = {};
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure enviroment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function get() {
        return store._vm[key];
      },
      enumerable: true // for local getters

    });
  }); // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins

  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent; // enable strict mode for new vm

  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }

    Vue.nextTick(function () {
      return oldVm.$destroy();
    });
  }
}

function installModule(store, rootState, path, module, hot) {
  var isRoot = !path.length;

  var namespace = store._modules.getNamespace(path); // register in namespace map


  if (module.namespaced) {
    store._modulesNamespaceMap[namespace] = module;
  } // set state


  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];

    store._withCommit(function () {
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);
  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });
  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });
  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });
  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}
/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */


function makeLocalContext(store, namespace, path) {
  var noNamespace = namespace === '';
  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ( true && !store._actions[type]) {
          console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
          return;
        }
      }

      return store.dispatch(type, payload);
    },
    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ( true && !store._mutations[type]) {
          console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
          return;
        }
      }

      store.commit(type, payload, options);
    }
  }; // getters and state object must be gotten lazily
  // because they will be changed by vm update

  Object.defineProperties(local, {
    getters: {
      get: noNamespace ? function () {
        return store.getters;
      } : function () {
        return makeLocalGetters(store, namespace);
      }
    },
    state: {
      get: function get() {
        return getNestedState(store.state, path);
      }
    }
  });
  return local;
}

function makeLocalGetters(store, namespace) {
  var gettersProxy = {};
  var splitPos = namespace.length;
  Object.keys(store.getters).forEach(function (type) {
    // skip if the target getter is not match this namespace
    if (type.slice(0, splitPos) !== namespace) {
      return;
    } // extract local getter type


    var localType = type.slice(splitPos); // Add a port to the getters proxy.
    // Define as getter property because
    // we do not want to evaluate the getters in this time.

    Object.defineProperty(gettersProxy, localType, {
      get: function get() {
        return store.getters[type];
      },
      enumerable: true
    });
  });
  return gettersProxy;
}

function registerMutation(store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler(payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction(store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler(payload, cb) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload, cb);

    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }

    if (store._devtoolHook) {
      return res["catch"](function (err) {
        store._devtoolHook.emit('vuex:error', err);

        throw err;
      });
    } else {
      return res;
    }
  });
}

function registerGetter(store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (true) {
      console.error("[vuex] duplicate getter key: " + type);
    }

    return;
  }

  store._wrappedGetters[type] = function wrappedGetter(store) {
    return rawGetter(local.state, // local state
    local.getters, // local getters
    store.state, // root state
    store.getters // root getters
    );
  };
}

function enableStrictMode(store) {
  store._vm.$watch(function () {
    return this._data.$$state;
  }, function () {
    if (true) {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, {
    deep: true,
    sync: true
  });
}

function getNestedState(state, path) {
  return path.length ? path.reduce(function (state, key) {
    return state[key];
  }, state) : state;
}

function unifyObjectStyle(type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (true) {
    assert(typeof type === 'string', "expects string as the type, but found " + _typeof(type) + ".");
  }

  return {
    type: type,
    payload: payload,
    options: options
  };
}

function install(_Vue) {
  if (Vue && _Vue === Vue) {
    if (true) {
      console.error('[vuex] already installed. Vue.use(Vuex) should be called only once.');
    }

    return;
  }

  Vue = _Vue;
  applyMixin(Vue);
}
/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */


var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState() {
      var state = this.$store.state;
      var getters = this.$store.getters;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);

        if (!module) {
          return;
        }

        state = module.context.state;
        getters = module.context.getters;
      }

      return typeof val === 'function' ? val.call(this, state, getters) : state[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      } // Get the commit method from store


      var commit = this.$store.commit;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);

        if (!module) {
          return;
        }

        commit = module.context.commit;
      }

      return typeof val === 'function' ? val.apply(this, [commit].concat(args)) : commit.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */

var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val; // The namespace has been mutated by normalizeNamespace

    val = namespace + val;

    res[key] = function mappedGetter() {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return;
      }

      if ( true && !(val in this.$store.getters)) {
        console.error("[vuex] unknown getter: " + val);
        return;
      }

      return this.$store.getters[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      } // get dispatch function from store


      var dispatch = this.$store.dispatch;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);

        if (!module) {
          return;
        }

        dispatch = module.context.dispatch;
      }

      return typeof val === 'function' ? val.apply(this, [dispatch].concat(args)) : dispatch.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */

var createNamespacedHelpers = function createNamespacedHelpers(namespace) {
  return {
    mapState: mapState.bind(null, namespace),
    mapGetters: mapGetters.bind(null, namespace),
    mapMutations: mapMutations.bind(null, namespace),
    mapActions: mapActions.bind(null, namespace)
  };
};
/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */


function normalizeMap(map) {
  return Array.isArray(map) ? map.map(function (key) {
    return {
      key: key,
      val: key
    };
  }) : Object.keys(map).map(function (key) {
    return {
      key: key,
      val: map[key]
    };
  });
}
/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */


function normalizeNamespace(fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }

    return fn(namespace, map);
  };
}
/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */


function getModuleByNamespace(store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];

  if ( true && !module) {
    console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
  }

  return module;
}

var index_esm = {
  Store: Store,
  install: install,
  version: '3.1.1',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};
/* harmony default export */ __webpack_exports__["default"] = (index_esm);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./src/App.vue":
/*!*********************!*\
  !*** ./src/App.vue ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=template&id=7ba5bd90& */ "./src/App.vue?vue&type=template&id=7ba5bd90&");
/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ "./src/App.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./App.vue?vue&type=style&index=0&lang=scss& */ "./src/App.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__["render"],
  _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/App.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/App.vue?vue&type=script&lang=js&":
/*!**********************************************!*\
  !*** ./src/App.vue?vue&type=script&lang=js& ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/babel-loader/lib??ref--1!../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/App.vue?vue&type=style&index=0&lang=scss&":
/*!*******************************************************!*\
  !*** ./src/App.vue?vue&type=style&index=0&lang=scss& ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/style-loader/dist!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??ref--2-2!../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/App.vue?vue&type=template&id=7ba5bd90&":
/*!****************************************************!*\
  !*** ./src/App.vue?vue&type=template&id=7ba5bd90& ***!
  \****************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=template&id=7ba5bd90& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=template&id=7ba5bd90&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/assets sync recursive ^\\.\\/.*$":
/*!**********************************!*\
  !*** ./src/assets sync ^\.\/.*$ ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./default-profile.jpg": "./src/assets/default-profile.jpg",
	"./fill-murray.jpg": "./src/assets/fill-murray.jpg",
	"./place-cage.jpg": "./src/assets/place-cage.jpg",
	"./place-keanu.svg": "./src/assets/place-keanu.svg"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/assets sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./src/assets/default-profile.jpg":
/*!****************************************!*\
  !*** ./src/assets/default-profile.jpg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "e43fe8ca9c869beeea06d651b50a00ce.jpg";

/***/ }),

/***/ "./src/assets/fill-murray.jpg":
/*!************************************!*\
  !*** ./src/assets/fill-murray.jpg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "250b29772dce72eceeed32b3c737a4e4.jpg";

/***/ }),

/***/ "./src/assets/place-cage.jpg":
/*!***********************************!*\
  !*** ./src/assets/place-cage.jpg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "733f6e7579e843731bcb10d7434502e1.jpg";

/***/ }),

/***/ "./src/assets/place-keanu.svg":
/*!************************************!*\
  !*** ./src/assets/place-keanu.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "26ef13e4bfdda442dd0a9b74734331ed.svg";

/***/ }),

/***/ "./src/components/Card.vue":
/*!*********************************!*\
  !*** ./src/components/Card.vue ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Card.vue?vue&type=template&id=54cdc180& */ "./src/components/Card.vue?vue&type=template&id=54cdc180&");
/* harmony import */ var _Card_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Card.vue?vue&type=script&lang=js& */ "./src/components/Card.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Card.vue?vue&type=style&index=0&lang=scss& */ "./src/components/Card.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Card_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/Card.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/Card.vue?vue&type=script&lang=js&":
/*!**********************************************************!*\
  !*** ./src/components/Card.vue?vue&type=script&lang=js& ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Card.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/Card.vue?vue&type=style&index=0&lang=scss&":
/*!*******************************************************************!*\
  !*** ./src/components/Card.vue?vue&type=style&index=0&lang=scss& ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Card.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/Card.vue?vue&type=template&id=54cdc180&":
/*!****************************************************************!*\
  !*** ./src/components/Card.vue?vue&type=template&id=54cdc180& ***!
  \****************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Card.vue?vue&type=template&id=54cdc180& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=template&id=54cdc180&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/components/LeaderboardCard.vue":
/*!********************************************!*\
  !*** ./src/components/LeaderboardCard.vue ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LeaderboardCard.vue?vue&type=template&id=790a88a6& */ "./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6&");
/* harmony import */ var _LeaderboardCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LeaderboardCard.vue?vue&type=script&lang=js& */ "./src/components/LeaderboardCard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LeaderboardCard.vue?vue&type=style&index=0&lang=scss& */ "./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _LeaderboardCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__["render"],
  _LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/LeaderboardCard.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/LeaderboardCard.vue?vue&type=script&lang=js&":
/*!*********************************************************************!*\
  !*** ./src/components/LeaderboardCard.vue?vue&type=script&lang=js& ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./LeaderboardCard.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&":
/*!******************************************************************************!*\
  !*** ./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss& ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./LeaderboardCard.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6&":
/*!***************************************************************************!*\
  !*** ./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6& ***!
  \***************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./LeaderboardCard.vue?vue&type=template&id=790a88a6& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/components/Navigation.vue":
/*!***************************************!*\
  !*** ./src/components/Navigation.vue ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Navigation.vue?vue&type=template&id=81440b78&scoped=true& */ "./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true&");
/* harmony import */ var _Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& */ "./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");

var script = {}



/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  script,
  _Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "81440b78",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/Navigation.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&":
/*!*************************************************************************************************!*\
  !*** ./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true&":
/*!**********************************************************************************!*\
  !*** ./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true& ***!
  \**********************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Navigation.vue?vue&type=template&id=81440b78&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/config/routes.js":
/*!******************************!*\
  !*** ./src/config/routes.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _views_Collection_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/Collection.vue */ "./src/views/Collection.vue");
/* harmony import */ var _views_Leaderboard_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/Leaderboard.vue */ "./src/views/Leaderboard.vue");
/* harmony import */ var _views_Settings_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/Settings.vue */ "./src/views/Settings.vue");
/* harmony import */ var _views_Home_vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/Home.vue */ "./src/views/Home.vue");
/* harmony import */ var _App_vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../App.vue */ "./src/App.vue");





var routes = [{
  path: '',
  component: _App_vue__WEBPACK_IMPORTED_MODULE_4__["default"],
  children: [{
    path: '',
    component: _views_Home_vue__WEBPACK_IMPORTED_MODULE_3__["default"]
  }, {
    path: 'collection',
    component: _views_Collection_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  }, {
    path: 'leaderboard',
    component: _views_Leaderboard_vue__WEBPACK_IMPORTED_MODULE_1__["default"]
  }, {
    path: 'settings',
    component: _views_Settings_vue__WEBPACK_IMPORTED_MODULE_2__["default"]
  }]
}];
/* harmony default export */ __webpack_exports__["default"] = (routes);

/***/ }),

/***/ "./src/config/stores/base.js":
/*!***********************************!*\
  !*** ./src/config/stores/base.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);

var baseStore = {
  state: {
    loading: false,
    cards: []
  },
  mutations: {
    setLoading: function setLoading(state, status) {
      state.loading = status;
    },
    setCards: function setCards(state, cards) {
      state.cards = cards;
    }
  },
  actions: {
    fetchCards: function fetchCards(context) {
      context.commit('setLoading', true);
    }
  },
  getters: {
    getUserCards: function getUserCards(state) {
      return state.cards.filter(function (card) {
        return card.collected;
      });
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = (baseStore);

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.esm.js");
/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue-router */ "./node_modules/vue-router/dist/vue-router.esm.js");
/* harmony import */ var _config_routes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/routes.js */ "./src/config/routes.js");
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
/* harmony import */ var _config_stores_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config/stores/base */ "./src/config/stores/base.js");





vue__WEBPACK_IMPORTED_MODULE_0__["default"].use(vue_router__WEBPACK_IMPORTED_MODULE_1__["default"]);
vue__WEBPACK_IMPORTED_MODULE_0__["default"].use(vuex__WEBPACK_IMPORTED_MODULE_3__["default"]);
var router = new vue_router__WEBPACK_IMPORTED_MODULE_1__["default"]({
  routes: _config_routes_js__WEBPACK_IMPORTED_MODULE_2__["default"]
});
var store = new vuex__WEBPACK_IMPORTED_MODULE_3__["default"].Store({
  modules: {
    base: _config_stores_base__WEBPACK_IMPORTED_MODULE_4__["default"]
  }
});
var app = new vue__WEBPACK_IMPORTED_MODULE_0__["default"]({
  router: router,
  el: '#app'
});

/***/ }),

/***/ "./src/views/Collection.vue":
/*!**********************************!*\
  !*** ./src/views/Collection.vue ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Collection.vue?vue&type=template&id=55026158& */ "./src/views/Collection.vue?vue&type=template&id=55026158&");
/* harmony import */ var _Collection_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Collection.vue?vue&type=script&lang=js& */ "./src/views/Collection.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _Collection_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Collection.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Collection.vue?vue&type=script&lang=js&":
/*!***********************************************************!*\
  !*** ./src/views/Collection.vue?vue&type=script&lang=js& ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Collection.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/views/Collection.vue?vue&type=template&id=55026158&":
/*!*****************************************************************!*\
  !*** ./src/views/Collection.vue?vue&type=template&id=55026158& ***!
  \*****************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Collection.vue?vue&type=template&id=55026158& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=template&id=55026158&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/views/Home.vue":
/*!****************************!*\
  !*** ./src/views/Home.vue ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Home_vue_vue_type_template_id_fae5bece___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Home.vue?vue&type=template&id=fae5bece& */ "./src/views/Home.vue?vue&type=template&id=fae5bece&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");

var script = {}


/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__["default"])(
  script,
  _Home_vue_vue_type_template_id_fae5bece___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Home_vue_vue_type_template_id_fae5bece___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Home.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Home.vue?vue&type=template&id=fae5bece&":
/*!***********************************************************!*\
  !*** ./src/views/Home.vue?vue&type=template&id=fae5bece& ***!
  \***********************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_template_id_fae5bece___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Home.vue?vue&type=template&id=fae5bece& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=template&id=fae5bece&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_template_id_fae5bece___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_template_id_fae5bece___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/views/Leaderboard.vue":
/*!***********************************!*\
  !*** ./src/views/Leaderboard.vue ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true& */ "./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true&");
/* harmony import */ var _Leaderboard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Leaderboard.vue?vue&type=script&lang=js& */ "./src/views/Leaderboard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& */ "./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Leaderboard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "c7fd0e9a",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Leaderboard.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Leaderboard.vue?vue&type=script&lang=js&":
/*!************************************************************!*\
  !*** ./src/views/Leaderboard.vue?vue&type=script&lang=js& ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Leaderboard.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&":
/*!*********************************************************************************************!*\
  !*** ./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true&":
/*!******************************************************************************!*\
  !*** ./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true& ***!
  \******************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/views/Settings.vue":
/*!********************************!*\
  !*** ./src/views/Settings.vue ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Settings_vue_vue_type_template_id_53cc84dd___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Settings.vue?vue&type=template&id=53cc84dd& */ "./src/views/Settings.vue?vue&type=template&id=53cc84dd&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");

var script = {}


/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__["default"])(
  script,
  _Settings_vue_vue_type_template_id_53cc84dd___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Settings_vue_vue_type_template_id_53cc84dd___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Settings.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Settings.vue?vue&type=template&id=53cc84dd&":
/*!***************************************************************!*\
  !*** ./src/views/Settings.vue?vue&type=template&id=53cc84dd& ***!
  \***************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Settings_vue_vue_type_template_id_53cc84dd___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Settings.vue?vue&type=template&id=53cc84dd& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Settings.vue?vue&type=template&id=53cc84dd&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Settings_vue_vue_type_template_id_53cc84dd___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Settings_vue_vue_type_template_id_53cc84dd___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3NyYy9BcHAudnVlIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZSIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTGVhZGVyYm9hcmRDYXJkLnZ1ZSIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL0NvbGxlY3Rpb24udnVlIiwid2VicGFjazovLy9zcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlIiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlPzViYTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC52dWU/NTRkZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MZWFkZXJib2FyZENhcmQudnVlPzYwMjkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi52dWU/MmViZCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlP2E3NzMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/MTYzMyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZT85NDE5Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlYWRlcmJvYXJkQ2FyZC52dWU/NjY3MCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLnZ1ZT9lZWQyIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9MZWFkZXJib2FyZC52dWU/NmVmNiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/NjQ3YSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZT85YmIzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlYWRlcmJvYXJkQ2FyZC52dWU/YTQzYiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLnZ1ZT9hMTk3Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9Db2xsZWN0aW9uLnZ1ZT9lOTZhIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9Ib21lLnZ1ZT9lMzU4Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9MZWFkZXJib2FyZC52dWU/OGY5ZiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvU2V0dGluZ3MudnVlPzI4NjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXJvdXRlci9kaXN0L3Z1ZS1yb3V0ZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWV4L2Rpc3QvdnVleC5lc20uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT85MTVjIiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlPzY5NTEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/MjY4NSIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzIHN5bmMgXlxcLlxcLy4qJCIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2RlZmF1bHQtcHJvZmlsZS5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9maWxsLW11cnJheS5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9wbGFjZS1jYWdlLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3BsYWNlLWtlYW51LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZT9iM2I4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmQudnVlPzRkZTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC52dWU/NWFkYiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MZWFkZXJib2FyZENhcmQudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlYWRlcmJvYXJkQ2FyZC52dWU/NDVkYiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MZWFkZXJib2FyZENhcmQudnVlPzZhNDgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGVhZGVyYm9hcmRDYXJkLnZ1ZT9iMGMwIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24udnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24udnVlPzY5MDAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi52dWU/ZDkxNSIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL3JvdXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL3N0b3Jlcy9iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvQ29sbGVjdGlvbi52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0NvbGxlY3Rpb24udnVlP2YxYzIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0NvbGxlY3Rpb24udnVlPzFiOTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0hvbWUudnVlIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9Ib21lLnZ1ZT9lNzI3Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9MZWFkZXJib2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0xlYWRlcmJvYXJkLnZ1ZT80NzJlIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9MZWFkZXJib2FyZC52dWU/OTlhOSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlP2E1MDgiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL1NldHRpbmdzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvU2V0dGluZ3MudnVlPzlkODAiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJ1dGlscyIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJ4aHJBZGFwdGVyIiwiY29uZmlnIiwiUHJvbWlzZSIsImRpc3BhdGNoWGhyUmVxdWVzdCIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJpc0Zvcm1EYXRhIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsIm9wZW4iLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInVybCIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiaGFuZGxlTG9hZCIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZURhdGEiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZSIsInN0YXR1c1RleHQiLCJvbmFib3J0IiwiaGFuZGxlQWJvcnQiLCJvbmVycm9yIiwiaGFuZGxlRXJyb3IiLCJvbnRpbWVvdXQiLCJoYW5kbGVUaW1lb3V0IiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwidW5kZWZpbmVkIiwieHNyZkhlYWRlck5hbWUiLCJmb3JFYWNoIiwic2V0UmVxdWVzdEhlYWRlciIsInZhbCIsImtleSIsInRvTG93ZXJDYXNlIiwiZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsIm9uQ2FuY2VsZWQiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJiaW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImRlZmF1bHRzIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwiZXh0ZW5kIiwiYXhpb3MiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbCIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsIm1lc3NhZ2UiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwicHJvbWlzZUV4ZWN1dG9yIiwidG9rZW4iLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwic291cmNlIiwiYyIsInZhbHVlIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiYXJndW1lbnRzIiwiY2hhaW4iLCJ1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzIiwicHVzaCIsImxlbmd0aCIsInNoaWZ0IiwiZ2V0VXJpIiwicmVwbGFjZSIsImZvckVhY2hNZXRob2ROb0RhdGEiLCJtZXJnZSIsImZvckVhY2hNZXRob2RXaXRoRGF0YSIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJpZCIsImZuIiwiZm9yRWFjaEhhbmRsZXIiLCJoIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsImVycm9yIiwiRXJyb3IiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsImJhc2VVUkwiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiY29tbW9uIiwiY2xlYW5IZWFkZXJDb25maWciLCJhZGFwdGVyIiwib25BZGFwdGVyUmVzb2x1dGlvbiIsInRyYW5zZm9ybVJlc3BvbnNlIiwib25BZGFwdGVyUmVqZWN0aW9uIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzIiLCJwcm9wIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsImlzT2JqZWN0IiwiZGVlcE1lcmdlIiwiZGVmYXVsdFRvQ29uZmlnMiIsInZhbGlkYXRlU3RhdHVzIiwiZm5zIiwidHJhbnNmb3JtIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaXNVbmRlZmluZWQiLCJnZXREZWZhdWx0QWRhcHRlciIsInByb2Nlc3MiLCJPYmplY3QiLCJjYWxsIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlIiwibWF4Q29udGVudExlbmd0aCIsInRoaXNBcmciLCJ3cmFwIiwiYXJncyIsIkFycmF5IiwiaSIsImFwcGx5IiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwic2VyaWFsaXplIiwiaXNBcnJheSIsInBhcnNlVmFsdWUiLCJ2IiwiaXNEYXRlIiwidG9JU09TdHJpbmciLCJqb2luIiwiaGFzaG1hcmtJbmRleCIsInNsaWNlIiwicmVsYXRpdmVVUkwiLCJzdGFuZGFyZEJyb3dzZXJFbnYiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJpc1N0cmluZyIsImRvY3VtZW50IiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJub25TdGFuZGFyZEJyb3dzZXJFbnYiLCJ0ZXN0IiwibXNpZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0Iiwid2luZG93IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwibm9ybWFsaXplZE5hbWUiLCJwcm9jZXNzSGVhZGVyIiwiaWdub3JlRHVwbGljYXRlT2YiLCJzcGxpdCIsInBhcnNlciIsImxpbmUiLCJ0cmltIiwic3Vic3RyIiwiY29uY2F0IiwiY2FsbGJhY2siLCJhcnIiLCJGb3JtRGF0YSIsInJlc3VsdCIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiaXNGdW5jdGlvbiIsInBpcGUiLCJVUkxTZWFyY2hQYXJhbXMiLCJzdHIiLCJwcm9kdWN0Iiwib2JqIiwibCIsImhhc093blByb3BlcnR5IiwiYXNzaWduVmFsdWUiLCJhIiwiYiIsImNvbnN0cnVjdG9yIiwidXNlU291cmNlTWFwIiwibGlzdCIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9pIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsIm5lZWRRdW90ZXMiLCJfX2VzTW9kdWxlIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJuZXh0VGljayIsIkl0ZW0iLCJhcnJheSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJnbG9iYWwiLCJzZXRJbW1lZGlhdGUiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsInJlZ2lzdGVySW1tZWRpYXRlIiwiRnVuY3Rpb24iLCJ0YXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbiIsImNhblVzZVBvc3RNZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uIiwibWVzc2FnZVByZWZpeCIsIk1hdGgiLCJyYW5kb20iLCJvbkdsb2JhbE1lc3NhZ2UiLCJldmVudCIsImF0dGFjaEV2ZW50IiwiaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24iLCJjaGFubmVsIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbiIsImh0bWwiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbiIsImF0dGFjaFRvIiwiZ2V0UHJvdG90eXBlT2YiLCJzZWxmIiwic2NvcGUiLCJUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIm9uVGltZW91dCIsIl9vblRpbWVvdXQiLCJhc3NlcnQiLCJjb25kaXRpb24iLCJ3YXJuIiwiY29uc29sZSIsImlzRXJyb3IiLCJlcnIiLCJpc0V4dGVuZGVkRXJyb3IiLCJfbmFtZSIsIlZpZXciLCJmdW5jdGlvbmFsIiwicHJvcHMiLCJ0eXBlIiwiU3RyaW5nIiwicmVuZGVyIiwiXyIsImNoaWxkcmVuIiwicGFyZW50Iiwicm91dGVyVmlldyIsIiRjcmVhdGVFbGVtZW50Iiwicm91dGUiLCIkcm91dGUiLCJjYWNoZSIsIl9yb3V0ZXJWaWV3Q2FjaGUiLCJkZXB0aCIsImluYWN0aXZlIiwiX3JvdXRlclJvb3QiLCJ2bm9kZURhdGEiLCIkdm5vZGUiLCJrZWVwQWxpdmUiLCJfaW5hY3RpdmUiLCIkcGFyZW50Iiwicm91dGVyVmlld0RlcHRoIiwibWF0Y2hlZCIsImNvbXBvbmVudCIsImNvbXBvbmVudHMiLCJyZWdpc3RlclJvdXRlSW5zdGFuY2UiLCJ2bSIsImN1cnJlbnQiLCJpbnN0YW5jZXMiLCJob29rIiwicHJlcGF0Y2giLCJ2bm9kZSIsImNvbXBvbmVudEluc3RhbmNlIiwiaW5pdCIsInByb3BzVG9QYXNzIiwicmVzb2x2ZVByb3BzIiwiYXR0cnMiLCJlbmNvZGVSZXNlcnZlUkUiLCJlbmNvZGVSZXNlcnZlUmVwbGFjZXIiLCJjaGFyQ29kZUF0IiwiY29tbWFSRSIsImRlY29kZSIsInJlc29sdmVRdWVyeSIsInF1ZXJ5IiwiZXh0cmFRdWVyeSIsIl9wYXJzZVF1ZXJ5IiwicGFyc2VRdWVyeSIsInBhcnNlZFF1ZXJ5IiwicmVzIiwicGFyYW0iLCJzdHJpbmdpZnlRdWVyeSIsImtleXMiLCJ2YWwyIiwiZmlsdGVyIiwieCIsInRyYWlsaW5nU2xhc2hSRSIsImNyZWF0ZVJvdXRlIiwicmVjb3JkIiwicmVkaXJlY3RlZEZyb20iLCJyb3V0ZXIiLCJvcHRpb25zIiwiY2xvbmUiLCJtZXRhIiwiZnVsbFBhdGgiLCJnZXRGdWxsUGF0aCIsImZvcm1hdE1hdGNoIiwiZnJlZXplIiwiU1RBUlQiLCJfc3RyaW5naWZ5UXVlcnkiLCJpc1NhbWVSb3V0ZSIsImlzT2JqZWN0RXF1YWwiLCJhS2V5cyIsImJLZXlzIiwiZXZlcnkiLCJhVmFsIiwiYlZhbCIsImlzSW5jbHVkZWRSb3V0ZSIsInRhcmdldCIsInF1ZXJ5SW5jbHVkZXMiLCJyZXNvbHZlUGF0aCIsInJlbGF0aXZlIiwiYmFzZSIsImFwcGVuZCIsImZpcnN0Q2hhciIsInBvcCIsInNlZ21lbnRzIiwic2VnbWVudCIsInBhcnNlUGF0aCIsImhhc2hJbmRleCIsInF1ZXJ5SW5kZXgiLCJjbGVhblBhdGgiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwXzEiLCJwYXRoVG9SZWdleHAiLCJwYXJzZV8xIiwiY29tcGlsZV8xIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb25fMSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cF8xIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInRva2VucyIsImluZGV4IiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJtIiwiZXNjYXBlZCIsIm9mZnNldCIsIm5leHQiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiZW5jb2RlQXN0ZXJpc2siLCJtYXRjaGVzIiwib3B0cyIsInByZXR0eSIsImoiLCJhdHRhY2hLZXlzIiwicmUiLCJmbGFncyIsInNlbnNpdGl2ZSIsInJlZ2V4cFRvUmVnZXhwIiwiZ3JvdXBzIiwiYXJyYXlUb1JlZ2V4cCIsInJlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwic3RyaWN0IiwiZW5kIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJyZWdleHBDb21waWxlQ2FjaGUiLCJmaWxsUGFyYW1zIiwicm91dGVNc2ciLCJmaWxsZXIiLCJwYXRoTWF0Y2giLCJub3JtYWxpemVMb2NhdGlvbiIsInJhdyIsIl9ub3JtYWxpemVkIiwicmF3UGF0aCIsInBhcnNlZFBhdGgiLCJiYXNlUGF0aCIsInRvVHlwZXMiLCJldmVudFR5cGVzIiwiTGluayIsInRvIiwicmVxdWlyZWQiLCJ0YWciLCJleGFjdCIsIkJvb2xlYW4iLCJhY3RpdmVDbGFzcyIsImV4YWN0QWN0aXZlQ2xhc3MiLCJ0aGlzJDEiLCIkcm91dGVyIiwiY2xhc3NlcyIsImdsb2JhbEFjdGl2ZUNsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwiZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyIsImxpbmtFeGFjdEFjdGl2ZUNsYXNzIiwiYWN0aXZlQ2xhc3NGYWxsYmFjayIsImV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayIsImNvbXBhcmVUYXJnZXQiLCJoYW5kbGVyIiwiZ3VhcmRFdmVudCIsImNsaWNrIiwic2NvcGVkU2xvdCIsIiRzY29wZWRTbG90cyIsIiRoYXNOb3JtYWwiLCJuYXZpZ2F0ZSIsImlzQWN0aXZlIiwiaXNFeGFjdEFjdGl2ZSIsImZpbmRBbmNob3IiLCIkc2xvdHMiLCJpc1N0YXRpYyIsImFEYXRhIiwiaGFuZGxlciQxIiwiZXZlbnQkMSIsImFBdHRycyIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsImdldEF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0IiwiY2hpbGQiLCJfVnVlIiwiaW5zdGFsbCIsIlZ1ZSIsImluc3RhbGxlZCIsImlzRGVmIiwicmVnaXN0ZXJJbnN0YW5jZSIsImNhbGxWYWwiLCIkb3B0aW9ucyIsIl9wYXJlbnRWbm9kZSIsIm1peGluIiwiYmVmb3JlQ3JlYXRlIiwiX3JvdXRlciIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImhpc3RvcnkiLCJkZXN0cm95ZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIl9yb3V0ZSIsInN0cmF0cyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImJlZm9yZVJvdXRlRW50ZXIiLCJiZWZvcmVSb3V0ZUxlYXZlIiwiYmVmb3JlUm91dGVVcGRhdGUiLCJjcmVhdGVkIiwiaW5Ccm93c2VyIiwiY3JlYXRlUm91dGVNYXAiLCJyb3V0ZXMiLCJvbGRQYXRoTGlzdCIsIm9sZFBhdGhNYXAiLCJvbGROYW1lTWFwIiwicGF0aExpc3QiLCJwYXRoTWFwIiwibmFtZU1hcCIsImFkZFJvdXRlUmVjb3JkIiwic3BsaWNlIiwiZm91bmQiLCJwYXRoTmFtZXMiLCJtYXRjaEFzIiwicGF0aFRvUmVnZXhwT3B0aW9ucyIsIm5vcm1hbGl6ZWRQYXRoIiwibm9ybWFsaXplUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJyZWdleCIsImNvbXBpbGVSb3V0ZVJlZ2V4IiwicmVkaXJlY3QiLCJiZWZvcmVFbnRlciIsInNvbWUiLCJjaGlsZE1hdGNoQXMiLCJhbGlhcyIsImFsaWFzZXMiLCJhbGlhc1JvdXRlIiwiY3JlYXRlTWF0Y2hlciIsImFkZFJvdXRlcyIsImN1cnJlbnRSb3V0ZSIsIl9jcmVhdGVSb3V0ZSIsInBhcmFtTmFtZXMiLCJyZWNvcmQkMSIsIm1hdGNoUm91dGUiLCJvcmlnaW5hbFJlZGlyZWN0IiwidGFyZ2V0UmVjb3JkIiwicmVzb2x2ZVJlY29yZFBhdGgiLCJyZXNvbHZlZFBhdGgiLCJhbGlhc2VkUGF0aCIsImFsaWFzZWRNYXRjaCIsImFsaWFzZWRSZWNvcmQiLCJUaW1lIiwicGVyZm9ybWFuY2UiLCJnZW5TdGF0ZUtleSIsInRvRml4ZWQiLCJfa2V5IiwiZ2V0U3RhdGVLZXkiLCJzZXRTdGF0ZUtleSIsInBvc2l0aW9uU3RvcmUiLCJzZXR1cFNjcm9sbCIsInByb3RvY29sQW5kUGF0aCIsImFic29sdXRlUGF0aCIsInJlcGxhY2VTdGF0ZSIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInN0YXRlIiwiaGFuZGxlU2Nyb2xsIiwiZnJvbSIsImlzUG9wIiwiYXBwIiwiYmVoYXZpb3IiLCJzY3JvbGxCZWhhdmlvciIsIiRuZXh0VGljayIsInBvc2l0aW9uIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJzaG91bGRTY3JvbGwiLCJzY3JvbGxUb1Bvc2l0aW9uIiwicGFnZVhPZmZzZXQiLCJ5IiwicGFnZVlPZmZzZXQiLCJnZXRFbGVtZW50UG9zaXRpb24iLCJlbCIsImRvY0VsIiwiZG9jUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsUmVjdCIsImxlZnQiLCJ0b3AiLCJpc1ZhbGlkUG9zaXRpb24iLCJub3JtYWxpemVQb3NpdGlvbiIsIm5vcm1hbGl6ZU9mZnNldCIsImhhc2hTdGFydHNXaXRoTnVtYmVyUkUiLCJzZWxlY3RvciIsImdldEVsZW1lbnRCeUlkIiwicXVlcnlTZWxlY3RvciIsInNjcm9sbFRvIiwic3VwcG9ydHNQdXNoU3RhdGUiLCJ1YSIsInB1c2hTdGF0ZSIsInJ1blF1ZXVlIiwiY2IiLCJzdGVwIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50cyIsImhhc0FzeW5jIiwicGVuZGluZyIsImZsYXRNYXBDb21wb25lbnRzIiwiZGVmIiwiY2lkIiwicmVzb2x2ZWREZWYiLCJpc0VTTW9kdWxlIiwicmVzb2x2ZWQiLCJtc2ciLCJjb21wIiwiZmxhdHRlbiIsImhhc1N5bWJvbCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiY2FsbGVkIiwiTmF2aWdhdGlvbkR1cGxpY2F0ZWQiLCJub3JtYWxpemVkTG9jYXRpb24iLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9fcHJvdG9fXyIsIkhpc3RvcnkiLCJub3JtYWxpemVCYXNlIiwicmVhZHkiLCJyZWFkeUNicyIsInJlYWR5RXJyb3JDYnMiLCJlcnJvckNicyIsImxpc3RlbiIsIm9uUmVhZHkiLCJlcnJvckNiIiwib25FcnJvciIsInRyYW5zaXRpb25UbyIsIm9uQ29tcGxldGUiLCJvbkFib3J0IiwiY29uZmlybVRyYW5zaXRpb24iLCJ1cGRhdGVSb3V0ZSIsImVuc3VyZVVSTCIsInJlc29sdmVRdWV1ZSIsInVwZGF0ZWQiLCJkZWFjdGl2YXRlZCIsImFjdGl2YXRlZCIsImV4dHJhY3RMZWF2ZUd1YXJkcyIsImJlZm9yZUhvb2tzIiwiZXh0cmFjdFVwZGF0ZUhvb2tzIiwiaXRlcmF0b3IiLCJwb3N0RW50ZXJDYnMiLCJpc1ZhbGlkIiwiZW50ZXJHdWFyZHMiLCJleHRyYWN0RW50ZXJHdWFyZHMiLCJyZXNvbHZlSG9va3MiLCJwcmV2IiwiYWZ0ZXJIb29rcyIsImJhc2VFbCIsIm1heCIsImV4dHJhY3RHdWFyZHMiLCJyZWNvcmRzIiwicmV2ZXJzZSIsImd1YXJkcyIsImd1YXJkIiwiZXh0cmFjdEd1YXJkIiwiYmluZEd1YXJkIiwiYm91bmRSb3V0ZUd1YXJkIiwiY2JzIiwiYmluZEVudGVyR3VhcmQiLCJyb3V0ZUVudGVyR3VhcmQiLCJwb2xsIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJIVE1MNUhpc3RvcnkiLCJleHBlY3RTY3JvbGwiLCJzdXBwb3J0c1Njcm9sbCIsImluaXRMb2NhdGlvbiIsImdldExvY2F0aW9uIiwiZ28iLCJuIiwiZnJvbVJvdXRlIiwiZ2V0Q3VycmVudExvY2F0aW9uIiwiZGVjb2RlVVJJIiwiSGFzaEhpc3RvcnkiLCJmYWxsYmFjayIsImNoZWNrRmFsbGJhY2siLCJlbnN1cmVTbGFzaCIsInNldHVwTGlzdGVuZXJzIiwiZ2V0SGFzaCIsInJlcGxhY2VIYXNoIiwicHVzaEhhc2giLCJzZWFyY2hJbmRleCIsImdldFVybCIsIkFic3RyYWN0SGlzdG9yeSIsInRhcmdldEluZGV4IiwiVnVlUm91dGVyIiwiYXBwcyIsIm1hdGNoZXIiLCJtb2RlIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiJG9uY2UiLCJzZXR1cEhhc2hMaXN0ZW5lciIsImJlZm9yZUVhY2giLCJyZWdpc3Rlckhvb2siLCJiZWZvcmVSZXNvbHZlIiwiYWZ0ZXJFYWNoIiwiYmFjayIsImZvcndhcmQiLCJnZXRNYXRjaGVkQ29tcG9uZW50cyIsImNyZWF0ZUhyZWYiLCJub3JtYWxpemVkVG8iLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW1wdHlPYmplY3QiLCJpc1VuZGVmIiwiaXNUcnVlIiwiaXNGYWxzZSIsImlzUHJpbWl0aXZlIiwiX3RvU3RyaW5nIiwidG9SYXdUeXBlIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJwYXJzZUZsb2F0IiwiZmxvb3IiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJoYXNPd24iLCJjYWNoZWQiLCJjYWNoZWRGbiIsImhpdCIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsImNhcGl0YWxpemUiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsInBvbHlmaWxsQmluZCIsImN0eCIsImJvdW5kRm4iLCJfbGVuZ3RoIiwibmF0aXZlQmluZCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsIl9mcm9tIiwidG9PYmplY3QiLCJubyIsImlkZW50aXR5IiwiZ2VuU3RhdGljS2V5cyIsInJlZHVjZSIsInN0YXRpY0tleXMiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImdldFRpbWUiLCJrZXlzQSIsImtleXNCIiwibG9vc2VJbmRleE9mIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJlbnVtZXJhYmxlIiwiYmFpbFJFIiwiaGFzUHJvdG8iLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzQW5kcm9pZCIsImlzSU9TIiwiaXNDaHJvbWUiLCJpc1BoYW50b21KUyIsImlzRkYiLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwiX2lzU2VydmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIlJlZmxlY3QiLCJvd25LZXlzIiwiX1NldCIsIlNldCIsInNldCIsImhhcyIsImFkZCIsImNsZWFyIiwidGlwIiwiZ2VuZXJhdGVDb21wb25lbnRUcmFjZSIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJoYXNDb25zb2xlIiwiY2xhc3NpZnlSRSIsImNsYXNzaWZ5IiwidHJhY2UiLCJpbmNsdWRlRmlsZSIsIiRyb290IiwiX2lzVnVlIiwiX2NvbXBvbmVudFRhZyIsImZpbGUiLCJfX2ZpbGUiLCJ0cmVlIiwiY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlIiwibGFzdCIsInVpZCIsIkRlcCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJhZGREZXAiLCJub3RpZnkiLCJzb3J0IiwidXBkYXRlIiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwiVk5vZGUiLCJ0ZXh0IiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJjcmVhdGVFbXB0eVZOb2RlIiwibm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwibWV0aG9kc1RvUGF0Y2giLCJvcmlnaW5hbCIsIm11dGF0b3IiLCJvYiIsIl9fb2JfXyIsImluc2VydGVkIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsIml0ZW1zIiwib2JzZXJ2ZSIsInNyYyIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwicmVhY3RpdmVHZXR0ZXIiLCJkZXBlbmRBcnJheSIsInJlYWN0aXZlU2V0dGVyIiwibmV3VmFsIiwiZGVsIiwicHJvcHNEYXRhIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwibWVyZ2VkRGF0YUZuIiwibWVyZ2VkSW5zdGFuY2VEYXRhRm4iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImRlZHVwZUhvb2tzIiwiaG9va3MiLCJtZXJnZUFzc2V0cyIsImFzc2VydE9iamVjdFR5cGUiLCJrZXkkMSIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJjaGVja0NvbXBvbmVudHMiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJtZXJnZU9wdGlvbnMiLCJfYmFzZSIsIm1peGlucyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwiYXNzZXJ0UHJvcCIsIl9wcm9wcyIsImdldFR5cGUiLCJ2YWxpZCIsImV4cGVjdGVkVHlwZXMiLCJhc3NlcnRlZFR5cGUiLCJhc3NlcnRUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwidmFsaWRhdG9yIiwic2ltcGxlQ2hlY2tSRSIsInQiLCJpc1NhbWVUeXBlIiwicmVjZWl2ZWRUeXBlIiwiZXhwZWN0ZWRWYWx1ZSIsInN0eWxlVmFsdWUiLCJyZWNlaXZlZFZhbHVlIiwiaXNFeHBsaWNhYmxlIiwiaXNCb29sZWFuIiwiTnVtYmVyIiwiZXhwbGljaXRUeXBlcyIsImVsZW0iLCJpbmZvIiwiY3VyIiwiZXJyb3JDYXB0dXJlZCIsImdsb2JhbEhhbmRsZUVycm9yIiwiaW52b2tlV2l0aEVycm9ySGFuZGxpbmciLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwidGltZXJGdW5jIiwicCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIl9yZXNvbHZlIiwibWFyayIsIm1lYXN1cmUiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsImluaXRQcm94eSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiX3dpdGhTdHJpcHBlZCIsIl9yZW5kZXJQcm94eSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjcmVhdGVGbkludm9rZXIiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImtleUluTG93ZXJDYXNlIiwiY2hlY2tQcm9wIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsIl9pc1ZMaXN0IiwiaW5pdFByb3ZpZGUiLCJfcHJvdmlkZWQiLCJpbml0SW5qZWN0aW9ucyIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5Iiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwiZG9uZSIsInJlbmRlclNsb3QiLCJiaW5kT2JqZWN0Iiwic2NvcGVkU2xvdEZuIiwibm9kZXMiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImxvb3AiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwic3RhdGljUmVuZGVyRm5zIiwibWFya1N0YXRpYyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJ2YWx1ZXMiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3QiLCJfcSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX3YiLCJfZSIsIl91IiwiX2ciLCJfZCIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsIl9jIiwiZCIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJtZXJnZVByb3BzIiwicmVuZGVyQ29udGV4dCIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJ2bm9kZXMiLCJkZXZ0b29sc01ldGEiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaHlkcmF0aW5nIiwiX2lzRGVzdHJveWVkIiwibW91bnRlZE5vZGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwicXVldWVBY3RpdmF0ZWRDb21wb25lbnQiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsIiRkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJuYXRpdmVPbiIsImluc3RhbGxDb21wb25lbnRIb29rcyIsIl9pc0NvbXBvbmVudCIsImlubGluZVRlbXBsYXRlIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiX2NyZWF0ZUVsZW1lbnQiLCJpcyIsInByZSIsImFwcGx5TlMiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsImZvcmNlIiwic3R5bGUiLCJpbml0UmVuZGVyIiwiX3Zub2RlIiwicGFyZW50Vm5vZGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJwYXJlbnREYXRhIiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwiX3BhcmVudExpc3RlbmVycyIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInJlbmRlck1peGluIiwiX3JlbmRlciIsInJlbmRlckVycm9yIiwiZW5zdXJlQ3RvciIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJvd25lciIsIm93bmVycyIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsInN5bmMiLCJ0aW1lckxvYWRpbmciLCJ0aW1lclRpbWVvdXQiLCIkb24iLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsIiRmb3JjZVVwZGF0ZSIsImRlbGF5IiwiZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCIsImluaXRFdmVudHMiLCJfZXZlbnRzIiwiX2hhc0hvb2tFdmVudCIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsInJlbW92ZSQxIiwiJG9mZiIsIl90YXJnZXQiLCJvbmNlSGFuZGxlciIsIm9sZExpc3RlbmVycyIsImV2ZW50c01peGluIiwiaG9va1JFIiwiaSQxIiwiJGVtaXQiLCJsb3dlckNhc2VFdmVudCIsInNldEFjdGl2ZUluc3RhbmNlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiaW5pdExpZmVjeWNsZSIsIiRjaGlsZHJlbiIsIiRyZWZzIiwiX3dhdGNoZXIiLCJfZGlyZWN0SW5hY3RpdmUiLCJsaWZlY3ljbGVNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJfZGF0YSIsIm1vdW50Q29tcG9uZW50IiwidGVtcGxhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJfdWlkIiwiV2F0Y2hlciIsImJlZm9yZSIsInJlbmRlckNoaWxkcmVuIiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJNQVhfVVBEQVRFX0NPVU5UIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJjaXJjdWxhciIsIndhaXRpbmciLCJmbHVzaGluZyIsInJlc2V0U2NoZWR1bGVyU3RhdGUiLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwidXNlciIsImV4cHJlc3Npb24iLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsImNhbGxVcGRhdGVkSG9va3MiLCJxdWV1ZVdhdGNoZXIiLCJ1aWQkMiIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJkZWVwIiwibGF6eSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJjbGVhbnVwRGVwcyIsInRtcCIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJwcm94eUdldHRlciIsInByb3h5U2V0dGVyIiwiaW5pdFN0YXRlIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJpbml0RGF0YSIsImluaXRDb21wdXRlZCIsImluaXRXYXRjaCIsInByb3BzT3B0aW9ucyIsImlzUm9vdCIsImdldERhdGEiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImRlZmluZUNvbXB1dGVkIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCJjb21wdXRlZEdldHRlciIsImNyZWF0ZVdhdGNoZXIiLCIkd2F0Y2giLCJzdGF0ZU1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJ1bndhdGNoRm4iLCJ1aWQkMyIsImluaXRNaXhpbiIsIl9pbml0IiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJzdXBlck9wdGlvbnMiLCJjYWNoZWRTdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsImluaXRVc2UiLCJwbHVnaW4iLCJpbnN0YWxsZWRQbHVnaW5zIiwiX2luc3RhbGxlZFBsdWdpbnMiLCJpbml0TWl4aW4kMSIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiVnVlQ29tcG9uZW50IiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsIkNvbXAiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJkZWZpbml0aW9uIiwiZ2V0Q29tcG9uZW50TmFtZSIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjYWNoZWQkJDEiLCJwYXR0ZXJuVHlwZXMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsIm1vdW50ZWQiLCJyZWYkMSIsInBhcnNlSW50IiwiYnVpbHRJbkNvbXBvbmVudHMiLCJpbml0R2xvYmFsQVBJIiwiY29uZmlnRGVmIiwib2JzZXJ2YWJsZSIsInNzckNvbnRleHQiLCJhY2NlcHRWYWx1ZSIsImF0dHIiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsImlzRmFsc3lBdHRyVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsImlzUHJlVGFnIiwidW5rbm93bkVsZW1lbnRDYWNoZSIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiaXNUZXh0SW5wdXRUeXBlIiwic2VsZWN0ZWQiLCJjcmVhdGVFbGVtZW50JDEiLCJ0YWdOYW1lIiwibXVsdGlwbGUiLCJjcmVhdGVFbGVtZW50TlMiLCJuYW1lc3BhY2UiLCJjcmVhdGVDb21tZW50IiwiaW5zZXJ0QmVmb3JlIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwic2NvcGVJZCIsIm5vZGVPcHMiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZnMiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInNhbWVJbnB1dFR5cGUiLCJ0eXBlQSIsInR5cGVCIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJiYWNrZW5kIiwiZW1wdHlOb2RlQXQiLCJjcmVhdGVSbUNiIiwiY2hpbGRFbG0iLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsImlubmVyTm9kZSIsInRyYW5zaXRpb24iLCJhY3RpdmF0ZSIsInJlZiQkMSIsImNoZWNrRHVwbGljYXRlS2V5cyIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsInJtIiwidXBkYXRlQ2hpbGRyZW4iLCJvbGRDaCIsIm5ld0NoIiwicmVtb3ZlT25seSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJjYW5Nb3ZlIiwicGF0Y2hWbm9kZSIsImZpbmRJZHhJbk9sZCIsInNlZW5LZXlzIiwiaHlkcmF0ZSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaHlkcmF0aW9uQmFpbGVkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJpbm5lckhUTUwiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmdWxsSW52b2tlIiwibm9kZVR5cGUiLCJwYXRjaCIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImNhbGxIb29rJDEiLCJvbGRBcmciLCJhcmciLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwia2xhc3MiLCJ2YWxpZERpdmlzaW9uQ2hhclJFIiwicGFyc2VGaWx0ZXJzIiwiZXhwIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsImZpbHRlcnMiLCJwdXNoRmlsdGVyIiwid3JhcEZpbHRlciIsImJhc2VXYXJuIiwicmFuZ2UiLCJwbHVja01vZHVsZUZ1bmN0aW9uIiwiYWRkUHJvcCIsImR5bmFtaWMiLCJyYW5nZVNldEl0ZW0iLCJwbGFpbiIsImFkZEF0dHIiLCJkeW5hbWljQXR0cnMiLCJhZGRSYXdBdHRyIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJhZGREaXJlY3RpdmUiLCJpc0R5bmFtaWNBcmciLCJwcmVwZW5kTW9kaWZpZXJNYXJrZXIiLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwicHJldmVudCIsInJpZ2h0IiwibWlkZGxlIiwiZXZlbnRzIiwibmF0aXZlRXZlbnRzIiwibmV3SGFuZGxlciIsImdldFJhd0JpbmRpbmdBdHRyIiwicmF3QXR0cnNNYXAiLCJnZXRCaW5kaW5nQXR0ciIsImdldFN0YXRpYyIsImR5bmFtaWNWYWx1ZSIsImdldEFuZFJlbW92ZUF0dHIiLCJzdGF0aWNWYWx1ZSIsInJlbW92ZUZyb21NYXAiLCJnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCIsImdlbkNvbXBvbmVudE1vZGVsIiwiYmFzZVZhbHVlRXhwcmVzc2lvbiIsInZhbHVlRXhwcmVzc2lvbiIsImFzc2lnbm1lbnQiLCJnZW5Bc3NpZ25tZW50Q29kZSIsInBhcnNlTW9kZWwiLCJjaHIiLCJpbmRleCQxIiwiZXhwcmVzc2lvblBvcyIsImV4cHJlc3Npb25FbmRQb3MiLCJsYXN0SW5kZXhPZiIsImVvZiIsImlzU3RyaW5nU3RhcnQiLCJwYXJzZVN0cmluZyIsInBhcnNlQnJhY2tldCIsImluQnJhY2tldCIsInN0cmluZ1F1b3RlIiwid2FybiQxIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsIl93YXJuIiwiZ2VuU2VsZWN0IiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJnZW5EZWZhdWx0TW9kZWwiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJzZWxlY3RlZFZhbCIsInZhbHVlJDEiLCJ0eXBlQmluZGluZyIsIm5lZWRDb21wb3NpdGlvbkd1YXJkIiwibm9ybWFsaXplRXZlbnRzIiwiY2hhbmdlIiwidGFyZ2V0JDEiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJfdk1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwiY3NzVGV4dCIsImxpc3REZWxpbWl0ZXIiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZ2V0U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZSIsInZlbmRvck5hbWVzIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwicyIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsImNhbmNlbGxlZCIsIl9lbnRlckNiIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBsaWNpdEVudGVyRHVyYXRpb24iLCJjaGVja0R1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwbGF0Zm9ybU1vZHVsZXMiLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiZGlyZWN0aXZlIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJvIiwibmVlZFJlc2V0IiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInBsYWNlaG9sZGVyIiwicmF3Q2hpbGQiLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiaXNTYW1lQ2hpbGQiLCJvbGRDaGlsZCIsImlzTm90VGV4dE5vZGUiLCJpc1ZTaG93RGlyZWN0aXZlIiwiVHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJUcmFuc2l0aW9uR3JvdXAiLCJiZWZvcmVNb3VudCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwicmVtb3ZlZCIsImMkMSIsInBvcyIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwibW92ZWQiLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbW92ZUNiIiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJuZXdQb3MiLCJvbGRQb3MiLCJkeCIsImR5IiwicGxhdGZvcm1Db21wb25lbnRzIiwiZGVmYXVsdFRhZ1JFIiwicmVnZXhFc2NhcGVSRSIsImJ1aWxkUmVnZXgiLCJkZWxpbWl0ZXJzIiwicGFyc2VUZXh0IiwidGFnUkUiLCJyYXdUb2tlbnMiLCJ0b2tlblZhbHVlIiwidHJhbnNmb3JtTm9kZSIsImNsYXNzQmluZGluZyIsImdlbkRhdGEiLCJrbGFzcyQxIiwidHJhbnNmb3JtTm9kZSQxIiwic3R5bGVCaW5kaW5nIiwiZ2VuRGF0YSQxIiwic3R5bGUkMSIsImRlY29kZXIiLCJoZSIsImlzVW5hcnlUYWciLCJjYW5CZUxlZnRPcGVuVGFnIiwiaXNOb25QaHJhc2luZ1RhZyIsImF0dHJpYnV0ZSIsImR5bmFtaWNBcmdBdHRyaWJ1dGUiLCJuY25hbWUiLCJxbmFtZUNhcHR1cmUiLCJzdGFydFRhZ09wZW4iLCJzdGFydFRhZ0Nsb3NlIiwiZG9jdHlwZSIsImNvbW1lbnQiLCJjb25kaXRpb25hbENvbW1lbnQiLCJpc1BsYWluVGV4dEVsZW1lbnQiLCJyZUNhY2hlIiwiZGVjb2RpbmdNYXAiLCJlbmNvZGVkQXR0ciIsImVuY29kZWRBdHRyV2l0aE5ld0xpbmVzIiwiaXNJZ25vcmVOZXdsaW5lVGFnIiwic2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lIiwiZGVjb2RlQXR0ciIsInNob3VsZERlY29kZU5ld2xpbmVzIiwicGFyc2VIVE1MIiwiZXhwZWN0SFRNTCIsImlzVW5hcnlUYWckJDEiLCJjYW5CZUxlZnRPcGVuVGFnJCQxIiwibGFzdFRhZyIsInRleHRFbmQiLCJjb21tZW50RW5kIiwic2hvdWxkS2VlcENvbW1lbnQiLCJzdWJzdHJpbmciLCJhZHZhbmNlIiwiY29uZGl0aW9uYWxFbmQiLCJkb2N0eXBlTWF0Y2giLCJlbmRUYWdNYXRjaCIsImN1ckluZGV4IiwicGFyc2VFbmRUYWciLCJzdGFydFRhZ01hdGNoIiwicGFyc2VTdGFydFRhZyIsImhhbmRsZVN0YXJ0VGFnIiwicmVzdCIsImNoYXJzIiwiZW5kVGFnTGVuZ3RoIiwic3RhY2tlZFRhZyIsInJlU3RhY2tlZFRhZyIsInJlc3QkMSIsInVuYXJ5U2xhc2giLCJ1bmFyeSIsInNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiIsIm91dHB1dFNvdXJjZVJhbmdlIiwibG93ZXJDYXNlZFRhZyIsImxvd2VyQ2FzZWRUYWdOYW1lIiwib25SRSIsImRpclJFIiwiZm9yQWxpYXNSRSIsImZvckl0ZXJhdG9yUkUiLCJzdHJpcFBhcmVuc1JFIiwiZHluYW1pY0FyZ1JFIiwiYXJnUkUiLCJiaW5kUkUiLCJtb2RpZmllclJFIiwic2xvdFJFIiwibGluZUJyZWFrUkUiLCJ3aGl0ZXNwYWNlUkUkMSIsImludmFsaWRBdHRyaWJ1dGVSRSIsImRlY29kZUhUTUxDYWNoZWQiLCJlbXB0eVNsb3RTY29wZVRva2VuIiwid2FybiQyIiwidHJhbnNmb3JtcyIsInByZVRyYW5zZm9ybXMiLCJwb3N0VHJhbnNmb3JtcyIsInBsYXRmb3JtSXNQcmVUYWciLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJtYXliZUNvbXBvbmVudCIsImNyZWF0ZUFTVEVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJwcmVzZXJ2ZVdoaXRlc3BhY2UiLCJ3aGl0ZXNwYWNlT3B0aW9uIiwid2hpdGVzcGFjZSIsInJvb3QiLCJjdXJyZW50UGFyZW50IiwiaW5QcmUiLCJ3YXJuZWQiLCJ3YXJuT25jZSIsImNsb3NlRWxlbWVudCIsImVsZW1lbnQiLCJ0cmltRW5kaW5nV2hpdGVzcGFjZSIsInByb2Nlc3NlZCIsInByb2Nlc3NFbGVtZW50IiwiZWxzZWlmIiwiY2hlY2tSb290Q29uc3RyYWludHMiLCJhZGRJZkNvbmRpdGlvbiIsImJsb2NrIiwiZm9yYmlkZGVuIiwicHJvY2Vzc0lmQ29uZGl0aW9ucyIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJsYXN0Tm9kZSIsImNvbW1lbnRzIiwic3RhcnQkMSIsImd1YXJkSUVTVkdCdWciLCJjdW11bGF0ZWQiLCJpc0ZvcmJpZGRlblRhZyIsInByb2Nlc3NQcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzRm9yIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJlbmQkMSIsImlzVGV4dFRhZyIsInByb2Nlc3NLZXkiLCJwcm9jZXNzUmVmIiwicHJvY2Vzc1Nsb3RDb250ZW50IiwicHJvY2Vzc1Nsb3RPdXRsZXQiLCJwcm9jZXNzQ29tcG9uZW50IiwicHJvY2Vzc0F0dHJzIiwiaXRlcmF0b3IyIiwiaXRlcmF0b3IxIiwiY2hlY2tJbkZvciIsInBhcnNlRm9yIiwiaW5NYXRjaCIsIml0ZXJhdG9yTWF0Y2giLCJmaW5kUHJldkVsZW1lbnQiLCJpZkNvbmRpdGlvbnMiLCJzbG90VGFyZ2V0RHluYW1pYyIsInNsb3RCaW5kaW5nIiwiZ2V0U2xvdE5hbWUiLCJzbG90QmluZGluZyQxIiwiZHluYW1pYyQxIiwic2xvdENvbnRhaW5lciIsInNsb3ROYW1lIiwic3luY0dlbiIsImlzRHluYW1pYyIsImhhc0JpbmRpbmdzIiwicGFyc2VNb2RpZmllcnMiLCJjYW1lbCIsImFyZ01hdGNoIiwiY2hlY2tGb3JBbGlhc01vZGVsIiwiaWVOU0J1ZyIsImllTlNQcmVmaXgiLCJfZWwiLCJwcmVUcmFuc2Zvcm1Ob2RlIiwiaWZDb25kaXRpb24iLCJpZkNvbmRpdGlvbkV4dHJhIiwiaGFzRWxzZSIsImVsc2VJZkNvbmRpdGlvbiIsImJyYW5jaDAiLCJjbG9uZUFTVEVsZW1lbnQiLCJicmFuY2gxIiwiYnJhbmNoMiIsIm1vZGVsJDEiLCJtb2R1bGVzJDEiLCJkaXJlY3RpdmVzJDEiLCJiYXNlT3B0aW9ucyIsImlzU3RhdGljS2V5IiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnIiwiZ2VuU3RhdGljS2V5c0NhY2hlZCIsImdlblN0YXRpY0tleXMkMSIsIm9wdGltaXplIiwibWFya1N0YXRpYyQxIiwibWFya1N0YXRpY1Jvb3RzIiwibCQxIiwic3RhdGljSW5Gb3IiLCJzdGF0aWNSb290IiwiaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IiLCJmbkV4cFJFIiwiZm5JbnZva2VSRSIsInNpbXBsZVBhdGhSRSIsImVzYyIsInRhYiIsInNwYWNlIiwidXAiLCJkb3duIiwia2V5TmFtZXMiLCJnZW5HdWFyZCIsIm1vZGlmaWVyQ29kZSIsInN0b3AiLCJjdHJsIiwiYWx0IiwiZ2VuSGFuZGxlcnMiLCJzdGF0aWNIYW5kbGVycyIsImR5bmFtaWNIYW5kbGVycyIsImhhbmRsZXJDb2RlIiwiZ2VuSGFuZGxlciIsImlzTWV0aG9kUGF0aCIsImlzRnVuY3Rpb25FeHByZXNzaW9uIiwiaXNGdW5jdGlvbkludm9jYXRpb24iLCJnZW5Nb2RpZmllckNvZGUiLCJrZXlNb2RpZmllciIsImdlbktleUZpbHRlciIsImdlbkZpbHRlckNvZGUiLCJrZXlWYWwiLCJrZXlDb2RlIiwia2V5TmFtZSIsIndyYXBMaXN0ZW5lcnMiLCJiaW5kJDEiLCJ3cmFwRGF0YSIsImJhc2VEaXJlY3RpdmVzIiwiY2xvYWsiLCJDb2RlZ2VuU3RhdGUiLCJkYXRhR2VuRm5zIiwib25jZUlkIiwiZ2VuZXJhdGUiLCJhc3QiLCJnZW5FbGVtZW50Iiwic3RhdGljUHJvY2Vzc2VkIiwiZ2VuU3RhdGljIiwib25jZVByb2Nlc3NlZCIsImdlbk9uY2UiLCJmb3JQcm9jZXNzZWQiLCJnZW5Gb3IiLCJpZlByb2Nlc3NlZCIsImdlbklmIiwiZ2VuQ2hpbGRyZW4iLCJnZW5TbG90IiwiZ2VuQ29tcG9uZW50IiwiZ2VuRGF0YSQyIiwib3JpZ2luYWxQcmVTdGF0ZSIsImFsdEdlbiIsImFsdEVtcHR5IiwiZ2VuSWZDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImdlblRlcm5hcnlFeHAiLCJhbHRIZWxwZXIiLCJnZW5EaXJlY3RpdmVzIiwiZ2VuUHJvcHMiLCJnZW5TY29wZWRTbG90cyIsImdlbklubGluZVRlbXBsYXRlIiwiaGFzUnVudGltZSIsIm5lZWRSdW50aW1lIiwiZ2VuIiwiaW5saW5lUmVuZGVyRm5zIiwiY29udGFpbnNTbG90Q2hpbGQiLCJuZWVkc0tleSIsImdlbmVyYXRlZFNsb3RzIiwiZ2VuU2NvcGVkU2xvdCIsImlzTGVnYWN5U3ludGF4IiwicmV2ZXJzZVByb3h5IiwiY2hlY2tTa2lwIiwiYWx0R2VuRWxlbWVudCIsImFsdEdlbk5vZGUiLCJlbCQxIiwibm9ybWFsaXphdGlvblR5cGUkMSIsImdldE5vcm1hbGl6YXRpb25UeXBlIiwiZ2VuTm9kZSIsIm5lZWRzTm9ybWFsaXphdGlvbiIsImdlbkNvbW1lbnQiLCJnZW5UZXh0IiwidHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzIiwiYmluZCQkMSIsImNvbXBvbmVudE5hbWUiLCJzdGF0aWNQcm9wcyIsImR5bmFtaWNQcm9wcyIsInByb2hpYml0ZWRLZXl3b3JkUkUiLCJ1bmFyeU9wZXJhdG9yc1JFIiwic3RyaXBTdHJpbmdSRSIsImRldGVjdEVycm9ycyIsImNoZWNrTm9kZSIsImNoZWNrRm9yIiwiY2hlY2tFdmVudCIsImNoZWNrRXhwcmVzc2lvbiIsInN0aXBwZWQiLCJrZXl3b3JkTWF0Y2giLCJjaGVja0lkZW50aWZpZXIiLCJpZGVudCIsImdlbmVyYXRlQ29kZUZyYW1lIiwibGluZXMiLCJjb3VudCIsInJlcGVhdCQxIiwibGluZUxlbmd0aCIsInBhZCIsImxlbmd0aCQxIiwibWluIiwiY3JlYXRlRnVuY3Rpb24iLCJlcnJvcnMiLCJjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIiwiY29tcGlsZVRvRnVuY3Rpb25zIiwid2FybiQkMSIsImNvbXBpbGVkIiwidGlwcyIsImZuR2VuRXJyb3JzIiwiY3JlYXRlQ29tcGlsZXJDcmVhdG9yIiwiYmFzZUNvbXBpbGUiLCJjcmVhdGVDb21waWxlciIsImZpbmFsT3B0aW9ucyIsImxlYWRpbmdTcGFjZUxlbmd0aCIsImRpdiIsImdldFNob3VsZERlY29kZSIsImlkVG9UZW1wbGF0ZSIsIm1vdW50IiwiZ2V0T3V0ZXJIVE1MIiwib3V0ZXJIVE1MIiwiY29udGFpbmVyIiwiYXBwbHlNaXhpbiIsInZ1ZXhJbml0Iiwic3RvcmUiLCIkc3RvcmUiLCJkZXZ0b29sSG9vayIsImRldnRvb2xQbHVnaW4iLCJfZGV2dG9vbEhvb2siLCJ0YXJnZXRTdGF0ZSIsInN1YnNjcmliZSIsIm11dGF0aW9uIiwiZm9yRWFjaFZhbHVlIiwiTW9kdWxlIiwicmF3TW9kdWxlIiwicnVudGltZSIsIl9jaGlsZHJlbiIsIl9yYXdNb2R1bGUiLCJyYXdTdGF0ZSIsIm5hbWVzcGFjZWQiLCJhZGRDaGlsZCIsImdldENoaWxkIiwiYWN0aW9ucyIsIm11dGF0aW9ucyIsImdldHRlcnMiLCJmb3JFYWNoQ2hpbGQiLCJmb3JFYWNoR2V0dGVyIiwiZm9yRWFjaEFjdGlvbiIsImZvckVhY2hNdXRhdGlvbiIsIk1vZHVsZUNvbGxlY3Rpb24iLCJyYXdSb290TW9kdWxlIiwicmVnaXN0ZXIiLCJnZXROYW1lc3BhY2UiLCJ1cGRhdGUkMSIsImFzc2VydFJhd01vZHVsZSIsIm5ld01vZHVsZSIsInJhd0NoaWxkTW9kdWxlIiwidW5yZWdpc3RlciIsInRhcmdldE1vZHVsZSIsImZ1bmN0aW9uQXNzZXJ0IiwiZXhwZWN0ZWQiLCJvYmplY3RBc3NlcnQiLCJhc3NlcnRUeXBlcyIsImFzc2VydE9wdGlvbnMiLCJtYWtlQXNzZXJ0aW9uTWVzc2FnZSIsImJ1ZiIsIlN0b3JlIiwicGx1Z2lucyIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJkaXNwYXRjaCIsImNvbW1pdCIsImJvdW5kRGlzcGF0Y2giLCJwYXlsb2FkIiwiYm91bmRDb21taXQiLCJpbnN0YWxsTW9kdWxlIiwicmVzZXRTdG9yZVZNIiwidXNlRGV2dG9vbHMiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSIsIl92bSIsIiQkc3RhdGUiLCJfdHlwZSIsIl9wYXlsb2FkIiwiX29wdGlvbnMiLCJ1bmlmeU9iamVjdFN0eWxlIiwiZW50cnkiLCJfd2l0aENvbW1pdCIsImNvbW1pdEl0ZXJhdG9yIiwiYWN0aW9uIiwiYWZ0ZXIiLCJnZW5lcmljU3Vic2NyaWJlIiwic3Vic2NyaWJlQWN0aW9uIiwicmVnaXN0ZXJNb2R1bGUiLCJwcmVzZXJ2ZVN0YXRlIiwidW5yZWdpc3Rlck1vZHVsZSIsInBhcmVudFN0YXRlIiwiZ2V0TmVzdGVkU3RhdGUiLCJyZXNldFN0b3JlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJob3QiLCJvbGRWbSIsIndyYXBwZWRHZXR0ZXJzIiwiZW5hYmxlU3RyaWN0TW9kZSIsInJvb3RTdGF0ZSIsIm1vZHVsZU5hbWUiLCJsb2NhbCIsIm1ha2VMb2NhbENvbnRleHQiLCJuYW1lc3BhY2VkVHlwZSIsInJlZ2lzdGVyTXV0YXRpb24iLCJyZWdpc3RlckFjdGlvbiIsInJlZ2lzdGVyR2V0dGVyIiwibm9OYW1lc3BhY2UiLCJtYWtlTG9jYWxHZXR0ZXJzIiwiZ2V0dGVyc1Byb3h5Iiwic3BsaXRQb3MiLCJsb2NhbFR5cGUiLCJ3cmFwcGVkTXV0YXRpb25IYW5kbGVyIiwid3JhcHBlZEFjdGlvbkhhbmRsZXIiLCJyb290R2V0dGVycyIsInJhd0dldHRlciIsIndyYXBwZWRHZXR0ZXIiLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsIm5vcm1hbGl6ZU1hcCIsIm1hcHBlZFN0YXRlIiwiZ2V0TW9kdWxlQnlOYW1lc3BhY2UiLCJ2dWV4IiwibWFwTXV0YXRpb25zIiwibWFwcGVkTXV0YXRpb24iLCJtYXBHZXR0ZXJzIiwibWFwcGVkR2V0dGVyIiwibWFwQWN0aW9ucyIsIm1hcHBlZEFjdGlvbiIsImNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzIiwiaGVscGVyIiwiaW5kZXhfZXNtIiwiZyIsIkFwcCIsIkhvbWUiLCJDb2xsZWN0aW9uIiwiTGVhZGVyYm9hcmQiLCJTZXR0aW5ncyIsImJhc2VTdG9yZSIsImNhcmRzIiwic2V0TG9hZGluZyIsInNldENhcmRzIiwiZmV0Y2hDYXJkcyIsImdldFVzZXJDYXJkcyIsImNhcmQiLCJjb2xsZWN0ZWQiLCJWdWV4Il0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztR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O0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQUE7QUFBQTtBQUF1RjtBQUN2Rjs7O0FBR0E7QUFDMEY7QUFDMUYsZ0JBQWdCLDJHQUFVO0FBQzFCO0FBQ0EsRUFBRSxtRkFBTTtBQUNSLEVBQUUsNEZBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxJQUFJLEtBQVUsRUFBRSxZQWlCZjtBQUNEO0FBQ2UsZ0Y7Ozs7Ozs7Ozs7OztBQ3JDZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QgPyBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCkgOiAnZ2V0JztcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHV0aWxzLmZvckVhY2goWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ10sIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J10sIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnbWF4Q29udGVudExlbmd0aCcsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLCAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsXG4gICAgJ3NvY2tldFBhdGgnXG4gIF0sIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIC8vIE9ubHkgTm9kZS5KUyBoYXMgYSBwcm9jZXNzIHZhcmlhYmxlIHRoYXQgaXMgb2YgW1tDbGFzc11dIHByb2Nlc3NcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiZcbiAgICB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYXBwLWNvbnRlbnRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1jb2xsZWN0aW9uX19ib2R5XCI+XHJcbiAgICAgICAgICAgIDx0cmFuc2l0aW9uIG5hbWU9XCJmYWRlXCIgbW9kZT1cIm91dC1pblwiPlxyXG4gICAgICAgICAgICAgICAgPHJvdXRlci12aWV3Pjwvcm91dGVyLXZpZXc+XHJcbiAgICAgICAgICAgIDwvdHJhbnNpdGlvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8bmF2aWdhdGlvbj48L25hdmlnYXRpb24+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vY29tcG9uZW50cy9OYXZpZ2F0aW9uLnZ1ZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICBOYXZpZ2F0aW9uXHJcbiAgICB9LFxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XHJcbioge1xyXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbmh0bWwsXHJcbmJvZHkge1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQ6ICM2NjYzNzU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG5cdGhlaWdodDogMTAwJTtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cdG1hcmdpbjogMDtcclxuXHRwYWRkaW5nOiAwO1xyXG5cdHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4jYXBwIHtcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjIzLCAyMjMsIDIyMyk7XHJcblx0Ym94LXNoYWRvdzogMCAxMnB4IDE1cHggMCByZ2JhKDAsIDAsIDAsIC4yNCksIDAgMTdweCA1MHB4IDAgcmdiYSgwLCAwLCAwLCAuMTkpO1xyXG5cdGhlaWdodDogMTAwJTtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHRvdmVyZmxvdzogaGlkZGVuO1xyXG5cdHdpZHRoOiAxMDAlO1xyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xyXG4gICAgICAgIGhlaWdodDogNzMxcHg7XHJcbiAgICAgICAgd2lkdGg6IDQxMXB4O1xyXG4gICAgfVxyXG59XHJcblxyXG4uaGVhZGluZzEge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4uYXBwLWNvbnRlbnQge1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA3OHB4KTtcclxufVxyXG5cclxuLmNhcmQtY29sbGVjdGlvbiB7XHJcblx0Jl9fYm9keSB7XHJcblx0XHRkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgICAgIHBhZGRpbmc6IDAgMzBweDtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblx0XHR3aWR0aDogMTAwJTtcclxuXHR9XHJcbn1cclxuXHJcbi5mYWRlLWVudGVyLWFjdGl2ZSxcclxuLmZhZGUtbGVhdmUtYWN0aXZlIHtcclxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC41cyBlYXNlO1xyXG59XHJcblxyXG4uZmFkZS1lbnRlcixcclxuLmZhZGUtbGVhdmUtYWN0aXZlIHtcclxuICAgIG9wYWNpdHk6IDA7XHJcbn1cclxuPC9zdHlsZT5cclxuIiwiPHRlbXBsYXRlPlxyXG4gIDxkaXYgY2xhc3M9XCJjYXJkLWNvbnRhaW5lclwiPlxyXG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIiB2LWJpbmQ6Y2xhc3M9XCJ7IGZsaXBwZWQ6IHRoaXMuZmxpcHBlZCB9XCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkX19mcm9udFwiPlxyXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJjYXJkX19mcm9udF9mbGlwXCIgQGNsaWNrPVwiZmxpcENhcmRcIj5GbGlwPC9idXR0b24+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmRfX2Zyb250X2ltYWdlXCI+XHJcbiAgICAgICAgICA8aW1nXHJcbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcGljc3VtLnBob3Rvcy8zNTAvMzc1XCJcclxuICAgICAgICAgICAgYWx0PVwiaW1hZ2VcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImNhcmRfX2Zyb250X2ltYWdlX3NyY1wiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkX19mcm9udF9mb290ZXJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkX19mcm9udF9mb290ZXJfcmFyaXR5XCI+XHJcbiAgICAgICAgICAgIDxzcGFuPnJhcmU8L3NwYW4+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkX19mcm9udF9mb290ZXJfbmFtZVwiPlJvYmVydCB0aGUgQnJ1Y2UoZnJvbnQpPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZF9fYmFja1wiPlxyXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJjYXJkX19iYWNrX2ZsaXBcIiBAY2xpY2s9XCJmbGlwQ2FyZFwiPkZsaXA8L2J1dHRvbj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZF9fYmFja19pbmZvXCI+XHJcbiAgICAgICAgICA8aDE+Um9iZXJ0IHRoZSBCcnVjZTwvaDE+XHJcbiAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEN1bHBhXHJcbiAgICAgICAgICAgIGF0cXVlIHF1YWUgZW5pbSwgYWNjdXNhbXVzIHJlY3VzYW5kYWUgcGFyaWF0dXIuIFNpbnQgZG9sb3JlIGRpY3RhXHJcbiAgICAgICAgICAgIHF1b2QgdmVuaWFtIG5lbW8gbWFpb3JlcywgcmVpY2llbmRpcyBmdWdhIHJhdGlvbmUuIFNlcXVpIGRlbGVuaXRpXHJcbiAgICAgICAgICAgIG1heGltZSBleCBjdW0hXHJcbiAgICAgICAgICA8L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBkYXRhOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNhcmRDb250YWluZXI6IG51bGwsXHJcbiAgICAgIGlubmVyQ2FyZDogbnVsbCxcclxuICAgICAgY2FyZDogbnVsbCxcclxuXHJcbiAgICAgIGNvdW50ZXI6IDAsXHJcbiAgICAgIHVwZGF0ZVJhdGU6IDEsXHJcbiAgICAgIG1vdXNlOiB7XHJcbiAgICAgICAgX3g6IDAsXHJcbiAgICAgICAgX3k6IDAsXHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHBhcmVudEVsOiBudWxsLFxyXG4gICAgICBmbGlwcGVkOiBmYWxzZSxcclxuICAgICAgY2FuVGlsdDogdHJ1ZVxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBtb3VudGVkOiBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuY2FyZENvbnRhaW5lciA9IHRoaXMuJGVsO1xyXG4gICAgdGhpcy5pbm5lckNhcmQgPSB0aGlzLmNhcmRDb250YWluZXIucXVlcnlTZWxlY3RvcignLmNhcmQnKTtcclxuICAgIHRoaXMuY2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkJyk7XHJcbiAgICB0aGlzLmNhcmRDb250YWluZXIub25tb3VzZWVudGVyID0gdGhpcy5vbkVudGVyO1xyXG4gICAgdGhpcy5jYXJkQ29udGFpbmVyLm9ubW91c2VsZWF2ZSA9IHRoaXMub25MZWF2ZTtcclxuICAgIHRoaXMuY2FyZENvbnRhaW5lci5vbm1vdXNlbW92ZSA9IHRoaXMub25Nb3ZlO1xyXG4gICAgdGhpcy5zZXRNb3VzZU9yaWdpbih0aGlzLmNhcmRDb250YWluZXIpO1xyXG4gIH0sXHJcbiAgbWV0aG9kczoge1xyXG4gICAgb25FbnRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlUGVyc3BlY3RpdmUoZXZlbnQpO1xyXG4gICAgfSxcclxuICAgIG9uTGVhdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5jYW5UaWx0KSB7XHJcbiAgICAgICAgdGhpcy5pbm5lckNhcmQuc3R5bGUgPSAnJztcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGZsaXBDYXJkOiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5mbGlwcGVkID0gIXRoaXMuZmxpcHBlZDtcclxuICAgICAgdGhpcy5jYW5UaWx0ID0gZmFsc2U7XHJcbiAgICAgIGxldCBzdHlsZSA9IGByb3RhdGVYKDBkZWcpIHJvdGF0ZVkoJHt0aGlzLmZsaXBwZWQgPyAnLTE4MCcgOiAnMCd9ZGVnKWA7XHJcbiAgICAgIHRoaXMuZmxpcHBlZFxyXG4gICAgICAgID8gKHRoaXMuY2FyZENvbnRhaW5lci5zdHlsZS5wZXJzcGVjdGl2ZSA9ICc4MDBweCcpXHJcbiAgICAgICAgOiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jYW5UaWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jYXJkQ29udGFpbmVyLnN0eWxlLnBlcnNwZWN0aXZlID0gJzMwcHgnO1xyXG4gICAgICAgICAgfSwgNTAwKTtcclxuXHJcbiAgICAgIHRoaXMuY2FyZC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZTtcclxuICAgIH0sXHJcblxyXG4gICAgb25Nb3ZlOiBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICBpZiAodGhpcy50aW1lVXBkYXRlKCkgJiYgdGhpcy5jYW5UaWx0KSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQZXJzcGVjdGl2ZShldmVudCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB1cGRhdGVQZXJzcGVjdGl2ZTogZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgdGhpcy51cGRhdGVNb3VzZVBvc2l0aW9uKGV2ZW50KTtcclxuICAgICAgdGhpcy51cGRhdGVUcmFuc2Zvcm0oXHJcbiAgICAgICAgKHRoaXMubW91c2UueSAvIHRoaXMuaW5uZXJDYXJkLm9mZnNldEhlaWdodCAvIDIpLnRvRml4ZWQoMiksXHJcbiAgICAgICAgKHRoaXMubW91c2UueCAvIHRoaXMuaW5uZXJDYXJkLm9mZnNldFdpZHRoIC8gMikudG9GaXhlZCgyKVxyXG4gICAgICApO1xyXG4gICAgfSxcclxuICAgIHRpbWVVcGRhdGUoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNvdW50ZXIrKyAlIHRoaXMudXBkYXRlUmF0ZSA9PT0gMDtcclxuICAgIH0sXHJcbiAgICB1cGRhdGVNb3VzZVBvc2l0aW9uKGV2ZW50KSB7XHJcbiAgICAgIGxldCBlID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICB0aGlzLm1vdXNlLnggPSBlLmNsaWVudFggLSB0aGlzLl94O1xyXG4gICAgICB0aGlzLm1vdXNlLnkgPSAoZS5jbGllbnRZIC0gdGhpcy5feSkgKiAtMTtcclxuICAgIH0sXHJcbiAgICBzZXRNb3VzZU9yaWdpbihldmVudCkge1xyXG4gICAgICB0aGlzLl94ID0gZXZlbnQub2Zmc2V0TGVmdCArIE1hdGguZmxvb3IoZXZlbnQub2Zmc2V0V2lkdGggLyAyKTtcclxuICAgICAgdGhpcy5feSA9IGV2ZW50Lm9mZnNldFRvcCArIE1hdGguZmxvb3IoZXZlbnQub2Zmc2V0SGVpZ2h0IC8gMik7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlVHJhbnNmb3JtKHgsIHkpIHtcclxuICAgICAgaWYgKHRoaXMuZmxpcHBlZCkgcmV0dXJuO1xyXG4gICAgICBsZXQgc3R5bGUgPSBgcm90YXRlWCgke3h9ZGVnKSByb3RhdGVZKCR7eX1kZWcpYDtcclxuICAgICAgdGhpcy5pbm5lckNhcmQuc3R5bGUudHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgICAgIHRoaXMuaW5uZXJDYXJkLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHN0eWxlO1xyXG4gICAgICB0aGlzLmlubmVyQ2FyZC5zdHlsZS5tb3pUcmFuc2Zvcm0gPSBzdHlsZTtcclxuICAgICAgdGhpcy5pbm5lckNhcmQuc3R5bGUubXNUcmFuc2Zvcm0gPSBzdHlsZTtcclxuICAgICAgdGhpcy5pbm5lckNhcmQuc3R5bGUub1RyYW5zZm9ybSA9IHN0eWxlO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cclxuLmNhcmQtY29udGFpbmVyIHtcclxuICBwZXJzcGVjdGl2ZTogMzBweDtcclxuICBtYXJnaW46IDI1cHg7XHJcbn1cclxuLmNhcmQge1xyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjVzO1xyXG4gIGhlaWdodDogNDUwcHg7XHJcbiAgd2lkdGg6IDM1MHB4O1xyXG5cclxuICB0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xyXG4gIGJhY2tncm91bmQ6IHJnYigxMTksIDExNSwgMTkzKTtcclxuICBib3gtc2hhZG93OiAycHggMnB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjIpO1xyXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcclxuICAgIDBkZWcsXHJcbiAgICByZ2JhKDExOSwgMTE1LCAxOTMsIDEpIDAlLFxyXG4gICAgcmdiYSg5LCAzNiwgMTIxLCAxKSAxMiUsXHJcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODcxNTY4Njk1ODM3NzEpIDEwMCVcclxuICApO1xyXG5cclxuICAmX19mcm9udCxcclxuICAmX19iYWNrIHtcclxuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7XHJcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IFtpbWFnZV0gYXV0byBbZm9vdGVyXSAxZnI7XHJcbiAgICB6LWluZGV4OiAyO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgJl9mbGlwIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICByaWdodDogMDtcclxuICAgICAgdG9wOiAwO1xyXG4gICAgICBtYXJnaW46IDFyZW07XHJcbiAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICAgIHotaW5kZXg6IDEwO1xyXG4gICAgfVxyXG4gICAgJl9pbWFnZSB7XHJcbiAgICAgIGdyaWQtY29sdW1uOiAxO1xyXG4gICAgICBncmlkLXJvdzogaW1hZ2U7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cclxuICAgICAgJl9zcmMge1xyXG4gICAgICAgIG9iamVjdC1maXQ6IGNvbnRhaW47XHJcblxyXG4gICAgICAgIC8vIGNsaXAtcGF0aDogZWxsaXBzZSgzOSUgNDklIGF0IDUwJSA1MCUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmX2Zvb3RlciB7XHJcbiAgICAgIGdyaWQtcm93OiBmb290ZXI7XHJcbiAgICAgIGdyaWQtY29sdW1uOiAxO1xyXG4gICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xyXG4gICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XHJcbiAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogW3Jhcml0eV0gMWZyIFtuYW1lXSAzZnI7XHJcbiAgICAgICZfbmFtZSxcclxuICAgICAgJl9yYXJpdHkge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgfVxyXG4gICAgICAmX3Jhcml0eSB7XHJcbiAgICAgICAgbWFyZ2luOiAxcmVtO1xyXG4gICAgICAgIGhlaWdodDogNjAlO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAmX19iYWNrIHtcclxuICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoMTgwZGVnKTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAvLyBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBoMSB7XHJcbiAgICAgIG1hcmdpbjogM3JlbSAwIDNyZW0gMDtcclxuICAgICAgZm9udC1zaXplOiAzcmVtO1xyXG4gICAgfVxyXG4gICAgcCB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICBsaW5lLWhlaWdodDogMS4zcmVtO1xyXG4gICAgfVxyXG4gICAgJl9pbmZvIHtcclxuICAgIH1cclxuICB9XHJcbn1cclxuPC9zdHlsZT5cclxuIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImxlYWRlcmJvYXJkLWNhcmRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibGVhZGVyYm9hcmQtY2FyZF9fcG9zaXRpb25cIj57eyBkYXRhLnBvc2l0aW9uIH19PC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImxlYWRlcmJvYXJkLWNhcmRfX2NvbnRlbnRcIj5cclxuICAgICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPVwibGVhZGVyYm9hcmQtY2FyZF9faW1hZ2VcIiA6c3R5bGU9XCJbZGF0YS5wcm9maWxlSW1hZ2UgPyB7IGJhY2tncm91bmRJbWFnZTogJ3VybChyZXF1aXJlKGFzc2V0cy9maWxsLW11cnJheS5qcGcpKScgfSA6IHsgfV1cIj48L2Rpdj4gLS0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWFkZXJib2FyZC1jYXJkX19pbWFnZVwiIDpzdHlsZT1cIltkYXRhLnByb2ZpbGVJbWFnZSA/IHsgYmFja2dyb3VuZEltYWdlOiAndXJsKCcrIHJlcXVpcmUoYC4uL2Fzc2V0cy8ke2RhdGEucHJvZmlsZUltYWdlfWApICsgJyknIH0gOiB7IH1dXCI+PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWFkZXJib2FyZC1jYXJkX191c2VybmFtZVwiPnt7IGRhdGEudXNlcm5hbWUgfX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxlYWRlcmJvYXJkLWNhcmRfX2NhcmRzLWNvbGxlY3RlZFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsZWFkZXJib2FyZC1jYXJkX19jYXJkcy1jb2xsZWN0ZWRfX251bWJlclwiPnt7IGRhdGEuY2FyZHNDb2xsZWN0ZWQgfX08L3NwYW4+PGJyPlxyXG4gICAgICAgICAgICAgICAgY2FyZHM8YnI+XHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0ZWRcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxyXG4ubGVhZGVyYm9hcmQtY2FyZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDlkOWQ5O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG5cclxuICAgICZfX3Bvc2l0aW9uIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk2OTY5O1xyXG4gICAgICAgIGNvbG9yOiAjZDlkOWQ5O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgcGFkZGluZzogN3B4IDE1cHggN3B4IDdweDtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiAyNnB4O1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fY29udGVudCB7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcblxyXG4gICAgJl9faW1hZ2Uge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvZGVmYXVsdC1wcm9maWxlLmpwZyk7XHJcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xyXG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgICAgICAgaGVpZ2h0OiA3MHB4O1xyXG4gICAgICAgIHdpZHRoOiA3MHB4O1xyXG4gICAgfVxyXG5cclxuICAgICZfX3VzZXJuYW1lIHtcclxuICAgICAgICBmb250LXNpemU6IDEuNWVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgfVxyXG5cclxuICAgICZfX2NhcmRzLWNvbGxlY3RlZCB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgICAgICAmX19udW1iZXIge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNWVtO1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuPC9zdHlsZT5cclxuIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdj5cclxuICAgICAgICA8aDEgY2xhc3M9XCJoZWFkaW5nMVwiPllvdXIgY29sbGVjdGlvbjwvaDE+XHJcbiAgICAgICAgPGNhcmQ+PC9jYXJkPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQgQ2FyZCBmcm9tICcuLi9jb21wb25lbnRzL0NhcmQudnVlJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgY29tcG9uZW50czogeyBDYXJkIH1cclxufVxyXG48L3NjcmlwdD5cclxuIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImxlYWRlcmJvYXJkXCI+XHJcbiAgICAgICAgPGgxIGNsYXNzPVwiaGVhZGluZzFcIj5MZWFkZXJib2FyZDwvaDE+XHJcbiAgICAgICAgPHRyYW5zaXRpb24tZ3JvdXBcclxuICAgICAgICAgICAgdGFnPVwiZGl2XCJcclxuICAgICAgICAgICAgbmFtZT1cInNsaWRlLWluXCJcclxuICAgICAgICAgICAgOnN0eWxlPVwieyAnLS10b3RhbCc6IGxlYWRlcmJvYXJkRGF0YS5sZW5ndGggfVwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGxlYWRlcmJvYXJkRGF0YVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpzdHlsZT1cInsnLS1pJzogaW5kZXh9XCJcclxuICAgICAgICAgICAgICAgICAgICB2LWlmPVwic2hvd0l0ZW1zXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8bGVhZGVyYm9hcmQtY2FyZCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgOmRhdGE9XCJpdGVtXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgOmRhdGEtaW5kZXg9XCJpbmRleFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibGVhZGVyYm9hcmQtY2FyZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgPjwvbGVhZGVyYm9hcmQtY2FyZD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgIDwvdHJhbnNpdGlvbi1ncm91cD5cclxuICAgICAgICA8aW1nIHNyYz1cIlwiIGFsdD1cIlwiPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQgTGVhZGVyYm9hcmRDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvTGVhZGVyYm9hcmRDYXJkLnZ1ZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGNvbXBvbmVudHM6IHsgTGVhZGVyYm9hcmRDYXJkIH0sXHJcbiAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBcdHJldHVybiB7XHJcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkRGF0YTogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2ZpbGVJbWFnZTogJ2ZpbGwtbXVycmF5LmpwZycsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICcxc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnVmVua21hbicsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZHNDb2xsZWN0ZWQ6IDEyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnMm5kJyxcclxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogJ0N5Y2xvbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRzQ29sbGVjdGVkOiA5XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2ZpbGVJbWFnZTogJ3BsYWNlLWNhZ2UuanBnJyxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJzNyZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdEb29tQWlyJyxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkc0NvbGxlY3RlZDogN1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJzR0aCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdCaXRGdW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRzQ29sbGVjdGVkOiA0XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2ZpbGVJbWFnZTogJ3BsYWNlLWtlYW51LnN2ZycsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICc1cmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnSm9obldpY2snLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRzQ29sbGVjdGVkOiA3XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnNnRoJyxcclxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogJ0JpdEZ1bicsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZHNDb2xsZWN0ZWQ6IDRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICc3dGgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnQ2hlZXNlY2FrZScsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZHNDb2xsZWN0ZWQ6IDFcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHNob3dJdGVtczogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsgdGhpcy5zaG93SXRlbXMgPSB0cnVlIH0pXHJcbiAgICB9LFxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4ubGVhZGVyYm9hcmQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5zbGlkZS1pbiB7XHJcbiAgICAmLW1vdmUge1xyXG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMXMgbGluZWFyLCB0cmFuc2Zvcm0gMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgJi1sZWF2ZS1hY3RpdmUge1xyXG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjRzIGxpbmVhciwgdHJhbnNmb3JtIC40cyBjdWJpYy1iZXppZXIoLjUsIDAsIC43LCAuNCk7XHJcbiAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogY2FsYyggMC4zcyAqICh2YXIoLS10b3RhbCkgLSB2YXIoLS1pKSkgKTtcclxuICAgIH1cclxuXHJcbiAgICAmLWVudGVyLWFjdGl2ZSB7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAxcyBsaW5lYXIsIHRyYW5zZm9ybSAxLjVzIGN1YmljLWJlemllciguMiwgLjUsIC4xLCAxKTtcclxuICAgICAgICB0cmFuc2l0aW9uLWRlbGF5OiBjYWxjKCAwLjNzICogdmFyKC0taSkgKTtcclxuICAgIH1cclxuXHJcbiAgICAmLWVudGVyLFxyXG4gICAgJi1sZWF2ZS10byB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgIH1cclxuXHJcbiAgICAmLWVudGVyIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoNWVtKTtcclxuICAgIH1cclxuXHJcbiAgICAmLWxlYXZlLXRvIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoM2VtKTtcclxuICAgIH1cclxufVxyXG48L3N0eWxlPiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5odG1sLFxcbmJvZHkge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQ6ICM2NjYzNzU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbiNhcHAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RmZGZkZjtcXG4gIGJveC1zaGFkb3c6IDAgMTJweCAxNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjI0KSwgMCAxN3B4IDUwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTkpO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4jYXBwIHtcXG4gICAgaGVpZ2h0OiA3MzFweDtcXG4gICAgd2lkdGg6IDQxMXB4O1xcbn1cXG59XFxuLmhlYWRpbmcxIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLmFwcC1jb250ZW50IHtcXG4gIGhlaWdodDogY2FsYygxMDAlIC0gNzhweCk7XFxufVxcbi5jYXJkLWNvbGxlY3Rpb25fX2JvZHkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICBwYWRkaW5nOiAwIDMwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLmZhZGUtZW50ZXItYWN0aXZlLFxcbi5mYWRlLWxlYXZlLWFjdGl2ZSB7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgZWFzZTtcXG59XFxuLmZhZGUtZW50ZXIsXFxuLmZhZGUtbGVhdmUtYWN0aXZlIHtcXG4gIG9wYWNpdHk6IDA7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jYXJkLWNvbnRhaW5lciB7XFxuICBwZXJzcGVjdGl2ZTogMzBweDtcXG4gIG1hcmdpbjogMjVweDtcXG59XFxuLmNhcmQge1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNXM7XFxuICBoZWlnaHQ6IDQ1MHB4O1xcbiAgd2lkdGg6IDM1MHB4O1xcbiAgdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYmFja2dyb3VuZDogIzc3NzNjMTtcXG4gIGJveC1zaGFkb3c6IDJweCAycHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMGRlZywgIzc3NzNjMSAwJSwgIzA5MjQ3OSAxMiUsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44NzE1Njg2OTU4KSAxMDAlKTtcXG59XFxuLmNhcmRfX2Zyb250LCAuY2FyZF9fYmFjayB7XFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBbaW1hZ2VdIGF1dG8gW2Zvb3Rlcl0gMWZyO1xcbiAgei1pbmRleDogMjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLmNhcmRfX2Zyb250X2ZsaXAsIC5jYXJkX19iYWNrX2ZsaXAge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IDA7XFxuICBtYXJnaW46IDFyZW07XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgei1pbmRleDogMTA7XFxufVxcbi5jYXJkX19mcm9udF9pbWFnZSwgLmNhcmRfX2JhY2tfaW1hZ2Uge1xcbiAgZ3JpZC1jb2x1bW46IDE7XFxuICBncmlkLXJvdzogaW1hZ2U7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi5jYXJkX19mcm9udF9pbWFnZV9zcmMsIC5jYXJkX19iYWNrX2ltYWdlX3NyYyB7XFxuICBvYmplY3QtZml0OiBjb250YWluO1xcbn1cXG4uY2FyZF9fZnJvbnRfZm9vdGVyLCAuY2FyZF9fYmFja19mb290ZXIge1xcbiAgZ3JpZC1yb3c6IGZvb3RlcjtcXG4gIGdyaWQtY29sdW1uOiAxO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IFtyYXJpdHldIDFmciBbbmFtZV0gM2ZyO1xcbn1cXG4uY2FyZF9fZnJvbnRfZm9vdGVyX25hbWUsIC5jYXJkX19mcm9udF9mb290ZXJfcmFyaXR5LCAuY2FyZF9fYmFja19mb290ZXJfbmFtZSwgLmNhcmRfX2JhY2tfZm9vdGVyX3Jhcml0eSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4uY2FyZF9fZnJvbnRfZm9vdGVyX3Jhcml0eSwgLmNhcmRfX2JhY2tfZm9vdGVyX3Jhcml0eSB7XFxuICBtYXJnaW46IDFyZW07XFxuICBoZWlnaHQ6IDYwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTtcXG59XFxuLmNhcmRfX2JhY2sge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIHRyYW5zZm9ybTogcm90YXRlWSgxODBkZWcpO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG4uY2FyZF9fYmFjayBoMSB7XFxuICBtYXJnaW46IDNyZW0gMCAzcmVtIDA7XFxuICBmb250LXNpemU6IDNyZW07XFxufVxcbi5jYXJkX19iYWNrIHAge1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxuICBsaW5lLWhlaWdodDogMS4zcmVtO1xcbn1cIiwgXCJcIl0pO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gSW1wb3J0c1xudmFyIGdldFVybCA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMF9fXyA9IGdldFVybChyZXF1aXJlKFwiLi4vYXNzZXRzL2RlZmF1bHQtcHJvZmlsZS5qcGdcIikpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubGVhZGVyYm9hcmQtY2FyZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDlkOWQ5O1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubGVhZGVyYm9hcmQtY2FyZF9fcG9zaXRpb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzY5Njk2OTtcXG4gIGNvbG9yOiAjZDlkOWQ5O1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcGFkZGluZzogN3B4IDE1cHggN3B4IDdweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMjZweDtcXG4gIGxlZnQ6IDA7XFxufVxcbi5sZWFkZXJib2FyZC1jYXJkX19jb250ZW50IHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5sZWFkZXJib2FyZC1jYXJkX19pbWFnZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMF9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBoZWlnaHQ6IDcwcHg7XFxuICB3aWR0aDogNzBweDtcXG59XFxuLmxlYWRlcmJvYXJkLWNhcmRfX3VzZXJuYW1lIHtcXG4gIGZvbnQtc2l6ZTogMS41ZW07XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuLmxlYWRlcmJvYXJkLWNhcmRfX2NhcmRzLWNvbGxlY3RlZCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5sZWFkZXJib2FyZC1jYXJkX19jYXJkcy1jb2xsZWN0ZWRfX251bWJlciB7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5uYXZpZ2F0aW9uW2RhdGEtdi04MTQ0MGI3OF0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubmF2aWdhdGlvbl9faXRlbVtkYXRhLXYtODE0NDBiNzhdIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNDNkM2QzY7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjMDAwO1xcbiAgY29sb3I6ICNmZmY7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiAzMHB4IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB3aWR0aDogY2FsYygxMDAlIC8gNCk7XFxufVxcbi5uYXZpZ2F0aW9uX19pdGVtW2RhdGEtdi04MTQ0MGI3OF06bGFzdC1jaGlsZCB7XFxuICBib3JkZXItcmlnaHQ6IG5vbmU7XFxufVxcbi5uYXZpZ2F0aW9uX19pdGVtLnJvdXRlci1saW5rLWV4YWN0LWFjdGl2ZVtkYXRhLXYtODE0NDBiNzhdLCAubmF2aWdhdGlvbl9faXRlbVtkYXRhLXYtODE0NDBiNzhdOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2OTY5Njk7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5sZWFkZXJib2FyZFtkYXRhLXYtYzdmZDBlOWFdIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uc2xpZGUtaW4tbW92ZVtkYXRhLXYtYzdmZDBlOWFdIHtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMXMgbGluZWFyLCB0cmFuc2Zvcm0gMXMgZWFzZS1pbi1vdXQ7XFxufVxcbi5zbGlkZS1pbi1sZWF2ZS1hY3RpdmVbZGF0YS12LWM3ZmQwZTlhXSB7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNHMgbGluZWFyLCB0cmFuc2Zvcm0gMC40cyBjdWJpYy1iZXppZXIoMC41LCAwLCAwLjcsIDAuNCk7XFxuICB0cmFuc2l0aW9uLWRlbGF5OiBjYWxjKCAwLjNzICogKHZhcigtLXRvdGFsKSAtIHZhcigtLWkpKSApO1xcbn1cXG4uc2xpZGUtaW4tZW50ZXItYWN0aXZlW2RhdGEtdi1jN2ZkMGU5YV0ge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxcyBsaW5lYXIsIHRyYW5zZm9ybSAxLjVzIGN1YmljLWJlemllcigwLjIsIDAuNSwgMC4xLCAxKTtcXG4gIHRyYW5zaXRpb24tZGVsYXk6IGNhbGMoIDAuM3MgKiB2YXIoLS1pKSApO1xcbn1cXG4uc2xpZGUtaW4tZW50ZXJbZGF0YS12LWM3ZmQwZTlhXSwgLnNsaWRlLWluLWxlYXZlLXRvW2RhdGEtdi1jN2ZkMGU5YV0ge1xcbiAgb3BhY2l0eTogMDtcXG59XFxuLnNsaWRlLWluLWVudGVyW2RhdGEtdi1jN2ZkMGU5YV0ge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDVlbSk7XFxufVxcbi5zbGlkZS1pbi1sZWF2ZS10b1tkYXRhLXYtYzdmZDBlOWFdIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzZW0pO1xcbn1cIiwgXCJcIl0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCJ7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbX2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIihcIi5jb25jYXQoaXRlbVsyXSwgXCIpIGFuZCAoXCIpLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCkuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBuZWVkUXVvdGVzKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cbiAgdXJsID0gdXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybDtcblxuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgbmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJyksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ODE0NDBiNzgmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YzdmZDBlOWEmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucykge1xuICB2YXIgc3R5bGVzID0gW107XG4gIHZhciBuZXdTdHlsZXMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNzcyA9IGl0ZW1bMV07XG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXTtcbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXTtcbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9O1xuXG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHBhcnRzOiBbcGFydF1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG4gICAgdmFyIGogPSAwO1xuXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKys7XG5cbiAgICAgIGZvciAoOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW107XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICByZWZzOiAxLFxuICAgICAgICBwYXJ0czogcGFydHNcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBvcHRpb25zLmF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5hdHRyaWJ1dGVzID0gdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgPyBvcHRpb25zLmF0dHJpYnV0ZXMgOiB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuICAgICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICAgIGRvbVN0eWxlLnJlZnMtLTtcbiAgICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICB2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgICAgYWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbWF5UmVtb3ZlLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9kb21TdHlsZSA9IG1heVJlbW92ZVtfaV07XG5cbiAgICAgIGlmIChfZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9kb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIF9kb21TdHlsZS5wYXJ0c1tqXSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW19kb21TdHlsZS5pZF07XG4gICAgICB9XG4gICAgfVxuICB9O1xufTsiLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7IHN0YXRpY0NsYXNzOiBcImFwcC1jb250ZW50XCIgfSxcbiAgICBbXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjYXJkLWNvbGxlY3Rpb25fX2JvZHlcIiB9LFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcInRyYW5zaXRpb25cIixcbiAgICAgICAgICAgIHsgYXR0cnM6IHsgbmFtZTogXCJmYWRlXCIsIG1vZGU6IFwib3V0LWluXCIgfSB9LFxuICAgICAgICAgICAgW19jKFwicm91dGVyLXZpZXdcIildLFxuICAgICAgICAgICAgMVxuICAgICAgICAgIClcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIm5hdmlnYXRpb25cIilcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkLWNvbnRhaW5lclwiIH0sIFtcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmRcIiwgY2xhc3M6IHsgZmxpcHBlZDogdGhpcy5mbGlwcGVkIH0gfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkX19mcm9udFwiIH0sIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNhcmRfX2Zyb250X2ZsaXBcIiwgb246IHsgY2xpY2s6IF92bS5mbGlwQ2FyZCB9IH0sXG4gICAgICAgICAgW192bS5fdihcIkZsaXBcIildXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgwKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX3ZtLl9tKDEpXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmRfX2JhY2tcIiB9LCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjYXJkX19iYWNrX2ZsaXBcIiwgb246IHsgY2xpY2s6IF92bS5mbGlwQ2FyZCB9IH0sXG4gICAgICAgICAgW192bS5fdihcIkZsaXBcIildXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgyKVxuICAgICAgXSlcbiAgICBdKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkX19mcm9udF9pbWFnZVwiIH0sIFtcbiAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwiY2FyZF9fZnJvbnRfaW1hZ2Vfc3JjXCIsXG4gICAgICAgIGF0dHJzOiB7IHNyYzogXCJodHRwczovL3BpY3N1bS5waG90b3MvMzUwLzM3NVwiLCBhbHQ6IFwiaW1hZ2VcIiB9XG4gICAgICB9KVxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZF9fZnJvbnRfZm9vdGVyXCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkX19mcm9udF9mb290ZXJfcmFyaXR5XCIgfSwgW1xuICAgICAgICBfYyhcInNwYW5cIiwgW192bS5fdihcInJhcmVcIildKVxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkX19mcm9udF9mb290ZXJfbmFtZVwiIH0sIFtcbiAgICAgICAgX3ZtLl92KFwiUm9iZXJ0IHRoZSBCcnVjZShmcm9udClcIilcbiAgICAgIF0pXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkX19iYWNrX2luZm9cIiB9LCBbXG4gICAgICBfYyhcImgxXCIsIFtfdm0uX3YoXCJSb2JlcnQgdGhlIEJydWNlXCIpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJwXCIsIFtcbiAgICAgICAgX3ZtLl92KFxuICAgICAgICAgIFwiXFxuICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBDdWxwYVxcbiAgICAgICAgICBhdHF1ZSBxdWFlIGVuaW0sIGFjY3VzYW11cyByZWN1c2FuZGFlIHBhcmlhdHVyLiBTaW50IGRvbG9yZSBkaWN0YVxcbiAgICAgICAgICBxdW9kIHZlbmlhbSBuZW1vIG1haW9yZXMsIHJlaWNpZW5kaXMgZnVnYSByYXRpb25lLiBTZXF1aSBkZWxlbml0aVxcbiAgICAgICAgICBtYXhpbWUgZXggY3VtIVxcbiAgICAgICAgXCJcbiAgICAgICAgKVxuICAgICAgXSlcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsZWFkZXJib2FyZC1jYXJkXCIgfSwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGVhZGVyYm9hcmQtY2FyZF9fcG9zaXRpb25cIiB9LCBbXG4gICAgICBfdm0uX3YoX3ZtLl9zKF92bS5kYXRhLnBvc2l0aW9uKSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGVhZGVyYm9hcmQtY2FyZF9fY29udGVudFwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwibGVhZGVyYm9hcmQtY2FyZF9faW1hZ2VcIixcbiAgICAgICAgc3R5bGU6IFtcbiAgICAgICAgICBfdm0uZGF0YS5wcm9maWxlSW1hZ2VcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTpcbiAgICAgICAgICAgICAgICAgIFwidXJsKFwiICsgcmVxdWlyZShcIi4uL2Fzc2V0cy9cIiArIF92bS5kYXRhLnByb2ZpbGVJbWFnZSkgKyBcIilcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHt9XG4gICAgICAgIF1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGVhZGVyYm9hcmQtY2FyZF9fdXNlcm5hbWVcIiB9LCBbXG4gICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmRhdGEudXNlcm5hbWUpKVxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsZWFkZXJib2FyZC1jYXJkX19jYXJkcy1jb2xsZWN0ZWRcIiB9LCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibGVhZGVyYm9hcmQtY2FyZF9fY2FyZHMtY29sbGVjdGVkX19udW1iZXJcIiB9LFxuICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5kYXRhLmNhcmRzQ29sbGVjdGVkKSldXG4gICAgICAgICksXG4gICAgICAgIF9jKFwiYnJcIiksXG4gICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgICAgIGNhcmRzXCIpLFxuICAgICAgICBfYyhcImJyXCIpLFxuICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgICAgICBjb2xsZWN0ZWRcXG4gICAgICAgIFwiKVxuICAgICAgXSlcbiAgICBdKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7IHN0YXRpY0NsYXNzOiBcIm5hdmlnYXRpb25cIiB9LFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcInJvdXRlci1saW5rXCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibmF2aWdhdGlvbl9faXRlbVwiLCBhdHRyczogeyB0bzogXCIvXCIgfSB9LFxuICAgICAgICBbX3ZtLl92KFwiSG9tZVwiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwicm91dGVyLWxpbmtcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJuYXZpZ2F0aW9uX19pdGVtXCIsIGF0dHJzOiB7IHRvOiBcIi9jb2xsZWN0aW9uXCIgfSB9LFxuICAgICAgICBbX3ZtLl92KFwiQ29sbGVjdGlvblwiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwicm91dGVyLWxpbmtcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJuYXZpZ2F0aW9uX19pdGVtXCIsIGF0dHJzOiB7IHRvOiBcIi9sZWFkZXJib2FyZFwiIH0gfSxcbiAgICAgICAgW192bS5fdihcIkxlYWRlcmJvYXJkXCIpXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJyb3V0ZXItbGlua1wiLFxuICAgICAgICB7IHN0YXRpY0NsYXNzOiBcIm5hdmlnYXRpb25fX2l0ZW1cIiwgYXR0cnM6IHsgdG86IFwiL3NldHRpbmdzXCIgfSB9LFxuICAgICAgICBbX3ZtLl92KFwiU2V0dGluZ3NcIildXG4gICAgICApXG4gICAgXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgW1xuICAgICAgX2MoXCJoMVwiLCB7IHN0YXRpY0NsYXNzOiBcImhlYWRpbmcxXCIgfSwgW192bS5fdihcIllvdXIgY29sbGVjdGlvblwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiY2FyZFwiKVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImgxXCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGluZzFcIiB9LCBbX3ZtLl92KFwiV2VsY29tZSBIb21lXCIpXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJsZWFkZXJib2FyZFwiIH0sXG4gICAgW1xuICAgICAgX2MoXCJoMVwiLCB7IHN0YXRpY0NsYXNzOiBcImhlYWRpbmcxXCIgfSwgW192bS5fdihcIkxlYWRlcmJvYXJkXCIpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwidHJhbnNpdGlvbi1ncm91cFwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IHsgXCItLXRvdGFsXCI6IF92bS5sZWFkZXJib2FyZERhdGEubGVuZ3RoIH0sXG4gICAgICAgICAgYXR0cnM6IHsgdGFnOiBcImRpdlwiLCBuYW1lOiBcInNsaWRlLWluXCIgfVxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgX3ZtLl9sKF92bS5sZWFkZXJib2FyZERhdGEsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICBfdm0uc2hvd0l0ZW1zXG4gICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6IGluZGV4LCBzdHlsZTogeyBcIi0taVwiOiBpbmRleCB9IH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImxlYWRlcmJvYXJkLWNhcmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibGVhZGVyYm9hcmQtY2FyZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZGF0YTogaXRlbSwgXCJkYXRhLWluZGV4XCI6IGluZGV4IH1cbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0pXG4gICAgICAgIF0sXG4gICAgICAgIDJcbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJpbWdcIiwgeyBhdHRyczogeyBzcmM6IFwiXCIsIGFsdDogXCJcIiB9IH0pXG4gICAgXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiaDFcIiwgeyBzdGF0aWNDbGFzczogXCJoZWFkaW5nMVwiIH0sIFtfdm0uX3YoXCJTZXR0aW5nc1wiKV0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsIi8qIVxuICAqIHZ1ZS1yb3V0ZXIgdjMuMS4zXG4gICogKGMpIDIwMTkgRXZhbiBZb3VcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cbi8qICAqL1xuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcigoXCJbdnVlLXJvdXRlcl0gXCIgKyBtZXNzYWdlKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuIChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmRpdGlvbikge1xuICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4oKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IgKGVycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVycikuaW5kZXhPZignRXJyb3InKSA+IC0xXG59XG5cbmZ1bmN0aW9uIGlzRXh0ZW5kZWRFcnJvciAoY29uc3RydWN0b3IsIGVycikge1xuICByZXR1cm4gKFxuICAgIGVyciBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yIHx8XG4gICAgLy8gX25hbWUgaXMgdG8gc3VwcG9ydCBJRTkgdG9vXG4gICAgKGVyciAmJiAoZXJyLm5hbWUgPT09IGNvbnN0cnVjdG9yLm5hbWUgfHwgZXJyLl9uYW1lID09PSBjb25zdHJ1Y3Rvci5fbmFtZSkpXG4gIClcbn1cblxuZnVuY3Rpb24gZXh0ZW5kIChhLCBiKSB7XG4gIGZvciAodmFyIGtleSBpbiBiKSB7XG4gICAgYVtrZXldID0gYltrZXldO1xuICB9XG4gIHJldHVybiBhXG59XG5cbnZhciBWaWV3ID0ge1xuICBuYW1lOiAnUm91dGVyVmlldycsXG4gIGZ1bmN0aW9uYWw6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoXywgcmVmKSB7XG4gICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcbiAgICB2YXIgcGFyZW50ID0gcmVmLnBhcmVudDtcbiAgICB2YXIgZGF0YSA9IHJlZi5kYXRhO1xuXG4gICAgLy8gdXNlZCBieSBkZXZ0b29scyB0byBkaXNwbGF5IGEgcm91dGVyLXZpZXcgYmFkZ2VcbiAgICBkYXRhLnJvdXRlclZpZXcgPSB0cnVlO1xuXG4gICAgLy8gZGlyZWN0bHkgdXNlIHBhcmVudCBjb250ZXh0J3MgY3JlYXRlRWxlbWVudCgpIGZ1bmN0aW9uXG4gICAgLy8gc28gdGhhdCBjb21wb25lbnRzIHJlbmRlcmVkIGJ5IHJvdXRlci12aWV3IGNhbiByZXNvbHZlIG5hbWVkIHNsb3RzXG4gICAgdmFyIGggPSBwYXJlbnQuJGNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIHZhciByb3V0ZSA9IHBhcmVudC4kcm91dGU7XG4gICAgdmFyIGNhY2hlID0gcGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgfHwgKHBhcmVudC5fcm91dGVyVmlld0NhY2hlID0ge30pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGN1cnJlbnQgdmlldyBkZXB0aCwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlIHRyZWVcbiAgICAvLyBoYXMgYmVlbiB0b2dnbGVkIGluYWN0aXZlIGJ1dCBrZXB0LWFsaXZlLlxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIGluYWN0aXZlID0gZmFsc2U7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX3JvdXRlclJvb3QgIT09IHBhcmVudCkge1xuICAgICAgdmFyIHZub2RlRGF0YSA9IHBhcmVudC4kdm5vZGUgJiYgcGFyZW50LiR2bm9kZS5kYXRhO1xuICAgICAgaWYgKHZub2RlRGF0YSkge1xuICAgICAgICBpZiAodm5vZGVEYXRhLnJvdXRlclZpZXcpIHtcbiAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2bm9kZURhdGEua2VlcEFsaXZlICYmIHBhcmVudC5faW5hY3RpdmUpIHtcbiAgICAgICAgICBpbmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBkYXRhLnJvdXRlclZpZXdEZXB0aCA9IGRlcHRoO1xuXG4gICAgLy8gcmVuZGVyIHByZXZpb3VzIHZpZXcgaWYgdGhlIHRyZWUgaXMgaW5hY3RpdmUgYW5kIGtlcHQtYWxpdmVcbiAgICBpZiAoaW5hY3RpdmUpIHtcbiAgICAgIHJldHVybiBoKGNhY2hlW25hbWVdLCBkYXRhLCBjaGlsZHJlbilcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZCA9IHJvdXRlLm1hdGNoZWRbZGVwdGhdO1xuICAgIC8vIHJlbmRlciBlbXB0eSBub2RlIGlmIG5vIG1hdGNoZWQgcm91dGVcbiAgICBpZiAoIW1hdGNoZWQpIHtcbiAgICAgIGNhY2hlW25hbWVdID0gbnVsbDtcbiAgICAgIHJldHVybiBoKClcbiAgICB9XG5cbiAgICB2YXIgY29tcG9uZW50ID0gY2FjaGVbbmFtZV0gPSBtYXRjaGVkLmNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAvLyBhdHRhY2ggaW5zdGFuY2UgcmVnaXN0cmF0aW9uIGhvb2tcbiAgICAvLyB0aGlzIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBpbnN0YW5jZSdzIGluamVjdGVkIGxpZmVjeWNsZSBob29rc1xuICAgIGRhdGEucmVnaXN0ZXJSb3V0ZUluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCB2YWwpIHtcbiAgICAgIC8vIHZhbCBjb3VsZCBiZSB1bmRlZmluZWQgZm9yIHVucmVnaXN0cmF0aW9uXG4gICAgICB2YXIgY3VycmVudCA9IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdO1xuICAgICAgaWYgKFxuICAgICAgICAodmFsICYmIGN1cnJlbnQgIT09IHZtKSB8fFxuICAgICAgICAoIXZhbCAmJiBjdXJyZW50ID09PSB2bSlcbiAgICAgICkge1xuICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbHNvIHJlZ2lzdGVyIGluc3RhbmNlIGluIHByZXBhdGNoIGhvb2tcbiAgICAvLyBpbiBjYXNlIHRoZSBzYW1lIGNvbXBvbmVudCBpbnN0YW5jZSBpcyByZXVzZWQgYWNyb3NzIGRpZmZlcmVudCByb3V0ZXNcbiAgICA7KGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pKS5wcmVwYXRjaCA9IGZ1bmN0aW9uIChfLCB2bm9kZSkge1xuICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW5zdGFuY2UgaW4gaW5pdCBob29rXG4gICAgLy8gaW4gY2FzZSBrZXB0LWFsaXZlIGNvbXBvbmVudCBiZSBhY3RpdmVkIHdoZW4gcm91dGVzIGNoYW5nZWRcbiAgICBkYXRhLmhvb2suaW5pdCA9IGZ1bmN0aW9uICh2bm9kZSkge1xuICAgICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlICYmXG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICE9PSBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXVxuICAgICAgKSB7XG4gICAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHJlc29sdmUgcHJvcHNcbiAgICB2YXIgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gcmVzb2x2ZVByb3BzKHJvdXRlLCBtYXRjaGVkLnByb3BzICYmIG1hdGNoZWQucHJvcHNbbmFtZV0pO1xuICAgIGlmIChwcm9wc1RvUGFzcykge1xuICAgICAgLy8gY2xvbmUgdG8gcHJldmVudCBtdXRhdGlvblxuICAgICAgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gZXh0ZW5kKHt9LCBwcm9wc1RvUGFzcyk7XG4gICAgICAvLyBwYXNzIG5vbi1kZWNsYXJlZCBwcm9wcyBhcyBhdHRyc1xuICAgICAgdmFyIGF0dHJzID0gZGF0YS5hdHRycyA9IGRhdGEuYXR0cnMgfHwge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHNUb1Bhc3MpIHtcbiAgICAgICAgaWYgKCFjb21wb25lbnQucHJvcHMgfHwgIShrZXkgaW4gY29tcG9uZW50LnByb3BzKSkge1xuICAgICAgICAgIGF0dHJzW2tleV0gPSBwcm9wc1RvUGFzc1trZXldO1xuICAgICAgICAgIGRlbGV0ZSBwcm9wc1RvUGFzc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGgoY29tcG9uZW50LCBkYXRhLCBjaGlsZHJlbilcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVzb2x2ZVByb3BzIChyb3V0ZSwgY29uZmlnKSB7XG4gIHN3aXRjaCAodHlwZW9mIGNvbmZpZykge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGNvbmZpZ1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiBjb25maWcocm91dGUpXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gY29uZmlnID8gcm91dGUucGFyYW1zIDogdW5kZWZpbmVkXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJwcm9wcyBpbiBcXFwiXCIgKyAocm91dGUucGF0aCkgKyBcIlxcXCIgaXMgYSBcIiArICh0eXBlb2YgY29uZmlnKSArIFwiLCBcIiArXG4gICAgICAgICAgXCJleHBlY3RpbmcgYW4gb2JqZWN0LCBmdW5jdGlvbiBvciBib29sZWFuLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBlbmNvZGVSZXNlcnZlUkUgPSAvWyEnKCkqXS9nO1xudmFyIGVuY29kZVJlc2VydmVSZXBsYWNlciA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpOyB9O1xudmFyIGNvbW1hUkUgPSAvJTJDL2c7XG5cbi8vIGZpeGVkIGVuY29kZVVSSUNvbXBvbmVudCB3aGljaCBpcyBtb3JlIGNvbmZvcm1hbnQgdG8gUkZDMzk4Njpcbi8vIC0gZXNjYXBlcyBbIScoKSpdXG4vLyAtIHByZXNlcnZlIGNvbW1hc1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIC5yZXBsYWNlKGVuY29kZVJlc2VydmVSRSwgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyKVxuICAucmVwbGFjZShjb21tYVJFLCAnLCcpOyB9O1xuXG52YXIgZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuXG5mdW5jdGlvbiByZXNvbHZlUXVlcnkgKFxuICBxdWVyeSxcbiAgZXh0cmFRdWVyeSxcbiAgX3BhcnNlUXVlcnlcbikge1xuICBpZiAoIGV4dHJhUXVlcnkgPT09IHZvaWQgMCApIGV4dHJhUXVlcnkgPSB7fTtcblxuICB2YXIgcGFyc2UgPSBfcGFyc2VRdWVyeSB8fCBwYXJzZVF1ZXJ5O1xuICB2YXIgcGFyc2VkUXVlcnk7XG4gIHRyeSB7XG4gICAgcGFyc2VkUXVlcnkgPSBwYXJzZShxdWVyeSB8fCAnJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIGUubWVzc2FnZSk7XG4gICAgcGFyc2VkUXVlcnkgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gZXh0cmFRdWVyeSkge1xuICAgIHBhcnNlZFF1ZXJ5W2tleV0gPSBleHRyYVF1ZXJ5W2tleV07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFF1ZXJ5XG59XG5cbmZ1bmN0aW9uIHBhcnNlUXVlcnkgKHF1ZXJ5KSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBxdWVyeSA9IHF1ZXJ5LnRyaW0oKS5yZXBsYWNlKC9eKFxcP3wjfCYpLywgJycpO1xuXG4gIGlmICghcXVlcnkpIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBxdWVyeS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gZGVjb2RlKHBhcnRzLnNoaWZ0KCkpO1xuICAgIHZhciB2YWwgPSBwYXJ0cy5sZW5ndGggPiAwXG4gICAgICA/IGRlY29kZShwYXJ0cy5qb2luKCc9JykpXG4gICAgICA6IG51bGw7XG5cbiAgICBpZiAocmVzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzW2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1trZXldKSkge1xuICAgICAgcmVzW2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba2V5XSA9IFtyZXNba2V5XSwgdmFsXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkgKG9iaikge1xuICB2YXIgcmVzID0gb2JqID8gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWwgPSBvYmpba2V5XTtcblxuICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVuY29kZShrZXkpXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHtcbiAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwyID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbDIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKVxuICAgIH1cblxuICAgIHJldHVybiBlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwpXG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5sZW5ndGggPiAwOyB9KS5qb2luKCcmJykgOiBudWxsO1xuICByZXR1cm4gcmVzID8gKFwiP1wiICsgcmVzKSA6ICcnXG59XG5cbi8qICAqL1xuXG52YXIgdHJhaWxpbmdTbGFzaFJFID0gL1xcLz8kLztcblxuZnVuY3Rpb24gY3JlYXRlUm91dGUgKFxuICByZWNvcmQsXG4gIGxvY2F0aW9uLFxuICByZWRpcmVjdGVkRnJvbSxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuXG4gIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5IHx8IHt9O1xuICB0cnkge1xuICAgIHF1ZXJ5ID0gY2xvbmUocXVlcnkpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByb3V0ZSA9IHtcbiAgICBuYW1lOiBsb2NhdGlvbi5uYW1lIHx8IChyZWNvcmQgJiYgcmVjb3JkLm5hbWUpLFxuICAgIG1ldGE6IChyZWNvcmQgJiYgcmVjb3JkLm1ldGEpIHx8IHt9LFxuICAgIHBhdGg6IGxvY2F0aW9uLnBhdGggfHwgJy8nLFxuICAgIGhhc2g6IGxvY2F0aW9uLmhhc2ggfHwgJycsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHBhcmFtczogbG9jYXRpb24ucGFyYW1zIHx8IHt9LFxuICAgIGZ1bGxQYXRoOiBnZXRGdWxsUGF0aChsb2NhdGlvbiwgc3RyaW5naWZ5UXVlcnkpLFxuICAgIG1hdGNoZWQ6IHJlY29yZCA/IGZvcm1hdE1hdGNoKHJlY29yZCkgOiBbXVxuICB9O1xuICBpZiAocmVkaXJlY3RlZEZyb20pIHtcbiAgICByb3V0ZS5yZWRpcmVjdGVkRnJvbSA9IGdldEZ1bGxQYXRoKHJlZGlyZWN0ZWRGcm9tLCBzdHJpbmdpZnlRdWVyeSk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUocm91dGUpXG59XG5cbmZ1bmN0aW9uIGNsb25lICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGNsb25lKVxuICB9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICByZXNba2V5XSA9IGNsb25lKHZhbHVlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbn1cblxuLy8gdGhlIHN0YXJ0aW5nIHJvdXRlIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5pdGlhbCBzdGF0ZVxudmFyIFNUQVJUID0gY3JlYXRlUm91dGUobnVsbCwge1xuICBwYXRoOiAnLydcbn0pO1xuXG5mdW5jdGlvbiBmb3JtYXRNYXRjaCAocmVjb3JkKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgd2hpbGUgKHJlY29yZCkge1xuICAgIHJlcy51bnNoaWZ0KHJlY29yZCk7XG4gICAgcmVjb3JkID0gcmVjb3JkLnBhcmVudDtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldEZ1bGxQYXRoIChcbiAgcmVmLFxuICBfc3RyaW5naWZ5UXVlcnlcbikge1xuICB2YXIgcGF0aCA9IHJlZi5wYXRoO1xuICB2YXIgcXVlcnkgPSByZWYucXVlcnk7IGlmICggcXVlcnkgPT09IHZvaWQgMCApIHF1ZXJ5ID0ge307XG4gIHZhciBoYXNoID0gcmVmLmhhc2g7IGlmICggaGFzaCA9PT0gdm9pZCAwICkgaGFzaCA9ICcnO1xuXG4gIHZhciBzdHJpbmdpZnkgPSBfc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgc3RyaW5naWZ5KHF1ZXJ5KSArIGhhc2hcbn1cblxuZnVuY3Rpb24gaXNTYW1lUm91dGUgKGEsIGIpIHtcbiAgaWYgKGIgPT09IFNUQVJUKSB7XG4gICAgcmV0dXJuIGEgPT09IGJcbiAgfSBlbHNlIGlmICghYikge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKGEucGF0aCAmJiBiLnBhdGgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgPT09IGIucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpICYmXG4gICAgICBhLmhhc2ggPT09IGIuaGFzaCAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KVxuICAgIClcbiAgfSBlbHNlIGlmIChhLm5hbWUgJiYgYi5uYW1lKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGEubmFtZSA9PT0gYi5uYW1lICYmXG4gICAgICBhLmhhc2ggPT09IGIuaGFzaCAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KSAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnBhcmFtcywgYi5wYXJhbXMpXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RXF1YWwgKGEsIGIpIHtcbiAgaWYgKCBhID09PSB2b2lkIDAgKSBhID0ge307XG4gIGlmICggYiA9PT0gdm9pZCAwICkgYiA9IHt9O1xuXG4gIC8vIGhhbmRsZSBudWxsIHZhbHVlICMxNTY2XG4gIGlmICghYSB8fCAhYikgeyByZXR1cm4gYSA9PT0gYiB9XG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcbiAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgYVZhbCA9IGFba2V5XTtcbiAgICB2YXIgYlZhbCA9IGJba2V5XTtcbiAgICAvLyBjaGVjayBuZXN0ZWQgZXF1YWxpdHlcbiAgICBpZiAodHlwZW9mIGFWYWwgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiVmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0RXF1YWwoYVZhbCwgYlZhbClcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhhVmFsKSA9PT0gU3RyaW5nKGJWYWwpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGlzSW5jbHVkZWRSb3V0ZSAoY3VycmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiAoXG4gICAgY3VycmVudC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpLmluZGV4T2YoXG4gICAgICB0YXJnZXQucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJy8nKVxuICAgICkgPT09IDAgJiZcbiAgICAoIXRhcmdldC5oYXNoIHx8IGN1cnJlbnQuaGFzaCA9PT0gdGFyZ2V0Lmhhc2gpICYmXG4gICAgcXVlcnlJbmNsdWRlcyhjdXJyZW50LnF1ZXJ5LCB0YXJnZXQucXVlcnkpXG4gIClcbn1cblxuZnVuY3Rpb24gcXVlcnlJbmNsdWRlcyAoY3VycmVudCwgdGFyZ2V0KSB7XG4gIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICBpZiAoIShrZXkgaW4gY3VycmVudCkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGggKFxuICByZWxhdGl2ZSxcbiAgYmFzZSxcbiAgYXBwZW5kXG4pIHtcbiAgdmFyIGZpcnN0Q2hhciA9IHJlbGF0aXZlLmNoYXJBdCgwKTtcbiAgaWYgKGZpcnN0Q2hhciA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHJlbGF0aXZlXG4gIH1cblxuICBpZiAoZmlyc3RDaGFyID09PSAnPycgfHwgZmlyc3RDaGFyID09PSAnIycpIHtcbiAgICByZXR1cm4gYmFzZSArIHJlbGF0aXZlXG4gIH1cblxuICB2YXIgc3RhY2sgPSBiYXNlLnNwbGl0KCcvJyk7XG5cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNlZ21lbnQgaWY6XG4gIC8vIC0gbm90IGFwcGVuZGluZ1xuICAvLyAtIGFwcGVuZGluZyB0byB0cmFpbGluZyBzbGFzaCAobGFzdCBzZWdtZW50IGlzIGVtcHR5KVxuICBpZiAoIWFwcGVuZCB8fCAhc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIC8vIHJlc29sdmUgcmVsYXRpdmUgcGF0aFxuICB2YXIgc2VnbWVudHMgPSByZWxhdGl2ZS5yZXBsYWNlKC9eXFwvLywgJycpLnNwbGl0KCcvJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGlmIChzZWdtZW50ID09PSAnLi4nKSB7XG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09ICcuJykge1xuICAgICAgc3RhY2sucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBlbnN1cmUgbGVhZGluZyBzbGFzaFxuICBpZiAoc3RhY2tbMF0gIT09ICcnKSB7XG4gICAgc3RhY2sudW5zaGlmdCgnJyk7XG4gIH1cblxuICByZXR1cm4gc3RhY2suam9pbignLycpXG59XG5cbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgcXVlcnkgPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgIGhhc2ggPSBwYXRoLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxdWVyeUluZGV4ID49IDApIHtcbiAgICBxdWVyeSA9IHBhdGguc2xpY2UocXVlcnlJbmRleCArIDEpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIHF1ZXJ5SW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBoYXNoOiBoYXNoXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5QYXRoIChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcL1xcLy9nLCAnLycpXG59XG5cbnZhciBpc2FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbnZhciBwYXRoVG9SZWdleHBfMSA9IHBhdGhUb1JlZ2V4cDtcbnZhciBwYXJzZV8xID0gcGFyc2U7XG52YXIgY29tcGlsZV8xID0gY29tcGlsZTtcbnZhciB0b2tlbnNUb0Z1bmN0aW9uXzEgPSB0b2tlbnNUb0Z1bmN0aW9uO1xudmFyIHRva2Vuc1RvUmVnRXhwXzEgPSB0b2tlbnNUb1JlZ0V4cDtcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIga2V5ID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHBhdGggPSAnJztcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJztcbiAgdmFyIHJlcztcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdO1xuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdO1xuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXg7XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldCk7XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aDtcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV07XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XTtcbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdO1xuICAgIHZhciBuYW1lID0gcmVzWzNdO1xuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdO1xuICAgIHZhciBncm91cCA9IHJlc1s1XTtcbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl07XG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddO1xuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gICAgICBwYXRoID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4O1xuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlcjtcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXA7XG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pO1xuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KTtcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aCk7XG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnO1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9O1xuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuO1xuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV07XG4gICAgICB2YXIgc2VnbWVudDtcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSk7XG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKTtcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5cztcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpO1xuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSk7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpO1xuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlO1xuICB2YXIgcm91dGUgPSAnJztcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCk7XG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJztcblxuICAgICAga2V5cy5wdXNoKHRva2VuKTtcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKic7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJztcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJyk7XG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyO1xuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nO1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJztcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknO1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpO1xuICAgIGtleXMgPSBbXTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbnBhdGhUb1JlZ2V4cF8xLnBhcnNlID0gcGFyc2VfMTtcbnBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUgPSBjb21waWxlXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvbl8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cF8xO1xuXG4vKiAgKi9cblxuLy8gJGZsb3ctZGlzYWJsZS1saW5lXG52YXIgcmVnZXhwQ29tcGlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gZmlsbFBhcmFtcyAoXG4gIHBhdGgsXG4gIHBhcmFtcyxcbiAgcm91dGVNc2dcbikge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIHRyeSB7XG4gICAgdmFyIGZpbGxlciA9XG4gICAgICByZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gfHxcbiAgICAgIChyZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gPSBwYXRoVG9SZWdleHBfMS5jb21waWxlKHBhdGgpKTtcblxuICAgIC8vIEZpeCAjMjUwNSByZXNvbHZpbmcgYXN0ZXJpc2sgcm91dGVzIHsgbmFtZTogJ25vdC1mb3VuZCcsIHBhcmFtczogeyBwYXRoTWF0Y2g6ICcvbm90LWZvdW5kJyB9fVxuICAgIGlmIChwYXJhbXMucGF0aE1hdGNoKSB7IHBhcmFtc1swXSA9IHBhcmFtcy5wYXRoTWF0Y2g7IH1cblxuICAgIHJldHVybiBmaWxsZXIocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oZmFsc2UsIChcIm1pc3NpbmcgcGFyYW0gZm9yIFwiICsgcm91dGVNc2cgKyBcIjogXCIgKyAoZS5tZXNzYWdlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBkZWxldGUgdGhlIDAgaWYgaXQgd2FzIGFkZGVkXG4gICAgZGVsZXRlIHBhcmFtc1swXTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24gKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIGFwcGVuZCxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIG5leHQgPSB0eXBlb2YgcmF3ID09PSAnc3RyaW5nJyA/IHsgcGF0aDogcmF3IH0gOiByYXc7XG4gIC8vIG5hbWVkIHRhcmdldFxuICBpZiAobmV4dC5fbm9ybWFsaXplZCkge1xuICAgIHJldHVybiBuZXh0XG4gIH0gZWxzZSBpZiAobmV4dC5uYW1lKSB7XG4gICAgcmV0dXJuIGV4dGVuZCh7fSwgcmF3KVxuICB9XG5cbiAgLy8gcmVsYXRpdmUgcGFyYW1zXG4gIGlmICghbmV4dC5wYXRoICYmIG5leHQucGFyYW1zICYmIGN1cnJlbnQpIHtcbiAgICBuZXh0ID0gZXh0ZW5kKHt9LCBuZXh0KTtcbiAgICBuZXh0Ll9ub3JtYWxpemVkID0gdHJ1ZTtcbiAgICB2YXIgcGFyYW1zID0gZXh0ZW5kKGV4dGVuZCh7fSwgY3VycmVudC5wYXJhbXMpLCBuZXh0LnBhcmFtcyk7XG4gICAgaWYgKGN1cnJlbnQubmFtZSkge1xuICAgICAgbmV4dC5uYW1lID0gY3VycmVudC5uYW1lO1xuICAgICAgbmV4dC5wYXJhbXMgPSBwYXJhbXM7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50Lm1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgcmF3UGF0aCA9IGN1cnJlbnQubWF0Y2hlZFtjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aDtcbiAgICAgIG5leHQucGF0aCA9IGZpbGxQYXJhbXMocmF3UGF0aCwgcGFyYW1zLCAoXCJwYXRoIFwiICsgKGN1cnJlbnQucGF0aCkpKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oZmFsc2UsIFwicmVsYXRpdmUgcGFyYW1zIG5hdmlnYXRpb24gcmVxdWlyZXMgYSBjdXJyZW50IHJvdXRlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHRcbiAgfVxuXG4gIHZhciBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKG5leHQucGF0aCB8fCAnJyk7XG4gIHZhciBiYXNlUGF0aCA9IChjdXJyZW50ICYmIGN1cnJlbnQucGF0aCkgfHwgJy8nO1xuICB2YXIgcGF0aCA9IHBhcnNlZFBhdGgucGF0aFxuICAgID8gcmVzb2x2ZVBhdGgocGFyc2VkUGF0aC5wYXRoLCBiYXNlUGF0aCwgYXBwZW5kIHx8IG5leHQuYXBwZW5kKVxuICAgIDogYmFzZVBhdGg7XG5cbiAgdmFyIHF1ZXJ5ID0gcmVzb2x2ZVF1ZXJ5KFxuICAgIHBhcnNlZFBhdGgucXVlcnksXG4gICAgbmV4dC5xdWVyeSxcbiAgICByb3V0ZXIgJiYgcm91dGVyLm9wdGlvbnMucGFyc2VRdWVyeVxuICApO1xuXG4gIHZhciBoYXNoID0gbmV4dC5oYXNoIHx8IHBhcnNlZFBhdGguaGFzaDtcbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykge1xuICAgIGhhc2ggPSBcIiNcIiArIGhhc2g7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIGhhc2g6IGhhc2hcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gd29yayBhcm91bmQgd2VpcmQgZmxvdyBidWdcbnZhciB0b1R5cGVzID0gW1N0cmluZywgT2JqZWN0XTtcbnZhciBldmVudFR5cGVzID0gW1N0cmluZywgQXJyYXldO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuXG52YXIgTGluayA9IHtcbiAgbmFtZTogJ1JvdXRlckxpbmsnLFxuICBwcm9wczoge1xuICAgIHRvOiB7XG4gICAgICB0eXBlOiB0b1R5cGVzLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2EnXG4gICAgfSxcbiAgICBleGFjdDogQm9vbGVhbixcbiAgICBhcHBlbmQ6IEJvb2xlYW4sXG4gICAgcmVwbGFjZTogQm9vbGVhbixcbiAgICBhY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGV4YWN0QWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBldmVudDoge1xuICAgICAgdHlwZTogZXZlbnRUeXBlcyxcbiAgICAgIGRlZmF1bHQ6ICdjbGljaydcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcm91dGVyID0gdGhpcy4kcm91dGVyO1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy4kcm91dGU7XG4gICAgdmFyIHJlZiA9IHJvdXRlci5yZXNvbHZlKFxuICAgICAgdGhpcy50byxcbiAgICAgIGN1cnJlbnQsXG4gICAgICB0aGlzLmFwcGVuZFxuICAgICk7XG4gICAgdmFyIGxvY2F0aW9uID0gcmVmLmxvY2F0aW9uO1xuICAgIHZhciByb3V0ZSA9IHJlZi5yb3V0ZTtcbiAgICB2YXIgaHJlZiA9IHJlZi5ocmVmO1xuXG4gICAgdmFyIGNsYXNzZXMgPSB7fTtcbiAgICB2YXIgZ2xvYmFsQWN0aXZlQ2xhc3MgPSByb3V0ZXIub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MgPSByb3V0ZXIub3B0aW9ucy5saW5rRXhhY3RBY3RpdmVDbGFzcztcbiAgICAvLyBTdXBwb3J0IGdsb2JhbCBlbXB0eSBhY3RpdmUgY2xhc3NcbiAgICB2YXIgYWN0aXZlQ2xhc3NGYWxsYmFjayA9XG4gICAgICBnbG9iYWxBY3RpdmVDbGFzcyA9PSBudWxsID8gJ3JvdXRlci1saW5rLWFjdGl2ZScgOiBnbG9iYWxBY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrID1cbiAgICAgIGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgICA/ICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnXG4gICAgICAgIDogZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcztcbiAgICB2YXIgYWN0aXZlQ2xhc3MgPVxuICAgICAgdGhpcy5hY3RpdmVDbGFzcyA9PSBudWxsID8gYWN0aXZlQ2xhc3NGYWxsYmFjayA6IHRoaXMuYWN0aXZlQ2xhc3M7XG4gICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3MgPVxuICAgICAgdGhpcy5leGFjdEFjdGl2ZUNsYXNzID09IG51bGxcbiAgICAgICAgPyBleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2tcbiAgICAgICAgOiB0aGlzLmV4YWN0QWN0aXZlQ2xhc3M7XG5cbiAgICB2YXIgY29tcGFyZVRhcmdldCA9IHJvdXRlLnJlZGlyZWN0ZWRGcm9tXG4gICAgICA/IGNyZWF0ZVJvdXRlKG51bGwsIG5vcm1hbGl6ZUxvY2F0aW9uKHJvdXRlLnJlZGlyZWN0ZWRGcm9tKSwgbnVsbCwgcm91dGVyKVxuICAgICAgOiByb3V0ZTtcblxuICAgIGNsYXNzZXNbZXhhY3RBY3RpdmVDbGFzc10gPSBpc1NhbWVSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcbiAgICBjbGFzc2VzW2FjdGl2ZUNsYXNzXSA9IHRoaXMuZXhhY3RcbiAgICAgID8gY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXVxuICAgICAgOiBpc0luY2x1ZGVkUm91dGUoY3VycmVudCwgY29tcGFyZVRhcmdldCk7XG5cbiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZ3VhcmRFdmVudChlKSkge1xuICAgICAgICBpZiAodGhpcyQxLnJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXIucmVwbGFjZShsb2NhdGlvbiwgbm9vcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyLnB1c2gobG9jYXRpb24sIG5vb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBvbiA9IHsgY2xpY2s6IGd1YXJkRXZlbnQgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmV2ZW50KSkge1xuICAgICAgdGhpcy5ldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIG9uW2VdID0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblt0aGlzLmV2ZW50XSA9IGhhbmRsZXI7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB7IGNsYXNzOiBjbGFzc2VzIH07XG5cbiAgICB2YXIgc2NvcGVkU2xvdCA9XG4gICAgICAhdGhpcy4kc2NvcGVkU2xvdHMuJGhhc05vcm1hbCAmJlxuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCAmJlxuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCh7XG4gICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgIHJvdXRlOiByb3V0ZSxcbiAgICAgICAgbmF2aWdhdGU6IGhhbmRsZXIsXG4gICAgICAgIGlzQWN0aXZlOiBjbGFzc2VzW2FjdGl2ZUNsYXNzXSxcbiAgICAgICAgaXNFeGFjdEFjdGl2ZTogY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXVxuICAgICAgfSk7XG5cbiAgICBpZiAoc2NvcGVkU2xvdCkge1xuICAgICAgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzY29wZWRTbG90WzBdXG4gICAgICB9IGVsc2UgaWYgKHNjb3BlZFNsb3QubGVuZ3RoID4gMSB8fCAhc2NvcGVkU2xvdC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAoXCJSb3V0ZXJMaW5rIHdpdGggdG89XFxcIlwiICsgKHRoaXMucHJvcHMudG8pICsgXCJcXFwiIGlzIHRyeWluZyB0byB1c2UgYSBzY29wZWQgc2xvdCBidXQgaXQgZGlkbid0IHByb3ZpZGUgZXhhY3RseSBvbmUgY2hpbGQuXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGVkU2xvdC5sZW5ndGggPT09IDAgPyBoKCkgOiBoKCdzcGFuJywge30sIHNjb3BlZFNsb3QpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGFnID09PSAnYScpIHtcbiAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIGRhdGEuYXR0cnMgPSB7IGhyZWY6IGhyZWYgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmluZCB0aGUgZmlyc3QgPGE+IGNoaWxkIGFuZCBhcHBseSBsaXN0ZW5lciBhbmQgaHJlZlxuICAgICAgdmFyIGEgPSBmaW5kQW5jaG9yKHRoaXMuJHNsb3RzLmRlZmF1bHQpO1xuICAgICAgaWYgKGEpIHtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgPGE+IGlzIGEgc3RhdGljIG5vZGVcbiAgICAgICAgYS5pc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICB2YXIgYURhdGEgPSAoYS5kYXRhID0gZXh0ZW5kKHt9LCBhLmRhdGEpKTtcbiAgICAgICAgYURhdGEub24gPSBhRGF0YS5vbiB8fCB7fTtcbiAgICAgICAgLy8gdHJhbnNmb3JtIGV4aXN0aW5nIGV2ZW50cyBpbiBib3RoIG9iamVjdHMgaW50byBhcnJheXMgc28gd2UgY2FuIHB1c2ggbGF0ZXJcbiAgICAgICAgZm9yICh2YXIgZXZlbnQgaW4gYURhdGEub24pIHtcbiAgICAgICAgICB2YXIgaGFuZGxlciQxID0gYURhdGEub25bZXZlbnRdO1xuICAgICAgICAgIGlmIChldmVudCBpbiBvbikge1xuICAgICAgICAgICAgYURhdGEub25bZXZlbnRdID0gQXJyYXkuaXNBcnJheShoYW5kbGVyJDEpID8gaGFuZGxlciQxIDogW2hhbmRsZXIkMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFwcGVuZCBuZXcgbGlzdGVuZXJzIGZvciByb3V0ZXItbGlua1xuICAgICAgICBmb3IgKHZhciBldmVudCQxIGluIG9uKSB7XG4gICAgICAgICAgaWYgKGV2ZW50JDEgaW4gYURhdGEub24pIHtcbiAgICAgICAgICAgIC8vIG9uW2V2ZW50XSBpcyBhbHdheXMgYSBmdW5jdGlvblxuICAgICAgICAgICAgYURhdGEub25bZXZlbnQkMV0ucHVzaChvbltldmVudCQxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50JDFdID0gaGFuZGxlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYUF0dHJzID0gKGEuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYS5kYXRhLmF0dHJzKSk7XG4gICAgICAgIGFBdHRycy5ocmVmID0gaHJlZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRvZXNuJ3QgaGF2ZSA8YT4gY2hpbGQsIGFwcGx5IGxpc3RlbmVyIHRvIHNlbGZcbiAgICAgICAgZGF0YS5vbiA9IG9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoKHRoaXMudGFnLCBkYXRhLCB0aGlzLiRzbG90cy5kZWZhdWx0KVxuICB9XG59O1xuXG5mdW5jdGlvbiBndWFyZEV2ZW50IChlKSB7XG4gIC8vIGRvbid0IHJlZGlyZWN0IHdpdGggY29udHJvbCBrZXlzXG4gIGlmIChlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUuc2hpZnRLZXkpIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2hlbiBwcmV2ZW50RGVmYXVsdCBjYWxsZWRcbiAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCBvbiByaWdodCBjbGlja1xuICBpZiAoZS5idXR0b24gIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbiAhPT0gMCkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCBpZiBgdGFyZ2V0PVwiX2JsYW5rXCJgXG4gIGlmIChlLmN1cnJlbnRUYXJnZXQgJiYgZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKTtcbiAgICBpZiAoL1xcYl9ibGFua1xcYi9pLnRlc3QodGFyZ2V0KSkgeyByZXR1cm4gfVxuICB9XG4gIC8vIHRoaXMgbWF5IGJlIGEgV2VleCBldmVudCB3aGljaCBkb2Vzbid0IGhhdmUgdGhpcyBtZXRob2RcbiAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZmluZEFuY2hvciAoY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuKSB7XG4gICAgdmFyIGNoaWxkO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAnYScpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgICBpZiAoY2hpbGQuY2hpbGRyZW4gJiYgKGNoaWxkID0gZmluZEFuY2hvcihjaGlsZC5jaGlsZHJlbikpKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgX1Z1ZTtcblxuZnVuY3Rpb24gaW5zdGFsbCAoVnVlKSB7XG4gIGlmIChpbnN0YWxsLmluc3RhbGxlZCAmJiBfVnVlID09PSBWdWUpIHsgcmV0dXJuIH1cbiAgaW5zdGFsbC5pbnN0YWxsZWQgPSB0cnVlO1xuXG4gIF9WdWUgPSBWdWU7XG5cbiAgdmFyIGlzRGVmID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYgIT09IHVuZGVmaW5lZDsgfTtcblxuICB2YXIgcmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uICh2bSwgY2FsbFZhbCkge1xuICAgIHZhciBpID0gdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICAgIGlmIChpc0RlZihpKSAmJiBpc0RlZihpID0gaS5kYXRhKSAmJiBpc0RlZihpID0gaS5yZWdpc3RlclJvdXRlSW5zdGFuY2UpKSB7XG4gICAgICBpKHZtLCBjYWxsVmFsKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLm1peGluKHtcbiAgICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSAoKSB7XG4gICAgICBpZiAoaXNEZWYodGhpcy4kb3B0aW9ucy5yb3V0ZXIpKSB7XG4gICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yb3V0ZXIgPSB0aGlzLiRvcHRpb25zLnJvdXRlcjtcbiAgICAgICAgdGhpcy5fcm91dGVyLmluaXQodGhpcyk7XG4gICAgICAgIFZ1ZS51dGlsLmRlZmluZVJlYWN0aXZlKHRoaXMsICdfcm91dGUnLCB0aGlzLl9yb3V0ZXIuaGlzdG9yeS5jdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSAodGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5fcm91dGVyUm9vdCkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgdGhpcyk7XG4gICAgfSxcbiAgICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGVyJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlciB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHJvdXRlJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlIH1cbiAgfSk7XG5cbiAgVnVlLmNvbXBvbmVudCgnUm91dGVyVmlldycsIFZpZXcpO1xuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJMaW5rJywgTGluayk7XG5cbiAgdmFyIHN0cmF0cyA9IFZ1ZS5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuICAvLyB1c2UgdGhlIHNhbWUgaG9vayBtZXJnaW5nIHN0cmF0ZWd5IGZvciByb3V0ZSBob29rc1xuICBzdHJhdHMuYmVmb3JlUm91dGVFbnRlciA9IHN0cmF0cy5iZWZvcmVSb3V0ZUxlYXZlID0gc3RyYXRzLmJlZm9yZVJvdXRlVXBkYXRlID0gc3RyYXRzLmNyZWF0ZWQ7XG59XG5cbi8qICAqL1xuXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZU1hcCAoXG4gIHJvdXRlcyxcbiAgb2xkUGF0aExpc3QsXG4gIG9sZFBhdGhNYXAsXG4gIG9sZE5hbWVNYXBcbikge1xuICAvLyB0aGUgcGF0aCBsaXN0IGlzIHVzZWQgdG8gY29udHJvbCBwYXRoIG1hdGNoaW5nIHByaW9yaXR5XG4gIHZhciBwYXRoTGlzdCA9IG9sZFBhdGhMaXN0IHx8IFtdO1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHBhdGhNYXAgPSBvbGRQYXRoTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgbmFtZU1hcCA9IG9sZE5hbWVNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGUpIHtcbiAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcm91dGUpO1xuICB9KTtcblxuICAvLyBlbnN1cmUgd2lsZGNhcmQgcm91dGVzIGFyZSBhbHdheXMgYXQgdGhlIGVuZFxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdGhMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChwYXRoTGlzdFtpXSA9PT0gJyonKSB7XG4gICAgICBwYXRoTGlzdC5wdXNoKHBhdGhMaXN0LnNwbGljZShpLCAxKVswXSk7XG4gICAgICBsLS07XG4gICAgICBpLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgLy8gd2FybiBpZiByb3V0ZXMgZG8gbm90IGluY2x1ZGUgbGVhZGluZyBzbGFzaGVzXG4gICAgdmFyIGZvdW5kID0gcGF0aExpc3RcbiAgICAvLyBjaGVjayBmb3IgbWlzc2luZyBsZWFkaW5nIHNsYXNoXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYXRoKSB7IHJldHVybiBwYXRoICYmIHBhdGguY2hhckF0KDApICE9PSAnKicgJiYgcGF0aC5jaGFyQXQoMCkgIT09ICcvJzsgfSk7XG5cbiAgICBpZiAoZm91bmQubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHBhdGhOYW1lcyA9IGZvdW5kLm1hcChmdW5jdGlvbiAocGF0aCkgeyByZXR1cm4gKFwiLSBcIiArIHBhdGgpOyB9KS5qb2luKCdcXG4nKTtcbiAgICAgIHdhcm4oZmFsc2UsIChcIk5vbi1uZXN0ZWQgcm91dGVzIG11c3QgaW5jbHVkZSBhIGxlYWRpbmcgc2xhc2ggY2hhcmFjdGVyLiBGaXggdGhlIGZvbGxvd2luZyByb3V0ZXM6IFxcblwiICsgcGF0aE5hbWVzKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoTGlzdDogcGF0aExpc3QsXG4gICAgcGF0aE1hcDogcGF0aE1hcCxcbiAgICBuYW1lTWFwOiBuYW1lTWFwXG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkUm91dGVSZWNvcmQgKFxuICBwYXRoTGlzdCxcbiAgcGF0aE1hcCxcbiAgbmFtZU1hcCxcbiAgcm91dGUsXG4gIHBhcmVudCxcbiAgbWF0Y2hBc1xuKSB7XG4gIHZhciBwYXRoID0gcm91dGUucGF0aDtcbiAgdmFyIG5hbWUgPSByb3V0ZS5uYW1lO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChwYXRoICE9IG51bGwsIFwiXFxcInBhdGhcXFwiIGlzIHJlcXVpcmVkIGluIGEgcm91dGUgY29uZmlndXJhdGlvbi5cIik7XG4gICAgYXNzZXJ0KFxuICAgICAgdHlwZW9mIHJvdXRlLmNvbXBvbmVudCAhPT0gJ3N0cmluZycsXG4gICAgICBcInJvdXRlIGNvbmZpZyBcXFwiY29tcG9uZW50XFxcIiBmb3IgcGF0aDogXCIgKyAoU3RyaW5nKFxuICAgICAgICBwYXRoIHx8IG5hbWVcbiAgICAgICkpICsgXCIgY2Fubm90IGJlIGEgXCIgKyBcInN0cmluZyBpZC4gVXNlIGFuIGFjdHVhbCBjb21wb25lbnQgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cblxuICB2YXIgcGF0aFRvUmVnZXhwT3B0aW9ucyA9XG4gICAgcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoLCBwYXJlbnQsIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc3RyaWN0KTtcblxuICBpZiAodHlwZW9mIHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09ICdib29sZWFuJykge1xuICAgIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc2Vuc2l0aXZlID0gcm91dGUuY2FzZVNlbnNpdGl2ZTtcbiAgfVxuXG4gIHZhciByZWNvcmQgPSB7XG4gICAgcGF0aDogbm9ybWFsaXplZFBhdGgsXG4gICAgcmVnZXg6IGNvbXBpbGVSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRQYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSxcbiAgICBjb21wb25lbnRzOiByb3V0ZS5jb21wb25lbnRzIHx8IHsgZGVmYXVsdDogcm91dGUuY29tcG9uZW50IH0sXG4gICAgaW5zdGFuY2VzOiB7fSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIG1hdGNoQXM6IG1hdGNoQXMsXG4gICAgcmVkaXJlY3Q6IHJvdXRlLnJlZGlyZWN0LFxuICAgIGJlZm9yZUVudGVyOiByb3V0ZS5iZWZvcmVFbnRlcixcbiAgICBtZXRhOiByb3V0ZS5tZXRhIHx8IHt9LFxuICAgIHByb3BzOlxuICAgICAgcm91dGUucHJvcHMgPT0gbnVsbFxuICAgICAgICA/IHt9XG4gICAgICAgIDogcm91dGUuY29tcG9uZW50c1xuICAgICAgICAgID8gcm91dGUucHJvcHNcbiAgICAgICAgICA6IHsgZGVmYXVsdDogcm91dGUucHJvcHMgfVxuICB9O1xuXG4gIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgIC8vIFdhcm4gaWYgcm91dGUgaXMgbmFtZWQsIGRvZXMgbm90IHJlZGlyZWN0IGFuZCBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLlxuICAgIC8vIElmIHVzZXJzIG5hdmlnYXRlIHRvIHRoaXMgcm91dGUgYnkgbmFtZSwgdGhlIGRlZmF1bHQgY2hpbGQgd2lsbFxuICAgIC8vIG5vdCBiZSByZW5kZXJlZCAoR0ggSXNzdWUgIzYyOSlcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKFxuICAgICAgICByb3V0ZS5uYW1lICYmXG4gICAgICAgICFyb3V0ZS5yZWRpcmVjdCAmJlxuICAgICAgICByb3V0ZS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gL15cXC8/JC8udGVzdChjaGlsZC5wYXRoKTsgfSlcbiAgICAgICkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiTmFtZWQgUm91dGUgJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuIFwiICtcbiAgICAgICAgICAgIFwiV2hlbiBuYXZpZ2F0aW5nIHRvIHRoaXMgbmFtZWQgcm91dGUgKDp0bz1cXFwie25hbWU6ICdcIiArIChyb3V0ZS5uYW1lKSArIFwiJ1xcXCIpLCBcIiArXG4gICAgICAgICAgICBcInRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBSZW1vdmUgdGhlIG5hbWUgZnJvbSBcIiArXG4gICAgICAgICAgICBcInRoaXMgcm91dGUgYW5kIHVzZSB0aGUgbmFtZSBvZiB0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSBmb3IgbmFtZWQgXCIgK1xuICAgICAgICAgICAgXCJsaW5rcyBpbnN0ZWFkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRNYXRjaEFzID0gbWF0Y2hBc1xuICAgICAgICA/IGNsZWFuUGF0aCgobWF0Y2hBcyArIFwiL1wiICsgKGNoaWxkLnBhdGgpKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgY2hpbGQsIHJlY29yZCwgY2hpbGRNYXRjaEFzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghcGF0aE1hcFtyZWNvcmQucGF0aF0pIHtcbiAgICBwYXRoTGlzdC5wdXNoKHJlY29yZC5wYXRoKTtcbiAgICBwYXRoTWFwW3JlY29yZC5wYXRoXSA9IHJlY29yZDtcbiAgfVxuXG4gIGlmIChyb3V0ZS5hbGlhcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KHJvdXRlLmFsaWFzKSA/IHJvdXRlLmFsaWFzIDogW3JvdXRlLmFsaWFzXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsaWFzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBhbGlhcyA9IGFsaWFzZXNbaV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhbGlhcyA9PT0gcGF0aCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIChcIkZvdW5kIGFuIGFsaWFzIHdpdGggdGhlIHNhbWUgdmFsdWUgYXMgdGhlIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCIuIFlvdSBoYXZlIHRvIHJlbW92ZSB0aGF0IGFsaWFzLiBJdCB3aWxsIGJlIGlnbm9yZWQgaW4gZGV2ZWxvcG1lbnQuXCIpXG4gICAgICAgICk7XG4gICAgICAgIC8vIHNraXAgaW4gZGV2IHRvIG1ha2UgaXQgd29ya1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgYWxpYXNSb3V0ZSA9IHtcbiAgICAgICAgcGF0aDogYWxpYXMsXG4gICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlblxuICAgICAgfTtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKFxuICAgICAgICBwYXRoTGlzdCxcbiAgICAgICAgcGF0aE1hcCxcbiAgICAgICAgbmFtZU1hcCxcbiAgICAgICAgYWxpYXNSb3V0ZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICByZWNvcmQucGF0aCB8fCAnLycgLy8gbWF0Y2hBc1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmICghbmFtZU1hcFtuYW1lXSkge1xuICAgICAgbmFtZU1hcFtuYW1lXSA9IHJlY29yZDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1hdGNoQXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIkR1cGxpY2F0ZSBuYW1lZCByb3V0ZXMgZGVmaW5pdGlvbjogXCIgK1xuICAgICAgICAgIFwieyBuYW1lOiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBwYXRoOiBcXFwiXCIgKyAocmVjb3JkLnBhdGgpICsgXCJcXFwiIH1cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGlsZVJvdXRlUmVnZXggKFxuICBwYXRoLFxuICBwYXRoVG9SZWdleHBPcHRpb25zXG4pIHtcbiAgdmFyIHJlZ2V4ID0gcGF0aFRvUmVnZXhwXzEocGF0aCwgW10sIHBhdGhUb1JlZ2V4cE9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZWdleC5rZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgd2FybihcbiAgICAgICAgIWtleXNba2V5Lm5hbWVdLFxuICAgICAgICAoXCJEdXBsaWNhdGUgcGFyYW0ga2V5cyBpbiByb3V0ZSB3aXRoIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCJcIilcbiAgICAgICk7XG4gICAgICBrZXlzW2tleS5uYW1lXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlZ2V4XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGggKFxuICBwYXRoLFxuICBwYXJlbnQsXG4gIHN0cmljdFxuKSB7XG4gIGlmICghc3RyaWN0KSB7IHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7IH1cbiAgaWYgKHBhdGhbMF0gPT09ICcvJykgeyByZXR1cm4gcGF0aCB9XG4gIGlmIChwYXJlbnQgPT0gbnVsbCkgeyByZXR1cm4gcGF0aCB9XG4gIHJldHVybiBjbGVhblBhdGgoKChwYXJlbnQucGF0aCkgKyBcIi9cIiArIHBhdGgpKVxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXIgKFxuICByb3V0ZXMsXG4gIHJvdXRlclxuKSB7XG4gIHZhciByZWYgPSBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMpO1xuICB2YXIgcGF0aExpc3QgPSByZWYucGF0aExpc3Q7XG4gIHZhciBwYXRoTWFwID0gcmVmLnBhdGhNYXA7XG4gIHZhciBuYW1lTWFwID0gcmVmLm5hbWVNYXA7XG5cbiAgZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgICBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hdGNoIChcbiAgICByYXcsXG4gICAgY3VycmVudFJvdXRlLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZUxvY2F0aW9uKHJhdywgY3VycmVudFJvdXRlLCBmYWxzZSwgcm91dGVyKTtcbiAgICB2YXIgbmFtZSA9IGxvY2F0aW9uLm5hbWU7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFyIHJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKHJlY29yZCwgKFwiUm91dGUgd2l0aCBuYW1lICdcIiArIG5hbWUgKyBcIicgZG9lcyBub3QgZXhpc3RcIikpO1xuICAgICAgfVxuICAgICAgaWYgKCFyZWNvcmQpIHsgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbikgfVxuICAgICAgdmFyIHBhcmFtTmFtZXMgPSByZWNvcmQucmVnZXgua2V5c1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFrZXkub3B0aW9uYWw7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5Lm5hbWU7IH0pO1xuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uLnBhcmFtcyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50Um91dGUgJiYgdHlwZW9mIGN1cnJlbnRSb3V0ZS5wYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50Um91dGUucGFyYW1zKSB7XG4gICAgICAgICAgaWYgKCEoa2V5IGluIGxvY2F0aW9uLnBhcmFtcykgJiYgcGFyYW1OYW1lcy5pbmRleE9mKGtleSkgPiAtMSkge1xuICAgICAgICAgICAgbG9jYXRpb24ucGFyYW1zW2tleV0gPSBjdXJyZW50Um91dGUucGFyYW1zW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxvY2F0aW9uLnBhdGggPSBmaWxsUGFyYW1zKHJlY29yZC5wYXRoLCBsb2NhdGlvbi5wYXJhbXMsIChcIm5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGgpIHtcbiAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhMaXN0W2ldO1xuICAgICAgICB2YXIgcmVjb3JkJDEgPSBwYXRoTWFwW3BhdGhdO1xuICAgICAgICBpZiAobWF0Y2hSb3V0ZShyZWNvcmQkMS5yZWdleCwgbG9jYXRpb24ucGF0aCwgbG9jYXRpb24ucGFyYW1zKSkge1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlUm91dGUocmVjb3JkJDEsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBubyBtYXRjaFxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiByZWRpcmVjdCAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uXG4gICkge1xuICAgIHZhciBvcmlnaW5hbFJlZGlyZWN0ID0gcmVjb3JkLnJlZGlyZWN0O1xuICAgIHZhciByZWRpcmVjdCA9IHR5cGVvZiBvcmlnaW5hbFJlZGlyZWN0ID09PSAnZnVuY3Rpb24nXG4gICAgICA/IG9yaWdpbmFsUmVkaXJlY3QoY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgbnVsbCwgcm91dGVyKSlcbiAgICAgIDogb3JpZ2luYWxSZWRpcmVjdDtcblxuICAgIGlmICh0eXBlb2YgcmVkaXJlY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZWRpcmVjdCA9IHsgcGF0aDogcmVkaXJlY3QgfTtcbiAgICB9XG5cbiAgICBpZiAoIXJlZGlyZWN0IHx8IHR5cGVvZiByZWRpcmVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgICB9XG5cbiAgICB2YXIgcmUgPSByZWRpcmVjdDtcbiAgICB2YXIgbmFtZSA9IHJlLm5hbWU7XG4gICAgdmFyIHBhdGggPSByZS5wYXRoO1xuICAgIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5O1xuICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGFyYW1zID0gbG9jYXRpb24ucGFyYW1zO1xuICAgIHF1ZXJ5ID0gcmUuaGFzT3duUHJvcGVydHkoJ3F1ZXJ5JykgPyByZS5xdWVyeSA6IHF1ZXJ5O1xuICAgIGhhc2ggPSByZS5oYXNPd25Qcm9wZXJ0eSgnaGFzaCcpID8gcmUuaGFzaCA6IGhhc2g7XG4gICAgcGFyYW1zID0gcmUuaGFzT3duUHJvcGVydHkoJ3BhcmFtcycpID8gcmUucGFyYW1zIDogcGFyYW1zO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIC8vIHJlc29sdmVkIG5hbWVkIGRpcmVjdFxuICAgICAgdmFyIHRhcmdldFJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQodGFyZ2V0UmVjb3JkLCAoXCJyZWRpcmVjdCBmYWlsZWQ6IG5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYXNoOiBoYXNoLFxuICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgfSwgdW5kZWZpbmVkLCBsb2NhdGlvbilcbiAgICB9IGVsc2UgaWYgKHBhdGgpIHtcbiAgICAgIC8vIDEuIHJlc29sdmUgcmVsYXRpdmUgcmVkaXJlY3RcbiAgICAgIHZhciByYXdQYXRoID0gcmVzb2x2ZVJlY29yZFBhdGgocGF0aCwgcmVjb3JkKTtcbiAgICAgIC8vIDIuIHJlc29sdmUgcGFyYW1zXG4gICAgICB2YXIgcmVzb2x2ZWRQYXRoID0gZmlsbFBhcmFtcyhyYXdQYXRoLCBwYXJhbXMsIChcInJlZGlyZWN0IHJvdXRlIHdpdGggcGF0aCBcXFwiXCIgKyByYXdQYXRoICsgXCJcXFwiXCIpKTtcbiAgICAgIC8vIDMuIHJlbWF0Y2ggd2l0aCBleGlzdGluZyBxdWVyeSBhbmQgaGFzaFxuICAgICAgcmV0dXJuIG1hdGNoKHtcbiAgICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgICAgIHBhdGg6IHJlc29sdmVkUGF0aCxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYXNoOiBoYXNoXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKGZhbHNlLCAoXCJpbnZhbGlkIHJlZGlyZWN0IG9wdGlvbjogXCIgKyAoSlNPTi5zdHJpbmdpZnkocmVkaXJlY3QpKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhbGlhcyAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIG1hdGNoQXNcbiAgKSB7XG4gICAgdmFyIGFsaWFzZWRQYXRoID0gZmlsbFBhcmFtcyhtYXRjaEFzLCBsb2NhdGlvbi5wYXJhbXMsIChcImFsaWFzZWQgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIG1hdGNoQXMgKyBcIlxcXCJcIikpO1xuICAgIHZhciBhbGlhc2VkTWF0Y2ggPSBtYXRjaCh7XG4gICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgIHBhdGg6IGFsaWFzZWRQYXRoXG4gICAgfSk7XG4gICAgaWYgKGFsaWFzZWRNYXRjaCkge1xuICAgICAgdmFyIG1hdGNoZWQgPSBhbGlhc2VkTWF0Y2gubWF0Y2hlZDtcbiAgICAgIHZhciBhbGlhc2VkUmVjb3JkID0gbWF0Y2hlZFttYXRjaGVkLmxlbmd0aCAtIDFdO1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0gYWxpYXNlZE1hdGNoLnBhcmFtcztcbiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUoYWxpYXNlZFJlY29yZCwgbG9jYXRpb24pXG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlUm91dGUgKFxuICAgIHJlY29yZCxcbiAgICBsb2NhdGlvbixcbiAgICByZWRpcmVjdGVkRnJvbVxuICApIHtcbiAgICBpZiAocmVjb3JkICYmIHJlY29yZC5yZWRpcmVjdCkge1xuICAgICAgcmV0dXJuIHJlZGlyZWN0KHJlY29yZCwgcmVkaXJlY3RlZEZyb20gfHwgbG9jYXRpb24pXG4gICAgfVxuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLm1hdGNoQXMpIHtcbiAgICAgIHJldHVybiBhbGlhcyhyZWNvcmQsIGxvY2F0aW9uLCByZWNvcmQubWF0Y2hBcylcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tLCByb3V0ZXIpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1hdGNoOiBtYXRjaCxcbiAgICBhZGRSb3V0ZXM6IGFkZFJvdXRlc1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGUgKFxuICByZWdleCxcbiAgcGF0aCxcbiAgcGFyYW1zXG4pIHtcbiAgdmFyIG0gPSBwYXRoLm1hdGNoKHJlZ2V4KTtcblxuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBtLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGtleSA9IHJlZ2V4LmtleXNbaSAtIDFdO1xuICAgIHZhciB2YWwgPSB0eXBlb2YgbVtpXSA9PT0gJ3N0cmluZycgPyBkZWNvZGVVUklDb21wb25lbnQobVtpXSkgOiBtW2ldO1xuICAgIGlmIChrZXkpIHtcbiAgICAgIC8vIEZpeCAjMTk5NDogdXNpbmcgKiB3aXRoIHByb3BzOiB0cnVlIGdlbmVyYXRlcyBhIHBhcmFtIG5hbWVkIDBcbiAgICAgIHBhcmFtc1trZXkubmFtZSB8fCAncGF0aE1hdGNoJ10gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVJlY29yZFBhdGggKHBhdGgsIHJlY29yZCkge1xuICByZXR1cm4gcmVzb2x2ZVBhdGgocGF0aCwgcmVjb3JkLnBhcmVudCA/IHJlY29yZC5wYXJlbnQucGF0aCA6ICcvJywgdHJ1ZSlcbn1cblxuLyogICovXG5cbi8vIHVzZSBVc2VyIFRpbWluZyBhcGkgKGlmIHByZXNlbnQpIGZvciBtb3JlIGFjY3VyYXRlIGtleSBwcmVjaXNpb25cbnZhciBUaW1lID1cbiAgaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93XG4gICAgPyB3aW5kb3cucGVyZm9ybWFuY2VcbiAgICA6IERhdGU7XG5cbmZ1bmN0aW9uIGdlblN0YXRlS2V5ICgpIHtcbiAgcmV0dXJuIFRpbWUubm93KCkudG9GaXhlZCgzKVxufVxuXG52YXIgX2tleSA9IGdlblN0YXRlS2V5KCk7XG5cbmZ1bmN0aW9uIGdldFN0YXRlS2V5ICgpIHtcbiAgcmV0dXJuIF9rZXlcbn1cblxuZnVuY3Rpb24gc2V0U3RhdGVLZXkgKGtleSkge1xuICByZXR1cm4gKF9rZXkgPSBrZXkpXG59XG5cbi8qICAqL1xuXG52YXIgcG9zaXRpb25TdG9yZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIHNldHVwU2Nyb2xsICgpIHtcbiAgLy8gRml4IGZvciAjMTU4NSBmb3IgRmlyZWZveFxuICAvLyBGaXggZm9yICMyMTk1IEFkZCBvcHRpb25hbCB0aGlyZCBhdHRyaWJ1dGUgdG8gd29ya2Fyb3VuZCBhIGJ1ZyBpbiBzYWZhcmkgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4MjY3OFxuICAvLyBGaXggZm9yICMyNzc0IFN1cHBvcnQgZm9yIGFwcHMgbG9hZGVkIGZyb20gV2luZG93cyBmaWxlIHNoYXJlcyBub3QgbWFwcGVkIHRvIG5ldHdvcmsgZHJpdmVzOiByZXBsYWNlZCBsb2NhdGlvbi5vcmlnaW4gd2l0aFxuICAvLyB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RcbiAgLy8gbG9jYXRpb24uaG9zdCBjb250YWlucyB0aGUgcG9ydCBhbmQgbG9jYXRpb24uaG9zdG5hbWUgZG9lc24ndFxuICB2YXIgcHJvdG9jb2xBbmRQYXRoID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICB2YXIgYWJzb2x1dGVQYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZShwcm90b2NvbEFuZFBhdGgsICcnKTtcbiAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBnZXRTdGF0ZUtleSgpIH0sICcnLCBhYnNvbHV0ZVBhdGgpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbiAoZSkge1xuICAgIHNhdmVTY3JvbGxQb3NpdGlvbigpO1xuICAgIGlmIChlLnN0YXRlICYmIGUuc3RhdGUua2V5KSB7XG4gICAgICBzZXRTdGF0ZUtleShlLnN0YXRlLmtleSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU2Nyb2xsIChcbiAgcm91dGVyLFxuICB0byxcbiAgZnJvbSxcbiAgaXNQb3Bcbikge1xuICBpZiAoIXJvdXRlci5hcHApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiZWhhdmlvciA9IHJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO1xuICBpZiAoIWJlaGF2aW9yKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgYmVoYXZpb3IgPT09ICdmdW5jdGlvbicsIFwic2Nyb2xsQmVoYXZpb3IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgLy8gd2FpdCB1bnRpbCByZS1yZW5kZXIgZmluaXNoZXMgYmVmb3JlIHNjcm9sbGluZ1xuICByb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICB2YXIgc2hvdWxkU2Nyb2xsID0gYmVoYXZpb3IuY2FsbChcbiAgICAgIHJvdXRlcixcbiAgICAgIHRvLFxuICAgICAgZnJvbSxcbiAgICAgIGlzUG9wID8gcG9zaXRpb24gOiBudWxsXG4gICAgKTtcblxuICAgIGlmICghc2hvdWxkU2Nyb2xsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNob3VsZFNjcm9sbC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzaG91bGRTY3JvbGxcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHNob3VsZFNjcm9sbCkge1xuICAgICAgICAgIHNjcm9sbFRvUG9zaXRpb24oKHNob3VsZFNjcm9sbCksIHBvc2l0aW9uKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBlcnIudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsVG9Qb3NpdGlvbihzaG91bGRTY3JvbGwsIHBvc2l0aW9uKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHBvc2l0aW9uU3RvcmVba2V5XSA9IHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHJldHVybiBwb3NpdGlvblN0b3JlW2tleV1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFbGVtZW50UG9zaXRpb24gKGVsLCBvZmZzZXQpIHtcbiAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgZG9jUmVjdCA9IGRvY0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgeDogZWxSZWN0LmxlZnQgLSBkb2NSZWN0LmxlZnQgLSBvZmZzZXQueCxcbiAgICB5OiBlbFJlY3QudG9wIC0gZG9jUmVjdC50b3AgLSBvZmZzZXQueVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiBpc051bWJlcihvYmoueCkgfHwgaXNOdW1iZXIob2JqLnkpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBvc2l0aW9uIChvYmopIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBpc051bWJlcihvYmoueCkgPyBvYmoueCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IHdpbmRvdy5wYWdlWU9mZnNldFxuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9mZnNldCAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiAwLFxuICAgIHk6IGlzTnVtYmVyKG9iai55KSA/IG9iai55IDogMFxuICB9XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyICh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ251bWJlcidcbn1cblxudmFyIGhhc2hTdGFydHNXaXRoTnVtYmVyUkUgPSAvXiNcXGQvO1xuXG5mdW5jdGlvbiBzY3JvbGxUb1Bvc2l0aW9uIChzaG91bGRTY3JvbGwsIHBvc2l0aW9uKSB7XG4gIHZhciBpc09iamVjdCA9IHR5cGVvZiBzaG91bGRTY3JvbGwgPT09ICdvYmplY3QnO1xuICBpZiAoaXNPYmplY3QgJiYgdHlwZW9mIHNob3VsZFNjcm9sbC5zZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBnZXRFbGVtZW50QnlJZCB3b3VsZCBzdGlsbCBmYWlsIGlmIHRoZSBzZWxlY3RvciBjb250YWlucyBhIG1vcmUgY29tcGxpY2F0ZWQgcXVlcnkgbGlrZSAjbWFpbltkYXRhLWF0dHJdXG4gICAgLy8gYnV0IGF0IHRoZSBzYW1lIHRpbWUsIGl0IGRvZXNuJ3QgbWFrZSBtdWNoIHNlbnNlIHRvIHNlbGVjdCBhbiBlbGVtZW50IHdpdGggYW4gaWQgYW5kIGFuIGV4dHJhIHNlbGVjdG9yXG4gICAgdmFyIGVsID0gaGFzaFN0YXJ0c1dpdGhOdW1iZXJSRS50ZXN0KHNob3VsZFNjcm9sbC5zZWxlY3RvcikgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNob3VsZFNjcm9sbC5zZWxlY3Rvci5zbGljZSgxKSkgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2hvdWxkU2Nyb2xsLnNlbGVjdG9yKTtcblxuICAgIGlmIChlbCkge1xuICAgICAgdmFyIG9mZnNldCA9XG4gICAgICAgIHNob3VsZFNjcm9sbC5vZmZzZXQgJiYgdHlwZW9mIHNob3VsZFNjcm9sbC5vZmZzZXQgPT09ICdvYmplY3QnXG4gICAgICAgICAgPyBzaG91bGRTY3JvbGwub2Zmc2V0XG4gICAgICAgICAgOiB7fTtcbiAgICAgIG9mZnNldCA9IG5vcm1hbGl6ZU9mZnNldChvZmZzZXQpO1xuICAgICAgcG9zaXRpb24gPSBnZXRFbGVtZW50UG9zaXRpb24oZWwsIG9mZnNldCk7XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkUG9zaXRpb24oc2hvdWxkU2Nyb2xsKSkge1xuICAgICAgcG9zaXRpb24gPSBub3JtYWxpemVQb3NpdGlvbihzaG91bGRTY3JvbGwpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCAmJiBpc1ZhbGlkUG9zaXRpb24oc2hvdWxkU2Nyb2xsKSkge1xuICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgfVxuXG4gIGlmIChwb3NpdGlvbikge1xuICAgIHdpbmRvdy5zY3JvbGxUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHN1cHBvcnRzUHVzaFN0YXRlID1cbiAgaW5Ccm93c2VyICYmXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgICBpZiAoXG4gICAgICAodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiZcbiAgICAgIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiZcbiAgICAgIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJlxuICAgICAgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5XG4gIH0pKCk7XG5cbmZ1bmN0aW9uIHB1c2hTdGF0ZSAodXJsLCByZXBsYWNlKSB7XG4gIHNhdmVTY3JvbGxQb3NpdGlvbigpO1xuICAvLyB0cnkuLi5jYXRjaCB0aGUgcHVzaFN0YXRlIGNhbGwgdG8gZ2V0IGFyb3VuZCBTYWZhcmlcbiAgLy8gRE9NIEV4Y2VwdGlvbiAxOCB3aGVyZSBpdCBsaW1pdHMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxsc1xuICB2YXIgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB0cnkge1xuICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleTogZ2V0U3RhdGVLZXkoKSB9LCAnJywgdXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IHNldFN0YXRlS2V5KGdlblN0YXRlS2V5KCkpIH0sICcnLCB1cmwpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbltyZXBsYWNlID8gJ3JlcGxhY2UnIDogJ2Fzc2lnbiddKHVybCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZVN0YXRlICh1cmwpIHtcbiAgcHVzaFN0YXRlKHVybCwgdHJ1ZSk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBydW5RdWV1ZSAocXVldWUsIGZuLCBjYikge1xuICB2YXIgc3RlcCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIGlmIChpbmRleCA+PSBxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNiKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChxdWV1ZVtpbmRleF0pIHtcbiAgICAgICAgZm4ocXVldWVbaW5kZXhdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAoaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHN0ZXAoMCk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzIChtYXRjaGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIG5leHQpIHtcbiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTtcbiAgICB2YXIgcGVuZGluZyA9IDA7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZ1bmN0aW9uIChkZWYsIF8sIG1hdGNoLCBrZXkpIHtcbiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCxcbiAgICAgIC8vIGFzc3VtZSBpdCdzIGFuIGFzeW5jIGNvbXBvbmVudCByZXNvbHZlIGZ1bmN0aW9uLlxuICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBWdWUncyBkZWZhdWx0IGFzeW5jIHJlc29sdmluZyBtZWNoYW5pc20gYmVjYXVzZVxuICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW5cbiAgICAgIC8vIHJlc29sdmVkLlxuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZGVmLmNpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhhc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgcGVuZGluZysrO1xuXG4gICAgICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzb2x2ZWREZWYpIHtcbiAgICAgICAgICBpZiAoaXNFU01vZHVsZShyZXNvbHZlZERlZikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWYuZGVmYXVsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZVxuICAgICAgICAgIGRlZi5yZXNvbHZlZCA9IHR5cGVvZiByZXNvbHZlZERlZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyByZXNvbHZlZERlZlxuICAgICAgICAgICAgOiBfVnVlLmV4dGVuZChyZXNvbHZlZERlZik7XG4gICAgICAgICAgbWF0Y2guY29tcG9uZW50c1trZXldID0gcmVzb2x2ZWREZWY7XG4gICAgICAgICAgcGVuZGluZy0tO1xuICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQgXCIgKyBrZXkgKyBcIjogXCIgKyByZWFzb247XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gaXNFcnJvcihyZWFzb24pXG4gICAgICAgICAgICAgID8gcmVhc29uXG4gICAgICAgICAgICAgIDogbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gZGVmKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuM1xuICAgICAgICAgICAgdmFyIGNvbXAgPSByZXMuY29tcG9uZW50O1xuICAgICAgICAgICAgaWYgKGNvbXAgJiYgdHlwZW9mIGNvbXAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjb21wLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghaGFzQXN5bmMpIHsgbmV4dCgpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcENvbXBvbmVudHMgKFxuICBtYXRjaGVkLFxuICBmblxuKSB7XG4gIHJldHVybiBmbGF0dGVuKG1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKFxuICAgICAgbS5jb21wb25lbnRzW2tleV0sXG4gICAgICBtLmluc3RhbmNlc1trZXldLFxuICAgICAgbSwga2V5XG4gICAgKTsgfSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4gKGFycikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZSAob2JqKSB7XG4gIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbn1cblxuLy8gaW4gV2VicGFjayAyLCByZXF1aXJlLmVuc3VyZSBub3cgYWxzbyByZXR1cm5zIGEgUHJvbWlzZVxuLy8gc28gdGhlIHJlc29sdmUvcmVqZWN0IGZ1bmN0aW9ucyBtYXkgZ2V0IGNhbGxlZCBhbiBleHRyYSB0aW1lXG4vLyBpZiB0aGUgdXNlciB1c2VzIGFuIGFycm93IGZ1bmN0aW9uIHNob3J0aGFuZCB0aGF0IGhhcHBlbnMgdG9cbi8vIHJldHVybiB0aGF0IFByb21pc2UuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgaWYgKGNhbGxlZCkgeyByZXR1cm4gfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gIH1cbn1cblxudmFyIE5hdmlnYXRpb25EdXBsaWNhdGVkID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoRXJyb3IpIHtcbiAgZnVuY3Rpb24gTmF2aWdhdGlvbkR1cGxpY2F0ZWQgKG5vcm1hbGl6ZWRMb2NhdGlvbikge1xuICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5uYW1lID0gdGhpcy5fbmFtZSA9ICdOYXZpZ2F0aW9uRHVwbGljYXRlZCc7XG4gICAgLy8gcGFzc2luZyB0aGUgbWVzc2FnZSB0byBzdXBlcigpIGRvZXNuJ3Qgc2VlbSB0byB3b3JrIGluIHRoZSB0cmFuc3BpbGVkIHZlcnNpb25cbiAgICB0aGlzLm1lc3NhZ2UgPSBcIk5hdmlnYXRpbmcgdG8gY3VycmVudCBsb2NhdGlvbiAoXFxcIlwiICsgKG5vcm1hbGl6ZWRMb2NhdGlvbi5mdWxsUGF0aCkgKyBcIlxcXCIpIGlzIG5vdCBhbGxvd2VkXCI7XG4gICAgLy8gYWRkIGEgc3RhY2sgcHJvcGVydHkgc28gc2VydmljZXMgbGlrZSBTZW50cnkgY2FuIGNvcnJlY3RseSBkaXNwbGF5IGl0XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgIHZhbHVlOiBuZXcgRXJyb3IoKS5zdGFjayxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLy8gd2UgY291bGQgYWxzbyBoYXZlIHVzZWRcbiAgICAvLyBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKVxuICAgIC8vIGJ1dCBpdCBvbmx5IGV4aXN0cyBvbiBub2RlIGFuZCBjaHJvbWVcbiAgfVxuXG4gIGlmICggRXJyb3IgKSBOYXZpZ2F0aW9uRHVwbGljYXRlZC5fX3Byb3RvX18gPSBFcnJvcjtcbiAgTmF2aWdhdGlvbkR1cGxpY2F0ZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXJyb3IgJiYgRXJyb3IucHJvdG90eXBlICk7XG4gIE5hdmlnYXRpb25EdXBsaWNhdGVkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5hdmlnYXRpb25EdXBsaWNhdGVkO1xuXG4gIHJldHVybiBOYXZpZ2F0aW9uRHVwbGljYXRlZDtcbn0oRXJyb3IpKTtcblxuLy8gc3VwcG9ydCBJRTlcbk5hdmlnYXRpb25EdXBsaWNhdGVkLl9uYW1lID0gJ05hdmlnYXRpb25EdXBsaWNhdGVkJztcblxuLyogICovXG5cbnZhciBIaXN0b3J5ID0gZnVuY3Rpb24gSGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB0aGlzLmJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xuICAvLyBzdGFydCB3aXRoIGEgcm91dGUgb2JqZWN0IHRoYXQgc3RhbmRzIGZvciBcIm5vd2hlcmVcIlxuICB0aGlzLmN1cnJlbnQgPSBTVEFSVDtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB0aGlzLnJlYWR5Q2JzID0gW107XG4gIHRoaXMucmVhZHlFcnJvckNicyA9IFtdO1xuICB0aGlzLmVycm9yQ2JzID0gW107XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4gKGNiKSB7XG4gIHRoaXMuY2IgPSBjYjtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWFkeUNicy5wdXNoKGNiKTtcbiAgICBpZiAoZXJyb3JDYikge1xuICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG4gICAgfVxuICB9XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8gKFxuICBsb2NhdGlvbixcbiAgb25Db21wbGV0ZSxcbiAgb25BYm9ydFxuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJvdXRlID0gdGhpcy5yb3V0ZXIubWF0Y2gobG9jYXRpb24sIHRoaXMuY3VycmVudCk7XG4gIHRoaXMuY29uZmlybVRyYW5zaXRpb24oXG4gICAgcm91dGUsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB0aGlzJDEuZW5zdXJlVVJMKCk7XG5cbiAgICAgIC8vIGZpcmUgcmVhZHkgY2JzIG9uY2VcbiAgICAgIGlmICghdGhpcyQxLnJlYWR5KSB7XG4gICAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMkMS5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAob25BYm9ydCkge1xuICAgICAgICBvbkFib3J0KGVycik7XG4gICAgICB9XG4gICAgICBpZiAoZXJyICYmICF0aGlzJDEucmVhZHkpIHtcbiAgICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcyQxLnJlYWR5RXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICBjYihlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5jb25maXJtVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uIChyb3V0ZSwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgLy8gYWZ0ZXIgbWVyZ2luZyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9wdWxsLzI3NzEgd2VcbiAgICAvLyBXaGVuIHRoZSB1c2VyIG5hdmlnYXRlcyB0aHJvdWdoIGhpc3RvcnkgdGhyb3VnaCBiYWNrL2ZvcndhcmQgYnV0dG9uc1xuICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIHRocm93IHRoZSBlcnJvci4gV2Ugb25seSB0aHJvdyBpdCBpZiBkaXJlY3RseSBjYWxsaW5nXG4gICAgLy8gcHVzaC9yZXBsYWNlLiBUaGF0J3Mgd2h5IGl0J3Mgbm90IGluY2x1ZGVkIGluIGlzRXJyb3JcbiAgICBpZiAoIWlzRXh0ZW5kZWRFcnJvcihOYXZpZ2F0aW9uRHVwbGljYXRlZCwgZXJyKSAmJiBpc0Vycm9yKGVycikpIHtcbiAgICAgIGlmICh0aGlzJDEuZXJyb3JDYnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMkMS5lcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihmYWxzZSwgJ3VuY2F1Z2h0IGVycm9yIGR1cmluZyByb3V0ZSBuYXZpZ2F0aW9uOicpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIG9uQWJvcnQgJiYgb25BYm9ydChlcnIpO1xuICB9O1xuICBpZiAoXG4gICAgaXNTYW1lUm91dGUocm91dGUsIGN1cnJlbnQpICYmXG4gICAgLy8gaW4gdGhlIGNhc2UgdGhlIHJvdXRlIG1hcCBoYXMgYmVlbiBkeW5hbWljYWxseSBhcHBlbmRlZCB0b1xuICAgIHJvdXRlLm1hdGNoZWQubGVuZ3RoID09PSBjdXJyZW50Lm1hdGNoZWQubGVuZ3RoXG4gICkge1xuICAgIHRoaXMuZW5zdXJlVVJMKCk7XG4gICAgcmV0dXJuIGFib3J0KG5ldyBOYXZpZ2F0aW9uRHVwbGljYXRlZChyb3V0ZSkpXG4gIH1cblxuICB2YXIgcmVmID0gcmVzb2x2ZVF1ZXVlKFxuICAgIHRoaXMuY3VycmVudC5tYXRjaGVkLFxuICAgIHJvdXRlLm1hdGNoZWRcbiAgKTtcbiAgICB2YXIgdXBkYXRlZCA9IHJlZi51cGRhdGVkO1xuICAgIHZhciBkZWFjdGl2YXRlZCA9IHJlZi5kZWFjdGl2YXRlZDtcbiAgICB2YXIgYWN0aXZhdGVkID0gcmVmLmFjdGl2YXRlZDtcblxuICB2YXIgcXVldWUgPSBbXS5jb25jYXQoXG4gICAgLy8gaW4tY29tcG9uZW50IGxlYXZlIGd1YXJkc1xuICAgIGV4dHJhY3RMZWF2ZUd1YXJkcyhkZWFjdGl2YXRlZCksXG4gICAgLy8gZ2xvYmFsIGJlZm9yZSBob29rc1xuICAgIHRoaXMucm91dGVyLmJlZm9yZUhvb2tzLFxuICAgIC8vIGluLWNvbXBvbmVudCB1cGRhdGUgaG9va3NcbiAgICBleHRyYWN0VXBkYXRlSG9va3ModXBkYXRlZCksXG4gICAgLy8gaW4tY29uZmlnIGVudGVyIGd1YXJkc1xuICAgIGFjdGl2YXRlZC5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uYmVmb3JlRW50ZXI7IH0pLFxuICAgIC8vIGFzeW5jIGNvbXBvbmVudHNcbiAgICByZXNvbHZlQXN5bmNDb21wb25lbnRzKGFjdGl2YXRlZClcbiAgKTtcblxuICB0aGlzLnBlbmRpbmcgPSByb3V0ZTtcbiAgdmFyIGl0ZXJhdG9yID0gZnVuY3Rpb24gKGhvb2ssIG5leHQpIHtcbiAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICByZXR1cm4gYWJvcnQoKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgaG9vayhyb3V0ZSwgY3VycmVudCwgZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0byA9PT0gZmFsc2UgfHwgaXNFcnJvcih0bykpIHtcbiAgICAgICAgICAvLyBuZXh0KGZhbHNlKSAtPiBhYm9ydCBuYXZpZ2F0aW9uLCBlbnN1cmUgY3VycmVudCBVUkxcbiAgICAgICAgICB0aGlzJDEuZW5zdXJlVVJMKHRydWUpO1xuICAgICAgICAgIGFib3J0KHRvKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICB0eXBlb2YgdG8gPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgKHR5cGVvZiB0byA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICh0eXBlb2YgdG8ucGF0aCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRvLm5hbWUgPT09ICdzdHJpbmcnKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gbmV4dCgnLycpIG9yIG5leHQoeyBwYXRoOiAnLycgfSkgLT4gcmVkaXJlY3RcbiAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09ICdvYmplY3QnICYmIHRvLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHRoaXMkMS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcyQxLnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25maXJtIHRyYW5zaXRpb24gYW5kIHBhc3Mgb24gdGhlIHZhbHVlXG4gICAgICAgICAgbmV4dCh0byk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFib3J0KGUpO1xuICAgIH1cbiAgfTtcblxuICBydW5RdWV1ZShxdWV1ZSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zdEVudGVyQ2JzID0gW107XG4gICAgdmFyIGlzVmFsaWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuY3VycmVudCA9PT0gcm91dGU7IH07XG4gICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmVcbiAgICAvLyBleHRyYWN0aW5nIGluLWNvbXBvbmVudCBlbnRlciBndWFyZHNcbiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkLCBwb3N0RW50ZXJDYnMsIGlzVmFsaWQpO1xuICAgIHZhciBxdWV1ZSA9IGVudGVyR3VhcmRzLmNvbmNhdCh0aGlzJDEucm91dGVyLnJlc29sdmVIb29rcyk7XG4gICAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICAgIHJldHVybiBhYm9ydCgpXG4gICAgICB9XG4gICAgICB0aGlzJDEucGVuZGluZyA9IG51bGw7XG4gICAgICBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIGlmICh0aGlzJDEucm91dGVyLmFwcCkge1xuICAgICAgICB0aGlzJDEucm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBvc3RFbnRlckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudXBkYXRlUm91dGUgPSBmdW5jdGlvbiB1cGRhdGVSb3V0ZSAocm91dGUpIHtcbiAgdmFyIHByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMuY3VycmVudCA9IHJvdXRlO1xuICB0aGlzLmNiICYmIHRoaXMuY2Iocm91dGUpO1xuICB0aGlzLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UgKGJhc2UpIHtcbiAgaWYgKCFiYXNlKSB7XG4gICAgaWYgKGluQnJvd3Nlcikge1xuICAgICAgLy8gcmVzcGVjdCA8YmFzZT4gdGFnXG4gICAgICB2YXIgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgICAgYmFzZSA9IChiYXNlRWwgJiYgYmFzZUVsLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB8fCAnLyc7XG4gICAgICAvLyBzdHJpcCBmdWxsIFVSTCBvcmlnaW5cbiAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15odHRwcz86XFwvXFwvW15cXC9dKy8sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9ICcvJztcbiAgICB9XG4gIH1cbiAgLy8gbWFrZSBzdXJlIHRoZXJlJ3MgdGhlIHN0YXJ0aW5nIHNsYXNoXG4gIGlmIChiYXNlLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgYmFzZSA9ICcvJyArIGJhc2U7XG4gIH1cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNsYXNoXG4gIHJldHVybiBiYXNlLnJlcGxhY2UoL1xcLyQvLCAnJylcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVF1ZXVlIChcbiAgY3VycmVudCxcbiAgbmV4dFxuKSB7XG4gIHZhciBpO1xuICB2YXIgbWF4ID0gTWF0aC5tYXgoY3VycmVudC5sZW5ndGgsIG5leHQubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgaWYgKGN1cnJlbnRbaV0gIT09IG5leHRbaV0pIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdXBkYXRlZDogbmV4dC5zbGljZSgwLCBpKSxcbiAgICBhY3RpdmF0ZWQ6IG5leHQuc2xpY2UoaSksXG4gICAgZGVhY3RpdmF0ZWQ6IGN1cnJlbnQuc2xpY2UoaSlcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmRzIChcbiAgcmVjb3JkcyxcbiAgbmFtZSxcbiAgYmluZCxcbiAgcmV2ZXJzZVxuKSB7XG4gIHZhciBndWFyZHMgPSBmbGF0TWFwQ29tcG9uZW50cyhyZWNvcmRzLCBmdW5jdGlvbiAoZGVmLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSkge1xuICAgIHZhciBndWFyZCA9IGV4dHJhY3RHdWFyZChkZWYsIG5hbWUpO1xuICAgIGlmIChndWFyZCkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZ3VhcmQpXG4gICAgICAgID8gZ3VhcmQubWFwKGZ1bmN0aW9uIChndWFyZCkgeyByZXR1cm4gYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpOyB9KVxuICAgICAgICA6IGJpbmQoZ3VhcmQsIGluc3RhbmNlLCBtYXRjaCwga2V5KVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmbGF0dGVuKHJldmVyc2UgPyBndWFyZHMucmV2ZXJzZSgpIDogZ3VhcmRzKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmQgKFxuICBkZWYsXG4gIGtleVxuKSB7XG4gIGlmICh0eXBlb2YgZGVmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXh0ZW5kIG5vdyBzbyB0aGF0IGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQuXG4gICAgZGVmID0gX1Z1ZS5leHRlbmQoZGVmKTtcbiAgfVxuICByZXR1cm4gZGVmLm9wdGlvbnNba2V5XVxufVxuXG5mdW5jdGlvbiBleHRyYWN0TGVhdmVHdWFyZHMgKGRlYWN0aXZhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKGRlYWN0aXZhdGVkLCAnYmVmb3JlUm91dGVMZWF2ZScsIGJpbmRHdWFyZCwgdHJ1ZSlcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFVwZGF0ZUhvb2tzICh1cGRhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKHVwZGF0ZWQsICdiZWZvcmVSb3V0ZVVwZGF0ZScsIGJpbmRHdWFyZClcbn1cblxuZnVuY3Rpb24gYmluZEd1YXJkIChndWFyZCwgaW5zdGFuY2UpIHtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kUm91dGVHdWFyZCAoKSB7XG4gICAgICByZXR1cm4gZ3VhcmQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdEVudGVyR3VhcmRzIChcbiAgYWN0aXZhdGVkLFxuICBjYnMsXG4gIGlzVmFsaWRcbikge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhcbiAgICBhY3RpdmF0ZWQsXG4gICAgJ2JlZm9yZVJvdXRlRW50ZXInLFxuICAgIGZ1bmN0aW9uIChndWFyZCwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgcmV0dXJuIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5LCBjYnMsIGlzVmFsaWQpXG4gICAgfVxuICApXG59XG5cbmZ1bmN0aW9uIGJpbmRFbnRlckd1YXJkIChcbiAgZ3VhcmQsXG4gIG1hdGNoLFxuICBrZXksXG4gIGNicyxcbiAgaXNWYWxpZFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiByb3V0ZUVudGVyR3VhcmQgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgcmV0dXJuIGd1YXJkKHRvLCBmcm9tLCBmdW5jdGlvbiAoY2IpIHtcbiAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2JzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vICM3NTBcbiAgICAgICAgICAvLyBpZiBhIHJvdXRlci12aWV3IGlzIHdyYXBwZWQgd2l0aCBhbiBvdXQtaW4gdHJhbnNpdGlvbixcbiAgICAgICAgICAvLyB0aGUgaW5zdGFuY2UgbWF5IG5vdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCBhdCB0aGlzIHRpbWUuXG4gICAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIHBvbGwgZm9yIHJlZ2lzdHJhdGlvbiB1bnRpbCBjdXJyZW50IHJvdXRlXG4gICAgICAgICAgLy8gaXMgbm8gbG9uZ2VyIHZhbGlkLlxuICAgICAgICAgIHBvbGwoY2IsIG1hdGNoLmluc3RhbmNlcywga2V5LCBpc1ZhbGlkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBuZXh0KGNiKTtcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIHBvbGwgKFxuICBjYiwgLy8gc29tZWhvdyBmbG93IGNhbm5vdCBpbmZlciB0aGlzIGlzIGEgZnVuY3Rpb25cbiAgaW5zdGFuY2VzLFxuICBrZXksXG4gIGlzVmFsaWRcbikge1xuICBpZiAoXG4gICAgaW5zdGFuY2VzW2tleV0gJiZcbiAgICAhaW5zdGFuY2VzW2tleV0uX2lzQmVpbmdEZXN0cm95ZWQgLy8gZG8gbm90IHJldXNlIGJlaW5nIGRlc3Ryb3llZCBpbnN0YW5jZVxuICApIHtcbiAgICBjYihpbnN0YW5jZXNba2V5XSk7XG4gIH0gZWxzZSBpZiAoaXNWYWxpZCgpKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBwb2xsKGNiLCBpbnN0YW5jZXMsIGtleSwgaXNWYWxpZCk7XG4gICAgfSwgMTYpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgSFRNTDVIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSkge1xuICBmdW5jdGlvbiBIVE1MNUhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG5cbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHZhciBpbml0TG9jYXRpb24gPSBnZXRMb2NhdGlvbih0aGlzLmJhc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMkMS5jdXJyZW50O1xuXG4gICAgICAvLyBBdm9pZGluZyBmaXJzdCBgcG9wc3RhdGVgIGV2ZW50IGRpc3BhdGNoZWQgaW4gc29tZSBicm93c2VycyBidXQgZmlyc3RcbiAgICAgIC8vIGhpc3Rvcnkgcm91dGUgbm90IHVwZGF0ZWQgc2luY2UgYXN5bmMgZ3VhcmQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMkMS5iYXNlKTtcbiAgICAgIGlmICh0aGlzJDEuY3VycmVudCA9PT0gU1RBUlQgJiYgbG9jYXRpb24gPT09IGluaXRMb2NhdGlvbikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcyQxLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgICAgIGhhbmRsZVNjcm9sbChyb3V0ZXIsIHJvdXRlLCBjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkgKSBIVE1MNUhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeTtcbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUgKTtcbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhUTUw1SGlzdG9yeTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHB1c2hTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICByZXBsYWNlU3RhdGUoY2xlYW5QYXRoKHRoaXMkMS5iYXNlICsgcm91dGUuZnVsbFBhdGgpKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMIChwdXNoKSB7XG4gICAgaWYgKGdldExvY2F0aW9uKHRoaXMuYmFzZSkgIT09IHRoaXMuY3VycmVudC5mdWxsUGF0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBjbGVhblBhdGgodGhpcy5iYXNlICsgdGhpcy5jdXJyZW50LmZ1bGxQYXRoKTtcbiAgICAgIHB1c2ggPyBwdXNoU3RhdGUoY3VycmVudCkgOiByZXBsYWNlU3RhdGUoY3VycmVudCk7XG4gICAgfVxuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0TG9jYXRpb24odGhpcy5iYXNlKVxuICB9O1xuXG4gIHJldHVybiBIVE1MNUhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuZnVuY3Rpb24gZ2V0TG9jYXRpb24gKGJhc2UpIHtcbiAgdmFyIHBhdGggPSBkZWNvZGVVUkkod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgaWYgKGJhc2UgJiYgcGF0aC5pbmRleE9mKGJhc2UpID09PSAwKSB7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoYmFzZS5sZW5ndGgpO1xuICB9XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIHdpbmRvdy5sb2NhdGlvbi5oYXNoXG59XG5cbi8qICAqL1xuXG52YXIgSGFzaEhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5KSB7XG4gIGZ1bmN0aW9uIEhhc2hIaXN0b3J5IChyb3V0ZXIsIGJhc2UsIGZhbGxiYWNrKSB7XG4gICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG4gICAgLy8gY2hlY2sgaGlzdG9yeSBmYWxsYmFjayBkZWVwbGlua2luZ1xuICAgIGlmIChmYWxsYmFjayAmJiBjaGVja0ZhbGxiYWNrKHRoaXMuYmFzZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbnN1cmVTbGFzaCgpO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5ICkgSGFzaEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSAmJiBIaXN0b3J5LnByb3RvdHlwZSApO1xuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIYXNoSGlzdG9yeTtcblxuICAvLyB0aGlzIGlzIGRlbGF5ZWQgdW50aWwgdGhlIGFwcCBtb3VudHNcbiAgLy8gdG8gYXZvaWQgdGhlIGhhc2hjaGFuZ2UgbGlzdGVuZXIgYmVpbmcgZmlyZWQgdG9vIGVhcmx5XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByb3V0ZXIgPSB0aGlzLnJvdXRlcjtcbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgc3VwcG9ydHNQdXNoU3RhdGUgPyAncG9wc3RhdGUnIDogJ2hhc2hjaGFuZ2UnLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMkMS5jdXJyZW50O1xuICAgICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGdldEhhc2goKSwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHB1c2hIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMIChwdXNoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQuZnVsbFBhdGg7XG4gICAgaWYgKGdldEhhc2goKSAhPT0gY3VycmVudCkge1xuICAgICAgcHVzaCA/IHB1c2hIYXNoKGN1cnJlbnQpIDogcmVwbGFjZUhhc2goY3VycmVudCk7XG4gICAgfVxuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRIYXNoKClcbiAgfTtcblxuICByZXR1cm4gSGFzaEhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuZnVuY3Rpb24gY2hlY2tGYWxsYmFjayAoYmFzZSkge1xuICB2YXIgbG9jYXRpb24gPSBnZXRMb2NhdGlvbihiYXNlKTtcbiAgaWYgKCEvXlxcLyMvLnRlc3QobG9jYXRpb24pKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoY2xlYW5QYXRoKGJhc2UgKyAnLyMnICsgbG9jYXRpb24pKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNsYXNoICgpIHtcbiAgdmFyIHBhdGggPSBnZXRIYXNoKCk7XG4gIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXBsYWNlSGFzaCgnLycgKyBwYXRoKTtcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdldEhhc2ggKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICAvLyBlbXB0eSBwYXRoXG4gIGlmIChpbmRleCA8IDApIHsgcmV0dXJuICcnIH1cblxuICBocmVmID0gaHJlZi5zbGljZShpbmRleCArIDEpO1xuICAvLyBkZWNvZGUgdGhlIGhhc2ggYnV0IG5vdCB0aGUgc2VhcmNoIG9yIGhhc2hcbiAgLy8gYXMgc2VhcmNoKHF1ZXJ5KSBpcyBhbHJlYWR5IGRlY29kZWRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzI3MDhcbiAgdmFyIHNlYXJjaEluZGV4ID0gaHJlZi5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCA8IDApIHtcbiAgICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2hJbmRleCA+IC0xKSB7XG4gICAgICBocmVmID0gZGVjb2RlVVJJKGhyZWYuc2xpY2UoMCwgaGFzaEluZGV4KSkgKyBocmVmLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgfSBlbHNlIHsgaHJlZiA9IGRlY29kZVVSSShocmVmKTsgfVxuICB9IGVsc2Uge1xuICAgIGlmIChzZWFyY2hJbmRleCA+IC0xKSB7XG4gICAgICBocmVmID0gZGVjb2RlVVJJKGhyZWYuc2xpY2UoMCwgc2VhcmNoSW5kZXgpKSArIGhyZWYuc2xpY2Uoc2VhcmNoSW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBocmVmXG59XG5cbmZ1bmN0aW9uIGdldFVybCAocGF0aCkge1xuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaSA9IGhyZWYuaW5kZXhPZignIycpO1xuICB2YXIgYmFzZSA9IGkgPj0gMCA/IGhyZWYuc2xpY2UoMCwgaSkgOiBocmVmO1xuICByZXR1cm4gKGJhc2UgKyBcIiNcIiArIHBhdGgpXG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoIChwYXRoKSB7XG4gIGlmIChzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgIHB1c2hTdGF0ZShnZXRVcmwocGF0aCkpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaCAocGF0aCkge1xuICBpZiAoc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICByZXBsYWNlU3RhdGUoZ2V0VXJsKHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShnZXRVcmwocGF0aCkpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgQWJzdHJhY3RIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSkge1xuICBmdW5jdGlvbiBBYnN0cmFjdEhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIEhpc3RvcnkuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB0aGlzLmluZGV4ID0gLTE7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkgKSBBYnN0cmFjdEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUgKTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFic3RyYWN0SGlzdG9yeTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICB0aGlzJDEuc3RhY2sgPSB0aGlzJDEuc3RhY2suc2xpY2UoMCwgdGhpcyQxLmluZGV4ICsgMSkuY29uY2F0KHJvdXRlKTtcbiAgICAgICAgdGhpcyQxLmluZGV4Kys7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCkuY29uY2F0KHJvdXRlKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuaW5kZXggKyBuO1xuICAgIGlmICh0YXJnZXRJbmRleCA8IDAgfHwgdGFyZ2V0SW5kZXggPj0gdGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgcm91dGUgPSB0aGlzLnN0YWNrW3RhcmdldEluZGV4XTtcbiAgICB0aGlzLmNvbmZpcm1UcmFuc2l0aW9uKFxuICAgICAgcm91dGUsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMkMS5pbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgICB0aGlzJDEudXBkYXRlUm91dGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGlzRXh0ZW5kZWRFcnJvcihOYXZpZ2F0aW9uRHVwbGljYXRlZCwgZXJyKSkge1xuICAgICAgICAgIHRoaXMkMS5pbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGN1cnJlbnQgPyBjdXJyZW50LmZ1bGxQYXRoIDogJy8nXG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKCkge1xuICAgIC8vIG5vb3BcbiAgfTtcblxuICByZXR1cm4gQWJzdHJhY3RIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbi8qICAqL1xuXG5cblxudmFyIFZ1ZVJvdXRlciA9IGZ1bmN0aW9uIFZ1ZVJvdXRlciAob3B0aW9ucykge1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICB0aGlzLmFwcCA9IG51bGw7XG4gIHRoaXMuYXBwcyA9IFtdO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLmJlZm9yZUhvb2tzID0gW107XG4gIHRoaXMucmVzb2x2ZUhvb2tzID0gW107XG4gIHRoaXMuYWZ0ZXJIb29rcyA9IFtdO1xuICB0aGlzLm1hdGNoZXIgPSBjcmVhdGVNYXRjaGVyKG9wdGlvbnMucm91dGVzIHx8IFtdLCB0aGlzKTtcblxuICB2YXIgbW9kZSA9IG9wdGlvbnMubW9kZSB8fCAnaGFzaCc7XG4gIHRoaXMuZmFsbGJhY2sgPSBtb2RlID09PSAnaGlzdG9yeScgJiYgIXN1cHBvcnRzUHVzaFN0YXRlICYmIG9wdGlvbnMuZmFsbGJhY2sgIT09IGZhbHNlO1xuICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgIG1vZGUgPSAnaGFzaCc7XG4gIH1cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICBtb2RlID0gJ2Fic3RyYWN0JztcbiAgfVxuICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhUTUw1SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIYXNoSGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UsIHRoaXMuZmFsbGJhY2spO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdhYnN0cmFjdCc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgQWJzdHJhY3RIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIChcImludmFsaWQgbW9kZTogXCIgKyBtb2RlKSk7XG4gICAgICB9XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGN1cnJlbnRSb3V0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIHJlZGlyZWN0ZWRGcm9tXG4pIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmN1cnJlbnRSb3V0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LmN1cnJlbnRcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKGFwcCAvKiBWdWUgY29tcG9uZW50IGluc3RhbmNlICovKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnQoXG4gICAgaW5zdGFsbC5pbnN0YWxsZWQsXG4gICAgXCJub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gY2FsbCBgVnVlLnVzZShWdWVSb3V0ZXIpYCBcIiArXG4gICAgXCJiZWZvcmUgY3JlYXRpbmcgcm9vdCBpbnN0YW5jZS5cIlxuICApO1xuXG4gIHRoaXMuYXBwcy5wdXNoKGFwcCk7XG5cbiAgLy8gc2V0IHVwIGFwcCBkZXN0cm95ZWQgaGFuZGxlclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjYzOVxuICBhcHAuJG9uY2UoJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNsZWFuIG91dCBhcHAgZnJvbSB0aGlzLmFwcHMgYXJyYXkgb25jZSBkZXN0cm95ZWRcbiAgICB2YXIgaW5kZXggPSB0aGlzJDEuYXBwcy5pbmRleE9mKGFwcCk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHsgdGhpcyQxLmFwcHMuc3BsaWNlKGluZGV4LCAxKTsgfVxuICAgIC8vIGVuc3VyZSB3ZSBzdGlsbCBoYXZlIGEgbWFpbiBhcHAgb3IgbnVsbCBpZiBubyBhcHBzXG4gICAgLy8gd2UgZG8gbm90IHJlbGVhc2UgdGhlIHJvdXRlciBzbyBpdCBjYW4gYmUgcmV1c2VkXG4gICAgaWYgKHRoaXMkMS5hcHAgPT09IGFwcCkgeyB0aGlzJDEuYXBwID0gdGhpcyQxLmFwcHNbMF0gfHwgbnVsbDsgfVxuICB9KTtcblxuICAvLyBtYWluIGFwcCBwcmV2aW91c2x5IGluaXRpYWxpemVkXG4gIC8vIHJldHVybiBhcyB3ZSBkb24ndCBuZWVkIHRvIHNldCB1cCBuZXcgaGlzdG9yeSBsaXN0ZW5lclxuICBpZiAodGhpcy5hcHApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRoaXMuYXBwID0gYXBwO1xuXG4gIHZhciBoaXN0b3J5ID0gdGhpcy5oaXN0b3J5O1xuXG4gIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSFRNTDVIaXN0b3J5KSB7XG4gICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSk7XG4gIH0gZWxzZSBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhhc2hIaXN0b3J5KSB7XG4gICAgdmFyIHNldHVwSGFzaExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaGlzdG9yeS5zZXR1cExpc3RlbmVycygpO1xuICAgIH07XG4gICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oXG4gICAgICBoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpLFxuICAgICAgc2V0dXBIYXNoTGlzdGVuZXIsXG4gICAgICBzZXR1cEhhc2hMaXN0ZW5lclxuICAgICk7XG4gIH1cblxuICBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAocm91dGUpIHtcbiAgICB0aGlzJDEuYXBwcy5mb3JFYWNoKGZ1bmN0aW9uIChhcHApIHtcbiAgICAgIGFwcC5fcm91dGUgPSByb3V0ZTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZUVhY2ggPSBmdW5jdGlvbiBiZWZvcmVFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYmVmb3JlSG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iZWZvcmVSZXNvbHZlID0gZnVuY3Rpb24gYmVmb3JlUmVzb2x2ZSAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLnJlc29sdmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFmdGVyRWFjaCA9IGZ1bmN0aW9uIGFmdGVyRWFjaCAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLmFmdGVySG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5vblJlYWR5ID0gZnVuY3Rpb24gb25SZWFkeSAoY2IsIGVycm9yQ2IpIHtcbiAgdGhpcy5oaXN0b3J5Lm9uUmVhZHkoY2IsIGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25FcnJvcihlcnJvckNiKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghb25Db21wbGV0ZSAmJiAhb25BYm9ydCAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdGhpcyQxLmhpc3RvcnkucHVzaChsb2NhdGlvbiwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHRoaXMuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KTtcbiAgfVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFvbkNvbXBsZXRlICYmICFvbkFib3J0ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0aGlzJDEuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgdGhpcy5oaXN0b3J5LmdvKG4pO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24gYmFjayAoKSB7XG4gIHRoaXMuZ28oLTEpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gZm9yd2FyZCAoKSB7XG4gIHRoaXMuZ28oMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmdldE1hdGNoZWRDb21wb25lbnRzID0gZnVuY3Rpb24gZ2V0TWF0Y2hlZENvbXBvbmVudHMgKHRvKSB7XG4gIHZhciByb3V0ZSA9IHRvXG4gICAgPyB0by5tYXRjaGVkXG4gICAgICA/IHRvXG4gICAgICA6IHRoaXMucmVzb2x2ZSh0bykucm91dGVcbiAgICA6IHRoaXMuY3VycmVudFJvdXRlO1xuICBpZiAoIXJvdXRlKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgcm91dGUubWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIG0uY29tcG9uZW50c1trZXldXG4gICAgfSlcbiAgfSkpXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlIChcbiAgdG8sXG4gIGN1cnJlbnQsXG4gIGFwcGVuZFxuKSB7XG4gIGN1cnJlbnQgPSBjdXJyZW50IHx8IHRoaXMuaGlzdG9yeS5jdXJyZW50O1xuICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVMb2NhdGlvbihcbiAgICB0byxcbiAgICBjdXJyZW50LFxuICAgIGFwcGVuZCxcbiAgICB0aGlzXG4gICk7XG4gIHZhciByb3V0ZSA9IHRoaXMubWF0Y2gobG9jYXRpb24sIGN1cnJlbnQpO1xuICB2YXIgZnVsbFBhdGggPSByb3V0ZS5yZWRpcmVjdGVkRnJvbSB8fCByb3V0ZS5mdWxsUGF0aDtcbiAgdmFyIGJhc2UgPSB0aGlzLmhpc3RvcnkuYmFzZTtcbiAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGJhc2UsIGZ1bGxQYXRoLCB0aGlzLm1vZGUpO1xuICByZXR1cm4ge1xuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICByb3V0ZTogcm91dGUsXG4gICAgaHJlZjogaHJlZixcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIG5vcm1hbGl6ZWRUbzogbG9jYXRpb24sXG4gICAgcmVzb2x2ZWQ6IHJvdXRlXG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWRkUm91dGVzID0gZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgdGhpcy5tYXRjaGVyLmFkZFJvdXRlcyhyb3V0ZXMpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlUm91dGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySG9vayAobGlzdCwgZm4pIHtcbiAgbGlzdC5wdXNoKGZuKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGxpc3QuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkgeyBsaXN0LnNwbGljZShpLCAxKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhyZWYgKGJhc2UsIGZ1bGxQYXRoLCBtb2RlKSB7XG4gIHZhciBwYXRoID0gbW9kZSA9PT0gJ2hhc2gnID8gJyMnICsgZnVsbFBhdGggOiBmdWxsUGF0aDtcbiAgcmV0dXJuIGJhc2UgPyBjbGVhblBhdGgoYmFzZSArICcvJyArIHBhdGgpIDogcGF0aFxufVxuXG5WdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7XG5WdWVSb3V0ZXIudmVyc2lvbiA9ICczLjEuMyc7XG5cbmlmIChpbkJyb3dzZXIgJiYgd2luZG93LlZ1ZSkge1xuICB3aW5kb3cuVnVlLnVzZShWdWVSb3V0ZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWdWVSb3V0ZXI7XG4iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjEwXG4gKiAoYykgMjAxNC0yMDE5IEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzdHJpbmcgY29udGFpbmluZyBzdGF0aWMga2V5cyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBtKSB7XG4gICAgcmV0dXJuIGtleXMuY29uY2F0KG0uc3RhdGljS2V5cyB8fCBbXSlcbiAgfSwgW10pLmpvaW4oJywnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaGluaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgdGltZXJGdW5jKCk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJiAhKGtleSBpbiB0YXJnZXQuJGRhdGEpKTtcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgcmV0dXJuIHJlcyAmJiAoXG4gICAgICByZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50KSAvLyAjOTY1OFxuICAgICkgPyB1bmRlZmluZWRcbiAgICAgIDogcmVzXG4gIH07XG4gIC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpc1xuICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gIGlmIChmbi5wcm94eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cblxuZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsb3RzW2tleV07IH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICByZXQucHVzaChyZW5kZXIocmVzdWx0LnZhbHVlLCByZXQubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc0RlZihyZXQpKSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICBub2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAvLyBudWxsIGlzIGEgc3BlaWNhbCB2YWx1ZSBmb3IgZXhwbGljaXRseSByZW1vdmluZyBhIGJpbmRpbmdcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkludmFsaWQgdmFsdWUgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IChleHBlY3RlZCBzdHJpbmcgb3IgbnVsbCk6IFwiICsga2V5KSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJhc2VPYmpcbn1cblxuLy8gaGVscGVyIHRvIGR5bmFtaWNhbGx5IGFwcGVuZCBtb2RpZmllciBydW50aW1lIG1hcmtlcnMgdG8gZXZlbnQgbmFtZXMuXG4vLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxuLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLlxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyICh2YWx1ZSwgc3ltYm9sKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3ltYm9sICsgdmFsdWUgOiB2YWx1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7XG4gIHRhcmdldC5fcyA9IHRvU3RyaW5nO1xuICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICB0YXJnZXQuX3QgPSByZW5kZXJTbG90O1xuICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYztcbiAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzO1xuICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90cztcbiAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbiAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xuICB0YXJnZXQuX3AgPSBwcmVwZW5kTW9kaWZpZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcyQxLiRzbG90cykge1xuICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHRoaXMkMS4kc2xvdHMgPSByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIHBhcmVudClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzJDEuJHNsb3RzXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsICh7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAvLyAoZS5nLiBpdCB3YXMgZnJvbSBhIGNhY2hlZCBub3JtYWwgc2xvdCkgdGhlIGZuQ29udGV4dCBjYXVzZXMgbmFtZWQgc2xvdHNcbiAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdWVzIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAoXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDMgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjYuMTAnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgID8gJ2ZhbHNlJ1xuICAgIC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6ICd0cnVlJ1xufTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1ByZVRhZyA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHRhZyA9PT0gJ3ByZSc7IH07XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgY3JlYXRpbmdFbG1JblZQcmUpKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcbiAgICAgICAgICAgICdyZWdpc3RlciB0aGUgY29tcG9uZW50IGNvcnJlY3RseT8gRm9yIHJlY3Vyc2l2ZSBjb21wb25lbnRzLCAnICtcbiAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5lbG0gPSB2bm9kZS5uc1xuICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXG4gICAgICAgIDogbm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZywgdm5vZGUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmJCQxKSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YSkgJiYgaXNEZWYoaSA9IGkuZG9tUHJvcHMpICYmIGlzRGVmKGkgPSBpLmlubmVySFRNTCkpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSBlbG0uaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4gICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIG5ldyBub2RlXG4gICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbiAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0sXG4gICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgIHZhciBwYXRjaGFibGUgPSBpc1BhdGNoYWJsZSh2bm9kZSk7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcbiAgICAgICAgICAgIGlmIChwYXRjaGFibGUpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgYW5jZXN0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vICM2NTEzXG4gICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuXG4gICAgICAgICAgICAgIC8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cbiAgICAgICAgICAgICAgdmFyIGluc2VydCA9IGFuY2VzdG9yLmRhdGEuaG9vay5pbnNlcnQ7XG4gICAgICAgICAgICAgIGlmIChpbnNlcnQubWVyZ2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQyID0gMTsgaSQyIDwgaW5zZXJ0LmZucy5sZW5ndGg7IGkkMisrKSB7XG4gICAgICAgICAgICAgICAgICBpbnNlcnQuZm5zW2kkMl0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlZ2lzdGVyUmVmKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGVcbiAgICAgICAgaWYgKGlzRGVmKHBhcmVudEVsbSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG52YXIgdmFsaWREaXZpc2lvbkNoYXJSRSA9IC9bXFx3KS4rXFwtXyRcXF1dLztcblxuZnVuY3Rpb24gcGFyc2VGaWx0ZXJzIChleHApIHtcbiAgdmFyIGluU2luZ2xlID0gZmFsc2U7XG4gIHZhciBpbkRvdWJsZSA9IGZhbHNlO1xuICB2YXIgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xuICB2YXIgaW5SZWdleCA9IGZhbHNlO1xuICB2YXIgY3VybHkgPSAwO1xuICB2YXIgc3F1YXJlID0gMDtcbiAgdmFyIHBhcmVuID0gMDtcbiAgdmFyIGxhc3RGaWx0ZXJJbmRleCA9IDA7XG4gIHZhciBjLCBwcmV2LCBpLCBleHByZXNzaW9uLCBmaWx0ZXJzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBleHAubGVuZ3RoOyBpKyspIHtcbiAgICBwcmV2ID0gYztcbiAgICBjID0gZXhwLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGluU2luZ2xlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyNyAmJiBwcmV2ICE9PSAweDVDKSB7IGluU2luZ2xlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyMiAmJiBwcmV2ICE9PSAweDVDKSB7IGluRG91YmxlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluVGVtcGxhdGVTdHJpbmcpIHtcbiAgICAgIGlmIChjID09PSAweDYwICYmIHByZXYgIT09IDB4NUMpIHsgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblJlZ2V4KSB7XG4gICAgICBpZiAoYyA9PT0gMHgyZiAmJiBwcmV2ICE9PSAweDVDKSB7IGluUmVnZXggPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjID09PSAweDdDICYmIC8vIHBpcGVcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMHg3QyAmJlxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmXG4gICAgICAhY3VybHkgJiYgIXNxdWFyZSAmJiAhcGFyZW5cbiAgICApIHtcbiAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxuICAgICAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoRmlsdGVyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyBcIlxuICAgICAgICBjYXNlIDB4Mjc6IGluU2luZ2xlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAnXG4gICAgICAgIGNhc2UgMHg2MDogaW5UZW1wbGF0ZVN0cmluZyA9IHRydWU7IGJyZWFrIC8vIGBcbiAgICAgICAgY2FzZSAweDI4OiBwYXJlbisrOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKFxuICAgICAgICBjYXNlIDB4Mjk6IHBhcmVuLS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyApXG4gICAgICAgIGNhc2UgMHg1Qjogc3F1YXJlKys7IGJyZWFrICAgICAgICAgICAgICAgIC8vIFtcbiAgICAgICAgY2FzZSAweDVEOiBzcXVhcmUtLTsgYnJlYWsgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICBjYXNlIDB4N0I6IGN1cmx5Kys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgIGNhc2UgMHg3RDogY3VybHktLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgIH1cbiAgICAgIGlmIChjID09PSAweDJmKSB7IC8vIC9cbiAgICAgICAgdmFyIGogPSBpIC0gMTtcbiAgICAgICAgdmFyIHAgPSAodm9pZCAwKTtcbiAgICAgICAgLy8gZmluZCBmaXJzdCBub24td2hpdGVzcGFjZSBwcmV2IGNoYXJcbiAgICAgICAgZm9yICg7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgcCA9IGV4cC5jaGFyQXQoaik7XG4gICAgICAgICAgaWYgKHAgIT09ICcgJykgeyBicmVhayB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwIHx8ICF2YWxpZERpdmlzaW9uQ2hhclJFLnRlc3QocCkpIHtcbiAgICAgICAgICBpblJlZ2V4ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgfSBlbHNlIGlmIChsYXN0RmlsdGVySW5kZXggIT09IDApIHtcbiAgICBwdXNoRmlsdGVyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoRmlsdGVyICgpIHtcbiAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpO1xuICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICB9XG5cbiAgaWYgKGZpbHRlcnMpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcmVzc2lvbiA9IHdyYXBGaWx0ZXIoZXhwcmVzc2lvbiwgZmlsdGVyc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4cHJlc3Npb25cbn1cblxuZnVuY3Rpb24gd3JhcEZpbHRlciAoZXhwLCBmaWx0ZXIpIHtcbiAgdmFyIGkgPSBmaWx0ZXIuaW5kZXhPZignKCcpO1xuICBpZiAoaSA8IDApIHtcbiAgICAvLyBfZjogcmVzb2x2ZUZpbHRlclxuICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBmaWx0ZXIgKyBcIlxcXCIpKFwiICsgZXhwICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgdmFyIG5hbWUgPSBmaWx0ZXIuc2xpY2UoMCwgaSk7XG4gICAgdmFyIGFyZ3MgPSBmaWx0ZXIuc2xpY2UoaSArIDEpO1xuICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBuYW1lICsgXCJcXFwiKShcIiArIGV4cCArIChhcmdzICE9PSAnKScgPyAnLCcgKyBhcmdzIDogYXJncykpXG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuZnVuY3Rpb24gYmFzZVdhcm4gKG1zZywgcmFuZ2UpIHtcbiAgY29uc29sZS5lcnJvcigoXCJbVnVlIGNvbXBpbGVyXTogXCIgKyBtc2cpKTtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG4gIG1vZHVsZXMsXG4gIGtleVxuKSB7XG4gIHJldHVybiBtb2R1bGVzXG4gICAgPyBtb2R1bGVzLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbVtrZXldOyB9KS5maWx0ZXIoZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH0pXG4gICAgOiBbXVxufVxuXG5mdW5jdGlvbiBhZGRQcm9wIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlLCBkeW5hbWljKSB7XG4gIChlbC5wcm9wcyB8fCAoZWwucHJvcHMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgdmFyIGF0dHJzID0gZHluYW1pY1xuICAgID8gKGVsLmR5bmFtaWNBdHRycyB8fCAoZWwuZHluYW1pY0F0dHJzID0gW10pKVxuICAgIDogKGVsLmF0dHJzIHx8IChlbC5hdHRycyA9IFtdKSk7XG4gIGF0dHJzLnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuZnVuY3Rpb24gYWRkUmF3QXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSkge1xuICBlbC5hdHRyc01hcFtuYW1lXSA9IHZhbHVlO1xuICBlbC5hdHRyc0xpc3QucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSwgcmFuZ2UpKTtcbn1cblxuZnVuY3Rpb24gYWRkRGlyZWN0aXZlIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJhd05hbWUsXG4gIHZhbHVlLFxuICBhcmcsXG4gIGlzRHluYW1pY0FyZyxcbiAgbW9kaWZpZXJzLFxuICByYW5nZVxuKSB7XG4gIChlbC5kaXJlY3RpdmVzIHx8IChlbC5kaXJlY3RpdmVzID0gW10pKS5wdXNoKHJhbmdlU2V0SXRlbSh7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdOYW1lOiByYXdOYW1lLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBhcmc6IGFyZyxcbiAgICBpc0R5bmFtaWNBcmc6IGlzRHluYW1pY0FyZyxcbiAgICBtb2RpZmllcnM6IG1vZGlmaWVyc1xuICB9LCByYW5nZSkpO1xuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXJNYXJrZXIgKHN5bWJvbCwgbmFtZSwgZHluYW1pYykge1xuICByZXR1cm4gZHluYW1pY1xuICAgID8gKFwiX3AoXCIgKyBuYW1lICsgXCIsXFxcIlwiICsgc3ltYm9sICsgXCJcXFwiKVwiKVxuICAgIDogc3ltYm9sICsgbmFtZSAvLyBtYXJrIHRoZSBldmVudCBhcyBjYXB0dXJlZFxufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICBtb2RpZmllcnMsXG4gIGltcG9ydGFudCxcbiAgd2FybixcbiAgcmFuZ2UsXG4gIGR5bmFtaWNcbikge1xuICBtb2RpZmllcnMgPSBtb2RpZmllcnMgfHwgZW1wdHlPYmplY3Q7XG4gIC8vIHdhcm4gcHJldmVudCBhbmQgcGFzc2l2ZSBtb2RpZmllclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiAmJlxuICAgIG1vZGlmaWVycy5wcmV2ZW50ICYmIG1vZGlmaWVycy5wYXNzaXZlXG4gICkge1xuICAgIHdhcm4oXG4gICAgICAncGFzc2l2ZSBhbmQgcHJldmVudCBjYW5cXCd0IGJlIHVzZWQgdG9nZXRoZXIuICcgK1xuICAgICAgJ1Bhc3NpdmUgaGFuZGxlciBjYW5cXCd0IHByZXZlbnQgZGVmYXVsdCBldmVudC4nLFxuICAgICAgcmFuZ2VcbiAgICApO1xuICB9XG5cbiAgLy8gbm9ybWFsaXplIGNsaWNrLnJpZ2h0IGFuZCBjbGljay5taWRkbGUgc2luY2UgdGhleSBkb24ndCBhY3R1YWxseSBmaXJlXG4gIC8vIHRoaXMgaXMgdGVjaG5pY2FsbHkgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGF0IGxlYXN0IGZvciBub3cgYnJvd3NlcnMgYXJlXG4gIC8vIHRoZSBvbmx5IHRhcmdldCBlbnZzIHRoYXQgaGF2ZSByaWdodC9taWRkbGUgY2xpY2tzLlxuICBpZiAobW9kaWZpZXJzLnJpZ2h0KSB7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIik9PT0nY2xpY2snPydjb250ZXh0bWVudSc6KFwiICsgbmFtZSArIFwiKVwiO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsaWNrJykge1xuICAgICAgbmFtZSA9ICdjb250ZXh0bWVudSc7XG4gICAgICBkZWxldGUgbW9kaWZpZXJzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChtb2RpZmllcnMubWlkZGxlKSB7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIik9PT0nY2xpY2snPydtb3VzZXVwJzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ21vdXNldXAnO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXJcbiAgaWYgKG1vZGlmaWVycy5jYXB0dXJlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJyEnLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLm9uY2UpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm9uY2U7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignficsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAobW9kaWZpZXJzLnBhc3NpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLnBhc3NpdmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignJicsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG5cbiAgdmFyIGV2ZW50cztcbiAgaWYgKG1vZGlmaWVycy5uYXRpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTtcbiAgICBldmVudHMgPSBlbC5uYXRpdmVFdmVudHMgfHwgKGVsLm5hdGl2ZUV2ZW50cyA9IHt9KTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHMgPSBlbC5ldmVudHMgfHwgKGVsLmV2ZW50cyA9IHt9KTtcbiAgfVxuXG4gIHZhciBuZXdIYW5kbGVyID0gcmFuZ2VTZXRJdGVtKHsgdmFsdWU6IHZhbHVlLnRyaW0oKSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSk7XG4gIGlmIChtb2RpZmllcnMgIT09IGVtcHR5T2JqZWN0KSB7XG4gICAgbmV3SGFuZGxlci5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG4gIH1cblxuICB2YXIgaGFuZGxlcnMgPSBldmVudHNbbmFtZV07XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVycykpIHtcbiAgICBpbXBvcnRhbnQgPyBoYW5kbGVycy51bnNoaWZ0KG5ld0hhbmRsZXIpIDogaGFuZGxlcnMucHVzaChuZXdIYW5kbGVyKTtcbiAgfSBlbHNlIGlmIChoYW5kbGVycykge1xuICAgIGV2ZW50c1tuYW1lXSA9IGltcG9ydGFudCA/IFtuZXdIYW5kbGVyLCBoYW5kbGVyc10gOiBbaGFuZGxlcnMsIG5ld0hhbmRsZXJdO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50c1tuYW1lXSA9IG5ld0hhbmRsZXI7XG4gIH1cblxuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRSYXdCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgcmV0dXJuIGVsLnJhd0F0dHJzTWFwWyc6JyArIG5hbWVdIHx8XG4gICAgZWwucmF3QXR0cnNNYXBbJ3YtYmluZDonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFtuYW1lXVxufVxuXG5mdW5jdGlvbiBnZXRCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICBnZXRTdGF0aWNcbikge1xuICB2YXIgZHluYW1pY1ZhbHVlID1cbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnOicgKyBuYW1lKSB8fFxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWJpbmQ6JyArIG5hbWUpO1xuICBpZiAoZHluYW1pY1ZhbHVlICE9IG51bGwpIHtcbiAgICByZXR1cm4gcGFyc2VGaWx0ZXJzKGR5bmFtaWNWYWx1ZSlcbiAgfSBlbHNlIGlmIChnZXRTdGF0aWMgIT09IGZhbHNlKSB7XG4gICAgdmFyIHN0YXRpY1ZhbHVlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgbmFtZSk7XG4gICAgaWYgKHN0YXRpY1ZhbHVlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGF0aWNWYWx1ZSlcbiAgICB9XG4gIH1cbn1cblxuLy8gbm90ZTogdGhpcyBvbmx5IHJlbW92ZXMgdGhlIGF0dHIgZnJvbSB0aGUgQXJyYXkgKGF0dHJzTGlzdCkgc28gdGhhdCBpdFxuLy8gZG9lc24ndCBnZXQgcHJvY2Vzc2VkIGJ5IHByb2Nlc3NBdHRycy5cbi8vIEJ5IGRlZmF1bHQgaXQgZG9lcyBOT1QgcmVtb3ZlIGl0IGZyb20gdGhlIG1hcCAoYXR0cnNNYXApIGJlY2F1c2UgdGhlIG1hcCBpc1xuLy8gbmVlZGVkIGR1cmluZyBjb2RlZ2VuLlxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICByZW1vdmVGcm9tTWFwXG4pIHtcbiAgdmFyIHZhbDtcbiAgaWYgKCh2YWwgPSBlbC5hdHRyc01hcFtuYW1lXSkgIT0gbnVsbCkge1xuICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChsaXN0W2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChyZW1vdmVGcm9tTWFwKSB7XG4gICAgZGVsZXRlIGVsLmF0dHJzTWFwW25hbWVdO1xuICB9XG4gIHJldHVybiB2YWxcbn1cblxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXggKFxuICBlbCxcbiAgbmFtZVxuKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBsaXN0W2ldO1xuICAgIGlmIChuYW1lLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICByZXR1cm4gYXR0clxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZVNldEl0ZW0gKFxuICBpdGVtLFxuICByYW5nZVxuKSB7XG4gIGlmIChyYW5nZSkge1xuICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICBpdGVtLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgaXRlbS5lbmQgPSByYW5nZS5lbmQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGUgZ2VuZXJhdGlvbiBmb3IgY29tcG9uZW50IHYtbW9kZWxcbiAqL1xuZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuXG4gIHZhciBiYXNlVmFsdWVFeHByZXNzaW9uID0gJyQkdic7XG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9XG4gICAgICBcIih0eXBlb2YgXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIgPT09ICdzdHJpbmcnXCIgK1xuICAgICAgXCI/IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiLnRyaW0oKVwiICtcbiAgICAgIFwiOiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIHZhciBhc3NpZ25tZW50ID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG5cbiAgZWwubW9kZWwgPSB7XG4gICAgdmFsdWU6IChcIihcIiArIHZhbHVlICsgXCIpXCIpLFxuICAgIGV4cHJlc3Npb246IEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICBjYWxsYmFjazogKFwiZnVuY3Rpb24gKFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKSB7XCIgKyBhc3NpZ25tZW50ICsgXCJ9XCIpXG4gIH07XG59XG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlIChcbiAgdmFsdWUsXG4gIGFzc2lnbm1lbnRcbikge1xuICB2YXIgcmVzID0gcGFyc2VNb2RlbCh2YWx1ZSk7XG4gIGlmIChyZXMua2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICh2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiJHNldChcIiArIChyZXMuZXhwKSArIFwiLCBcIiArIChyZXMua2V5KSArIFwiLCBcIiArIGFzc2lnbm1lbnQgKyBcIilcIilcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGEgdi1tb2RlbCBleHByZXNzaW9uIGludG8gYSBiYXNlIHBhdGggYW5kIGEgZmluYWwga2V5IHNlZ21lbnQuXG4gKiBIYW5kbGVzIGJvdGggZG90LXBhdGggYW5kIHBvc3NpYmxlIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBQb3NzaWJsZSBjYXNlczpcbiAqXG4gKiAtIHRlc3RcbiAqIC0gdGVzdFtrZXldXG4gKiAtIHRlc3RbdGVzdDFba2V5XV1cbiAqIC0gdGVzdFtcImFcIl1ba2V5XVxuICogLSB4eHgudGVzdFthW2FdLnRlc3QxW2tleV1dXG4gKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFba2V5XV1cbiAqXG4gKi9cblxudmFyIGxlbiwgc3RyLCBjaHIsIGluZGV4JDEsIGV4cHJlc3Npb25Qb3MsIGV4cHJlc3Npb25FbmRQb3M7XG5cblxuXG5mdW5jdGlvbiBwYXJzZU1vZGVsICh2YWwpIHtcbiAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvcHVsbC83NzMwXG4gIC8vIGFsbG93IHYtbW9kZWw9XCJvYmoudmFsIFwiICh0cmFpbGluZyB3aGl0ZXNwYWNlKVxuICB2YWwgPSB2YWwudHJpbSgpO1xuICBsZW4gPSB2YWwubGVuZ3RoO1xuXG4gIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICBpbmRleCQxID0gdmFsLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgaWYgKGluZGV4JDEgPiAtMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwuc2xpY2UoMCwgaW5kZXgkMSksXG4gICAgICAgIGtleTogJ1wiJyArIHZhbC5zbGljZShpbmRleCQxICsgMSkgKyAnXCInXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLFxuICAgICAgICBrZXk6IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdHIgPSB2YWw7XG4gIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICBwYXJzZUJyYWNrZXQoY2hyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cDogdmFsLnNsaWNlKDAsIGV4cHJlc3Npb25Qb3MpLFxuICAgIGtleTogdmFsLnNsaWNlKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQgKCkge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxufVxuXG5mdW5jdGlvbiBlb2YgKCkge1xuICByZXR1cm4gaW5kZXgkMSA+PSBsZW5cbn1cblxuZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gIHJldHVybiBjaHIgPT09IDB4MjIgfHwgY2hyID09PSAweDI3XG59XG5cbmZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gIHZhciBpbkJyYWNrZXQgPSAxO1xuICBleHByZXNzaW9uUG9zID0gaW5kZXgkMTtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHdhcm4kMTtcblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbmZ1bmN0aW9uIG1vZGVsIChcbiAgZWwsXG4gIGRpcixcbiAgX3dhcm5cbikge1xuICB3YXJuJDEgPSBfd2FybjtcbiAgdmFyIHZhbHVlID0gZGlyLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVycztcbiAgdmFyIHRhZyA9IGVsLnRhZztcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gaW5wdXRzIHdpdGggdHlwZT1cImZpbGVcIiBhcmUgcmVhZCBvbmx5IGFuZCBzZXR0aW5nIHRoZSBpbnB1dCdzXG4gICAgLy8gdmFsdWUgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdmaWxlJykge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB0eXBlPVxcXCJmaWxlXFxcIj46XFxuXCIgK1xuICAgICAgICBcIkZpbGUgaW5wdXRzIGFyZSByZWFkIG9ubHkuIFVzZSBhIHYtb246Y2hhbmdlIGxpc3RlbmVyIGluc3RlYWQuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbCBkb2Vzbid0IG5lZWQgZXh0cmEgcnVudGltZVxuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICBnZW5TZWxlY3QoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgZ2VuQ2hlY2tib3hNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICBnZW5SYWRpb01vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAndGV4dGFyZWEnKSB7XG4gICAgZ2VuRGVmYXVsdE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICghY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbCBkb2Vzbid0IG5lZWQgZXh0cmEgcnVudGltZVxuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDEoXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgIFwidi1tb2RlbCBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgZWxlbWVudCB0eXBlLiBcIiArXG4gICAgICAnSWYgeW91IGFyZSB3b3JraW5nIHdpdGggY29udGVudGVkaXRhYmxlLCBpdFxcJ3MgcmVjb21tZW5kZWQgdG8gJyArXG4gICAgICAnd3JhcCBhIGxpYnJhcnkgZGVkaWNhdGVkIGZvciB0aGF0IHB1cnBvc2UgaW5zaWRlIGEgY3VzdG9tIGNvbXBvbmVudC4nLFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICk7XG4gIH1cblxuICAvLyBlbnN1cmUgcnVudGltZSBkaXJlY3RpdmUgbWV0YWRhdGFcbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZ2VuQ2hlY2tib3hNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFyIHRydWVWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3RydWUtdmFsdWUnKSB8fCAndHJ1ZSc7XG4gIHZhciBmYWxzZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnZmFsc2UtdmFsdWUnKSB8fCAnZmFsc2UnO1xuICBhZGRQcm9wKGVsLCAnY2hlY2tlZCcsXG4gICAgXCJBcnJheS5pc0FycmF5KFwiICsgdmFsdWUgKyBcIilcIiArXG4gICAgXCI/X2koXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpPi0xXCIgKyAoXG4gICAgICB0cnVlVmFsdWVCaW5kaW5nID09PSAndHJ1ZSdcbiAgICAgICAgPyAoXCI6KFwiICsgdmFsdWUgKyBcIilcIilcbiAgICAgICAgOiAoXCI6X3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKVwiKVxuICAgIClcbiAgKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsXG4gICAgXCJ2YXIgJCRhPVwiICsgdmFsdWUgKyBcIixcIiArXG4gICAgICAgICckJGVsPSRldmVudC50YXJnZXQsJyArXG4gICAgICAgIFwiJCRjPSQkZWwuY2hlY2tlZD8oXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpOihcIiArIGZhbHNlVmFsdWVCaW5kaW5nICsgXCIpO1wiICtcbiAgICAnaWYoQXJyYXkuaXNBcnJheSgkJGEpKXsnICtcbiAgICAgIFwidmFyICQkdj1cIiArIChudW1iZXIgPyAnX24oJyArIHZhbHVlQmluZGluZyArICcpJyA6IHZhbHVlQmluZGluZykgKyBcIixcIiArXG4gICAgICAgICAgJyQkaT1faSgkJGEsJCR2KTsnICtcbiAgICAgIFwiaWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLmNvbmNhdChbJCR2XSknKSkgKyBcIil9XCIgK1xuICAgICAgXCJlbHNleyQkaT4tMSYmKFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSknKSkgKyBcIil9XCIgK1xuICAgIFwifWVsc2V7XCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGMnKSkgKyBcIn1cIixcbiAgICBudWxsLCB0cnVlXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlblJhZGlvTW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhbHVlQmluZGluZyA9IG51bWJlciA/IChcIl9uKFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpIDogdmFsdWVCaW5kaW5nO1xuICBhZGRQcm9wKGVsLCAnY2hlY2tlZCcsIChcIl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVCaW5kaW5nKSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdlblNlbGVjdCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgc2VsZWN0ZWRWYWwgPSBcIkFycmF5LnByb3RvdHlwZS5maWx0ZXJcIiArXG4gICAgXCIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KVwiICtcbiAgICBcIi5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFxcXCJfdmFsdWVcXFwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKG51bWJlciA/ICdfbih2YWwpJyA6ICd2YWwnKSArIFwifSlcIjtcblxuICB2YXIgYXNzaWdubWVudCA9ICckZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF0nO1xuICB2YXIgY29kZSA9IFwidmFyICQkc2VsZWN0ZWRWYWwgPSBcIiArIHNlbGVjdGVkVmFsICsgXCI7XCI7XG4gIGNvZGUgPSBjb2RlICsgXCIgXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIGFzc2lnbm1lbnQpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGNvZGUsIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICAvLyB3YXJuIGlmIHYtYmluZDp2YWx1ZSBjb25mbGljdHMgd2l0aCB2LW1vZGVsXG4gIC8vIGV4Y2VwdCBmb3IgaW5wdXRzIHdpdGggdi1iaW5kOnR5cGVcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgdmFsdWUkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSB8fCBlbC5hdHRyc01hcFsnOnZhbHVlJ107XG4gICAgdmFyIHR5cGVCaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp0eXBlJ10gfHwgZWwuYXR0cnNNYXBbJzp0eXBlJ107XG4gICAgaWYgKHZhbHVlJDEgJiYgIXR5cGVCaW5kaW5nKSB7XG4gICAgICB2YXIgYmluZGluZyA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSA/ICd2LWJpbmQ6dmFsdWUnIDogJzp2YWx1ZSc7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGJpbmRpbmcgKyBcIj1cXFwiXCIgKyB2YWx1ZSQxICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWwgb24gdGhlIHNhbWUgZWxlbWVudCBcIiArXG4gICAgICAgICdiZWNhdXNlIHRoZSBsYXR0ZXIgYWxyZWFkeSBleHBhbmRzIHRvIGEgdmFsdWUgYmluZGluZyBpbnRlcm5hbGx5JyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbYmluZGluZ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIGxhenkgPSByZWYubGF6eTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG4gIHZhciBuZWVkQ29tcG9zaXRpb25HdWFyZCA9ICFsYXp5ICYmIHR5cGUgIT09ICdyYW5nZSc7XG4gIHZhciBldmVudCA9IGxhenlcbiAgICA/ICdjaGFuZ2UnXG4gICAgOiB0eXBlID09PSAncmFuZ2UnXG4gICAgICA/IFJBTkdFX1RPS0VOXG4gICAgICA6ICdpbnB1dCc7XG5cbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9ICckZXZlbnQudGFyZ2V0LnZhbHVlJztcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIiRldmVudC50YXJnZXQudmFsdWUudHJpbSgpXCI7XG4gIH1cbiAgaWYgKG51bWJlcikge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuXG4gIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG4gIGlmIChuZWVkQ29tcG9zaXRpb25HdWFyZCkge1xuICAgIGNvZGUgPSBcImlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtcIiArIGNvZGU7XG4gIH1cblxuICBhZGRQcm9wKGVsLCAndmFsdWUnLCAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgaWYgKHRyaW0gfHwgbnVtYmVyKSB7XG4gICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc2FycnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxudmFyIGRlZmF1bHRUYWdSRSA9IC9cXHtcXHsoKD86LnxcXHI/XFxuKSs/KVxcfVxcfS9nO1xudmFyIHJlZ2V4RXNjYXBlUkUgPSAvWy0uKis/XiR7fSgpfFtcXF1cXC9cXFxcXS9nO1xuXG52YXIgYnVpbGRSZWdleCA9IGNhY2hlZChmdW5jdGlvbiAoZGVsaW1pdGVycykge1xuICB2YXIgb3BlbiA9IGRlbGltaXRlcnNbMF0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHZhciBjbG9zZSA9IGRlbGltaXRlcnNbMV0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHJldHVybiBuZXcgUmVnRXhwKG9wZW4gKyAnKCg/Oi58XFxcXG4pKz8pJyArIGNsb3NlLCAnZycpXG59KTtcblxuXG5cbmZ1bmN0aW9uIHBhcnNlVGV4dCAoXG4gIHRleHQsXG4gIGRlbGltaXRlcnNcbikge1xuICB2YXIgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcbiAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIgcmF3VG9rZW5zID0gW107XG4gIHZhciBsYXN0SW5kZXggPSB0YWdSRS5sYXN0SW5kZXggPSAwO1xuICB2YXIgbWF0Y2gsIGluZGV4LCB0b2tlblZhbHVlO1xuICB3aGlsZSAoKG1hdGNoID0gdGFnUkUuZXhlYyh0ZXh0KSkpIHtcbiAgICBpbmRleCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIHB1c2ggdGV4dCB0b2tlblxuICAgIGlmIChpbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4LCBpbmRleCkpO1xuICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICAgIH1cbiAgICAvLyB0YWcgdG9rZW5cbiAgICB2YXIgZXhwID0gcGFyc2VGaWx0ZXJzKG1hdGNoWzFdLnRyaW0oKSk7XG4gICAgdG9rZW5zLnB1c2goKFwiX3MoXCIgKyBleHAgKyBcIilcIikpO1xuICAgIHJhd1Rva2Vucy5wdXNoKHsgJ0BiaW5kaW5nJzogZXhwIH0pO1xuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICB9XG4gIGlmIChsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCkpO1xuICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRva2VuVmFsdWUpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGV4cHJlc3Npb246IHRva2Vucy5qb2luKCcrJyksXG4gICAgdG9rZW5zOiByYXdUb2tlbnNcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNDbGFzcyA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdjbGFzcycpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0aWNDbGFzcykge1xuICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljQ2xhc3MsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgaWYgKHJlcykge1xuICAgICAgd2FybihcbiAgICAgICAgXCJjbGFzcz1cXFwiXCIgKyBzdGF0aWNDbGFzcyArIFwiXFxcIjogXCIgK1xuICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgY2xhc3M9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpjbGFzcz1cInZhbFwiPi4nLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnY2xhc3MnXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRpY0NsYXNzKSB7XG4gICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG4gIH1cbiAgdmFyIGNsYXNzQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnY2xhc3MnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgZWwuY2xhc3NCaW5kaW5nID0gY2xhc3NCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNDbGFzcykge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNDbGFzczpcIiArIChlbC5zdGF0aWNDbGFzcykgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuY2xhc3NCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcImNsYXNzOlwiICsgKGVsLmNsYXNzQmluZGluZykgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG52YXIga2xhc3MkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNDbGFzcyddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlLFxuICBnZW5EYXRhOiBnZW5EYXRhXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSQxIChlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY1N0eWxlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3N0eWxlJyk7XG4gIGlmIChzdGF0aWNTdHlsZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY1N0eWxlLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwic3R5bGU9XFxcIlwiICsgc3RhdGljU3R5bGUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJyxcbiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsnc3R5bGUnXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5zdGF0aWNTdHlsZSA9IEpTT04uc3RyaW5naWZ5KHBhcnNlU3R5bGVUZXh0KHN0YXRpY1N0eWxlKSk7XG4gIH1cblxuICB2YXIgc3R5bGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzdHlsZScsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChzdHlsZUJpbmRpbmcpIHtcbiAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQxIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljU3R5bGUpIHtcbiAgICBkYXRhICs9IFwic3RhdGljU3R5bGU6XCIgKyAoZWwuc3RhdGljU3R5bGUpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnN0eWxlQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJzdHlsZTooXCIgKyAoZWwuc3R5bGVCaW5kaW5nKSArIFwiKSxcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG52YXIgc3R5bGUkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNTdHlsZSddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMVxufTtcblxuLyogICovXG5cbnZhciBkZWNvZGVyO1xuXG52YXIgaGUgPSB7XG4gIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlIChodG1sKSB7XG4gICAgZGVjb2RlciA9IGRlY29kZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGVjb2Rlci5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiBkZWNvZGVyLnRleHRDb250ZW50XG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgaXNVbmFyeVRhZyA9IG1ha2VNYXAoXG4gICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbiwnICtcbiAgJ2xpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJ1xuKTtcblxuLy8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuXG4vLyAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpXG52YXIgY2FuQmVMZWZ0T3BlblRhZyA9IG1ha2VNYXAoXG4gICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJ1xuKTtcblxuLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuLy8gUGhyYXNpbmcgQ29udGVudCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNwaHJhc2luZy1jb250ZW50XG52YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsYmFzZSxibG9ja3F1b3RlLGJvZHksY2FwdGlvbixjb2wsY29sZ3JvdXAsZGQsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0sJyArXG4gICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgJ29wdGdyb3VwLG9wdGlvbixwYXJhbSxycCxydCxzb3VyY2Usc3R5bGUsc3VtbWFyeSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCwnICtcbiAgJ3RpdGxlLHRyLHRyYWNrJ1xuKTtcblxuLyoqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS5cbiAqL1xuXG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbnZhciBhdHRyaWJ1dGUgPSAvXlxccyooW15cXHNcIic8PlxcLz1dKykoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbnZhciBkeW5hbWljQXJnQXR0cmlidXRlID0gL15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XStcXF1bXlxcc1wiJzw+XFwvPV0qKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xudmFyIG5jbmFtZSA9IFwiW2EtekEtWl9dW1xcXFwtXFxcXC4wLTlfYS16QS1aXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKlwiO1xudmFyIHFuYW1lQ2FwdHVyZSA9IFwiKCg/OlwiICsgbmNuYW1lICsgXCJcXFxcOik/XCIgKyBuY25hbWUgKyBcIilcIjtcbnZhciBzdGFydFRhZ09wZW4gPSBuZXcgUmVnRXhwKChcIl48XCIgKyBxbmFtZUNhcHR1cmUpKTtcbnZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG52YXIgZW5kVGFnID0gbmV3IFJlZ0V4cCgoXCJePFxcXFwvXCIgKyBxbmFtZUNhcHR1cmUgKyBcIltePl0qPlwiKSk7XG52YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xuLy8gIzcyOTg6IGVzY2FwZSAtIHRvIGF2b2lkIGJlaW5nIHBhc2VkIGFzIEhUTUwgY29tbWVudCB3aGVuIGlubGluZWQgaW4gcGFnZVxudmFyIGNvbW1lbnQgPSAvXjwhXFwtLS87XG52YXIgY29uZGl0aW9uYWxDb21tZW50ID0gL148IVxcWy87XG5cbi8vIFNwZWNpYWwgRWxlbWVudHMgKGNhbiBjb250YWluIGFueXRoaW5nKVxudmFyIGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHJlQ2FjaGUgPSB7fTtcblxudmFyIGRlY29kaW5nTWFwID0ge1xuICAnJmx0Oyc6ICc8JyxcbiAgJyZndDsnOiAnPicsXG4gICcmcXVvdDsnOiAnXCInLFxuICAnJmFtcDsnOiAnJicsXG4gICcmIzEwOyc6ICdcXG4nLFxuICAnJiM5Oyc6ICdcXHQnLFxuICAnJiMzOTsnOiBcIidcIlxufTtcbnZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5KTsvZztcbnZhciBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2c7XG5cbi8vICM1OTkyXG52YXIgaXNJZ25vcmVOZXdsaW5lVGFnID0gbWFrZU1hcCgncHJlLHRleHRhcmVhJywgdHJ1ZSk7XG52YXIgc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lID0gZnVuY3Rpb24gKHRhZywgaHRtbCkgeyByZXR1cm4gdGFnICYmIGlzSWdub3JlTmV3bGluZVRhZyh0YWcpICYmIGh0bWxbMF0gPT09ICdcXG4nOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGVBdHRyICh2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgdmFyIHJlID0gc2hvdWxkRGVjb2RlTmV3bGluZXMgPyBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA6IGVuY29kZWRBdHRyO1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBkZWNvZGluZ01hcFttYXRjaF07IH0pXG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7XG4gIHZhciBpc1VuYXJ5VGFnJCQxID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICB2YXIgY2FuQmVMZWZ0T3BlblRhZyQkMSA9IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyB8fCBubztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gIHdoaWxlIChodG1sKSB7XG4gICAgbGFzdCA9IGh0bWw7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHBsYWludGV4dCBjb250ZW50IGVsZW1lbnQgbGlrZSBzY3JpcHQvc3R5bGVcbiAgICBpZiAoIWxhc3RUYWcgfHwgIWlzUGxhaW5UZXh0RWxlbWVudChsYXN0VGFnKSkge1xuICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTtcbiAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG91bGRLZWVwQ29tbWVudCkge1xuICAgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgY29tbWVudEVuZCksIGluZGV4LCBpbmRleCArIGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YXJ0VGFnTWF0Y2gudGFnTmFtZSwgaHRtbCkpIHtcbiAgICAgICAgICAgIGFkdmFuY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRleHQgPSAodm9pZCAwKSwgcmVzdCA9ICh2b2lkIDApLCBuZXh0ID0gKHZvaWQgMCk7XG4gICAgICBpZiAodGV4dEVuZCA+PSAwKSB7XG4gICAgICAgIHJlc3QgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIWNvbW1lbnQudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyA8IGluIHBsYWluIHRleHQsIGJlIGZvcmdpdmluZyBhbmQgdHJlYXQgaXQgYXMgdGV4dFxuICAgICAgICAgIG5leHQgPSByZXN0LmluZGV4T2YoJzwnLCAxKTtcbiAgICAgICAgICBpZiAobmV4dCA8IDApIHsgYnJlYWsgfVxuICAgICAgICAgIHRleHRFbmQgKz0gbmV4dDtcbiAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gaHRtbC5zdWJzdHJpbmcoMCwgdGV4dEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICB0ZXh0ID0gaHRtbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgYWR2YW5jZSh0ZXh0Lmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0LCBpbmRleCAtIHRleHQubGVuZ3RoLCBpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlbmRUYWdMZW5ndGggPSAwO1xuICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcmVTdGFja2VkVGFnID0gcmVDYWNoZVtzdGFja2VkVGFnXSB8fCAocmVDYWNoZVtzdGFja2VkVGFnXSA9IG5ldyBSZWdFeHAoJyhbXFxcXHNcXFxcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7XG4gICAgICB2YXIgcmVzdCQxID0gaHRtbC5yZXBsYWNlKHJlU3RhY2tlZFRhZywgZnVuY3Rpb24gKGFsbCwgdGV4dCwgZW5kVGFnKSB7XG4gICAgICAgIGVuZFRhZ0xlbmd0aCA9IGVuZFRhZy5sZW5ndGg7XG4gICAgICAgIGlmICghaXNQbGFpblRleHRFbGVtZW50KHN0YWNrZWRUYWcpICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFwtLShbXFxzXFxTXSo/KS0tPi9nLCAnJDEnKSAvLyAjNzI5OFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywgJyQxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFja2VkVGFnLCB0ZXh0KSkge1xuICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzKSB7XG4gICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH0pO1xuICAgICAgaW5kZXggKz0gaHRtbC5sZW5ndGggLSByZXN0JDEubGVuZ3RoO1xuICAgICAgaHRtbCA9IHJlc3QkMTtcbiAgICAgIHBhcnNlRW5kVGFnKHN0YWNrZWRUYWcsIGluZGV4IC0gZW5kVGFnTGVuZ3RoLCBpbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKGh0bWwgPT09IGxhc3QpIHtcbiAgICAgIG9wdGlvbnMuY2hhcnMgJiYgb3B0aW9ucy5jaGFycyhodG1sKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdGFjay5sZW5ndGggJiYgb3B0aW9ucy53YXJuKSB7XG4gICAgICAgIG9wdGlvbnMud2FybigoXCJNYWwtZm9ybWF0dGVkIHRhZyBhdCBlbmQgb2YgdGVtcGxhdGU6IFxcXCJcIiArIGh0bWwgKyBcIlxcXCJcIiksIHsgc3RhcnQ6IGluZGV4ICsgaHRtbC5sZW5ndGggfSk7XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICBpbmRleCArPSBuO1xuICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgIHZhciBzdGFydCA9IGh0bWwubWF0Y2goc3RhcnRUYWdPcGVuKTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChkeW5hbWljQXJnQXR0cmlidXRlKSB8fCBodG1sLm1hdGNoKGF0dHJpYnV0ZSkpKSB7XG4gICAgICAgIGF0dHIuc3RhcnQgPSBpbmRleDtcbiAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgIGF0dHIuZW5kID0gaW5kZXg7XG4gICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmVuZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICB2YXIgdGFnTmFtZSA9IG1hdGNoLnRhZ05hbWU7XG4gICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXG4gICAgaWYgKGV4cGVjdEhUTUwpIHtcbiAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkge1xuICAgICAgICBwYXJzZUVuZFRhZyhsYXN0VGFnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnJCQxKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcodGFnTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyQkMSh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBhcmdzWzNdIHx8IGFyZ3NbNF0gfHwgYXJnc1s1XSB8fCAnJztcbiAgICAgIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IHRhZ05hbWUgPT09ICdhJyAmJiBhcmdzWzFdID09PSAnaHJlZidcbiAgICAgICAgPyBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZlxuICAgICAgICA6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXM7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKVxuICAgICAgfTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBhcmdzLnN0YXJ0ICsgYXJnc1swXS5tYXRjaCgvXlxccyovKS5sZW5ndGg7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGFyZ3MuZW5kO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdW5hcnkpIHtcbiAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGxvd2VyQ2FzZWRUYWc6IHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnM6IGF0dHJzLCBzdGFydDogbWF0Y2guc3RhcnQsIGVuZDogbWF0Y2guZW5kIH0pO1xuICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgYXR0cnMsIHVuYXJ5LCBtYXRjaC5zdGFydCwgbWF0Y2guZW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBwb3MsIGxvd2VyQ2FzZWRUYWdOYW1lO1xuICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH1cbiAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgb3BlbmVkIHRhZyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgKGkgPiBwb3MgfHwgIXRhZ05hbWUpICYmXG4gICAgICAgICAgb3B0aW9ucy53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgIG9wdGlvbnMud2FybihcbiAgICAgICAgICAgIChcInRhZyA8XCIgKyAoc3RhY2tbaV0udGFnKSArIFwiPiBoYXMgbm8gbWF0Y2hpbmcgZW5kIHRhZy5cIiksXG4gICAgICAgICAgICB7IHN0YXJ0OiBzdGFja1tpXS5zdGFydCwgZW5kOiBzdGFja1tpXS5lbmQgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgICAgb3B0aW9ucy5lbmQoc3RhY2tbaV0udGFnLCBzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgdGhlIG9wZW4gZWxlbWVudHMgZnJvbSB0aGUgc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgIGxhc3RUYWcgPSBwb3MgJiYgc3RhY2tbcG9zIC0gMV0udGFnO1xuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdicicpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIHRydWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdwJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgZmFsc2UsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgIG9wdGlvbnMuZW5kKHRhZ05hbWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG9uUkUgPSAvXkB8XnYtb246LztcbnZhciBkaXJSRSA9IC9edi18XkB8XjovO1xudmFyIGZvckFsaWFzUkUgPSAvKFtcXHNcXFNdKj8pXFxzKyg/OmlufG9mKVxccysoW1xcc1xcU10qKS87XG52YXIgZm9ySXRlcmF0b3JSRSA9IC8sKFteLFxcfVxcXV0qKSg/OiwoW14sXFx9XFxdXSopKT8kLztcbnZhciBzdHJpcFBhcmVuc1JFID0gL15cXCh8XFwpJC9nO1xudmFyIGR5bmFtaWNBcmdSRSA9IC9eXFxbLipcXF0kLztcblxudmFyIGFyZ1JFID0gLzooLiopJC87XG52YXIgYmluZFJFID0gL146fF5cXC58XnYtYmluZDovO1xudmFyIG1vZGlmaWVyUkUgPSAvXFwuW14uXFxdXSsoPz1bXlxcXV0qJCkvZztcblxudmFyIHNsb3RSRSA9IC9edi1zbG90KDp8JCl8XiMvO1xuXG52YXIgbGluZUJyZWFrUkUgPSAvW1xcclxcbl0vO1xudmFyIHdoaXRlc3BhY2VSRSQxID0gL1xccysvZztcblxudmFyIGludmFsaWRBdHRyaWJ1dGVSRSA9IC9bXFxzXCInPD5cXC89XS87XG5cbnZhciBkZWNvZGVIVE1MQ2FjaGVkID0gY2FjaGVkKGhlLmRlY29kZSk7XG5cbnZhciBlbXB0eVNsb3RTY29wZVRva2VuID0gXCJfZW1wdHlfXCI7XG5cbi8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxudmFyIHdhcm4kMjtcbnZhciBkZWxpbWl0ZXJzO1xudmFyIHRyYW5zZm9ybXM7XG52YXIgcHJlVHJhbnNmb3JtcztcbnZhciBwb3N0VHJhbnNmb3JtcztcbnZhciBwbGF0Zm9ybUlzUHJlVGFnO1xudmFyIHBsYXRmb3JtTXVzdFVzZVByb3A7XG52YXIgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2U7XG52YXIgbWF5YmVDb21wb25lbnQ7XG5cbmZ1bmN0aW9uIGNyZWF0ZUFTVEVsZW1lbnQgKFxuICB0YWcsXG4gIGF0dHJzLFxuICBwYXJlbnRcbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IDEsXG4gICAgdGFnOiB0YWcsXG4gICAgYXR0cnNMaXN0OiBhdHRycyxcbiAgICBhdHRyc01hcDogbWFrZUF0dHJzTWFwKGF0dHJzKSxcbiAgICByYXdBdHRyc01hcDoge30sXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgY2hpbGRyZW46IFtdXG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0IEhUTUwgc3RyaW5nIHRvIEFTVC5cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHdhcm4kMiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcblxuICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcbiAgcGxhdGZvcm1NdXN0VXNlUHJvcCA9IG9wdGlvbnMubXVzdFVzZVByb3AgfHwgbm87XG4gIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlID0gb3B0aW9ucy5nZXRUYWdOYW1lc3BhY2UgfHwgbm87XG4gIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICBtYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcblxuICB0cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Ob2RlJyk7XG4gIHByZVRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3ByZVRyYW5zZm9ybU5vZGUnKTtcbiAgcG9zdFRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3Bvc3RUcmFuc2Zvcm1Ob2RlJyk7XG5cbiAgZGVsaW1pdGVycyA9IG9wdGlvbnMuZGVsaW1pdGVycztcblxuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIHByZXNlcnZlV2hpdGVzcGFjZSA9IG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlICE9PSBmYWxzZTtcbiAgdmFyIHdoaXRlc3BhY2VPcHRpb24gPSBvcHRpb25zLndoaXRlc3BhY2U7XG4gIHZhciByb290O1xuICB2YXIgY3VycmVudFBhcmVudDtcbiAgdmFyIGluVlByZSA9IGZhbHNlO1xuICB2YXIgaW5QcmUgPSBmYWxzZTtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHdhcm5PbmNlIChtc2csIHJhbmdlKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICB3YXJuJDIobXNnLCByYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VFbGVtZW50IChlbGVtZW50KSB7XG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG4gICAgaWYgKCFpblZQcmUgJiYgIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICBlbGVtZW50ID0gcHJvY2Vzc0VsZW1lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIHRyZWUgbWFuYWdlbWVudFxuICAgIGlmICghc3RhY2subGVuZ3RoICYmIGVsZW1lbnQgIT09IHJvb3QpIHtcbiAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgaWYgKHJvb3QuaWYgJiYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBhZGRJZkNvbmRpdGlvbihyb290LCB7XG4gICAgICAgICAgZXhwOiBlbGVtZW50LmVsc2VpZixcbiAgICAgICAgICBibG9jazogZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICBcIkNvbXBvbmVudCB0ZW1wbGF0ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIFwiICtcbiAgICAgICAgICBcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIgK1xuICAgICAgICAgIFwidXNlIHYtZWxzZS1pZiB0byBjaGFpbiB0aGVtIGluc3RlYWQuXCIsXG4gICAgICAgICAgeyBzdGFydDogZWxlbWVudC5zdGFydCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50UGFyZW50ICYmICFlbGVtZW50LmZvcmJpZGRlbikge1xuICAgICAgaWYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkge1xuICAgICAgICBwcm9jZXNzSWZDb25kaXRpb25zKGVsZW1lbnQsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgLy8gc2NvcGVkIHNsb3RcbiAgICAgICAgICAvLyBrZWVwIGl0IGluIHRoZSBjaGlsZHJlbiBsaXN0IHNvIHRoYXQgdi1lbHNlKC1pZikgY29uZGl0aW9ucyBjYW5cbiAgICAgICAgICAvLyBmaW5kIGl0IGFzIHRoZSBwcmV2IG5vZGUuXG4gICAgICAgICAgdmFyIG5hbWUgPSBlbGVtZW50LnNsb3RUYXJnZXQgfHwgJ1wiZGVmYXVsdFwiJ1xuICAgICAgICAgIDsoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyB8fCAoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyA9IHt9KSlbbmFtZV0gPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5wYXJlbnQgPSBjdXJyZW50UGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbmFsIGNoaWxkcmVuIGNsZWFudXBcbiAgICAvLyBmaWx0ZXIgb3V0IHNjb3BlZCBzbG90c1xuICAgIGVsZW1lbnQuY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gIShjKS5zbG90U2NvcGU7IH0pO1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGUgYWdhaW5cbiAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcblxuICAgIC8vIGNoZWNrIHByZSBzdGF0ZVxuICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXBwbHkgcG9zdC10cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcG9zdFRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJpbUVuZGluZ1doaXRlc3BhY2UgKGVsKSB7XG4gICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2Ugbm9kZVxuICAgIGlmICghaW5QcmUpIHtcbiAgICAgIHZhciBsYXN0Tm9kZTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgKGxhc3ROb2RlID0gZWwuY2hpbGRyZW5bZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0pICYmXG4gICAgICAgIGxhc3ROb2RlLnR5cGUgPT09IDMgJiZcbiAgICAgICAgbGFzdE5vZGUudGV4dCA9PT0gJyAnXG4gICAgICApIHtcbiAgICAgICAgZWwuY2hpbGRyZW4ucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tSb290Q29uc3RyYWludHMgKGVsKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgIFwiQ2Fubm90IHVzZSA8XCIgKyAoZWwudGFnKSArIFwiPiBhcyBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgaXQgbWF5IFwiICtcbiAgICAgICAgJ2NvbnRhaW4gbXVsdGlwbGUgbm9kZXMuJyxcbiAgICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGVsLmF0dHJzTWFwLmhhc093blByb3BlcnR5KCd2LWZvcicpKSB7XG4gICAgICB3YXJuT25jZShcbiAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50cy4nLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZUhUTUwodGVtcGxhdGUsIHtcbiAgICB3YXJuOiB3YXJuJDIsXG4gICAgZXhwZWN0SFRNTDogb3B0aW9ucy5leHBlY3RIVE1MLFxuICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZyxcbiAgICBjYW5CZUxlZnRPcGVuVGFnOiBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICBzaG91bGRLZWVwQ29tbWVudDogb3B0aW9ucy5jb21tZW50cyxcbiAgICBvdXRwdXRTb3VyY2VSYW5nZTogb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSxcbiAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5LCBzdGFydCQxLCBlbmQpIHtcbiAgICAgIC8vIGNoZWNrIG5hbWVzcGFjZS5cbiAgICAgIC8vIGluaGVyaXQgcGFyZW50IG5zIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgdmFyIG5zID0gKGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5ucykgfHwgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UodGFnKTtcblxuICAgICAgLy8gaGFuZGxlIElFIHN2ZyBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiYgbnMgPT09ICdzdmcnKSB7XG4gICAgICAgIGF0dHJzID0gZ3VhcmRJRVNWR0J1ZyhhdHRycyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gY3JlYXRlQVNURWxlbWVudCh0YWcsIGF0dHJzLCBjdXJyZW50UGFyZW50KTtcbiAgICAgIGlmIChucykge1xuICAgICAgICBlbGVtZW50Lm5zID0gbnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgZWxlbWVudC5zdGFydCA9IHN0YXJ0JDE7XG4gICAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQ7XG4gICAgICAgICAgZWxlbWVudC5yYXdBdHRyc01hcCA9IGVsZW1lbnQuYXR0cnNMaXN0LnJlZHVjZShmdW5jdGlvbiAoY3VtdWxhdGVkLCBhdHRyKSB7XG4gICAgICAgICAgICBjdW11bGF0ZWRbYXR0ci5uYW1lXSA9IGF0dHI7XG4gICAgICAgICAgICByZXR1cm4gY3VtdWxhdGVkXG4gICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICBpZiAoaW52YWxpZEF0dHJpYnV0ZVJFLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIkludmFsaWQgZHluYW1pYyBhcmd1bWVudCBleHByZXNzaW9uOiBhdHRyaWJ1dGUgbmFtZXMgY2Fubm90IGNvbnRhaW4gXCIgK1xuICAgICAgICAgICAgICBcInNwYWNlcywgcXVvdGVzLCA8LCA+LCAvIG9yID0uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFydDogYXR0ci5zdGFydCArIGF0dHIubmFtZS5pbmRleE9mKFwiW1wiKSxcbiAgICAgICAgICAgICAgICBlbmQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpICYmICFpc1NlcnZlclJlbmRlcmluZygpKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yYmlkZGVuID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuJDIoXG4gICAgICAgICAgJ1RlbXBsYXRlcyBzaG91bGQgb25seSBiZSByZXNwb25zaWJsZSBmb3IgbWFwcGluZyB0aGUgc3RhdGUgdG8gdGhlICcgK1xuICAgICAgICAgICdVSS4gQXZvaWQgcGxhY2luZyB0YWdzIHdpdGggc2lkZS1lZmZlY3RzIGluIHlvdXIgdGVtcGxhdGVzLCBzdWNoIGFzICcgK1xuICAgICAgICAgIFwiPFwiICsgdGFnICsgXCI+XCIgKyAnLCBhcyB0aGV5IHdpbGwgbm90IGJlIHBhcnNlZC4nLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBwcmUtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnQgPSBwcmVUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NQcmUoZWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICAgIGluVlByZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NSYXdBdHRycyhlbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICAgIC8vIHN0cnVjdHVyYWwgZGlyZWN0aXZlc1xuICAgICAgICBwcm9jZXNzRm9yKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NPbmNlKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMocm9vdCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICBjdXJyZW50UGFyZW50ID0gZWxlbWVudDtcbiAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW5kOiBmdW5jdGlvbiBlbmQgKHRhZywgc3RhcnQsIGVuZCQxKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgLy8gcG9wIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggLT0gMTtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQkMTtcbiAgICAgIH1cbiAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICB9LFxuXG4gICAgY2hhcnM6IGZ1bmN0aW9uIGNoYXJzICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodGV4dCA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAnQ29tcG9uZW50IHRlbXBsYXRlIHJlcXVpcmVzIGEgcm9vdCBlbGVtZW50LCByYXRoZXIgdGhhbiBqdXN0IHRleHQuJyxcbiAgICAgICAgICAgICAgeyBzdGFydDogc3RhcnQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCh0ZXh0ID0gdGV4dC50cmltKCkpKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgKFwidGV4dCBcXFwiXCIgKyB0ZXh0ICsgXCJcXFwiIG91dHNpZGUgcm9vdCBlbGVtZW50IHdpbGwgYmUgaWdub3JlZC5cIiksXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gSUUgdGV4dGFyZWEgcGxhY2Vob2xkZXIgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmXG4gICAgICAgIGN1cnJlbnRQYXJlbnQudGFnID09PSAndGV4dGFyZWEnICYmXG4gICAgICAgIGN1cnJlbnRQYXJlbnQuYXR0cnNNYXAucGxhY2Vob2xkZXIgPT09IHRleHRcbiAgICAgICkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnRQYXJlbnQuY2hpbGRyZW47XG4gICAgICBpZiAoaW5QcmUgfHwgdGV4dC50cmltKCkpIHtcbiAgICAgICAgdGV4dCA9IGlzVGV4dFRhZyhjdXJyZW50UGFyZW50KSA/IHRleHQgOiBkZWNvZGVIVE1MQ2FjaGVkKHRleHQpO1xuICAgICAgfSBlbHNlIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIC8vIHJlbW92ZSB0aGUgd2hpdGVzcGFjZS1vbmx5IG5vZGUgcmlnaHQgYWZ0ZXIgYW4gb3BlbmluZyB0YWdcbiAgICAgICAgdGV4dCA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlT3B0aW9uKSB7XG4gICAgICAgIGlmICh3aGl0ZXNwYWNlT3B0aW9uID09PSAnY29uZGVuc2UnKSB7XG4gICAgICAgICAgLy8gaW4gY29uZGVuc2UgbW9kZSwgcmVtb3ZlIHRoZSB3aGl0ZXNwYWNlIG5vZGUgaWYgaXQgY29udGFpbnNcbiAgICAgICAgICAvLyBsaW5lIGJyZWFrLCBvdGhlcndpc2UgY29uZGVuc2UgdG8gYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgICB0ZXh0ID0gbGluZUJyZWFrUkUudGVzdCh0ZXh0KSA/ICcnIDogJyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSAnICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBwcmVzZXJ2ZVdoaXRlc3BhY2UgPyAnICcgOiAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIGlmICghaW5QcmUgJiYgd2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGNvbmRlbnNlIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2VzIGludG8gc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSh3aGl0ZXNwYWNlUkUkMSwgJyAnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzO1xuICAgICAgICB2YXIgY2hpbGQ7XG4gICAgICAgIGlmICghaW5WUHJlICYmIHRleHQgIT09ICcgJyAmJiAocmVzID0gcGFyc2VUZXh0KHRleHQsIGRlbGltaXRlcnMpKSkge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMixcbiAgICAgICAgICAgIGV4cHJlc3Npb246IHJlcy5leHByZXNzaW9uLFxuICAgICAgICAgICAgdG9rZW5zOiByZXMudG9rZW5zLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodGV4dCAhPT0gJyAnIHx8ICFjaGlsZHJlbi5sZW5ndGggfHwgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGV4dCAhPT0gJyAnKSB7XG4gICAgICAgICAgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgICAgY2hpbGQuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIC8vIGFkZGluZyBhbnl0aW5nIGFzIGEgc2libGluZyB0byB0aGUgcm9vdCBub2RlIGlzIGZvcmJpZGRlblxuICAgICAgLy8gY29tbWVudHMgc2hvdWxkIHN0aWxsIGJlIGFsbG93ZWQsIGJ1dCBpZ25vcmVkXG4gICAgICBpZiAoY3VycmVudFBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGQgPSB7XG4gICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgIGlzQ29tbWVudDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgY2hpbGQuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcm9vdFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUHJlIChlbCkge1xuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtcHJlJykgIT0gbnVsbCkge1xuICAgIGVsLnByZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1Jhd0F0dHJzIChlbCkge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuICBpZiAobGVuKSB7XG4gICAgdmFyIGF0dHJzID0gZWwuYXR0cnMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogbGlzdFtpXS5uYW1lLFxuICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkobGlzdFtpXS52YWx1ZSlcbiAgICAgIH07XG4gICAgICBpZiAobGlzdFtpXS5zdGFydCAhPSBudWxsKSB7XG4gICAgICAgIGF0dHJzW2ldLnN0YXJ0ID0gbGlzdFtpXS5zdGFydDtcbiAgICAgICAgYXR0cnNbaV0uZW5kID0gbGlzdFtpXS5lbmQ7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCFlbC5wcmUpIHtcbiAgICAvLyBub24gcm9vdCBub2RlIGluIHByZSBibG9ja3Mgd2l0aCBubyBhdHRyaWJ1dGVzXG4gICAgZWwucGxhaW4gPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NFbGVtZW50IChcbiAgZWxlbWVudCxcbiAgb3B0aW9uc1xuKSB7XG4gIHByb2Nlc3NLZXkoZWxlbWVudCk7XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHBsYWluIGVsZW1lbnQgYWZ0ZXJcbiAgLy8gcmVtb3Zpbmcgc3RydWN0dXJhbCBhdHRyaWJ1dGVzXG4gIGVsZW1lbnQucGxhaW4gPSAoXG4gICAgIWVsZW1lbnQua2V5ICYmXG4gICAgIWVsZW1lbnQuc2NvcGVkU2xvdHMgJiZcbiAgICAhZWxlbWVudC5hdHRyc0xpc3QubGVuZ3RoXG4gICk7XG5cbiAgcHJvY2Vzc1JlZihlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RDb250ZW50KGVsZW1lbnQpO1xuICBwcm9jZXNzU2xvdE91dGxldChlbGVtZW50KTtcbiAgcHJvY2Vzc0NvbXBvbmVudChlbGVtZW50KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgZWxlbWVudCA9IHRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucykgfHwgZWxlbWVudDtcbiAgfVxuICBwcm9jZXNzQXR0cnMoZWxlbWVudCk7XG4gIHJldHVybiBlbGVtZW50XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NLZXkgKGVsKSB7XG4gIHZhciBleHAgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2tleScpO1xuICBpZiAoZXhwKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwiPHRlbXBsYXRlPiBjYW5ub3QgYmUga2V5ZWQuIFBsYWNlIHRoZSBrZXkgb24gcmVhbCBlbGVtZW50cyBpbnN0ZWFkLlwiLFxuICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbC5mb3IpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gZWwuaXRlcmF0b3IyIHx8IGVsLml0ZXJhdG9yMTtcbiAgICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICAgICAgaWYgKGl0ZXJhdG9yICYmIGl0ZXJhdG9yID09PSBleHAgJiYgcGFyZW50ICYmIHBhcmVudC50YWcgPT09ICd0cmFuc2l0aW9uLWdyb3VwJykge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIFwiRG8gbm90IHVzZSB2LWZvciBpbmRleCBhcyBrZXkgb24gPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuLCBcIiArXG4gICAgICAgICAgICBcInRoaXMgaXMgdGhlIHNhbWUgYXMgbm90IHVzaW5nIGtleXMuXCIsXG4gICAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpLFxuICAgICAgICAgICAgdHJ1ZSAvKiB0aXAgKi9cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsLmtleSA9IGV4cDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkge1xuICB2YXIgcmVmID0gZ2V0QmluZGluZ0F0dHIoZWwsICdyZWYnKTtcbiAgaWYgKHJlZikge1xuICAgIGVsLnJlZiA9IHJlZjtcbiAgICBlbC5yZWZJbkZvciA9IGNoZWNrSW5Gb3IoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7XG4gIHZhciBleHA7XG4gIGlmICgoZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZm9yJykpKSB7XG4gICAgdmFyIHJlcyA9IHBhcnNlRm9yKGV4cCk7XG4gICAgaWYgKHJlcykge1xuICAgICAgZXh0ZW5kKGVsLCByZXMpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybiQyKFxuICAgICAgICAoXCJJbnZhbGlkIHYtZm9yIGV4cHJlc3Npb246IFwiICsgZXhwKSxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cblxuXG5mdW5jdGlvbiBwYXJzZUZvciAoZXhwKSB7XG4gIHZhciBpbk1hdGNoID0gZXhwLm1hdGNoKGZvckFsaWFzUkUpO1xuICBpZiAoIWluTWF0Y2gpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICByZXMuZm9yID0gaW5NYXRjaFsyXS50cmltKCk7XG4gIHZhciBhbGlhcyA9IGluTWF0Y2hbMV0udHJpbSgpLnJlcGxhY2Uoc3RyaXBQYXJlbnNSRSwgJycpO1xuICB2YXIgaXRlcmF0b3JNYXRjaCA9IGFsaWFzLm1hdGNoKGZvckl0ZXJhdG9yUkUpO1xuICBpZiAoaXRlcmF0b3JNYXRjaCkge1xuICAgIHJlcy5hbGlhcyA9IGFsaWFzLnJlcGxhY2UoZm9ySXRlcmF0b3JSRSwgJycpLnRyaW0oKTtcbiAgICByZXMuaXRlcmF0b3IxID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG4gICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcbiAgICAgIHJlcy5pdGVyYXRvcjIgPSBpdGVyYXRvck1hdGNoWzJdLnRyaW0oKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzLmFsaWFzID0gYWxpYXM7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWYgKGVsKSB7XG4gIHZhciBleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicpO1xuICBpZiAoZXhwKSB7XG4gICAgZWwuaWYgPSBleHA7XG4gICAgYWRkSWZDb25kaXRpb24oZWwsIHtcbiAgICAgIGV4cDogZXhwLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnKSAhPSBudWxsKSB7XG4gICAgICBlbC5lbHNlID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGVsc2VpZiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnKTtcbiAgICBpZiAoZWxzZWlmKSB7XG4gICAgICBlbC5lbHNlaWYgPSBlbHNlaWY7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZkNvbmRpdGlvbnMgKGVsLCBwYXJlbnQpIHtcbiAgdmFyIHByZXYgPSBmaW5kUHJldkVsZW1lbnQocGFyZW50LmNoaWxkcmVuKTtcbiAgaWYgKHByZXYgJiYgcHJldi5pZikge1xuICAgIGFkZElmQ29uZGl0aW9uKHByZXYsIHtcbiAgICAgIGV4cDogZWwuZWxzZWlmLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4kMihcbiAgICAgIFwidi1cIiArIChlbC5lbHNlaWYgPyAoJ2Vsc2UtaWY9XCInICsgZWwuZWxzZWlmICsgJ1wiJykgOiAnZWxzZScpICsgXCIgXCIgK1xuICAgICAgXCJ1c2VkIG9uIGVsZW1lbnQgPFwiICsgKGVsLnRhZykgKyBcIj4gd2l0aG91dCBjb3JyZXNwb25kaW5nIHYtaWYuXCIsXG4gICAgICBlbC5yYXdBdHRyc01hcFtlbC5lbHNlaWYgPyAndi1lbHNlLWlmJyA6ICd2LWVsc2UnXVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikge1xuICB2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5baV1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW5baV0udGV4dCAhPT0gJyAnKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcInRleHQgXFxcIlwiICsgKGNoaWxkcmVuW2ldLnRleHQudHJpbSgpKSArIFwiXFxcIiBiZXR3ZWVuIHYtaWYgYW5kIHYtZWxzZSgtaWYpIFwiICtcbiAgICAgICAgICBcIndpbGwgYmUgaWdub3JlZC5cIixcbiAgICAgICAgICBjaGlsZHJlbltpXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2hpbGRyZW4ucG9wKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZElmQ29uZGl0aW9uIChlbCwgY29uZGl0aW9uKSB7XG4gIGlmICghZWwuaWZDb25kaXRpb25zKSB7XG4gICAgZWwuaWZDb25kaXRpb25zID0gW107XG4gIH1cbiAgZWwuaWZDb25kaXRpb25zLnB1c2goY29uZGl0aW9uKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc09uY2UgKGVsKSB7XG4gIHZhciBvbmNlJCQxID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Ytb25jZScpO1xuICBpZiAob25jZSQkMSAhPSBudWxsKSB7XG4gICAgZWwub25jZSA9IHRydWU7XG4gIH1cbn1cblxuLy8gaGFuZGxlIGNvbnRlbnQgYmVpbmcgcGFzc2VkIHRvIGEgY29tcG9uZW50IGFzIHNsb3QsXG4vLyBlLmcuIDx0ZW1wbGF0ZSBzbG90PVwieHh4XCI+LCA8ZGl2IHNsb3Qtc2NvcGU9XCJ4eHhcIj5cbmZ1bmN0aW9uIHByb2Nlc3NTbG90Q29udGVudCAoZWwpIHtcbiAgdmFyIHNsb3RTY29wZTtcbiAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgIHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzY29wZScpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNsb3RTY29wZSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcInRoZSBcXFwic2NvcGVcXFwiIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIHNsb3RzIGhhdmUgYmVlbiBkZXByZWNhdGVkIGFuZCBcIiArXG4gICAgICAgIFwicmVwbGFjZWQgYnkgXFxcInNsb3Qtc2NvcGVcXFwiIHNpbmNlIDIuNS4gVGhlIG5ldyBcXFwic2xvdC1zY29wZVxcXCIgYXR0cmlidXRlIFwiICtcbiAgICAgICAgXCJjYW4gYWxzbyBiZSB1c2VkIG9uIHBsYWluIGVsZW1lbnRzIGluIGFkZGl0aW9uIHRvIDx0ZW1wbGF0ZT4gdG8gXCIgK1xuICAgICAgICBcImRlbm90ZSBzY29wZWQgc2xvdHMuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWydzY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGUgfHwgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Nsb3Qtc2NvcGUnKTtcbiAgfSBlbHNlIGlmICgoc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Nsb3Qtc2NvcGUnKSkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC5hdHRyc01hcFsndi1mb3InXSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcIkFtYmlndW91cyBjb21iaW5lZCB1c2FnZSBvZiBzbG90LXNjb3BlIGFuZCB2LWZvciBvbiA8XCIgKyAoZWwudGFnKSArIFwiPiBcIiArXG4gICAgICAgIFwiKHYtZm9yIHRha2VzIGhpZ2hlciBwcmlvcml0eSkuIFVzZSBhIHdyYXBwZXIgPHRlbXBsYXRlPiBmb3IgdGhlIFwiICtcbiAgICAgICAgXCJzY29wZWQgc2xvdCB0byBtYWtlIGl0IGNsZWFyZXIuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWydzbG90LXNjb3BlJ10sXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIGVsLnNsb3RTY29wZSA9IHNsb3RTY29wZTtcbiAgfVxuXG4gIC8vIHNsb3Q9XCJ4eHhcIlxuICB2YXIgc2xvdFRhcmdldCA9IGdldEJpbmRpbmdBdHRyKGVsLCAnc2xvdCcpO1xuICBpZiAoc2xvdFRhcmdldCkge1xuICAgIGVsLnNsb3RUYXJnZXQgPSBzbG90VGFyZ2V0ID09PSAnXCJcIicgPyAnXCJkZWZhdWx0XCInIDogc2xvdFRhcmdldDtcbiAgICBlbC5zbG90VGFyZ2V0RHluYW1pYyA9ICEhKGVsLmF0dHJzTWFwWyc6c2xvdCddIHx8IGVsLmF0dHJzTWFwWyd2LWJpbmQ6c2xvdCddKTtcbiAgICAvLyBwcmVzZXJ2ZSBzbG90IGFzIGFuIGF0dHJpYnV0ZSBmb3IgbmF0aXZlIHNoYWRvdyBET00gY29tcGF0XG4gICAgLy8gb25seSBmb3Igbm9uLXNjb3BlZCBzbG90cy5cbiAgICBpZiAoZWwudGFnICE9PSAndGVtcGxhdGUnICYmICFlbC5zbG90U2NvcGUpIHtcbiAgICAgIGFkZEF0dHIoZWwsICdzbG90Jywgc2xvdFRhcmdldCwgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdzbG90JykpO1xuICAgIH1cbiAgfVxuXG4gIC8vIDIuNiB2LXNsb3Qgc3ludGF4XG4gIHtcbiAgICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAvLyB2LXNsb3Qgb24gPHRlbXBsYXRlPlxuICAgICAgdmFyIHNsb3RCaW5kaW5nID0gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgoZWwsIHNsb3RSRSk7XG4gICAgICBpZiAoc2xvdEJpbmRpbmcpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoZWwuc2xvdFRhcmdldCB8fCBlbC5zbG90U2NvcGUpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLlwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnBhcmVudCAmJiAhbWF5YmVDb21wb25lbnQoZWwucGFyZW50KSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIjx0ZW1wbGF0ZSB2LXNsb3Q+IGNhbiBvbmx5IGFwcGVhciBhdCB0aGUgcm9vdCBsZXZlbCBpbnNpZGUgXCIgK1xuICAgICAgICAgICAgICBcInRoZSByZWNlaXZpbmcgdGhlIGNvbXBvbmVudFwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlZiA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nKTtcbiAgICAgICAgdmFyIG5hbWUgPSByZWYubmFtZTtcbiAgICAgICAgdmFyIGR5bmFtaWMgPSByZWYuZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFRhcmdldCA9IG5hbWU7XG4gICAgICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmcudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjsgLy8gZm9yY2UgaXQgaW50byBhIHNjb3BlZCBzbG90IGZvciBwZXJmXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHYtc2xvdCBvbiBjb21wb25lbnQsIGRlbm90ZXMgZGVmYXVsdCBzbG90XG4gICAgICB2YXIgc2xvdEJpbmRpbmckMSA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nJDEpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIW1heWJlQ29tcG9uZW50KGVsKSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcInYtc2xvdCBjYW4gb25seSBiZSB1c2VkIG9uIGNvbXBvbmVudHMgb3IgPHRlbXBsYXRlPi5cIixcbiAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnNsb3RTY29wZSB8fCBlbC5zbG90VGFyZ2V0KSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIlRvIGF2b2lkIHNjb3BlIGFtYmlndWl0eSwgdGhlIGRlZmF1bHQgc2xvdCBzaG91bGQgYWxzbyB1c2UgXCIgK1xuICAgICAgICAgICAgICBcIjx0ZW1wbGF0ZT4gc3ludGF4IHdoZW4gdGhlcmUgYXJlIG90aGVyIG5hbWVkIHNsb3RzLlwiLFxuICAgICAgICAgICAgICBzbG90QmluZGluZyQxXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCdzIGNoaWxkcmVuIHRvIGl0cyBkZWZhdWx0IHNsb3RcbiAgICAgICAgdmFyIHNsb3RzID0gZWwuc2NvcGVkU2xvdHMgfHwgKGVsLnNjb3BlZFNsb3RzID0ge30pO1xuICAgICAgICB2YXIgcmVmJDEgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyQxKTtcbiAgICAgICAgdmFyIG5hbWUkMSA9IHJlZiQxLm5hbWU7XG4gICAgICAgIHZhciBkeW5hbWljJDEgPSByZWYkMS5keW5hbWljO1xuICAgICAgICB2YXIgc2xvdENvbnRhaW5lciA9IHNsb3RzW25hbWUkMV0gPSBjcmVhdGVBU1RFbGVtZW50KCd0ZW1wbGF0ZScsIFtdLCBlbCk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldCA9IG5hbWUkMTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWMkMTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5jaGlsZHJlbiA9IGVsLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgIGlmICghYy5zbG90U2NvcGUpIHtcbiAgICAgICAgICAgIGMucGFyZW50ID0gc2xvdENvbnRhaW5lcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90U2NvcGUgPSBzbG90QmluZGluZyQxLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47XG4gICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlbiBhcyB0aGV5IGFyZSByZXR1cm5lZCBmcm9tIHNjb3BlZFNsb3RzIG5vd1xuICAgICAgICBlbC5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAvLyBtYXJrIGVsIG5vbi1wbGFpbiBzbyBkYXRhIGdldHMgZ2VuZXJhdGVkXG4gICAgICAgIGVsLnBsYWluID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNsb3ROYW1lIChiaW5kaW5nKSB7XG4gIHZhciBuYW1lID0gYmluZGluZy5uYW1lLnJlcGxhY2Uoc2xvdFJFLCAnJyk7XG4gIGlmICghbmFtZSkge1xuICAgIGlmIChiaW5kaW5nLm5hbWVbMF0gIT09ICcjJykge1xuICAgICAgbmFtZSA9ICdkZWZhdWx0JztcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJ2LXNsb3Qgc2hvcnRoYW5kIHN5bnRheCByZXF1aXJlcyBhIHNsb3QgbmFtZS5cIixcbiAgICAgICAgYmluZGluZ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpXG4gICAgLy8gZHluYW1pYyBbbmFtZV1cbiAgICA/IHsgbmFtZTogbmFtZS5zbGljZSgxLCAtMSksIGR5bmFtaWM6IHRydWUgfVxuICAgIC8vIHN0YXRpYyBuYW1lXG4gICAgOiB7IG5hbWU6IChcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCJcIiksIGR5bmFtaWM6IGZhbHNlIH1cbn1cblxuLy8gaGFuZGxlIDxzbG90Lz4gb3V0bGV0c1xuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RPdXRsZXQgKGVsKSB7XG4gIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIGVsLnNsb3ROYW1lID0gZ2V0QmluZGluZ0F0dHIoZWwsICduYW1lJyk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwua2V5KSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiYGtleWAgZG9lcyBub3Qgd29yayBvbiA8c2xvdD4gYmVjYXVzZSBzbG90cyBhcmUgYWJzdHJhY3Qgb3V0bGV0cyBcIiArXG4gICAgICAgIFwiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gXCIgK1xuICAgICAgICBcIlVzZSB0aGUga2V5IG9uIGEgd3JhcHBpbmcgZWxlbWVudCBpbnN0ZWFkLlwiLFxuICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ29tcG9uZW50IChlbCkge1xuICB2YXIgYmluZGluZztcbiAgaWYgKChiaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdpcycpKSkge1xuICAgIGVsLmNvbXBvbmVudCA9IGJpbmRpbmc7XG4gIH1cbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICdpbmxpbmUtdGVtcGxhdGUnKSAhPSBudWxsKSB7XG4gICAgZWwuaW5saW5lVGVtcGxhdGUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBpLCBsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgbW9kaWZpZXJzLCBzeW5jR2VuLCBpc0R5bmFtaWM7XG4gIGZvciAoaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG5hbWUgPSByYXdOYW1lID0gbGlzdFtpXS5uYW1lO1xuICAgIHZhbHVlID0gbGlzdFtpXS52YWx1ZTtcbiAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgLy8gbWFyayBlbGVtZW50IGFzIGR5bmFtaWNcbiAgICAgIGVsLmhhc0JpbmRpbmdzID0gdHJ1ZTtcbiAgICAgIC8vIG1vZGlmaWVyc1xuICAgICAgbW9kaWZpZXJzID0gcGFyc2VNb2RpZmllcnMobmFtZS5yZXBsYWNlKGRpclJFLCAnJykpO1xuICAgICAgLy8gc3VwcG9ydCAuZm9vIHNob3J0aGFuZCBzeW50YXggZm9yIHRoZSAucHJvcCBtb2RpZmllclxuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaW5kUkUudGVzdChuYW1lKSkgeyAvLyB2LWJpbmRcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShiaW5kUkUsICcnKTtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZpbHRlcnModmFsdWUpO1xuICAgICAgICBpc0R5bmFtaWMgPSBkeW5hbWljQXJnUkUudGVzdChuYW1lKTtcbiAgICAgICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgIHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgKFwiVGhlIHZhbHVlIGZvciBhIHYtYmluZCBleHByZXNzaW9uIGNhbm5vdCBiZSBlbXB0eS4gRm91bmQgaW4gXFxcInYtYmluZDpcIiArIG5hbWUgKyBcIlxcXCJcIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3AgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpbm5lckh0bWwnKSB7IG5hbWUgPSAnaW5uZXJIVE1MJzsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmNhbWVsICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5zeW5jKSB7XG4gICAgICAgICAgICBzeW5jR2VuID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIFwiJGV2ZW50XCIpO1xuICAgICAgICAgICAgaWYgKCFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAoXCJ1cGRhdGU6XCIgKyAoY2FtZWxpemUobmFtZSkpKSxcbiAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaWYgKGh5cGhlbmF0ZShuYW1lKSAhPT0gY2FtZWxpemUobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgICAoXCJ1cGRhdGU6XCIgKyAoaHlwaGVuYXRlKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGhhbmRsZXIgdy8gZHluYW1pYyBldmVudCBuYW1lXG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwiXFxcInVwZGF0ZTpcXFwiKyhcIiArIG5hbWUgKyBcIilcIiksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICBsaXN0W2ldLFxuICAgICAgICAgICAgICAgIHRydWUgLy8gZHluYW1pY1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKG1vZGlmaWVycyAmJiBtb2RpZmllcnMucHJvcCkgfHwgKFxuICAgICAgICAgICFlbC5jb21wb25lbnQgJiYgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpXG4gICAgICAgICkpIHtcbiAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHsgLy8gdi1vblxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG9uUkUsICcnKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSGFuZGxlcihlbCwgbmFtZSwgdmFsdWUsIG1vZGlmaWVycywgZmFsc2UsIHdhcm4kMiwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgIH0gZWxzZSB7IC8vIG5vcm1hbCBkaXJlY3RpdmVzXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoZGlyUkUsICcnKTtcbiAgICAgICAgLy8gcGFyc2UgYXJnXG4gICAgICAgIHZhciBhcmdNYXRjaCA9IG5hbWUubWF0Y2goYXJnUkUpO1xuICAgICAgICB2YXIgYXJnID0gYXJnTWF0Y2ggJiYgYXJnTWF0Y2hbMV07XG4gICAgICAgIGlzRHluYW1pYyA9IGZhbHNlO1xuICAgICAgICBpZiAoYXJnKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLShhcmcubGVuZ3RoICsgMSkpO1xuICAgICAgICAgIGlmIChkeW5hbWljQXJnUkUudGVzdChhcmcpKSB7XG4gICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgaXNEeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWRkRGlyZWN0aXZlKGVsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBpc0R5bmFtaWMsIG1vZGlmaWVycywgbGlzdFtpXSk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsaXRlcmFsIGF0dHJpYnV0ZVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIHJlcyA9IHBhcnNlVGV4dCh2YWx1ZSwgZGVsaW1pdGVycyk7XG4gICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGlkPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6aWQ9XCJ2YWxcIj4uJyxcbiAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZGRBdHRyKGVsLCBuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSksIGxpc3RbaV0pO1xuICAgICAgLy8gIzY4ODcgZmlyZWZveCBkb2Vzbid0IHVwZGF0ZSBtdXRlZCBzdGF0ZSBpZiBzZXQgdmlhIGF0dHJpYnV0ZVxuICAgICAgLy8gZXZlbiBpbW1lZGlhdGVseSBhZnRlciBlbGVtZW50IGNyZWF0aW9uXG4gICAgICBpZiAoIWVsLmNvbXBvbmVudCAmJlxuICAgICAgICAgIG5hbWUgPT09ICdtdXRlZCcgJiZcbiAgICAgICAgICBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSkpIHtcbiAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgJ3RydWUnLCBsaXN0W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbkZvciAoZWwpIHtcbiAgdmFyIHBhcmVudCA9IGVsO1xuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5mb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMgKG5hbWUpIHtcbiAgdmFyIG1hdGNoID0gbmFtZS5tYXRjaChtb2RpZmllclJFKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHJldCA9IHt9O1xuICAgIG1hdGNoLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0W20uc2xpY2UoMSldID0gdHJ1ZTsgfSk7XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VBdHRyc01hcCAoYXR0cnMpIHtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1hcFthdHRyc1tpXS5uYW1lXSAmJiAhaXNJRSAmJiAhaXNFZGdlXG4gICAgKSB7XG4gICAgICB3YXJuJDIoJ2R1cGxpY2F0ZSBhdHRyaWJ1dGU6ICcgKyBhdHRyc1tpXS5uYW1lLCBhdHRyc1tpXSk7XG4gICAgfVxuICAgIG1hcFthdHRyc1tpXS5uYW1lXSA9IGF0dHJzW2ldLnZhbHVlO1xuICB9XG4gIHJldHVybiBtYXBcbn1cblxuLy8gZm9yIHNjcmlwdCAoZS5nLiB0eXBlPVwieC90ZW1wbGF0ZVwiKSBvciBzdHlsZSwgZG8gbm90IGRlY29kZSBjb250ZW50XG5mdW5jdGlvbiBpc1RleHRUYWcgKGVsKSB7XG4gIHJldHVybiBlbC50YWcgPT09ICdzY3JpcHQnIHx8IGVsLnRhZyA9PT0gJ3N0eWxlJ1xufVxuXG5mdW5jdGlvbiBpc0ZvcmJpZGRlblRhZyAoZWwpIHtcbiAgcmV0dXJuIChcbiAgICBlbC50YWcgPT09ICdzdHlsZScgfHxcbiAgICAoZWwudGFnID09PSAnc2NyaXB0JyAmJiAoXG4gICAgICAhZWwuYXR0cnNNYXAudHlwZSB8fFxuICAgICAgZWwuYXR0cnNNYXAudHlwZSA9PT0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICApKVxuICApXG59XG5cbnZhciBpZU5TQnVnID0gL154bWxuczpOU1xcZCsvO1xudmFyIGllTlNQcmVmaXggPSAvXk5TXFxkKzovO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZ3VhcmRJRVNWR0J1ZyAoYXR0cnMpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBhdHRyc1tpXTtcbiAgICBpZiAoIWllTlNCdWcudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBhdHRyLm5hbWUgPSBhdHRyLm5hbWUucmVwbGFjZShpZU5TUHJlZml4LCAnJyk7XG4gICAgICByZXMucHVzaChhdHRyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkge1xuICB2YXIgX2VsID0gZWw7XG4gIHdoaWxlIChfZWwpIHtcbiAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgICBcIllvdSBhcmUgYmluZGluZyB2LW1vZGVsIGRpcmVjdGx5IHRvIGEgdi1mb3IgaXRlcmF0aW9uIGFsaWFzLiBcIiArXG4gICAgICAgIFwiVGhpcyB3aWxsIG5vdCBiZSBhYmxlIHRvIG1vZGlmeSB0aGUgdi1mb3Igc291cmNlIGFycmF5IGJlY2F1c2UgXCIgK1xuICAgICAgICBcIndyaXRpbmcgdG8gdGhlIGFsaWFzIGlzIGxpa2UgbW9kaWZ5aW5nIGEgZnVuY3Rpb24gbG9jYWwgdmFyaWFibGUuIFwiICtcbiAgICAgICAgXCJDb25zaWRlciB1c2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCB1c2Ugdi1tb2RlbCBvbiBhbiBvYmplY3QgcHJvcGVydHkgaW5zdGVhZC5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgKTtcbiAgICB9XG4gICAgX2VsID0gX2VsLnBhcmVudDtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcHJlVHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgaWYgKGVsLnRhZyA9PT0gJ2lucHV0Jykge1xuICAgIHZhciBtYXAgPSBlbC5hdHRyc01hcDtcbiAgICBpZiAoIW1hcFsndi1tb2RlbCddKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgdHlwZUJpbmRpbmc7XG4gICAgaWYgKG1hcFsnOnR5cGUnXSB8fCBtYXBbJ3YtYmluZDp0eXBlJ10pIHtcbiAgICAgIHR5cGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0eXBlJyk7XG4gICAgfVxuICAgIGlmICghbWFwLnR5cGUgJiYgIXR5cGVCaW5kaW5nICYmIG1hcFsndi1iaW5kJ10pIHtcbiAgICAgIHR5cGVCaW5kaW5nID0gXCIoXCIgKyAobWFwWyd2LWJpbmQnXSkgKyBcIikudHlwZVwiO1xuICAgIH1cblxuICAgIGlmICh0eXBlQmluZGluZykge1xuICAgICAgdmFyIGlmQ29uZGl0aW9uID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnLCB0cnVlKTtcbiAgICAgIHZhciBpZkNvbmRpdGlvbkV4dHJhID0gaWZDb25kaXRpb24gPyAoXCImJihcIiArIGlmQ29uZGl0aW9uICsgXCIpXCIpIDogXCJcIjtcbiAgICAgIHZhciBoYXNFbHNlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScsIHRydWUpICE9IG51bGw7XG4gICAgICB2YXIgZWxzZUlmQ29uZGl0aW9uID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicsIHRydWUpO1xuICAgICAgLy8gMS4gY2hlY2tib3hcbiAgICAgIHZhciBicmFuY2gwID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIC8vIHByb2Nlc3MgZm9yIG9uIHRoZSBtYWluIG5vZGVcbiAgICAgIHByb2Nlc3NGb3IoYnJhbmNoMCk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDAsICd0eXBlJywgJ2NoZWNrYm94Jyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gwLCBvcHRpb25zKTtcbiAgICAgIGJyYW5jaDAucHJvY2Vzc2VkID0gdHJ1ZTsgLy8gcHJldmVudCBpdCBmcm9tIGRvdWJsZS1wcm9jZXNzZWRcbiAgICAgIGJyYW5jaDAuaWYgPSBcIihcIiArIHR5cGVCaW5kaW5nICsgXCIpPT09J2NoZWNrYm94J1wiICsgaWZDb25kaXRpb25FeHRyYTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBicmFuY2gwLmlmLFxuICAgICAgICBibG9jazogYnJhbmNoMFxuICAgICAgfSk7XG4gICAgICAvLyAyLiBhZGQgcmFkaW8gZWxzZS1pZiBjb25kaXRpb25cbiAgICAgIHZhciBicmFuY2gxID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMSwgJ3YtZm9yJywgdHJ1ZSk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDEsICd0eXBlJywgJ3JhZGlvJyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gxLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBcIihcIiArIHR5cGVCaW5kaW5nICsgXCIpPT09J3JhZGlvJ1wiICsgaWZDb25kaXRpb25FeHRyYSxcbiAgICAgICAgYmxvY2s6IGJyYW5jaDFcbiAgICAgIH0pO1xuICAgICAgLy8gMy4gb3RoZXJcbiAgICAgIHZhciBicmFuY2gyID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMiwgJ3YtZm9yJywgdHJ1ZSk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDIsICc6dHlwZScsIHR5cGVCaW5kaW5nKTtcbiAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDIsIG9wdGlvbnMpO1xuICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICBleHA6IGlmQ29uZGl0aW9uLFxuICAgICAgICBibG9jazogYnJhbmNoMlxuICAgICAgfSk7XG5cbiAgICAgIGlmIChoYXNFbHNlKSB7XG4gICAgICAgIGJyYW5jaDAuZWxzZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGVsc2VJZkNvbmRpdGlvbikge1xuICAgICAgICBicmFuY2gwLmVsc2VpZiA9IGVsc2VJZkNvbmRpdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyYW5jaDBcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBU1RFbGVtZW50IChlbCkge1xuICByZXR1cm4gY3JlYXRlQVNURWxlbWVudChlbC50YWcsIGVsLmF0dHJzTGlzdC5zbGljZSgpLCBlbC5wYXJlbnQpXG59XG5cbnZhciBtb2RlbCQxID0ge1xuICBwcmVUcmFuc2Zvcm1Ob2RlOiBwcmVUcmFuc2Zvcm1Ob2RlXG59O1xuXG52YXIgbW9kdWxlcyQxID0gW1xuICBrbGFzcyQxLFxuICBzdHlsZSQxLFxuICBtb2RlbCQxXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdGV4dCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ3RleHRDb250ZW50JywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSwgZGlyKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaHRtbCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ2lubmVySFRNTCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIiksIGRpcik7XG4gIH1cbn1cblxudmFyIGRpcmVjdGl2ZXMkMSA9IHtcbiAgbW9kZWw6IG1vZGVsLFxuICB0ZXh0OiB0ZXh0LFxuICBodG1sOiBodG1sXG59O1xuXG4vKiAgKi9cblxudmFyIGJhc2VPcHRpb25zID0ge1xuICBleHBlY3RIVE1MOiB0cnVlLFxuICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgaXNQcmVUYWc6IGlzUHJlVGFnLFxuICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gIGNhbkJlTGVmdE9wZW5UYWc6IGNhbkJlTGVmdE9wZW5UYWcsXG4gIGlzUmVzZXJ2ZWRUYWc6IGlzUmVzZXJ2ZWRUYWcsXG4gIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICBzdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMkMSlcbn07XG5cbi8qICAqL1xuXG52YXIgaXNTdGF0aWNLZXk7XG52YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO1xuXG52YXIgZ2VuU3RhdGljS2V5c0NhY2hlZCA9IGNhY2hlZChnZW5TdGF0aWNLZXlzJDEpO1xuXG4vKipcbiAqIEdvYWwgb2YgdGhlIG9wdGltaXplcjogd2FsayB0aGUgZ2VuZXJhdGVkIHRlbXBsYXRlIEFTVCB0cmVlXG4gKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG4gKiB0aGUgRE9NIHRoYXQgbmV2ZXIgbmVlZHMgdG8gY2hhbmdlLlxuICpcbiAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuICpcbiAqIDEuIEhvaXN0IHRoZW0gaW50byBjb25zdGFudHMsIHNvIHRoYXQgd2Ugbm8gbG9uZ2VyIG5lZWQgdG9cbiAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcbiAqIDIuIENvbXBsZXRlbHkgc2tpcCB0aGVtIGluIHRoZSBwYXRjaGluZyBwcm9jZXNzLlxuICovXG5mdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykge1xuICBpZiAoIXJvb3QpIHsgcmV0dXJuIH1cbiAgaXNTdGF0aWNLZXkgPSBnZW5TdGF0aWNLZXlzQ2FjaGVkKG9wdGlvbnMuc3RhdGljS2V5cyB8fCAnJyk7XG4gIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgLy8gZmlyc3QgcGFzczogbWFyayBhbGwgbm9uLXN0YXRpYyBub2Rlcy5cbiAgbWFya1N0YXRpYyQxKHJvb3QpO1xuICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICByZXR1cm4gbWFrZU1hcChcbiAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycyxzdGFydCxlbmQscmF3QXR0cnNNYXAnICtcbiAgICAoa2V5cyA/ICcsJyArIGtleXMgOiAnJylcbiAgKVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljJDEgKG5vZGUpIHtcbiAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYyhub2RlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgIC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcbiAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgaWYgKFxuICAgICAgIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiZcbiAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgbWFya1N0YXRpYyQxKGNoaWxkKTtcbiAgICAgIGlmICghY2hpbGQuc3RhdGljKSB7XG4gICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIHZhciBibG9jayA9IG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2s7XG4gICAgICAgIG1hcmtTdGF0aWMkMShibG9jayk7XG4gICAgICAgIGlmICghYmxvY2suc3RhdGljKSB7XG4gICAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljUm9vdHMgKG5vZGUsIGlzSW5Gb3IpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHtcbiAgICAgIG5vZGUuc3RhdGljSW5Gb3IgPSBpc0luRm9yO1xuICAgIH1cbiAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdFxuICAgIC8vIGFyZSBub3QganVzdCBzdGF0aWMgdGV4dC4gT3RoZXJ3aXNlIHRoZSBjb3N0IG9mIGhvaXN0aW5nIG91dCB3aWxsXG4gICAgLy8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKFxuICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIG5vZGUuY2hpbGRyZW5bMF0udHlwZSA9PT0gM1xuICAgICkpIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IHRydWU7XG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmNoaWxkcmVuW2ldLCBpc0luRm9yIHx8ICEhbm9kZS5mb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaywgaXNJbkZvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljIChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDIpIHsgLy8gZXhwcmVzc2lvblxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChub2RlLnR5cGUgPT09IDMpIHsgLy8gdGV4dFxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuICEhKG5vZGUucHJlIHx8IChcbiAgICAhbm9kZS5oYXNCaW5kaW5ncyAmJiAvLyBubyBkeW5hbWljIGJpbmRpbmdzXG4gICAgIW5vZGUuaWYgJiYgIW5vZGUuZm9yICYmIC8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuICAgICFpc0J1aWx0SW5UYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGJ1aWx0LWluXG4gICAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBjb21wb25lbnRcbiAgICAhaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSkgJiZcbiAgICBPYmplY3Qua2V5cyhub2RlKS5ldmVyeShpc1N0YXRpY0tleSlcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IgKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUucGFyZW50KSB7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIGlmIChub2RlLnRhZyAhPT0gJ3RlbXBsYXRlJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChub2RlLmZvcikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG52YXIgZm5FeHBSRSA9IC9eKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uXFxzKig/OltcXHckXSspP1xccypcXCgvO1xudmFyIGZuSW52b2tlUkUgPSAvXFwoW14pXSo/XFwpOyokLztcbnZhciBzaW1wbGVQYXRoUkUgPSAvXltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJ1teJ10qPyddfFxcW1wiW15cIl0qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKiQvO1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xudmFyIGtleUNvZGVzID0ge1xuICBlc2M6IDI3LFxuICB0YWI6IDksXG4gIGVudGVyOiAxMyxcbiAgc3BhY2U6IDMyLFxuICB1cDogMzgsXG4gIGxlZnQ6IDM3LFxuICByaWdodDogMzksXG4gIGRvd246IDQwLFxuICAnZGVsZXRlJzogWzgsIDQ2XVxufTtcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXkgYWxpYXNlc1xudmFyIGtleU5hbWVzID0ge1xuICAvLyAjNzg4MDogSUUxMSBhbmQgRWRnZSB1c2UgYEVzY2AgZm9yIEVzY2FwZSBrZXkgbmFtZS5cbiAgZXNjOiBbJ0VzYycsICdFc2NhcGUnXSxcbiAgdGFiOiAnVGFiJyxcbiAgZW50ZXI6ICdFbnRlcicsXG4gIC8vICM5MTEyOiBJRTExIHVzZXMgYFNwYWNlYmFyYCBmb3IgU3BhY2Uga2V5IG5hbWUuXG4gIHNwYWNlOiBbJyAnLCAnU3BhY2ViYXInXSxcbiAgLy8gIzc4MDY6IElFMTEgdXNlcyBrZXkgbmFtZXMgd2l0aG91dCBgQXJyb3dgIHByZWZpeCBmb3IgYXJyb3cga2V5cy5cbiAgdXA6IFsnVXAnLCAnQXJyb3dVcCddLFxuICBsZWZ0OiBbJ0xlZnQnLCAnQXJyb3dMZWZ0J10sXG4gIHJpZ2h0OiBbJ1JpZ2h0JywgJ0Fycm93UmlnaHQnXSxcbiAgZG93bjogWydEb3duJywgJ0Fycm93RG93biddLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBEZWxgIGZvciBEZWxldGUga2V5IG5hbWUuXG4gICdkZWxldGUnOiBbJ0JhY2tzcGFjZScsICdEZWxldGUnLCAnRGVsJ11cbn07XG5cbi8vICM0ODY4OiBtb2RpZmllcnMgdGhhdCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGxpc3RlbmVyXG4vLyBuZWVkIHRvIGV4cGxpY2l0bHkgcmV0dXJuIG51bGwgc28gdGhhdCB3ZSBjYW4gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmVtb3ZlXG4vLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlXG52YXIgZ2VuR3VhcmQgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7IHJldHVybiAoXCJpZihcIiArIGNvbmRpdGlvbiArIFwiKXJldHVybiBudWxsO1wiKTsgfTtcblxudmFyIG1vZGlmaWVyQ29kZSA9IHtcbiAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICBwcmV2ZW50OiAnJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7JyxcbiAgc2VsZjogZ2VuR3VhcmQoXCIkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldFwiKSxcbiAgY3RybDogZ2VuR3VhcmQoXCIhJGV2ZW50LmN0cmxLZXlcIiksXG4gIHNoaWZ0OiBnZW5HdWFyZChcIiEkZXZlbnQuc2hpZnRLZXlcIiksXG4gIGFsdDogZ2VuR3VhcmQoXCIhJGV2ZW50LmFsdEtleVwiKSxcbiAgbWV0YTogZ2VuR3VhcmQoXCIhJGV2ZW50Lm1ldGFLZXlcIiksXG4gIGxlZnQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDBcIiksXG4gIG1pZGRsZTogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMVwiKSxcbiAgcmlnaHQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIilcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChcbiAgZXZlbnRzLFxuICBpc05hdGl2ZVxuKSB7XG4gIHZhciBwcmVmaXggPSBpc05hdGl2ZSA/ICduYXRpdmVPbjonIDogJ29uOic7XG4gIHZhciBzdGF0aWNIYW5kbGVycyA9IFwiXCI7XG4gIHZhciBkeW5hbWljSGFuZGxlcnMgPSBcIlwiO1xuICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cykge1xuICAgIHZhciBoYW5kbGVyQ29kZSA9IGdlbkhhbmRsZXIoZXZlbnRzW25hbWVdKTtcbiAgICBpZiAoZXZlbnRzW25hbWVdICYmIGV2ZW50c1tuYW1lXS5keW5hbWljKSB7XG4gICAgICBkeW5hbWljSGFuZGxlcnMgKz0gbmFtZSArIFwiLFwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljSGFuZGxlcnMgKz0gXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiOlwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgc3RhdGljSGFuZGxlcnMgPSBcIntcIiArIChzdGF0aWNIYW5kbGVycy5zbGljZSgwLCAtMSkpICsgXCJ9XCI7XG4gIGlmIChkeW5hbWljSGFuZGxlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgXCJfZChcIiArIHN0YXRpY0hhbmRsZXJzICsgXCIsW1wiICsgKGR5bmFtaWNIYW5kbGVycy5zbGljZSgwLCAtMSkpICsgXCJdKVwiXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZWZpeCArIHN0YXRpY0hhbmRsZXJzXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSGFuZGxlciAoaGFuZGxlcikge1xuICBpZiAoIWhhbmRsZXIpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCl7fSdcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgcmV0dXJuIChcIltcIiArIChoYW5kbGVyLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gZ2VuSGFuZGxlcihoYW5kbGVyKTsgfSkuam9pbignLCcpKSArIFwiXVwiKVxuICB9XG5cbiAgdmFyIGlzTWV0aG9kUGF0aCA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICB2YXIgaXNGdW5jdGlvbkV4cHJlc3Npb24gPSBmbkV4cFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uSW52b2NhdGlvbiA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUucmVwbGFjZShmbkludm9rZVJFLCAnJykpO1xuXG4gIGlmICghaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICBpZiAoaXNNZXRob2RQYXRoIHx8IGlzRnVuY3Rpb25FeHByZXNzaW9uKSB7XG4gICAgICByZXR1cm4gaGFuZGxlci52YWx1ZVxuICAgIH1cbiAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIChpc0Z1bmN0aW9uSW52b2NhdGlvbiA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSkgOiBoYW5kbGVyLnZhbHVlKSArIFwifVwiKSAvLyBpbmxpbmUgc3RhdGVtZW50XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICB2YXIgZ2VuTW9kaWZpZXJDb2RlID0gJyc7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICAgIGlmIChtb2RpZmllckNvZGVba2V5XSkge1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gbW9kaWZpZXJDb2RlW2tleV07XG4gICAgICAgIC8vIGxlZnQvcmlnaHRcbiAgICAgICAgaWYgKGtleUNvZGVzW2tleV0pIHtcbiAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdleGFjdCcpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IChoYW5kbGVyLm1vZGlmaWVycyk7XG4gICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBnZW5HdWFyZChcbiAgICAgICAgICBbJ2N0cmwnLCAnc2hpZnQnLCAnYWx0JywgJ21ldGEnXVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuICFtb2RpZmllcnNba2V5TW9kaWZpZXJdOyB9KVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuIChcIiRldmVudC5cIiArIGtleU1vZGlmaWVyICsgXCJLZXlcIik7IH0pXG4gICAgICAgICAgICAuam9pbignfHwnKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgY29kZSArPSBnZW5LZXlGaWx0ZXIoa2V5cyk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSBtb2RpZmllcnMgbGlrZSBwcmV2ZW50IGFuZCBzdG9wIGdldCBleGVjdXRlZCBhZnRlciBrZXkgZmlsdGVyaW5nXG4gICAgaWYgKGdlbk1vZGlmaWVyQ29kZSkge1xuICAgICAgY29kZSArPSBnZW5Nb2RpZmllckNvZGU7XG4gICAgfVxuICAgIHZhciBoYW5kbGVyQ29kZSA9IGlzTWV0aG9kUGF0aFxuICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIigkZXZlbnQpXCIpXG4gICAgICA6IGlzRnVuY3Rpb25FeHByZXNzaW9uXG4gICAgICAgID8gKFwicmV0dXJuIChcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKSgkZXZlbnQpXCIpXG4gICAgICAgIDogaXNGdW5jdGlvbkludm9jYXRpb25cbiAgICAgICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSlcbiAgICAgICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyBjb2RlICsgaGFuZGxlckNvZGUgKyBcIn1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcbiAgICAvLyBtYWtlIHN1cmUgdGhlIGtleSBmaWx0ZXJzIG9ubHkgYXBwbHkgdG8gS2V5Ym9hcmRFdmVudHNcbiAgICAvLyAjOTQ0MTogY2FuJ3QgdXNlICdrZXlDb2RlJyBpbiAkZXZlbnQgYmVjYXVzZSBDaHJvbWUgYXV0b2ZpbGwgZmlyZXMgZmFrZVxuICAgIC8vIGtleSBldmVudHMgdGhhdCBkbyBub3QgaGF2ZSBrZXlDb2RlIHByb3BlcnR5Li4uXG4gICAgXCJpZighJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykmJlwiICtcbiAgICAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyBcIilyZXR1cm4gbnVsbDtcIlxuICApXG59XG5cbmZ1bmN0aW9uIGdlbkZpbHRlckNvZGUgKGtleSkge1xuICB2YXIga2V5VmFsID0gcGFyc2VJbnQoa2V5LCAxMCk7XG4gIGlmIChrZXlWYWwpIHtcbiAgICByZXR1cm4gKFwiJGV2ZW50LmtleUNvZGUhPT1cIiArIGtleVZhbClcbiAgfVxuICB2YXIga2V5Q29kZSA9IGtleUNvZGVzW2tleV07XG4gIHZhciBrZXlOYW1lID0ga2V5TmFtZXNba2V5XTtcbiAgcmV0dXJuIChcbiAgICBcIl9rKCRldmVudC5rZXlDb2RlLFwiICtcbiAgICAoSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyBcIixcIiArXG4gICAgKEpTT04uc3RyaW5naWZ5KGtleUNvZGUpKSArIFwiLFwiICtcbiAgICBcIiRldmVudC5rZXksXCIgK1xuICAgIFwiXCIgKyAoSlNPTi5zdHJpbmdpZnkoa2V5TmFtZSkpICtcbiAgICBcIilcIlxuICApXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBvbiAoZWwsIGRpcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkaXIubW9kaWZpZXJzKSB7XG4gICAgd2FybihcInYtb24gd2l0aG91dCBhcmd1bWVudCBkb2VzIG5vdCBzdXBwb3J0IG1vZGlmaWVycy5cIik7XG4gIH1cbiAgZWwud3JhcExpc3RlbmVycyA9IGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJfZyhcIiArIGNvZGUgKyBcIixcIiArIChkaXIudmFsdWUpICsgXCIpXCIpOyB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZCQxIChlbCwgZGlyKSB7XG4gIGVsLndyYXBEYXRhID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gKFwiX2IoXCIgKyBjb2RlICsgXCIsJ1wiICsgKGVsLnRhZykgKyBcIicsXCIgKyAoZGlyLnZhbHVlKSArIFwiLFwiICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5wcm9wID8gJ3RydWUnIDogJ2ZhbHNlJykgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnN5bmMgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYmFzZURpcmVjdGl2ZXMgPSB7XG4gIG9uOiBvbixcbiAgYmluZDogYmluZCQxLFxuICBjbG9hazogbm9vcFxufTtcblxuLyogICovXG5cblxuXG5cblxudmFyIENvZGVnZW5TdGF0ZSA9IGZ1bmN0aW9uIENvZGVnZW5TdGF0ZSAob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLndhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHRoaXMudHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICB0aGlzLmRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTtcbiAgdGhpcy5kaXJlY3RpdmVzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZURpcmVjdGl2ZXMpLCBvcHRpb25zLmRpcmVjdGl2ZXMpO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgdGhpcy5tYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcbiAgdGhpcy5vbmNlSWQgPSAwO1xuICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xuICB0aGlzLnByZSA9IGZhbHNlO1xufTtcblxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIHN0YXRlID0gbmV3IENvZGVnZW5TdGF0ZShvcHRpb25zKTtcbiAgdmFyIGNvZGUgPSBhc3QgPyBnZW5FbGVtZW50KGFzdCwgc3RhdGUpIDogJ19jKFwiZGl2XCIpJztcbiAgcmV0dXJuIHtcbiAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsLCBzdGF0ZSkge1xuICBpZiAoZWwucGFyZW50KSB7XG4gICAgZWwucHJlID0gZWwucHJlIHx8IGVsLnBhcmVudC5wcmU7XG4gIH1cblxuICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwub25jZSAmJiAhZWwub25jZVByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnICYmICFlbC5zbG90VGFyZ2V0ICYmICFzdGF0ZS5wcmUpIHtcbiAgICByZXR1cm4gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndm9pZCAwJ1xuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgcmV0dXJuIGdlblNsb3QoZWwsIHN0YXRlKVxuICB9IGVsc2Uge1xuICAgIC8vIGNvbXBvbmVudCBvciBlbGVtZW50XG4gICAgdmFyIGNvZGU7XG4gICAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgICAgY29kZSA9IGdlbkNvbXBvbmVudChlbC5jb21wb25lbnQsIGVsLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkYXRhO1xuICAgICAgaWYgKCFlbC5wbGFpbiB8fCAoZWwucHJlICYmIHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSkpIHtcbiAgICAgICAgZGF0YSA9IGdlbkRhdGEkMihlbCwgc3RhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICAgICAgY29kZSA9IFwiX2MoJ1wiICsgKGVsLnRhZykgKyBcIidcIiArIChkYXRhID8gKFwiLFwiICsgZGF0YSkgOiAnJykgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIjtcbiAgICB9XG4gICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLnRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvZGUgPSBzdGF0ZS50cmFuc2Zvcm1zW2ldKGVsLCBjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVcbiAgfVxufVxuXG4vLyBob2lzdCBzdGF0aWMgc3ViLXRyZWVzIG91dFxuZnVuY3Rpb24gZ2VuU3RhdGljIChlbCwgc3RhdGUpIHtcbiAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgLy8gU29tZSBlbGVtZW50cyAodGVtcGxhdGVzKSBuZWVkIHRvIGJlaGF2ZSBkaWZmZXJlbnRseSBpbnNpZGUgb2YgYSB2LXByZVxuICAvLyBub2RlLiAgQWxsIHByZSBub2RlcyBhcmUgc3RhdGljIHJvb3RzLCBzbyB3ZSBjYW4gdXNlIHRoaXMgYXMgYSBsb2NhdGlvbiB0b1xuICAvLyB3cmFwIGEgc3RhdGUgY2hhbmdlIGFuZCByZXNldCBpdCB1cG9uIGV4aXRpbmcgdGhlIHByZSBub2RlLlxuICB2YXIgb3JpZ2luYWxQcmVTdGF0ZSA9IHN0YXRlLnByZTtcbiAgaWYgKGVsLnByZSkge1xuICAgIHN0YXRlLnByZSA9IGVsLnByZTtcbiAgfVxuICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCIpKTtcbiAgc3RhdGUucHJlID0gb3JpZ2luYWxQcmVTdGF0ZTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRlLnN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCwgc3RhdGUpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgdmFyIGtleSA9ICcnO1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRlLndhcm4oXG4gICAgICAgIFwidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIFwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1vbmNlJ11cbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCwgc3RhdGUpXG4gICAgfVxuICAgIHJldHVybiAoXCJfbyhcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCIsXCIgKyAoc3RhdGUub25jZUlkKyspICsgXCIsXCIgKyBrZXkgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JZiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCksIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KVxufVxuXG5mdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKFxuICBjb25kaXRpb25zLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknXG4gIH1cblxuICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9ucy5zaGlmdCgpO1xuICBpZiAoY29uZGl0aW9uLmV4cCkge1xuICAgIHJldHVybiAoXCIoXCIgKyAoY29uZGl0aW9uLmV4cCkgKyBcIik/XCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSArIFwiOlwiICsgKGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBhbHRHZW5cbiAgICAgID8gYWx0R2VuKGVsLCBzdGF0ZSlcbiAgICAgIDogZWwub25jZVxuICAgICAgICA/IGdlbk9uY2UoZWwsIHN0YXRlKVxuICAgICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRIZWxwZXJcbikge1xuICB2YXIgZXhwID0gZWwuZm9yO1xuICB2YXIgYWxpYXMgPSBlbC5hbGlhcztcbiAgdmFyIGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IChcIixcIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnO1xuICB2YXIgaXRlcmF0b3IyID0gZWwuaXRlcmF0b3IyID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMikpIDogJyc7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkgJiZcbiAgICBlbC50YWcgIT09ICdzbG90JyAmJlxuICAgIGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICFlbC5rZXlcbiAgKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LWZvcj1cXFwiXCIgKyBhbGlhcyArIFwiIGluIFwiICsgZXhwICsgXCJcXFwiPjogY29tcG9uZW50IGxpc3RzIHJlbmRlcmVkIHdpdGggXCIgK1xuICAgICAgXCJ2LWZvciBzaG91bGQgaGF2ZSBleHBsaWNpdCBrZXlzLiBcIiArXG4gICAgICBcIlNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9saXN0Lmh0bWwja2V5IGZvciBtb3JlIGluZm8uXCIsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXSxcbiAgICAgIHRydWUgLyogdGlwICovXG4gICAgKTtcbiAgfVxuXG4gIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gKGFsdEhlbHBlciB8fCAnX2wnKSArIFwiKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKChhbHRHZW4gfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKSkgK1xuICAgICd9KSdcbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQyIChlbCwgc3RhdGUpIHtcbiAgdmFyIGRhdGEgPSAneyc7XG5cbiAgLy8gZGlyZWN0aXZlcyBmaXJzdC5cbiAgLy8gZGlyZWN0aXZlcyBtYXkgbXV0YXRlIHRoZSBlbCdzIG90aGVyIHByb3BlcnRpZXMgYmVmb3JlIHRoZXkgYXJlIGdlbmVyYXRlZC5cbiAgdmFyIGRpcnMgPSBnZW5EaXJlY3RpdmVzKGVsLCBzdGF0ZSk7XG4gIGlmIChkaXJzKSB7IGRhdGEgKz0gZGlycyArICcsJzsgfVxuXG4gIC8vIGtleVxuICBpZiAoZWwua2V5KSB7XG4gICAgZGF0YSArPSBcImtleTpcIiArIChlbC5rZXkpICsgXCIsXCI7XG4gIH1cbiAgLy8gcmVmXG4gIGlmIChlbC5yZWYpIHtcbiAgICBkYXRhICs9IFwicmVmOlwiICsgKGVsLnJlZikgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwucmVmSW5Gb3IpIHtcbiAgICBkYXRhICs9IFwicmVmSW5Gb3I6dHJ1ZSxcIjtcbiAgfVxuICAvLyBwcmVcbiAgaWYgKGVsLnByZSkge1xuICAgIGRhdGEgKz0gXCJwcmU6dHJ1ZSxcIjtcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZGF0YSArPSBcInRhZzpcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIjtcbiAgfVxuICAvLyBtb2R1bGUgZGF0YSBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmRhdGFHZW5GbnMubGVuZ3RoOyBpKyspIHtcbiAgICBkYXRhICs9IHN0YXRlLmRhdGFHZW5GbnNbaV0oZWwpO1xuICB9XG4gIC8vIGF0dHJpYnV0ZXNcbiAgaWYgKGVsLmF0dHJzKSB7XG4gICAgZGF0YSArPSBcImF0dHJzOlwiICsgKGdlblByb3BzKGVsLmF0dHJzKSkgKyBcIixcIjtcbiAgfVxuICAvLyBET00gcHJvcHNcbiAgaWYgKGVsLnByb3BzKSB7XG4gICAgZGF0YSArPSBcImRvbVByb3BzOlwiICsgKGdlblByb3BzKGVsLnByb3BzKSkgKyBcIixcIjtcbiAgfVxuICAvLyBldmVudCBoYW5kbGVyc1xuICBpZiAoZWwuZXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwuZXZlbnRzLCBmYWxzZSkpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLm5hdGl2ZUV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSkpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2xvdCB0YXJnZXRcbiAgLy8gb25seSBmb3Igbm9uLXNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2xvdFRhcmdldCAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgZGF0YSArPSBcInNsb3Q6XCIgKyAoZWwuc2xvdFRhcmdldCkgKyBcIixcIjtcbiAgfVxuICAvLyBzY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgZGF0YSArPSAoZ2VuU2NvcGVkU2xvdHMoZWwsIGVsLnNjb3BlZFNsb3RzLCBzdGF0ZSkpICsgXCIsXCI7XG4gIH1cbiAgLy8gY29tcG9uZW50IHYtbW9kZWxcbiAgaWYgKGVsLm1vZGVsKSB7XG4gICAgZGF0YSArPSBcIm1vZGVsOnt2YWx1ZTpcIiArIChlbC5tb2RlbC52YWx1ZSkgKyBcIixjYWxsYmFjazpcIiArIChlbC5tb2RlbC5jYWxsYmFjaykgKyBcIixleHByZXNzaW9uOlwiICsgKGVsLm1vZGVsLmV4cHJlc3Npb24pICsgXCJ9LFwiO1xuICB9XG4gIC8vIGlubGluZS10ZW1wbGF0ZVxuICBpZiAoZWwuaW5saW5lVGVtcGxhdGUpIHtcbiAgICB2YXIgaW5saW5lVGVtcGxhdGUgPSBnZW5JbmxpbmVUZW1wbGF0ZShlbCwgc3RhdGUpO1xuICAgIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgZGF0YSArPSBpbmxpbmVUZW1wbGF0ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKC8sJC8sICcnKSArICd9JztcbiAgLy8gdi1iaW5kIGR5bmFtaWMgYXJndW1lbnQgd3JhcFxuICAvLyB2LWJpbmQgd2l0aCBkeW5hbWljIGFyZ3VtZW50cyBtdXN0IGJlIGFwcGxpZWQgdXNpbmcgdGhlIHNhbWUgdi1iaW5kIG9iamVjdFxuICAvLyBtZXJnZSBoZWxwZXIgc28gdGhhdCBjbGFzcy9zdHlsZS9tdXN0VXNlUHJvcCBhdHRycyBhcmUgaGFuZGxlZCBjb3JyZWN0bHkuXG4gIGlmIChlbC5keW5hbWljQXR0cnMpIHtcbiAgICBkYXRhID0gXCJfYihcIiArIGRhdGEgKyBcIixcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIiArIChnZW5Qcm9wcyhlbC5keW5hbWljQXR0cnMpKSArIFwiKVwiO1xuICB9XG4gIC8vIHYtYmluZCBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBEYXRhKSB7XG4gICAgZGF0YSA9IGVsLndyYXBEYXRhKGRhdGEpO1xuICB9XG4gIC8vIHYtb24gZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwTGlzdGVuZXJzKSB7XG4gICAgZGF0YSA9IGVsLndyYXBMaXN0ZW5lcnMoZGF0YSk7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gZ2VuRGlyZWN0aXZlcyAoZWwsIHN0YXRlKSB7XG4gIHZhciBkaXJzID0gZWwuZGlyZWN0aXZlcztcbiAgaWYgKCFkaXJzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSAnZGlyZWN0aXZlczpbJztcbiAgdmFyIGhhc1J1bnRpbWUgPSBmYWxzZTtcbiAgdmFyIGksIGwsIGRpciwgbmVlZFJ1bnRpbWU7XG4gIGZvciAoaSA9IDAsIGwgPSBkaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgbmVlZFJ1bnRpbWUgPSB0cnVlO1xuICAgIHZhciBnZW4gPSBzdGF0ZS5kaXJlY3RpdmVzW2Rpci5uYW1lXTtcbiAgICBpZiAoZ2VuKSB7XG4gICAgICAvLyBjb21waWxlLXRpbWUgZGlyZWN0aXZlIHRoYXQgbWFuaXB1bGF0ZXMgQVNULlxuICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGl0IGFsc28gbmVlZHMgYSBydW50aW1lIGNvdW50ZXJwYXJ0LlxuICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCBzdGF0ZS53YXJuKTtcbiAgICB9XG4gICAgaWYgKG5lZWRSdW50aW1lKSB7XG4gICAgICBoYXNSdW50aW1lID0gdHJ1ZTtcbiAgICAgIHJlcyArPSBcIntuYW1lOlxcXCJcIiArIChkaXIubmFtZSkgKyBcIlxcXCIscmF3TmFtZTpcXFwiXCIgKyAoZGlyLnJhd05hbWUpICsgXCJcXFwiXCIgKyAoZGlyLnZhbHVlID8gKFwiLHZhbHVlOihcIiArIChkaXIudmFsdWUpICsgXCIpLGV4cHJlc3Npb246XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLnZhbHVlKSkpIDogJycpICsgKGRpci5hcmcgPyAoXCIsYXJnOlwiICsgKGRpci5pc0R5bmFtaWNBcmcgPyBkaXIuYXJnIDogKFwiXFxcIlwiICsgKGRpci5hcmcpICsgXCJcXFwiXCIpKSkgOiAnJykgKyAoZGlyLm1vZGlmaWVycyA/IChcIixtb2RpZmllcnM6XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycykpKSA6ICcnKSArIFwifSxcIjtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1J1bnRpbWUpIHtcbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICddJ1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklubGluZVRlbXBsYXRlIChlbCwgc3RhdGUpIHtcbiAgdmFyIGFzdCA9IGVsLmNoaWxkcmVuWzBdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAoXG4gICAgZWwuY2hpbGRyZW4ubGVuZ3RoICE9PSAxIHx8IGFzdC50eXBlICE9PSAxXG4gICkpIHtcbiAgICBzdGF0ZS53YXJuKFxuICAgICAgJ0lubGluZS10ZW1wbGF0ZSBjb21wb25lbnRzIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjaGlsZCBlbGVtZW50LicsXG4gICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgKTtcbiAgfVxuICBpZiAoYXN0ICYmIGFzdC50eXBlID09PSAxKSB7XG4gICAgdmFyIGlubGluZVJlbmRlckZucyA9IGdlbmVyYXRlKGFzdCwgc3RhdGUub3B0aW9ucyk7XG4gICAgcmV0dXJuIChcImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIiArIChpbmxpbmVSZW5kZXJGbnMucmVuZGVyKSArIFwifSxzdGF0aWNSZW5kZXJGbnM6W1wiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJmdW5jdGlvbigpe1wiICsgY29kZSArIFwifVwiKTsgfSkuam9pbignLCcpKSArIFwiXX1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90cyAoXG4gIGVsLFxuICBzbG90cyxcbiAgc3RhdGVcbikge1xuICAvLyBieSBkZWZhdWx0IHNjb3BlZCBzbG90cyBhcmUgY29uc2lkZXJlZCBcInN0YWJsZVwiLCB0aGlzIGFsbG93cyBjaGlsZFxuICAvLyBjb21wb25lbnRzIHdpdGggb25seSBzY29wZWQgc2xvdHMgdG8gc2tpcCBmb3JjZWQgdXBkYXRlcyBmcm9tIHBhcmVudC5cbiAgLy8gYnV0IGluIHNvbWUgY2FzZXMgd2UgaGF2ZSB0byBiYWlsLW91dCBvZiB0aGlzIG9wdGltaXphdGlvblxuICAvLyBmb3IgZXhhbXBsZSBpZiB0aGUgc2xvdCBjb250YWlucyBkeW5hbWljIG5hbWVzLCBoYXMgdi1pZiBvciB2LWZvciBvbiB0aGVtLi4uXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gZWwuZm9yIHx8IE9iamVjdC5rZXlzKHNsb3RzKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc2xvdCA9IHNsb3RzW2tleV07XG4gICAgcmV0dXJuIChcbiAgICAgIHNsb3Quc2xvdFRhcmdldER5bmFtaWMgfHxcbiAgICAgIHNsb3QuaWYgfHxcbiAgICAgIHNsb3QuZm9yIHx8XG4gICAgICBjb250YWluc1Nsb3RDaGlsZChzbG90KSAvLyBpcyBwYXNzaW5nIGRvd24gc2xvdCBmcm9tIHBhcmVudCB3aGljaCBtYXkgYmUgZHluYW1pY1xuICAgIClcbiAgfSk7XG5cbiAgLy8gIzk1MzQ6IGlmIGEgY29tcG9uZW50IHdpdGggc2NvcGVkIHNsb3RzIGlzIGluc2lkZSBhIGNvbmRpdGlvbmFsIGJyYW5jaCxcbiAgLy8gaXQncyBwb3NzaWJsZSBmb3IgdGhlIHNhbWUgY29tcG9uZW50IHRvIGJlIHJldXNlZCBidXQgd2l0aCBkaWZmZXJlbnRcbiAgLy8gY29tcGlsZWQgc2xvdCBjb250ZW50LiBUbyBhdm9pZCB0aGF0LCB3ZSBnZW5lcmF0ZSBhIHVuaXF1ZSBrZXkgYmFzZWQgb25cbiAgLy8gdGhlIGdlbmVyYXRlZCBjb2RlIG9mIGFsbCB0aGUgc2xvdCBjb250ZW50cy5cbiAgdmFyIG5lZWRzS2V5ID0gISFlbC5pZjtcblxuICAvLyBPUiB3aGVuIGl0IGlzIGluc2lkZSBhbm90aGVyIHNjb3BlZCBzbG90IG9yIHYtZm9yICh0aGUgcmVhY3Rpdml0eSBtYXkgYmVcbiAgLy8gZGlzY29ubmVjdGVkIGR1ZSB0byB0aGUgaW50ZXJtZWRpYXRlIHNjb3BlIHZhcmlhYmxlKVxuICAvLyAjOTQzOCwgIzk1MDZcbiAgLy8gVE9ETzogdGhpcyBjYW4gYmUgZnVydGhlciBvcHRpbWl6ZWQgYnkgcHJvcGVybHkgYW5hbHl6aW5nIGluLXNjb3BlIGJpbmRpbmdzXG4gIC8vIGFuZCBza2lwIGZvcmNlIHVwZGF0aW5nIG9uZXMgdGhhdCBkbyBub3QgYWN0dWFsbHkgdXNlIHNjb3BlIHZhcmlhYmxlcy5cbiAgaWYgKCFuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwYXJlbnQuc2xvdFNjb3BlICYmIHBhcmVudC5zbG90U2NvcGUgIT09IGVtcHR5U2xvdFNjb3BlVG9rZW4pIHx8XG4gICAgICAgIHBhcmVudC5mb3JcbiAgICAgICkge1xuICAgICAgICBuZWVkc0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQuaWYpIHtcbiAgICAgICAgbmVlZHNLZXkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gIH1cblxuICB2YXIgZ2VuZXJhdGVkU2xvdHMgPSBPYmplY3Qua2V5cyhzbG90cylcbiAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGdlblNjb3BlZFNsb3Qoc2xvdHNba2V5XSwgc3RhdGUpOyB9KVxuICAgIC5qb2luKCcsJyk7XG5cbiAgcmV0dXJuIChcInNjb3BlZFNsb3RzOl91KFtcIiArIGdlbmVyYXRlZFNsb3RzICsgXCJdXCIgKyAobmVlZHNGb3JjZVVwZGF0ZSA/IFwiLG51bGwsdHJ1ZVwiIDogXCJcIikgKyAoIW5lZWRzRm9yY2VVcGRhdGUgJiYgbmVlZHNLZXkgPyAoXCIsbnVsbCxmYWxzZSxcIiArIChoYXNoKGdlbmVyYXRlZFNsb3RzKSkpIDogXCJcIikgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgdmFyIGhhc2ggPSA1MzgxO1xuICB2YXIgaSA9IHN0ci5sZW5ndGg7XG4gIHdoaWxlKGkpIHtcbiAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICB9XG4gIHJldHVybiBoYXNoID4+PiAwXG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zU2xvdENoaWxkIChlbCkge1xuICBpZiAoZWwudHlwZSA9PT0gMSkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGVsLmNoaWxkcmVuLnNvbWUoY29udGFpbnNTbG90Q2hpbGQpXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3QgKFxuICBlbCxcbiAgc3RhdGVcbikge1xuICB2YXIgaXNMZWdhY3lTeW50YXggPSBlbC5hdHRyc01hcFsnc2xvdC1zY29wZSddO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkICYmICFpc0xlZ2FjeVN5bnRheCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUsIGdlblNjb3BlZFNsb3QsIFwibnVsbFwiKVxuICB9XG4gIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90KVxuICB9XG4gIHZhciBzbG90U2NvcGUgPSBlbC5zbG90U2NvcGUgPT09IGVtcHR5U2xvdFNjb3BlVG9rZW5cbiAgICA/IFwiXCJcbiAgICA6IFN0cmluZyhlbC5zbG90U2NvcGUpO1xuICB2YXIgZm4gPSBcImZ1bmN0aW9uKFwiICsgc2xvdFNjb3BlICsgXCIpe1wiICtcbiAgICBcInJldHVybiBcIiArIChlbC50YWcgPT09ICd0ZW1wbGF0ZSdcbiAgICAgID8gZWwuaWYgJiYgaXNMZWdhY3lTeW50YXhcbiAgICAgICAgPyAoXCIoXCIgKyAoZWwuaWYpICsgXCIpP1wiICsgKGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCcpICsgXCI6dW5kZWZpbmVkXCIpXG4gICAgICAgIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndW5kZWZpbmVkJ1xuICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCI7XG4gIC8vIHJldmVyc2UgcHJveHkgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgdmFyIHJldmVyc2VQcm94eSA9IHNsb3RTY29wZSA/IFwiXCIgOiBcIixwcm94eTp0cnVlXCI7XG4gIHJldHVybiAoXCJ7a2V5OlwiICsgKGVsLnNsb3RUYXJnZXQgfHwgXCJcXFwiZGVmYXVsdFxcXCJcIikgKyBcIixmbjpcIiArIGZuICsgcmV2ZXJzZVByb3h5ICsgXCJ9XCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNoaWxkcmVuIChcbiAgZWwsXG4gIHN0YXRlLFxuICBjaGVja1NraXAsXG4gIGFsdEdlbkVsZW1lbnQsXG4gIGFsdEdlbk5vZGVcbikge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHZhciBlbCQxID0gY2hpbGRyZW5bMF07XG4gICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgZWwkMS5mb3IgJiZcbiAgICAgIGVsJDEudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnXG4gICAgKSB7XG4gICAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUgPSBjaGVja1NraXBcbiAgICAgICAgPyBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCQxKSA/IFwiLDFcIiA6IFwiLDBcIlxuICAgICAgICA6IFwiXCI7XG4gICAgICByZXR1cm4gKFwiXCIgKyAoKGFsdEdlbkVsZW1lbnQgfHwgZ2VuRWxlbWVudCkoZWwkMSwgc3RhdGUpKSArIG5vcm1hbGl6YXRpb25UeXBlKVxuICAgIH1cbiAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUkMSA9IGNoZWNrU2tpcFxuICAgICAgPyBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbiwgc3RhdGUubWF5YmVDb21wb25lbnQpXG4gICAgICA6IDA7XG4gICAgdmFyIGdlbiA9IGFsdEdlbk5vZGUgfHwgZ2VuTm9kZTtcbiAgICByZXR1cm4gKFwiW1wiICsgKGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gZ2VuKGMsIHN0YXRlKTsgfSkuam9pbignLCcpKSArIFwiXVwiICsgKG5vcm1hbGl6YXRpb25UeXBlJDEgPyAoXCIsXCIgKyBub3JtYWxpemF0aW9uVHlwZSQxKSA6ICcnKSlcbiAgfVxufVxuXG4vLyBkZXRlcm1pbmUgdGhlIG5vcm1hbGl6YXRpb24gbmVlZGVkIGZvciB0aGUgY2hpbGRyZW4gYXJyYXkuXG4vLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuLy8gMTogc2ltcGxlIG5vcm1hbGl6YXRpb24gbmVlZGVkIChwb3NzaWJsZSAxLWxldmVsIGRlZXAgbmVzdGVkIGFycmF5KVxuLy8gMjogZnVsbCBub3JtYWxpemF0aW9uIG5lZWRlZFxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKFxuICBjaGlsZHJlbixcbiAgbWF5YmVDb21wb25lbnRcbikge1xuICB2YXIgcmVzID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChlbC50eXBlICE9PSAxKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAobmVlZHNOb3JtYWxpemF0aW9uKGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMjtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbWF5YmVDb21wb25lbnQoYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7XG4gIHJldHVybiBlbC5mb3IgIT09IHVuZGVmaW5lZCB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbn1cblxuZnVuY3Rpb24gZ2VuTm9kZSAobm9kZSwgc3RhdGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBnZW5FbGVtZW50KG5vZGUsIHN0YXRlKVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMyAmJiBub2RlLmlzQ29tbWVudCkge1xuICAgIHJldHVybiBnZW5Db21tZW50KG5vZGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblRleHQobm9kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5UZXh0ICh0ZXh0KSB7XG4gIHJldHVybiAoXCJfdihcIiArICh0ZXh0LnR5cGUgPT09IDJcbiAgICA/IHRleHQuZXhwcmVzc2lvbiAvLyBubyBuZWVkIGZvciAoKSBiZWNhdXNlIGFscmVhZHkgd3JhcHBlZCBpbiBfcygpXG4gICAgOiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMoSlNPTi5zdHJpbmdpZnkodGV4dC50ZXh0KSkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNvbW1lbnQgKGNvbW1lbnQpIHtcbiAgcmV0dXJuIChcIl9lKFwiICsgKEpTT04uc3RyaW5naWZ5KGNvbW1lbnQudGV4dCkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblNsb3QgKGVsLCBzdGF0ZSkge1xuICB2YXIgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnXCJkZWZhdWx0XCInO1xuICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCwgc3RhdGUpO1xuICB2YXIgcmVzID0gXCJfdChcIiArIHNsb3ROYW1lICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpO1xuICB2YXIgYXR0cnMgPSBlbC5hdHRycyB8fCBlbC5keW5hbWljQXR0cnNcbiAgICA/IGdlblByb3BzKChlbC5hdHRycyB8fCBbXSkuY29uY2F0KGVsLmR5bmFtaWNBdHRycyB8fCBbXSkubWFwKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiAoe1xuICAgICAgICAvLyBzbG90IHByb3BzIGFyZSBjYW1lbGl6ZWRcbiAgICAgICAgbmFtZTogY2FtZWxpemUoYXR0ci5uYW1lKSxcbiAgICAgICAgdmFsdWU6IGF0dHIudmFsdWUsXG4gICAgICAgIGR5bmFtaWM6IGF0dHIuZHluYW1pY1xuICAgICAgfSk7IH0pKVxuICAgIDogbnVsbDtcbiAgdmFyIGJpbmQkJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kJ107XG4gIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7XG4gICAgcmVzICs9IFwiLG51bGxcIjtcbiAgfVxuICBpZiAoYXR0cnMpIHtcbiAgICByZXMgKz0gXCIsXCIgKyBhdHRycztcbiAgfVxuICBpZiAoYmluZCQkMSkge1xuICAgIHJlcyArPSAoYXR0cnMgPyAnJyA6ICcsbnVsbCcpICsgXCIsXCIgKyBiaW5kJCQxO1xuICB9XG4gIHJldHVybiByZXMgKyAnKSdcbn1cblxuLy8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuZnVuY3Rpb24gZ2VuQ29tcG9uZW50IChcbiAgY29tcG9uZW50TmFtZSxcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgcmV0dXJuIChcIl9jKFwiICsgY29tcG9uZW50TmFtZSArIFwiLFwiICsgKGdlbkRhdGEkMihlbCwgc3RhdGUpKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Qcm9wcyAocHJvcHMpIHtcbiAgdmFyIHN0YXRpY1Byb3BzID0gXCJcIjtcbiAgdmFyIGR5bmFtaWNQcm9wcyA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgIHZhciB2YWx1ZSA9IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKTtcbiAgICBpZiAocHJvcC5keW5hbWljKSB7XG4gICAgICBkeW5hbWljUHJvcHMgKz0gKHByb3AubmFtZSkgKyBcIixcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY1Byb3BzICs9IFwiXFxcIlwiICsgKHByb3AubmFtZSkgKyBcIlxcXCI6XCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBzdGF0aWNQcm9wcyA9IFwie1wiICsgKHN0YXRpY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgaWYgKGR5bmFtaWNQcm9wcykge1xuICAgIHJldHVybiAoXCJfZChcIiArIHN0YXRpY1Byb3BzICsgXCIsW1wiICsgKGR5bmFtaWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJdKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0aWNQcm9wc1xuICB9XG59XG5cbi8vICMzODk1LCAjNDI2OFxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpXG59XG5cbi8qICAqL1xuXG5cblxuLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2Vcbi8vIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbnZhciBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCwnICtcbiAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcbiAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXGJ8XFxcXGInKSArICdcXFxcYicpO1xuXG4vLyB0aGVzZSB1bmFyeSBvcGVyYXRvcnMgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHByb3BlcnR5L21ldGhvZCBuYW1lc1xudmFyIHVuYXJ5T3BlcmF0b3JzUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkZWxldGUsdHlwZW9mLHZvaWQnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKXxcXFxcYicpICsgJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCknKTtcblxuLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xudmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0LCB3YXJuKSB7XG4gIGlmIChhc3QpIHtcbiAgICBjaGVja05vZGUoYXN0LCB3YXJuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIHdhcm4pIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbm9kZS5hdHRyc01hcCkge1xuICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5hdHRyc01hcFtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gbm9kZS5yYXdBdHRyc01hcFtuYW1lXTtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgKFwidi1mb3I9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgY2hlY2tFdmVudCh2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja0V4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgd2Fybik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMikge1xuICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIG5vZGUudGV4dCwgd2Fybiwgbm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFdmVudCAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB2YXIgc3RpcHBlZCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKTtcbiAgdmFyIGtleXdvcmRNYXRjaCA9IHN0aXBwZWQubWF0Y2godW5hcnlPcGVyYXRvcnNSRSk7XG4gIGlmIChrZXl3b3JkTWF0Y2ggJiYgc3RpcHBlZC5jaGFyQXQoa2V5d29yZE1hdGNoLmluZGV4IC0gMSkgIT09ICckJykge1xuICAgIHdhcm4oXG4gICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQgdW5hcnkgb3BlcmF0b3IgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxuICBjaGVja0V4cHJlc3Npb24oZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuYWxpYXMsICd2LWZvciBhbGlhcycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKFxuICBpZGVudCxcbiAgdHlwZSxcbiAgdGV4dCxcbiAgd2FybixcbiAgcmFuZ2Vcbikge1xuICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRnVuY3Rpb24oKFwidmFyIFwiICsgaWRlbnQgKyBcIj1fXCIpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKChcImludmFsaWQgXCIgKyB0eXBlICsgXCIgXFxcIlwiICsgaWRlbnQgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpKSwgcmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oKFwicmV0dXJuIFwiICsgZXhwKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpO1xuICAgIGlmIChrZXl3b3JkTWF0Y2gpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIlxcbiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiaW52YWxpZCBleHByZXNzaW9uOiBcIiArIChlLm1lc3NhZ2UpICsgXCIgaW5cXG5cXG5cIiArXG4gICAgICAgIFwiICAgIFwiICsgZXhwICsgXCJcXG5cXG5cIiArXG4gICAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIixcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgcmFuZ2UgPSAyO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZSAoXG4gIHNvdXJjZSxcbiAgc3RhcnQsXG4gIGVuZFxuKSB7XG4gIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0ID0gMDtcbiAgaWYgKCBlbmQgPT09IHZvaWQgMCApIGVuZCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgdmFyIGxpbmVzID0gc291cmNlLnNwbGl0KC9cXHI/XFxuLyk7XG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7XG4gICAgaWYgKGNvdW50ID49IHN0YXJ0KSB7XG4gICAgICBmb3IgKHZhciBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XG4gICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aCkgeyBjb250aW51ZSB9XG4gICAgICAgIHJlcy5wdXNoKChcIlwiICsgKGogKyAxKSArIChyZXBlYXQkMShcIiBcIiwgMyAtIFN0cmluZyhqICsgMSkubGVuZ3RoKSkgKyBcInwgIFwiICsgKGxpbmVzW2pdKSkpO1xuICAgICAgICB2YXIgbGluZUxlbmd0aCA9IGxpbmVzW2pdLmxlbmd0aDtcbiAgICAgICAgaWYgKGogPT09IGkpIHtcbiAgICAgICAgICAvLyBwdXNoIHVuZGVybGluZVxuICAgICAgICAgIHZhciBwYWQgPSBzdGFydCAtIChjb3VudCAtIGxpbmVMZW5ndGgpICsgMTtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQ7XG4gICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiIFwiLCBwYWQpICsgcmVwZWF0JDEoXCJeXCIsIGxlbmd0aCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGogPiBpKSB7XG4gICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoJDEgPSBNYXRoLm1pbihlbmQgLSBjb3VudCwgbGluZUxlbmd0aCk7XG4gICAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCJeXCIsIGxlbmd0aCQxKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzLmpvaW4oJ1xcbicpXG59XG5cbmZ1bmN0aW9uIHJlcGVhdCQxIChzdHIsIG4pIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAobiA+IDApIHtcbiAgICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBpZiAobiAmIDEpIHsgcmVzdWx0ICs9IHN0cjsgfVxuICAgICAgbiA+Pj49IDE7XG4gICAgICBpZiAobiA8PSAwKSB7IGJyZWFrIH1cbiAgICAgIHN0ciArPSBzdHI7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbiAoY29kZSwgZXJyb3JzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihjb2RlKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcnMucHVzaCh7IGVycjogZXJyLCBjb2RlOiBjb2RlIH0pO1xuICAgIHJldHVybiBub29wXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiAoY29tcGlsZSkge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb21waWxlVG9GdW5jdGlvbnMgKFxuICAgIHRlbXBsYXRlLFxuICAgIG9wdGlvbnMsXG4gICAgdm1cbiAgKSB7XG4gICAgb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gICAgdmFyIHdhcm4kJDEgPSBvcHRpb25zLndhcm4gfHwgd2FybjtcbiAgICBkZWxldGUgb3B0aW9ucy53YXJuO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIGRldGVjdCBwb3NzaWJsZSBDU1AgcmVzdHJpY3Rpb25cbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBGdW5jdGlvbigncmV0dXJuIDEnKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUudG9TdHJpbmcoKS5tYXRjaCgvdW5zYWZlLWV2YWx8Q1NQLykpIHtcbiAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgJ0l0IHNlZW1zIHlvdSBhcmUgdXNpbmcgdGhlIHN0YW5kYWxvbmUgYnVpbGQgb2YgVnVlLmpzIGluIGFuICcgK1xuICAgICAgICAgICAgJ2Vudmlyb25tZW50IHdpdGggQ29udGVudCBTZWN1cml0eSBQb2xpY3kgdGhhdCBwcm9oaWJpdHMgdW5zYWZlLWV2YWwuICcgK1xuICAgICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICtcbiAgICAgICAgICAgICdyZWxheGluZyB0aGUgcG9saWN5IHRvIGFsbG93IHVuc2FmZS1ldmFsIG9yIHByZS1jb21waWxpbmcgeW91ciAnICtcbiAgICAgICAgICAgICd0ZW1wbGF0ZXMgaW50byByZW5kZXIgZnVuY3Rpb25zLidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgY2FjaGVcbiAgICB2YXIga2V5ID0gb3B0aW9ucy5kZWxpbWl0ZXJzXG4gICAgICA/IFN0cmluZyhvcHRpb25zLmRlbGltaXRlcnMpICsgdGVtcGxhdGVcbiAgICAgIDogdGVtcGxhdGU7XG4gICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgIHJldHVybiBjYWNoZVtrZXldXG4gICAgfVxuXG4gICAgLy8gY29tcGlsZVxuICAgIHZhciBjb21waWxlZCA9IGNvbXBpbGUodGVtcGxhdGUsIG9wdGlvbnMpO1xuXG4gICAgLy8gY2hlY2sgY29tcGlsYXRpb24gZXJyb3JzL3RpcHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBpbGVkLmVycm9ycyAmJiBjb21waWxlZC5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgY29tcGlsZWQuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgKGUubXNnKSArIFwiXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBnZW5lcmF0ZUNvZGVGcmFtZSh0ZW1wbGF0ZSwgZS5zdGFydCwgZS5lbmQpLFxuICAgICAgICAgICAgICB2bVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuXCIgKyB0ZW1wbGF0ZSArIFwiXFxuXFxuXCIgK1xuICAgICAgICAgICAgY29tcGlsZWQuZXJyb3JzLm1hcChmdW5jdGlvbiAoZSkgeyByZXR1cm4gKFwiLSBcIiArIGUpOyB9KS5qb2luKCdcXG4nKSArICdcXG4nLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29tcGlsZWQudGlwcyAmJiBjb21waWxlZC50aXBzLmxlbmd0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNvbXBpbGVkLnRpcHMuZm9yRWFjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGlwKGUubXNnLCB2bSk7IH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBpbGVkLnRpcHMuZm9yRWFjaChmdW5jdGlvbiAobXNnKSB7IHJldHVybiB0aXAobXNnLCB2bSk7IH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdHVybiBjb2RlIGludG8gZnVuY3Rpb25zXG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIHZhciBmbkdlbkVycm9ycyA9IFtdO1xuICAgIHJlcy5yZW5kZXIgPSBjcmVhdGVGdW5jdGlvbihjb21waWxlZC5yZW5kZXIsIGZuR2VuRXJyb3JzKTtcbiAgICByZXMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWQuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uKGNvZGUsIGZuR2VuRXJyb3JzKVxuICAgIH0pO1xuXG4gICAgLy8gY2hlY2sgZnVuY3Rpb24gZ2VuZXJhdGlvbiBlcnJvcnMuXG4gICAgLy8gdGhpcyBzaG91bGQgb25seSBoYXBwZW4gaWYgdGhlcmUgaXMgYSBidWcgaW4gdGhlIGNvbXBpbGVyIGl0c2VsZi5cbiAgICAvLyBtb3N0bHkgZm9yIGNvZGVnZW4gZGV2ZWxvcG1lbnQgdXNlXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICgoIWNvbXBpbGVkLmVycm9ycyB8fCAhY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkgJiYgZm5HZW5FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcmVuZGVyIGZ1bmN0aW9uOlxcblxcblwiICtcbiAgICAgICAgICBmbkdlbkVycm9ycy5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGVyciA9IHJlZi5lcnI7XG4gICAgICAgICAgICB2YXIgY29kZSA9IHJlZi5jb2RlO1xuXG4gICAgICAgICAgICByZXR1cm4gKChlcnIudG9TdHJpbmcoKSkgKyBcIiBpblxcblxcblwiICsgY29kZSArIFwiXFxuXCIpO1xuICAgICAgICB9KS5qb2luKCdcXG4nKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXJDcmVhdG9yIChiYXNlQ29tcGlsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXIgKGJhc2VPcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gY29tcGlsZSAoXG4gICAgICB0ZW1wbGF0ZSxcbiAgICAgIG9wdGlvbnNcbiAgICApIHtcbiAgICAgIHZhciBmaW5hbE9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zKTtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciB0aXBzID0gW107XG5cbiAgICAgIHZhciB3YXJuID0gZnVuY3Rpb24gKG1zZywgcmFuZ2UsIHRpcCkge1xuICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChtc2cpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICAgIHZhciBsZWFkaW5nU3BhY2VMZW5ndGggPSB0ZW1wbGF0ZS5tYXRjaCgvXlxccyovKVswXS5sZW5ndGg7XG5cbiAgICAgICAgICB3YXJuID0gZnVuY3Rpb24gKG1zZywgcmFuZ2UsIHRpcCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7IG1zZzogbXNnIH07XG4gICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQgKyBsZWFkaW5nU3BhY2VMZW5ndGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5lbmQgPSByYW5nZS5lbmQgKyBsZWFkaW5nU3BhY2VMZW5ndGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICh0aXAgPyB0aXBzIDogZXJyb3JzKS5wdXNoKGRhdGEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIG1vZHVsZXNcbiAgICAgICAgaWYgKG9wdGlvbnMubW9kdWxlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5tb2R1bGVzID1cbiAgICAgICAgICAgIChiYXNlT3B0aW9ucy5tb2R1bGVzIHx8IFtdKS5jb25jYXQob3B0aW9ucy5tb2R1bGVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBjdXN0b20gZGlyZWN0aXZlc1xuICAgICAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgZmluYWxPcHRpb25zLmRpcmVjdGl2ZXMgPSBleHRlbmQoXG4gICAgICAgICAgICBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zLmRpcmVjdGl2ZXMgfHwgbnVsbCksXG4gICAgICAgICAgICBvcHRpb25zLmRpcmVjdGl2ZXNcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvcHkgb3RoZXIgb3B0aW9uc1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgICAgIGlmIChrZXkgIT09ICdtb2R1bGVzJyAmJiBrZXkgIT09ICdkaXJlY3RpdmVzJykge1xuICAgICAgICAgICAgZmluYWxPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZpbmFsT3B0aW9ucy53YXJuID0gd2FybjtcblxuICAgICAgdmFyIGNvbXBpbGVkID0gYmFzZUNvbXBpbGUodGVtcGxhdGUudHJpbSgpLCBmaW5hbE9wdGlvbnMpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGV0ZWN0RXJyb3JzKGNvbXBpbGVkLmFzdCwgd2Fybik7XG4gICAgICB9XG4gICAgICBjb21waWxlZC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICBjb21waWxlZC50aXBzID0gdGlwcztcbiAgICAgIHJldHVybiBjb21waWxlZFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjb21waWxlOiBjb21waWxlLFxuICAgICAgY29tcGlsZVRvRnVuY3Rpb25zOiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuKGNvbXBpbGUpXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBgY3JlYXRlQ29tcGlsZXJDcmVhdG9yYCBhbGxvd3MgY3JlYXRpbmcgY29tcGlsZXJzIHRoYXQgdXNlIGFsdGVybmF0aXZlXG4vLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuXG4vLyBIZXJlIHdlIGp1c3QgZXhwb3J0IGEgZGVmYXVsdCBjb21waWxlciB1c2luZyB0aGUgZGVmYXVsdCBwYXJ0cy5cbnZhciBjcmVhdGVDb21waWxlciA9IGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcihmdW5jdGlvbiBiYXNlQ29tcGlsZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLm9wdGltaXplICE9PSBmYWxzZSkge1xuICAgIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG4gIH1cbiAgdmFyIGNvZGUgPSBnZW5lcmF0ZShhc3QsIG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIGFzdDogYXN0LFxuICAgIHJlbmRlcjogY29kZS5yZW5kZXIsXG4gICAgc3RhdGljUmVuZGVyRm5zOiBjb2RlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59KTtcblxuLyogICovXG5cbnZhciByZWYkMSA9IGNyZWF0ZUNvbXBpbGVyKGJhc2VPcHRpb25zKTtcbnZhciBjb21waWxlID0gcmVmJDEuY29tcGlsZTtcbnZhciBjb21waWxlVG9GdW5jdGlvbnMgPSByZWYkMS5jb21waWxlVG9GdW5jdGlvbnM7XG5cbi8qICAqL1xuXG4vLyBjaGVjayB3aGV0aGVyIGN1cnJlbnQgYnJvd3NlciBlbmNvZGVzIGEgY2hhciBpbnNpZGUgYXR0cmlidXRlIHZhbHVlc1xudmFyIGRpdjtcbmZ1bmN0aW9uIGdldFNob3VsZERlY29kZSAoaHJlZikge1xuICBkaXYgPSBkaXYgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pbm5lckhUTUwgPSBocmVmID8gXCI8YSBocmVmPVxcXCJcXG5cXFwiLz5cIiA6IFwiPGRpdiBhPVxcXCJcXG5cXFwiLz5cIjtcbiAgcmV0dXJuIGRpdi5pbm5lckhUTUwuaW5kZXhPZignJiMxMDsnKSA+IDBcbn1cblxuLy8gIzM2NjM6IElFIGVuY29kZXMgbmV3bGluZXMgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXMgd2hpbGUgb3RoZXIgYnJvd3NlcnMgZG9uJ3RcbnZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IGluQnJvd3NlciA/IGdldFNob3VsZERlY29kZShmYWxzZSkgOiBmYWxzZTtcbi8vICM2ODI4OiBjaHJvbWUgZW5jb2RlcyBjb250ZW50IGluIGFbaHJlZl1cbnZhciBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYgPSBpbkJyb3dzZXIgPyBnZXRTaG91bGREZWNvZGUodHJ1ZSkgOiBmYWxzZTtcblxuLyogICovXG5cbnZhciBpZFRvVGVtcGxhdGUgPSBjYWNoZWQoZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBlbCA9IHF1ZXJ5KGlkKTtcbiAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTFxufSk7XG5cbnZhciBtb3VudCA9IFZ1ZS5wcm90b3R5cGUuJG1vdW50O1xuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIHF1ZXJ5KGVsKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5IHx8IGVsID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkRvIG5vdCBtb3VudCBWdWUgdG8gPGh0bWw+IG9yIDxib2R5PiAtIG1vdW50IHRvIG5vcm1hbCBlbGVtZW50cyBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAvLyByZXNvbHZlIHRlbXBsYXRlL2VsIGFuZCBjb252ZXJ0IHRvIHJlbmRlciBmdW5jdGlvblxuICBpZiAoIW9wdGlvbnMucmVuZGVyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gb3B0aW9ucy50ZW1wbGF0ZTtcbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0ZW1wbGF0ZS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgIHRlbXBsYXRlID0gaWRUb1RlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIChcIlRlbXBsYXRlIGVsZW1lbnQgbm90IGZvdW5kIG9yIGlzIGVtcHR5OiBcIiArIChvcHRpb25zLnRlbXBsYXRlKSksXG4gICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRlbXBsYXRlLm5vZGVUeXBlKSB7XG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuaW5uZXJIVE1MO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKCdpbnZhbGlkIHRlbXBsYXRlIG9wdGlvbjonICsgdGVtcGxhdGUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbCkge1xuICAgICAgdGVtcGxhdGUgPSBnZXRPdXRlckhUTUwoZWwpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgbWFyaygnY29tcGlsZScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVmID0gY29tcGlsZVRvRnVuY3Rpb25zKHRlbXBsYXRlLCB7XG4gICAgICAgIG91dHB1dFNvdXJjZVJhbmdlOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lczogc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjogc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmLFxuICAgICAgICBkZWxpbWl0ZXJzOiBvcHRpb25zLmRlbGltaXRlcnMsXG4gICAgICAgIGNvbW1lbnRzOiBvcHRpb25zLmNvbW1lbnRzXG4gICAgICB9LCB0aGlzKTtcbiAgICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IHJlZi5zdGF0aWNSZW5kZXJGbnM7XG4gICAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlcjtcbiAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIG1hcmsoJ2NvbXBpbGUgZW5kJyk7XG4gICAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHRoaXMuX25hbWUpICsgXCIgY29tcGlsZVwiKSwgJ2NvbXBpbGUnLCAnY29tcGlsZSBlbmQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vdW50LmNhbGwodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8qKlxuICogR2V0IG91dGVySFRNTCBvZiBlbGVtZW50cywgdGFraW5nIGNhcmVcbiAqIG9mIFNWRyBlbGVtZW50cyBpbiBJRSBhcyB3ZWxsLlxuICovXG5mdW5jdGlvbiBnZXRPdXRlckhUTUwgKGVsKSB7XG4gIGlmIChlbC5vdXRlckhUTUwpIHtcbiAgICByZXR1cm4gZWwub3V0ZXJIVE1MXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MXG4gIH1cbn1cblxuVnVlLmNvbXBpbGUgPSBjb21waWxlVG9GdW5jdGlvbnM7XG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsIi8qKlxuICogdnVleCB2My4xLjFcbiAqIChjKSAyMDE5IEV2YW4gWW91XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gYXBwbHlNaXhpbiAoVnVlKSB7XG4gIHZhciB2ZXJzaW9uID0gTnVtYmVyKFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJylbMF0pO1xuXG4gIGlmICh2ZXJzaW9uID49IDIpIHtcbiAgICBWdWUubWl4aW4oeyBiZWZvcmVDcmVhdGU6IHZ1ZXhJbml0IH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG92ZXJyaWRlIGluaXQgYW5kIGluamVjdCB2dWV4IGluaXQgcHJvY2VkdXJlXG4gICAgLy8gZm9yIDEueCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICB2YXIgX2luaXQgPSBWdWUucHJvdG90eXBlLl9pbml0O1xuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgIG9wdGlvbnMuaW5pdCA9IG9wdGlvbnMuaW5pdFxuICAgICAgICA/IFt2dWV4SW5pdF0uY29uY2F0KG9wdGlvbnMuaW5pdClcbiAgICAgICAgOiB2dWV4SW5pdDtcbiAgICAgIF9pbml0LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWdWV4IGluaXQgaG9vaywgaW5qZWN0ZWQgaW50byBlYWNoIGluc3RhbmNlcyBpbml0IGhvb2tzIGxpc3QuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHZ1ZXhJbml0ICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gICAgLy8gc3RvcmUgaW5qZWN0aW9uXG4gICAgaWYgKG9wdGlvbnMuc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gdHlwZW9mIG9wdGlvbnMuc3RvcmUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBvcHRpb25zLnN0b3JlKClcbiAgICAgICAgOiBvcHRpb25zLnN0b3JlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJHN0b3JlKSB7XG4gICAgICB0aGlzLiRzdG9yZSA9IG9wdGlvbnMucGFyZW50LiRzdG9yZTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHRhcmdldCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gID8gd2luZG93XG4gIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFxuICAgIDoge307XG52YXIgZGV2dG9vbEhvb2sgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuZnVuY3Rpb24gZGV2dG9vbFBsdWdpbiAoc3RvcmUpIHtcbiAgaWYgKCFkZXZ0b29sSG9vaykgeyByZXR1cm4gfVxuXG4gIHN0b3JlLl9kZXZ0b29sSG9vayA9IGRldnRvb2xIb29rO1xuXG4gIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6aW5pdCcsIHN0b3JlKTtcblxuICBkZXZ0b29sSG9vay5vbigndnVleDp0cmF2ZWwtdG8tc3RhdGUnLCBmdW5jdGlvbiAodGFyZ2V0U3RhdGUpIHtcbiAgICBzdG9yZS5yZXBsYWNlU3RhdGUodGFyZ2V0U3RhdGUpO1xuICB9KTtcblxuICBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZSkge1xuICAgIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6bXV0YXRpb24nLCBtdXRhdGlvbiwgc3RhdGUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGl0ZW0gdGhhdCBwYXNzIHRoZSB0ZXN0XG4gKiBieSBzZWNvbmQgYXJndW1lbnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gKiBAcmV0dXJuIHsqfVxuICovXG5cbi8qKlxuICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hWYWx1ZSAob2JqLCBmbikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4ob2JqW2tleV0sIGtleSk7IH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikgeyB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZXhdIFwiICsgbXNnKSkgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aWFsIChmbiwgYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuKGFyZylcbiAgfVxufVxuXG4vLyBCYXNlIGRhdGEgc3RydWN0IGZvciBzdG9yZSdzIG1vZHVsZSwgcGFja2FnZSB3aXRoIHNvbWUgYXR0cmlidXRlIGFuZCBtZXRob2RcbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAvLyBTdG9yZSBzb21lIGNoaWxkcmVuIGl0ZW1cbiAgdGhpcy5fY2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSBvYmplY3Qgd2hpY2ggcGFzc2VkIGJ5IHByb2dyYW1tZXJcbiAgdGhpcy5fcmF3TW9kdWxlID0gcmF3TW9kdWxlO1xuICB2YXIgcmF3U3RhdGUgPSByYXdNb2R1bGUuc3RhdGU7XG5cbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUncyBzdGF0ZVxuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBuYW1lc3BhY2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5uYW1lc3BhY2VkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWRcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiBhZGRDaGlsZCAoa2V5LCBtb2R1bGUpIHtcbiAgdGhpcy5fY2hpbGRyZW5ba2V5XSA9IG1vZHVsZTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoa2V5KSB7XG4gIGRlbGV0ZSB0aGlzLl9jaGlsZHJlbltrZXldO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5nZXRDaGlsZCA9IGZ1bmN0aW9uIGdldENoaWxkIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW2tleV1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChyYXdNb2R1bGUpIHtcbiAgdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWQgPSByYXdNb2R1bGUubmFtZXNwYWNlZDtcbiAgaWYgKHJhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMgPSByYXdNb2R1bGUuYWN0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMgPSByYXdNb2R1bGUubXV0YXRpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzID0gcmF3TW9kdWxlLmdldHRlcnM7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gZm9yRWFjaENoaWxkIChmbikge1xuICBmb3JFYWNoVmFsdWUodGhpcy5fY2hpbGRyZW4sIGZuKTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEdldHRlciA9IGZ1bmN0aW9uIGZvckVhY2hHZXR0ZXIgKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hBY3Rpb24gPSBmdW5jdGlvbiBmb3JFYWNoQWN0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoTXV0YXRpb24gPSBmdW5jdGlvbiBmb3JFYWNoTXV0YXRpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1vZHVsZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCByYXdNb2R1bGUpO1xuICB9XG5cbiAgdmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUocmF3TW9kdWxlLCBydW50aW1lKTtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy5yb290ID0gbmV3TW9kdWxlO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgcGFyZW50LmFkZENoaWxkKHBhdGhbcGF0aC5sZW5ndGggLSAxXSwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChyYXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGUubW9kdWxlcywgZnVuY3Rpb24gKHJhd0NoaWxkTW9kdWxlLCBrZXkpIHtcbiAgICAgIHRoaXMkMS5yZWdpc3RlcihwYXRoLmNvbmNhdChrZXkpLCByYXdDaGlsZE1vZHVsZSwgcnVudGltZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIGlmICghcGFyZW50LmdldENoaWxkKGtleSkucnVudGltZSkgeyByZXR1cm4gfVxuXG4gIHBhcmVudC5yZW1vdmVDaGlsZChrZXkpO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlIChwYXRoLCB0YXJnZXRNb2R1bGUsIG5ld01vZHVsZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gdXBkYXRlIHRhcmdldCBtb2R1bGVcbiAgdGFyZ2V0TW9kdWxlLnVwZGF0ZShuZXdNb2R1bGUpO1xuXG4gIC8vIHVwZGF0ZSBuZXN0ZWQgbW9kdWxlc1xuICBpZiAobmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICAgIGlmICghdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gYWRkIGEgbmV3IG1vZHVsZSAnXCIgKyBrZXkgKyBcIicgb24gaG90IHJlbG9hZGluZywgXCIgK1xuICAgICAgICAgICAgJ21hbnVhbCByZWxvYWQgaXMgbmVlZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUoXG4gICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgIHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICBuZXdNb2R1bGUubW9kdWxlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZnVuY3Rpb25Bc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24nXG59O1xuXG52YXIgb2JqZWN0QXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uIG9yIG9iamVjdCB3aXRoIFwiaGFuZGxlclwiIGZ1bmN0aW9uJ1xufTtcblxudmFyIGFzc2VydFR5cGVzID0ge1xuICBnZXR0ZXJzOiBmdW5jdGlvbkFzc2VydCxcbiAgbXV0YXRpb25zOiBmdW5jdGlvbkFzc2VydCxcbiAgYWN0aW9uczogb2JqZWN0QXNzZXJ0XG59O1xuXG5mdW5jdGlvbiBhc3NlcnRSYXdNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSkge1xuICBPYmplY3Qua2V5cyhhc3NlcnRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFyYXdNb2R1bGVba2V5XSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGFzc2VydE9wdGlvbnMgPSBhc3NlcnRUeXBlc1trZXldO1xuXG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZVtrZXldLCBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICAgIGFzc2VydChcbiAgICAgICAgYXNzZXJ0T3B0aW9ucy5hc3NlcnQodmFsdWUpLFxuICAgICAgICBtYWtlQXNzZXJ0aW9uTWVzc2FnZShwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBhc3NlcnRPcHRpb25zLmV4cGVjdGVkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBc3NlcnRpb25NZXNzYWdlIChwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBleHBlY3RlZCkge1xuICB2YXIgYnVmID0ga2V5ICsgXCIgc2hvdWxkIGJlIFwiICsgZXhwZWN0ZWQgKyBcIiBidXQgXFxcIlwiICsga2V5ICsgXCIuXCIgKyB0eXBlICsgXCJcXFwiXCI7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBidWYgKz0gXCIgaW4gbW9kdWxlIFxcXCJcIiArIChwYXRoLmpvaW4oJy4nKSkgKyBcIlxcXCJcIjtcbiAgfVxuICBidWYgKz0gXCIgaXMgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiLlwiO1xuICByZXR1cm4gYnVmXG59XG5cbnZhciBWdWU7IC8vIGJpbmQgb24gaW5zdGFsbFxuXG52YXIgU3RvcmUgPSBmdW5jdGlvbiBTdG9yZSAob3B0aW9ucykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgLy8gQXV0byBpbnN0YWxsIGlmIGl0IGlzIG5vdCBkb25lIHlldCBhbmQgYHdpbmRvd2AgaGFzIGBWdWVgLlxuICAvLyBUbyBhbGxvdyB1c2VycyB0byBhdm9pZCBhdXRvLWluc3RhbGxhdGlvbiBpbiBzb21lIGNhc2VzLFxuICAvLyB0aGlzIGNvZGUgc2hvdWxkIGJlIHBsYWNlZCBoZXJlLiBTZWUgIzczMVxuICBpZiAoIVZ1ZSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlKSB7XG4gICAgaW5zdGFsbCh3aW5kb3cuVnVlKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KFZ1ZSwgXCJtdXN0IGNhbGwgVnVlLnVzZShWdWV4KSBiZWZvcmUgY3JlYXRpbmcgYSBzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwic3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG5cbiAgLy8gc3RvcmUgaW50ZXJuYWwgc3RhdGVcbiAgdGhpcy5fY29tbWl0dGluZyA9IGZhbHNlO1xuICB0aGlzLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9tb2R1bGVzID0gbmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7XG4gIHRoaXMuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl93YXRjaGVyVk0gPSBuZXcgVnVlKCk7XG5cbiAgLy8gYmluZCBjb21taXQgYW5kIGRpc3BhdGNoIHRvIHNlbGZcbiAgdmFyIHN0b3JlID0gdGhpcztcbiAgdmFyIHJlZiA9IHRoaXM7XG4gIHZhciBkaXNwYXRjaCA9IHJlZi5kaXNwYXRjaDtcbiAgdmFyIGNvbW1pdCA9IHJlZi5jb21taXQ7XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiBib3VuZERpc3BhdGNoICh0eXBlLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoLmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQpXG4gIH07XG4gIHRoaXMuY29tbWl0ID0gZnVuY3Rpb24gYm91bmRDb21taXQgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tbWl0LmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpXG4gIH07XG5cbiAgLy8gc3RyaWN0IG1vZGVcbiAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fbW9kdWxlcy5yb290LnN0YXRlO1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHZtLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlVk0odGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICB2YXIgdXNlRGV2dG9vbHMgPSBvcHRpb25zLmRldnRvb2xzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRldnRvb2xzIDogVnVlLmNvbmZpZy5kZXZ0b29scztcbiAgaWYgKHVzZURldnRvb2xzKSB7XG4gICAgZGV2dG9vbFBsdWdpbih0aGlzKTtcbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBzdGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChmYWxzZSwgXCJ1c2Ugc3RvcmUucmVwbGFjZVN0YXRlKCkgdG8gZXhwbGljaXQgcmVwbGFjZSBzdG9yZSBzdGF0ZS5cIik7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5jb21taXQgPSBmdW5jdGlvbiBjb21taXQgKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgY29tbWl0XG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcbiAgICB2YXIgb3B0aW9ucyA9IHJlZi5vcHRpb25zO1xuXG4gIHZhciBtdXRhdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9tdXRhdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgZW50cnkuZm9yRWFjaChmdW5jdGlvbiBjb21taXRJdGVyYXRvciAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcihwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSk7XG4gIHRoaXMuX3N1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViKG11dGF0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcblxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnRcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbdnVleF0gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIuIFNpbGVudCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gXCIgK1xuICAgICAgJ1VzZSB0aGUgZmlsdGVyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHZ1ZS1kZXZ0b29scydcbiAgICApO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCAoX3R5cGUsIF9wYXlsb2FkKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGFjdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmU7IH0pXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYmVmb3JlKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZXhdIGVycm9yIGluIGJlZm9yZSBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IGVudHJ5Lmxlbmd0aCA+IDFcbiAgICA/IFByb21pc2UuYWxsKGVudHJ5Lm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlcihwYXlsb2FkKTsgfSkpXG4gICAgOiBlbnRyeVswXShwYXlsb2FkKTtcblxuICByZXR1cm4gcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzJDEuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyOyB9KVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXIoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYWZ0ZXIgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfSlcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUgKGZuKSB7XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKGZuLCB0aGlzLl9zdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmVBY3Rpb24gPSBmdW5jdGlvbiBzdWJzY3JpYmVBY3Rpb24gKGZuKSB7XG4gIHZhciBzdWJzID0gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nID8geyBiZWZvcmU6IGZuIH0gOiBmbjtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoc3VicywgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiB3YXRjaCAoZ2V0dGVyLCBjYiwgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBnZXR0ZXIgPT09ICdmdW5jdGlvbicsIFwic3RvcmUud2F0Y2ggb25seSBhY2NlcHRzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIHJldHVybiB0aGlzLl93YXRjaGVyVk0uJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldHRlcih0aGlzJDEuc3RhdGUsIHRoaXMkMS5nZXR0ZXJzKTsgfSwgY2IsIG9wdGlvbnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gcmVwbGFjZVN0YXRlIChzdGF0ZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMkMS5fdm0uX2RhdGEuJCRzdGF0ZSA9IHN0YXRlO1xuICB9KTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyTW9kdWxlIChwYXRoLCByYXdNb2R1bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlVk0odGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy51bnJlZ2lzdGVyKHBhdGgpO1xuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZSh0aGlzJDEuc3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBWdWUuZGVsZXRlKHBhcmVudFN0YXRlLCBwYXRoW3BhdGgubGVuZ3RoIC0gMV0pO1xuICB9KTtcbiAgcmVzZXRTdG9yZSh0aGlzKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG5mdW5jdGlvbiBnZW5lcmljU3Vic2NyaWJlIChmbiwgc3Vicykge1xuICBpZiAoc3Vicy5pbmRleE9mKGZuKSA8IDApIHtcbiAgICBzdWJzLnB1c2goZm4pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBzdWJzLmluZGV4T2YoZm4pO1xuICAgIGlmIChpID4gLTEpIHtcbiAgICAgIHN1YnMuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlIChzdG9yZSwgaG90KSB7XG4gIHN0b3JlLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHN0YXRlID0gc3RvcmUuc3RhdGU7XG4gIC8vIGluaXQgYWxsIG1vZHVsZXNcbiAgaW5zdGFsbE1vZHVsZShzdG9yZSwgc3RhdGUsIFtdLCBzdG9yZS5fbW9kdWxlcy5yb290LCB0cnVlKTtcbiAgLy8gcmVzZXQgdm1cbiAgcmVzZXRTdG9yZVZNKHN0b3JlLCBzdGF0ZSwgaG90KTtcbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZVZNIChzdG9yZSwgc3RhdGUsIGhvdCkge1xuICB2YXIgb2xkVm0gPSBzdG9yZS5fdm07XG5cbiAgLy8gYmluZCBzdG9yZSBwdWJsaWMgZ2V0dGVyc1xuICBzdG9yZS5nZXR0ZXJzID0ge307XG4gIHZhciB3cmFwcGVkR2V0dGVycyA9IHN0b3JlLl93cmFwcGVkR2V0dGVycztcbiAgdmFyIGNvbXB1dGVkID0ge307XG4gIGZvckVhY2hWYWx1ZSh3cmFwcGVkR2V0dGVycywgZnVuY3Rpb24gKGZuLCBrZXkpIHtcbiAgICAvLyB1c2UgY29tcHV0ZWQgdG8gbGV2ZXJhZ2UgaXRzIGxhenktY2FjaGluZyBtZWNoYW5pc21cbiAgICAvLyBkaXJlY3QgaW5saW5lIGZ1bmN0aW9uIHVzZSB3aWxsIGxlYWQgdG8gY2xvc3VyZSBwcmVzZXJ2aW5nIG9sZFZtLlxuICAgIC8vIHVzaW5nIHBhcnRpYWwgdG8gcmV0dXJuIGZ1bmN0aW9uIHdpdGggb25seSBhcmd1bWVudHMgcHJlc2VydmVkIGluIGNsb3N1cmUgZW52aXJvbWVudC5cbiAgICBjb21wdXRlZFtrZXldID0gcGFydGlhbChmbiwgc3RvcmUpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdG9yZS5nZXR0ZXJzLCBrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuX3ZtW2tleV07IH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlIC8vIGZvciBsb2NhbCBnZXR0ZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHVzZSBhIFZ1ZSBpbnN0YW5jZSB0byBzdG9yZSB0aGUgc3RhdGUgdHJlZVxuICAvLyBzdXBwcmVzcyB3YXJuaW5ncyBqdXN0IGluIGNhc2UgdGhlIHVzZXIgaGFzIGFkZGVkXG4gIC8vIHNvbWUgZnVua3kgZ2xvYmFsIG1peGluc1xuICB2YXIgc2lsZW50ID0gVnVlLmNvbmZpZy5zaWxlbnQ7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gdHJ1ZTtcbiAgc3RvcmUuX3ZtID0gbmV3IFZ1ZSh7XG4gICAgZGF0YToge1xuICAgICAgJCRzdGF0ZTogc3RhdGVcbiAgICB9LFxuICAgIGNvbXB1dGVkOiBjb21wdXRlZFxuICB9KTtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSBzaWxlbnQ7XG5cbiAgLy8gZW5hYmxlIHN0cmljdCBtb2RlIGZvciBuZXcgdm1cbiAgaWYgKHN0b3JlLnN0cmljdCkge1xuICAgIGVuYWJsZVN0cmljdE1vZGUoc3RvcmUpO1xuICB9XG5cbiAgaWYgKG9sZFZtKSB7XG4gICAgaWYgKGhvdCkge1xuICAgICAgLy8gZGlzcGF0Y2ggY2hhbmdlcyBpbiBhbGwgc3Vic2NyaWJlZCB3YXRjaGVyc1xuICAgICAgLy8gdG8gZm9yY2UgZ2V0dGVyIHJlLWV2YWx1YXRpb24gZm9yIGhvdCByZWxvYWRpbmcuXG4gICAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9sZFZtLl9kYXRhLiQkc3RhdGUgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFZ1ZS5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJldHVybiBvbGRWbS4kZGVzdHJveSgpOyB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLCBtb2R1bGUsIGhvdCkge1xuICB2YXIgaXNSb290ID0gIXBhdGgubGVuZ3RoO1xuICB2YXIgbmFtZXNwYWNlID0gc3RvcmUuX21vZHVsZXMuZ2V0TmFtZXNwYWNlKHBhdGgpO1xuXG4gIC8vIHJlZ2lzdGVyIGluIG5hbWVzcGFjZSBtYXBcbiAgaWYgKG1vZHVsZS5uYW1lc3BhY2VkKSB7XG4gICAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSA9IG1vZHVsZTtcbiAgfVxuXG4gIC8vIHNldCBzdGF0ZVxuICBpZiAoIWlzUm9vdCAmJiAhaG90KSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUocm9vdFN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgVnVlLnNldChwYXJlbnRTdGF0ZSwgbW9kdWxlTmFtZSwgbW9kdWxlLnN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsb2NhbCA9IG1vZHVsZS5jb250ZXh0ID0gbWFrZUxvY2FsQ29udGV4dChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKTtcblxuICBtb2R1bGUuZm9yRWFjaE11dGF0aW9uKGZ1bmN0aW9uIChtdXRhdGlvbiwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyTXV0YXRpb24oc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBtdXRhdGlvbiwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBrZXkpIHtcbiAgICB2YXIgdHlwZSA9IGFjdGlvbi5yb290ID8ga2V5IDogbmFtZXNwYWNlICsga2V5O1xuICAgIHZhciBoYW5kbGVyID0gYWN0aW9uLmhhbmRsZXIgfHwgYWN0aW9uO1xuICAgIHJlZ2lzdGVyQWN0aW9uKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoR2V0dGVyKGZ1bmN0aW9uIChnZXR0ZXIsIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3RlckdldHRlcihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIGdldHRlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCwga2V5KSB7XG4gICAgaW5zdGFsbE1vZHVsZShzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLmNvbmNhdChrZXkpLCBjaGlsZCwgaG90KTtcbiAgfSk7XG59XG5cbi8qKlxuICogbWFrZSBsb2NhbGl6ZWQgZGlzcGF0Y2gsIGNvbW1pdCwgZ2V0dGVycyBhbmQgc3RhdGVcbiAqIGlmIHRoZXJlIGlzIG5vIG5hbWVzcGFjZSwganVzdCB1c2Ugcm9vdCBvbmVzXG4gKi9cbmZ1bmN0aW9uIG1ha2VMb2NhbENvbnRleHQgKHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpIHtcbiAgdmFyIG5vTmFtZXNwYWNlID0gbmFtZXNwYWNlID09PSAnJztcblxuICB2YXIgbG9jYWwgPSB7XG4gICAgZGlzcGF0Y2g6IG5vTmFtZXNwYWNlID8gc3RvcmUuZGlzcGF0Y2ggOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9hY3Rpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBhY3Rpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHR5cGUsIHBheWxvYWQpXG4gICAgfSxcblxuICAgIGNvbW1pdDogbm9OYW1lc3BhY2UgPyBzdG9yZS5jb21taXQgOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9tdXRhdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIG11dGF0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmNvbW1pdCh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZ2V0dGVycyBhbmQgc3RhdGUgb2JqZWN0IG11c3QgYmUgZ290dGVuIGxhemlseVxuICAvLyBiZWNhdXNlIHRoZXkgd2lsbCBiZSBjaGFuZ2VkIGJ5IHZtIHVwZGF0ZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2NhbCwge1xuICAgIGdldHRlcnM6IHtcbiAgICAgIGdldDogbm9OYW1lc3BhY2VcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZUxvY2FsR2V0dGVycyhzdG9yZSwgbmFtZXNwYWNlKTsgfVxuICAgIH0sXG4gICAgc3RhdGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0TmVzdGVkU3RhdGUoc3RvcmUuc3RhdGUsIHBhdGgpOyB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbG9jYWxcbn1cblxuZnVuY3Rpb24gbWFrZUxvY2FsR2V0dGVycyAoc3RvcmUsIG5hbWVzcGFjZSkge1xuICB2YXIgZ2V0dGVyc1Byb3h5ID0ge307XG5cbiAgdmFyIHNwbGl0UG9zID0gbmFtZXNwYWNlLmxlbmd0aDtcbiAgT2JqZWN0LmtleXMoc3RvcmUuZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIC8vIHNraXAgaWYgdGhlIHRhcmdldCBnZXR0ZXIgaXMgbm90IG1hdGNoIHRoaXMgbmFtZXNwYWNlXG4gICAgaWYgKHR5cGUuc2xpY2UoMCwgc3BsaXRQb3MpICE9PSBuYW1lc3BhY2UpIHsgcmV0dXJuIH1cblxuICAgIC8vIGV4dHJhY3QgbG9jYWwgZ2V0dGVyIHR5cGVcbiAgICB2YXIgbG9jYWxUeXBlID0gdHlwZS5zbGljZShzcGxpdFBvcyk7XG5cbiAgICAvLyBBZGQgYSBwb3J0IHRvIHRoZSBnZXR0ZXJzIHByb3h5LlxuICAgIC8vIERlZmluZSBhcyBnZXR0ZXIgcHJvcGVydHkgYmVjYXVzZVxuICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIGV2YWx1YXRlIHRoZSBnZXR0ZXJzIGluIHRoaXMgdGltZS5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2V0dGVyc1Byb3h5LCBsb2NhbFR5cGUsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyc1t0eXBlXTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGdldHRlcnNQcm94eVxufVxuXG5mdW5jdGlvbiByZWdpc3Rlck11dGF0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX211dGF0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX211dGF0aW9uc1t0eXBlXSA9IFtdKTtcbiAgZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkTXV0YXRpb25IYW5kbGVyIChwYXlsb2FkKSB7XG4gICAgaGFuZGxlci5jYWxsKHN0b3JlLCBsb2NhbC5zdGF0ZSwgcGF5bG9hZCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckFjdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9hY3Rpb25zW3R5cGVdIHx8IChzdG9yZS5fYWN0aW9uc1t0eXBlXSA9IFtdKTtcbiAgZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkQWN0aW9uSGFuZGxlciAocGF5bG9hZCwgY2IpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5jYWxsKHN0b3JlLCB7XG4gICAgICBkaXNwYXRjaDogbG9jYWwuZGlzcGF0Y2gsXG4gICAgICBjb21taXQ6IGxvY2FsLmNvbW1pdCxcbiAgICAgIGdldHRlcnM6IGxvY2FsLmdldHRlcnMsXG4gICAgICBzdGF0ZTogbG9jYWwuc3RhdGUsXG4gICAgICByb290R2V0dGVyczogc3RvcmUuZ2V0dGVycyxcbiAgICAgIHJvb3RTdGF0ZTogc3RvcmUuc3RhdGVcbiAgICB9LCBwYXlsb2FkLCBjYik7XG4gICAgaWYgKCFpc1Byb21pc2UocmVzKSkge1xuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgfVxuICAgIGlmIChzdG9yZS5fZGV2dG9vbEhvb2spIHtcbiAgICAgIHJldHVybiByZXMuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBzdG9yZS5fZGV2dG9vbEhvb2suZW1pdCgndnVleDplcnJvcicsIGVycik7XG4gICAgICAgIHRocm93IGVyclxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyR2V0dGVyIChzdG9yZSwgdHlwZSwgcmF3R2V0dGVyLCBsb2NhbCkge1xuICBpZiAoc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIGR1cGxpY2F0ZSBnZXR0ZXIga2V5OiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdID0gZnVuY3Rpb24gd3JhcHBlZEdldHRlciAoc3RvcmUpIHtcbiAgICByZXR1cm4gcmF3R2V0dGVyKFxuICAgICAgbG9jYWwuc3RhdGUsIC8vIGxvY2FsIHN0YXRlXG4gICAgICBsb2NhbC5nZXR0ZXJzLCAvLyBsb2NhbCBnZXR0ZXJzXG4gICAgICBzdG9yZS5zdGF0ZSwgLy8gcm9vdCBzdGF0ZVxuICAgICAgc3RvcmUuZ2V0dGVycyAvLyByb290IGdldHRlcnNcbiAgICApXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuYWJsZVN0cmljdE1vZGUgKHN0b3JlKSB7XG4gIHN0b3JlLl92bS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YS4kJHN0YXRlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgYXNzZXJ0KHN0b3JlLl9jb21taXR0aW5nLCBcImRvIG5vdCBtdXRhdGUgdnVleCBzdG9yZSBzdGF0ZSBvdXRzaWRlIG11dGF0aW9uIGhhbmRsZXJzLlwiKTtcbiAgICB9XG4gIH0sIHsgZGVlcDogdHJ1ZSwgc3luYzogdHJ1ZSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TmVzdGVkU3RhdGUgKHN0YXRlLCBwYXRoKSB7XG4gIHJldHVybiBwYXRoLmxlbmd0aFxuICAgID8gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBrZXkpIHsgcmV0dXJuIHN0YXRlW2tleV07IH0sIHN0YXRlKVxuICAgIDogc3RhdGVcbn1cblxuZnVuY3Rpb24gdW5pZnlPYmplY3RTdHlsZSAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICBpZiAoaXNPYmplY3QodHlwZSkgJiYgdHlwZS50eXBlKSB7XG4gICAgb3B0aW9ucyA9IHBheWxvYWQ7XG4gICAgcGF5bG9hZCA9IHR5cGU7XG4gICAgdHlwZSA9IHR5cGUudHlwZTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJywgKFwiZXhwZWN0cyBzdHJpbmcgYXMgdGhlIHR5cGUsIGJ1dCBmb3VuZCBcIiArICh0eXBlb2YgdHlwZSkgKyBcIi5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCwgb3B0aW9uczogb3B0aW9ucyB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGwgKF9WdWUpIHtcbiAgaWYgKFZ1ZSAmJiBfVnVlID09PSBWdWUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1t2dWV4XSBhbHJlYWR5IGluc3RhbGxlZC4gVnVlLnVzZShWdWV4KSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZS4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBWdWUgPSBfVnVlO1xuICBhcHBseU1peGluKFZ1ZSk7XG59XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBzdGF0ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IHN0YXRlcyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IHN0YXRlIGFuZCBnZXR0ZXJzIGZvciBwYXJhbSwgeW91IGNhbiBkbyBzb21ldGhpbmcgZm9yIHN0YXRlIGFuZCBnZXR0ZXJzIGluIGl0LlxuICogQHBhcmFtIHtPYmplY3R9XG4gKi9cbnZhciBtYXBTdGF0ZSA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBzdGF0ZXMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAoc3RhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkU3RhdGUgKCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy4kc3RvcmUuc3RhdGU7XG4gICAgICB2YXIgZ2V0dGVycyA9IHRoaXMuJHN0b3JlLmdldHRlcnM7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcFN0YXRlJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IG1vZHVsZS5jb250ZXh0LnN0YXRlO1xuICAgICAgICBnZXR0ZXJzID0gbW9kdWxlLmNvbnRleHQuZ2V0dGVycztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmNhbGwodGhpcywgc3RhdGUsIGdldHRlcnMpXG4gICAgICAgIDogc3RhdGVbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgY29tbWl0dGluZyB0aGUgbXV0YXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG11dGF0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBjb21taXRgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbnRob3IgcGFyYW1zLiBZb3UgY2FuIGNvbW1pdCBtdXRhdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBNdXRhdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgbXV0YXRpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKG11dGF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZE11dGF0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAvLyBHZXQgdGhlIGNvbW1pdCBtZXRob2QgZnJvbSBzdG9yZVxuICAgICAgdmFyIGNvbW1pdCA9IHRoaXMuJHN0b3JlLmNvbW1pdDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwTXV0YXRpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb21taXQgPSBtb2R1bGUuY29udGV4dC5jb21taXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbY29tbWl0XS5jb25jYXQoYXJncykpXG4gICAgICAgIDogY29tbWl0LmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZ2V0dGluZyB0aGUgZ2V0dGVyc1xuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gZ2V0dGVyc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwR2V0dGVycyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBnZXR0ZXJzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKGdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgLy8gVGhlIG5hbWVzcGFjZSBoYXMgYmVlbiBtdXRhdGVkIGJ5IG5vcm1hbGl6ZU5hbWVzcGFjZVxuICAgIHZhbCA9IG5hbWVzcGFjZSArIHZhbDtcbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEdldHRlciAoKSB7XG4gICAgICBpZiAobmFtZXNwYWNlICYmICFnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEdldHRlcnMnLCBuYW1lc3BhY2UpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISh2YWwgaW4gdGhpcy4kc3RvcmUuZ2V0dGVycykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBnZXR0ZXI6IFwiICsgdmFsKSk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZGlzcGF0Y2ggdGhlIGFjdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gYWN0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBkaXNwYXRjaGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gZGlzcGF0Y2ggYWN0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcEFjdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgYWN0aW9ucykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkQWN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAvLyBnZXQgZGlzcGF0Y2ggZnVuY3Rpb24gZnJvbSBzdG9yZVxuICAgICAgdmFyIGRpc3BhdGNoID0gdGhpcy4kc3RvcmUuZGlzcGF0Y2g7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEFjdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoID0gbW9kdWxlLmNvbnRleHQuZGlzcGF0Y2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbZGlzcGF0Y2hdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBkaXNwYXRjaC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWJpbmRpbmcgbmFtZXNwYWNlIHBhcmFtIGZvciBtYXBYWFggZnVuY3Rpb24gaW4gc3BlY2lhbCBzY29wZWQsIGFuZCByZXR1cm4gdGhlbSBieSBzaW1wbGUgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsgcmV0dXJuICh7XG4gIG1hcFN0YXRlOiBtYXBTdGF0ZS5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpXG59KTsgfTtcblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIG1hcFxuICogbm9ybWFsaXplTWFwKFsxLCAyLCAzXSkgPT4gWyB7IGtleTogMSwgdmFsOiAxIH0sIHsga2V5OiAyLCB2YWw6IDIgfSwgeyBrZXk6IDMsIHZhbDogMyB9IF1cbiAqIG5vcm1hbGl6ZU1hcCh7YTogMSwgYjogMiwgYzogM30pID0+IFsgeyBrZXk6ICdhJywgdmFsOiAxIH0sIHsga2V5OiAnYicsIHZhbDogMiB9LCB7IGtleTogJ2MnLCB2YWw6IDMgfSBdXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gbWFwXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1hcCAobWFwKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1hcClcbiAgICA/IG1hcC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDoga2V5IH0pOyB9KVxuICAgIDogT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDogbWFwW2tleV0gfSk7IH0pXG59XG5cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gZXhwZWN0IHR3byBwYXJhbSBjb250YWlucyBuYW1lc3BhY2UgYW5kIG1hcC4gaXQgd2lsbCBub3JtYWxpemUgdGhlIG5hbWVzcGFjZSBhbmQgdGhlbiB0aGUgcGFyYW0ncyBmdW5jdGlvbiB3aWxsIGhhbmRsZSB0aGUgbmV3IG5hbWVzcGFjZSBhbmQgdGhlIG1hcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTmFtZXNwYWNlIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWFwKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICBtYXAgPSBuYW1lc3BhY2U7XG4gICAgICBuYW1lc3BhY2UgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZS5jaGFyQXQobmFtZXNwYWNlLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcbiAgICAgIG5hbWVzcGFjZSArPSAnLyc7XG4gICAgfVxuICAgIHJldHVybiBmbihuYW1lc3BhY2UsIG1hcClcbiAgfVxufVxuXG4vKipcbiAqIFNlYXJjaCBhIHNwZWNpYWwgbW9kdWxlIGZyb20gc3RvcmUgYnkgbmFtZXNwYWNlLiBpZiBtb2R1bGUgbm90IGV4aXN0LCBwcmludCBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IHN0b3JlXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVscGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZHVsZUJ5TmFtZXNwYWNlIChzdG9yZSwgaGVscGVyLCBuYW1lc3BhY2UpIHtcbiAgdmFyIG1vZHVsZSA9IHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFtb2R1bGUpIHtcbiAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBtb2R1bGUgbmFtZXNwYWNlIG5vdCBmb3VuZCBpbiBcIiArIGhlbHBlciArIFwiKCk6IFwiICsgbmFtZXNwYWNlKSk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZVxufVxuXG52YXIgaW5kZXhfZXNtID0ge1xuICBTdG9yZTogU3RvcmUsXG4gIGluc3RhbGw6IGluc3RhbGwsXG4gIHZlcnNpb246ICczLjEuMScsXG4gIG1hcFN0YXRlOiBtYXBTdGF0ZSxcbiAgbWFwTXV0YXRpb25zOiBtYXBNdXRhdGlvbnMsXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMsXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMsXG4gIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzOiBjcmVhdGVOYW1lc3BhY2VkSGVscGVyc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXhfZXNtO1xuZXhwb3J0IHsgU3RvcmUsIGluc3RhbGwsIG1hcFN0YXRlLCBtYXBNdXRhdGlvbnMsIG1hcEdldHRlcnMsIG1hcEFjdGlvbnMsIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzIH07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTAmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFx2c2RldlxcXFx3b3Jrc3BhY2VcXFxcY29sbGVjdGFibGUtY2FyZHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnN2JhNWJkOTAnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnN2JhNWJkOTAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnN2JhNWJkOTAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTAmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignN2JhNWJkOTAnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9BcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTAmXCIiLCJ2YXIgbWFwID0ge1xuXHRcIi4vZGVmYXVsdC1wcm9maWxlLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9kZWZhdWx0LXByb2ZpbGUuanBnXCIsXG5cdFwiLi9maWxsLW11cnJheS5qcGdcIjogXCIuL3NyYy9hc3NldHMvZmlsbC1tdXJyYXkuanBnXCIsXG5cdFwiLi9wbGFjZS1jYWdlLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9wbGFjZS1jYWdlLmpwZ1wiLFxuXHRcIi4vcGxhY2Uta2VhbnUuc3ZnXCI6IFwiLi9zcmMvYXNzZXRzL3BsYWNlLWtlYW51LnN2Z1wiXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gXCIuL3NyYy9hc3NldHMgc3luYyByZWN1cnNpdmUgXlxcXFwuXFxcXC8uKiRcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlNDNmZThjYTljODY5YmVlZWEwNmQ2NTFiNTBhMDBjZS5qcGdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyNTBiMjk3NzJkY2U3MmVjZWVlZDMyYjNjNzM3YTRlNC5qcGdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI3MzNmNmU3NTc5ZTg0MzczMWJjYjEwZDc0MzQ1MDJlMS5qcGdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyNmVmMTNlNGJmZGRhNDQyZGQwYTliNzQ3MzQzMzFlZC5zdmdcIjsiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0NhcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU0Y2RjMTgwJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0NhcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9DYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9DYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiQzpcXFxcdnNkZXZcXFxcd29ya3NwYWNlXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzU0Y2RjMTgwJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzU0Y2RjMTgwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzU0Y2RjMTgwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9DYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NGNkYzE4MCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1NGNkYzE4MCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudHMvQ2FyZC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU0Y2RjMTgwJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9MZWFkZXJib2FyZENhcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc5MGE4OGE2JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xlYWRlcmJvYXJkQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0xlYWRlcmJvYXJkQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiQzpcXFxcdnNkZXZcXFxcd29ya3NwYWNlXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzc5MGE4OGE2JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzc5MGE4OGE2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzc5MGE4OGE2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9MZWFkZXJib2FyZENhcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc5MGE4OGE2JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzc5MGE4OGE2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50cy9MZWFkZXJib2FyZENhcmQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9MZWFkZXJib2FyZENhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xlYWRlcmJvYXJkQ2FyZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzkwYTg4YTYmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTgxNDQwYjc4JnNjb3BlZD10cnVlJlwiXG52YXIgc2NyaXB0ID0ge31cbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vTmF2aWdhdGlvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD04MTQ0MGI3OCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjgxNDQwYjc4XCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiQzpcXFxcdnNkZXZcXFxcd29ya3NwYWNlXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzgxNDQwYjc4JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzgxNDQwYjc4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzgxNDQwYjc4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9OYXZpZ2F0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04MTQ0MGI3OCZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc4MTQ0MGI3OCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ODE0NDBiNzgmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ODE0NDBiNzgmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTgxNDQwYjc4JnNjb3BlZD10cnVlJlwiIiwiaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnLi4vdmlld3MvQ29sbGVjdGlvbi52dWUnO1xyXG5pbXBvcnQgTGVhZGVyYm9hcmQgZnJvbSAnLi4vdmlld3MvTGVhZGVyYm9hcmQudnVlJztcclxuaW1wb3J0IFNldHRpbmdzIGZyb20gJy4uL3ZpZXdzL1NldHRpbmdzLnZ1ZSc7XHJcbmltcG9ydCBIb21lIGZyb20gJy4uL3ZpZXdzL0hvbWUudnVlJztcclxuaW1wb3J0IEFwcCBmcm9tICcuLi9BcHAudnVlJztcclxuXHJcbmNvbnN0IHJvdXRlcyA9IFtcclxuICB7XHJcbiAgICBwYXRoOiAnJyxcclxuICAgIGNvbXBvbmVudDogQXBwLFxyXG4gICAgY2hpbGRyZW46IFtcclxuICAgICAgeyBwYXRoOiAnJywgY29tcG9uZW50OiBIb21lIH0sXHJcbiAgICAgIHsgcGF0aDogJ2NvbGxlY3Rpb24nLCBjb21wb25lbnQ6IENvbGxlY3Rpb24gfSxcclxuICAgICAgeyBwYXRoOiAnbGVhZGVyYm9hcmQnLCBjb21wb25lbnQ6IExlYWRlcmJvYXJkIH0sXHJcbiAgICAgIHsgcGF0aDogJ3NldHRpbmdzJywgY29tcG9uZW50OiBTZXR0aW5ncyB9XHJcbiAgICBdXHJcbiAgfVxyXG5dO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVzO1xyXG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5jb25zdCBiYXNlU3RvcmUgPSB7XHJcbiAgc3RhdGU6IHtcclxuICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgY2FyZHM6IFtdXHJcbiAgfSxcclxuICBtdXRhdGlvbnM6IHtcclxuICAgIHNldExvYWRpbmcoc3RhdGUsIHN0YXR1cykge1xyXG4gICAgICBzdGF0ZS5sb2FkaW5nID0gc3RhdHVzO1xyXG4gICAgfSxcclxuICAgIHNldENhcmRzKHN0YXRlLCBjYXJkcykge1xyXG4gICAgICBzdGF0ZS5jYXJkcyA9IGNhcmRzO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgYWN0aW9uczoge1xyXG4gICAgZmV0Y2hDYXJkcyhjb250ZXh0KSB7XHJcbiAgICAgIGNvbnRleHQuY29tbWl0KCdzZXRMb2FkaW5nJywgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBnZXR0ZXJzOiB7XHJcbiAgICBnZXRVc2VyQ2FyZHMoc3RhdGUpIHtcclxuICAgICAgcmV0dXJuIHN0YXRlLmNhcmRzLmZpbHRlcihjYXJkID0+IGNhcmQuY29sbGVjdGVkKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGJhc2VTdG9yZTtcclxuIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xyXG5cclxuaW1wb3J0IFZ1ZVJvdXRlciBmcm9tICd2dWUtcm91dGVyJztcclxuXHJcbmltcG9ydCByb3V0ZXMgZnJvbSAnLi9jb25maWcvcm91dGVzLmpzJztcclxuaW1wb3J0IFZ1ZXggZnJvbSAndnVleCc7XHJcbmltcG9ydCBiYXNlU3RvcmUgZnJvbSAnLi9jb25maWcvc3RvcmVzL2Jhc2UnO1xyXG5WdWUudXNlKFZ1ZVJvdXRlcik7XHJcblZ1ZS51c2UoVnVleCk7XHJcbmNvbnN0IHJvdXRlciA9IG5ldyBWdWVSb3V0ZXIoe1xyXG4gIHJvdXRlc1xyXG59KTtcclxuY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7XHJcbiAgbW9kdWxlczoge1xyXG4gICAgYmFzZTogYmFzZVN0b3JlXHJcbiAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xyXG4gIHJvdXRlcjogcm91dGVyLFxyXG4gIGVsOiAnI2FwcCdcclxufSk7XHJcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ29sbGVjdGlvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTUwMjYxNTgmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ29sbGVjdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0NvbGxlY3Rpb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFx2c2RldlxcXFx3b3Jrc3BhY2VcXFxcY29sbGVjdGFibGUtY2FyZHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNTUwMjYxNTgnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNTUwMjYxNTgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNTUwMjYxNTgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0NvbGxlY3Rpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU1MDI2MTU4JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzU1MDI2MTU4Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvdmlld3MvQ29sbGVjdGlvbi52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db2xsZWN0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29sbGVjdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29sbGVjdGlvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTUwMjYxNTgmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0hvbWUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWZhZTViZWNlJlwiXG52YXIgc2NyaXB0ID0ge31cblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHdvcmtzcGFjZVxcXFxjb2xsZWN0YWJsZS1jYXJkc1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdmYWU1YmVjZScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdmYWU1YmVjZScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdmYWU1YmVjZScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vSG9tZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZmFlNWJlY2UmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignZmFlNWJlY2UnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy92aWV3cy9Ib21lLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ib21lLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mYWU1YmVjZSZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWM3ZmQwZTlhJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWM3ZmQwZTlhJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiYzdmZDBlOWFcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFx2c2RldlxcXFx3b3Jrc3BhY2VcXFxcY29sbGVjdGFibGUtY2FyZHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnYzdmZDBlOWEnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnYzdmZDBlOWEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnYzdmZDBlOWEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jN2ZkMGU5YSZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdjN2ZkMGU5YScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL3ZpZXdzL0xlYWRlcmJvYXJkLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9MZWFkZXJib2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1jN2ZkMGU5YSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YzdmZDBlOWEmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jN2ZkMGU5YSZzY29wZWQ9dHJ1ZSZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTUzY2M4NGRkJlwiXG52YXIgc2NyaXB0ID0ge31cblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHdvcmtzcGFjZVxcXFxjb2xsZWN0YWJsZS1jYXJkc1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc1M2NjODRkZCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc1M2NjODRkZCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc1M2NjODRkZCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTUzY2M4NGRkJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzUzY2M4NGRkJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvdmlld3MvU2V0dGluZ3MudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NldHRpbmdzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01M2NjODRkZCZcIiJdLCJzb3VyY2VSb290IjoiIn0=