/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");

var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");

var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");

var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");

var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest(); // HTTP basic authentication

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout; // Listen for ready state

    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      } // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request


      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(resolve, reject, response); // Clean up request

      request = null;
    }; // Handle browser request cancellation (as opposed to a manual cancellation)


    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js"); // Add xsrf header


      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (config.withCredentials) {
      request.withCredentials = true;
    } // Add responseType to request if needed


    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel); // Clean up request

        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");

var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");

var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context);
  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Factory for creating new instances

axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
}; // Expose Cancel & CancelToken


axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js"); // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports["default"] = axios;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");

var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");

var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");

var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */


function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);
  config.method = config.method ? config.method.toLowerCase() : 'get'; // Hook up interceptors middleware

  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});
module.exports = Axios;

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");

var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");

var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Support baseURL config

  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  } // Ensure headers exist


  config.headers = config.headers || {}; // Transform request data

  config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData(response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;

  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function () {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };

  return error;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */


module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};
  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });
  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });
  utils.forEach(['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath'], function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });
  return config;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;

  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });
  return data;
};

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");

var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter; // Only Node.JS has a process variable that is of [[Class]] process

  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  }

  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {
        /* Ignore */
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};
defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js"); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/axios/node_modules/is-buffer/index.js");
/*global toString:true*/
// utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

function isArray(val) {
  return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */


function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && _typeof(val) === 'object';
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


function isDate(val) {
  return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */


function isFile(val) {
  return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */


function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */


function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */


function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (_typeof(obj) !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function merge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && _typeof(val) === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function deepMerge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && _typeof(val) === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (_typeof(val) === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};

/***/ }),

/***/ "./node_modules/axios/node_modules/is-buffer/index.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/node_modules/is-buffer/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
module.exports = function isBuffer(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Card.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  data: function data() {
    return {
      cardContainer: null,
      innerCard: null,
      // card: null,
      counter: 0,
      updateRate: 1,
      mouse: {
        _x: 0,
        _y: 0,
        x: 0,
        y: 0
      },
      parentEl: null,
      flipped: false,
      canTilt: true,
      cardContent: {}
    };
  },
  props: {
    cardId: {
      type: String,
      required: true
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.cardContent = this.$store.state.base.cards.find(function (card) {
      return card.id === parseInt(_this.cardId);
    });
    this.cardContainer = document.querySelector('.card');
    this.innerCard = document.querySelector('.card');
    this.card = document.querySelector('.card');
    this.cardContainer.onmouseenter = this.onEnter;
    this.cardContainer.onmouseleave = this.onLeave;
    this.cardContainer.onmousemove = this.onMove;
    this.setMouseOrigin(this.cardContainer);
  },
  methods: {
    getImgUrl: function getImgUrl(cardImage) {
      var images = __webpack_require__("./src/assets sync \\.(png|jpg)$");

      return images("./".concat(cardImage));
    },
    onEnter: function onEnter() {// this.updatePerspective(event)
    },
    onLeave: function onLeave() {
      if (this.canTilt) {
        this.innerCard.style = '';
      }
    },
    flipCard: function flipCard() {
      var _this2 = this;

      this.flipped = !this.flipped;
      this.canTilt = false;
      var style = "rotateX(0deg) rotateY(".concat(this.flipped ? '-180' : '0', "deg)");
      this.flipped ? this.cardContainer.style.perspective = '600px' : setTimeout(function () {
        _this2.canTilt = true;
        _this2.cardContainer.style.perspective = '600px';
      }, 500);
      this.card.style.transform = style;
    },
    onMove: function onMove(event) {// if (this.timeUpdate() && this.canTilt) {
      //     this.updatePerspective(event)
      // }
    },
    // updatePerspective: function(event) {
    //     this.updateMousePosition(event)
    //     this.updateTransform(
    //         (this.mouse.y / this.innerCard.offsetHeight / 2).toFixed(2),
    //         (this.mouse.x / this.innerCard.offsetWidth / 2).toFixed(2)
    //     )
    // },
    timeUpdate: function timeUpdate() {
      return this.counter++ % this.updateRate === 0;
    },
    updateMousePosition: function updateMousePosition(event) {
      var e = event || window.event;
      this.mouse.x = e.clientX - this._x;
      this.mouse.y = (e.clientY - this._y) * -1;
    },
    setMouseOrigin: function setMouseOrigin(event) {
      this._x = event.offsetLeft + Math.floor(event.offsetWidth / 2);
      this._y = event.offsetTop + Math.floor(event.offsetHeight / 2);
    },
    updateTransform: function updateTransform(x, y) {
      if (this.flipped) return;
      var style = "rotateX(".concat(x, "deg) rotateY(").concat(y, "deg)");
      this.innerCard.style.transform = style;
      this.innerCard.style.webkitTransform = style;
      this.innerCard.style.mozTransform = style;
      this.innerCard.style.msTransform = style;
      this.innerCard.style.oTransform = style;
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/CardPreview.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CardPreview.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    cardDetails: {
      type: Object,
      requried: true
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=script&lang=js&":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeaderboardCard.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    data: {
      type: Object,
      required: true
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Navigation.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    routes: Array
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Scan.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Scan.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var qr_scanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qr-scanner */ "./node_modules/qr-scanner/qr-scanner.min.js");
/* harmony import */ var _file_loader_node_modules_qr_scanner_qr_scanner_worker_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !file-loader!../../node_modules/qr-scanner/qr-scanner-worker.min.js */ "./node_modules/file-loader/dist/cjs.js!./node_modules/qr-scanner/qr-scanner-worker.min.js");
/* harmony import */ var _components_Card_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/Card.vue */ "./src/components/Card.vue");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


qr_scanner__WEBPACK_IMPORTED_MODULE_0__["default"].WORKER_PATH = _file_loader_node_modules_qr_scanner_qr_scanner_worker_min_js__WEBPACK_IMPORTED_MODULE_1__["default"];

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    Card: _components_Card_vue__WEBPACK_IMPORTED_MODULE_2__["default"]
  },
  data: function data() {
    return {
      scanner: null,
      scannedText: '',
      scannedCard: '',
      element: null
    };
  },
  methods: {
    getQrCode: function getQrCode(code) {
      if (code) {
        var parsedCode = JSON.parse(code);
        this.$store.dispatch('scanCard', parsedCode);
        this.scannedCard = parsedCode;
        this.destroyScanner();
      }
    },
    destroyScanner: function destroyScanner() {
      this.scanner.destroy();
      this.scanner = null;
    },
    setupScanner: function setupScanner() {
      var _this = this;

      this.scanner = new qr_scanner__WEBPACK_IMPORTED_MODULE_0__["default"](this.element, function (result) {
        return _this.getQrCode(result);
      });
      this.scanner.start();
    }
  },
  mounted: function mounted() {
    this.element = document.getElementById('qrReader');
    this.setupScanner();
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Add.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Add.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_Navigation_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Navigation.vue */ "./src/components/Navigation.vue");
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    Navigation: _components_Navigation_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  },
  data: function data() {
    return {
      routes: []
    };
  },
  beforeMount: function beforeMount() {
    this.routes = this.$store.state.base.subRoutes.add;
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=script&lang=js&":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Collection.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_CardPreview_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/CardPreview.vue */ "./src/components/CardPreview.vue");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    CardPreview: _components_CardPreview_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_Navigation_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Navigation.vue */ "./src/components/Navigation.vue");
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    Navigation: _components_Navigation_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  },
  data: function data() {
    return {
      routes: [],
      homepage: true
    };
  },
  beforeMount: function beforeMount() {
    this.routes = this.$store.state.base.routelinks;
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Leaderboard.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_LeaderboardCard_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/LeaderboardCard.vue */ "./src/components/LeaderboardCard.vue");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    LeaderboardCard: _components_LeaderboardCard_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  },
  data: function data() {
    return {
      showItems: false
    };
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      _this.showItems = true;
    });
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/SingleCard.vue?vue&type=script&lang=js&":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/views/SingleCard.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_Card_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Card.vue */ "./src/components/Card.vue");
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    Card: _components_Card_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  },
  props: {
    id: {
      type: String,
      required: true
    }
  }
});

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=style&index=0&lang=scss&":
/*!*********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=scss& ***!
  \*********************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ./assets/Fonts/cooper-hewitt/CooperHewitt-Medium.otf */ "./src/assets/Fonts/cooper-hewitt/CooperHewitt-Medium.otf"));
var ___CSS_LOADER_URL___1___ = getUrl(__webpack_require__(/*! ./assets/Fonts/cooper-hewitt/CooperHewitt-bold.otf */ "./src/assets/Fonts/cooper-hewitt/CooperHewitt-bold.otf"));
var ___CSS_LOADER_URL___2___ = getUrl(__webpack_require__(/*! ./assets/Fonts/montserrat/Montserrat-Medium.otf */ "./src/assets/Fonts/montserrat/Montserrat-Medium.otf"));
var ___CSS_LOADER_URL___3___ = getUrl(__webpack_require__(/*! ./assets/Fonts/montserrat/Montserrat-Bold.otf */ "./src/assets/Fonts/montserrat/Montserrat-Bold.otf"));
var ___CSS_LOADER_URL___4___ = getUrl(__webpack_require__(/*! ./assets/wood-background.jpg */ "./src/assets/wood-background.jpg"));
var ___CSS_LOADER_URL___5___ = getUrl(__webpack_require__(/*! ./assets/App Skin Assets/Universal/Wood-Background.jpg */ "./src/assets/App Skin Assets/Universal/Wood-Background.jpg"));
// Module
exports.push([module.i, "@font-face {\n  font-family: \"hewitt\";\n  src: url(" + ___CSS_LOADER_URL___0___ + ") format(\"opentype\");\n}\n@font-face {\n  font-family: \"hewitt\";\n  font-weight: bold;\n  src: url(" + ___CSS_LOADER_URL___1___ + ") format(\"opentype\");\n}\n@font-face {\n  font-family: \"montserrat\";\n  src: url(" + ___CSS_LOADER_URL___2___ + ") format(\"opentype\");\n}\n@font-face {\n  font-family: \"montserrat\";\n  font-weight: bold;\n  src: url(" + ___CSS_LOADER_URL___3___ + ") format(\"opentype\");\n}\n* {\n  box-sizing: border-box;\n}\nhtml,\nbody {\n  align-items: center;\n  background: #666375;\n  display: flex;\n  font-size: 16px;\n  height: 100%;\n  justify-content: center;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n}\n#app {\n  background-color: #dfdfdf;\n  background-image: url(" + ___CSS_LOADER_URL___4___ + ");\n  background-size: cover;\n  background-position: center center;\n  box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 rgba(0, 0, 0, 0.19);\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n  font-family: \"hewitt\";\n  width: 100%;\n  background-image: url(" + ___CSS_LOADER_URL___5___ + ");\n  background-size: contain;\n}\n@media (min-width: 576px) {\n#app {\n    height: 731px;\n    width: 411px;\n}\n}\na[href=\"#\"] {\n  cursor: not-allowed;\n}\nheader {\n  position: relative;\n  font-family: \"montserrat\";\n  font-weight: bold;\n  padding-top: 30px;\n}\nheader .navigation__back {\n  position: absolute;\n  top: 12px;\n}\nheader span {\n  font-size: 3rem;\n  color: #fff;\n  text-align: center;\n  top: 40%;\n  transform: rotate(-35deg);\n  left: -2%;\n  position: absolute;\n}\n.heading1 {\n  color: #fff;\n  font-size: 3em;\n  text-align: center;\n  margin-bottom: 10px;\n}\n.app-content {\n  height: 100%;\n}\n.card-collection__body {\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  overflow: auto;\n  overflow-x: hidden;\n  padding: 0 15px 0 15px;\n  position: relative;\n  width: 100%;\n}\n.card-collection__body::-webkit-scrollbar {\n  display: none;\n}\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-active {\n  opacity: 0;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=style&index=0&lang=scss&":
/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Card.vue?vue&type=style&index=0&lang=scss& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".card-container {\n  perspective: 800px;\n  overflow: hidden;\n  height: 100%;\n}\n.card {\n  transition: transform 0.5s;\n  height: 533px;\n  width: 300px;\n  transform-style: preserve-3d;\n  margin: 0 auto;\n}\n.card__front, .card__back {\n  backface-visibility: hidden;\n  height: 500px;\n  width: 100%;\n  display: grid;\n  grid-template-columns: 100%;\n  grid-template-rows: [image] auto [footer] 1fr;\n  z-index: 2;\n  position: absolute;\n}\n.card__front_flip, .card__back_flip {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  position: absolute;\n  right: 0;\n  top: -5px;\n  margin: 1rem;\n  padding: 1rem;\n  z-index: 10;\n}\n.card__front_flip img, .card__back_flip img {\n  width: 22px;\n}\n.card__front .navigation__back, .card__back .navigation__back {\n  margin: 1rem;\n  padding: 1rem;\n  position: absolute;\n  top: -6px;\n  left: -10px;\n}\n.card__front .navigation__back img, .card__back .navigation__back img {\n  width: 22px;\n}\n.card__front_image, .card__back_image {\n  max-width: 300px;\n  height: 500px;\n  grid-column: 1;\n  grid-row: image;\n  display: flex;\n  justify-content: center;\n  max-height: 600px;\n}\n.card__front_image img, .card__back_image img {\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\n  width: 100%;\n}\n.card__front_footer, .card__back_footer {\n  grid-row: footer;\n  grid-column: 1;\n  display: grid;\n  background-color: #eee;\n  grid-template-rows: 100%;\n  grid-template-columns: [rarity] 1fr [name] 3fr;\n}\n.card__front_footer_name, .card__front_footer_rarity, .card__back_footer_name, .card__back_footer_rarity {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.card__front_footer_rarity, .card__back_footer_rarity {\n  margin: 1rem;\n  height: 60%;\n  background-color: lightblue;\n}\n.card__back {\n  transform: rotateY(180deg);\n  display: flex;\n  justify-content: center;\n}\n.card__back h1 {\n  margin: 3rem 0 3rem 0;\n  font-size: 3rem;\n}\n.card__back p {\n  font-size: 1.2rem;\n  line-height: 1.3rem;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss&":
/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ../assets/default-card.png */ "./src/assets/default-card.png"));
// Module
exports.push([module.i, ".preview-card {\n  background-image: url(" + ___CSS_LOADER_URL___0___ + ");\n  background-position: center;\n  background-size: cover;\n  height: 330px;\n  width: 100%;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&":
/*!********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ../assets/stone-background.png */ "./src/assets/stone-background.png"));
var ___CSS_LOADER_URL___1___ = getUrl(__webpack_require__(/*! ../assets/App Skin Assets/Leaderboard/Rank-4+-background.png */ "./src/assets/App Skin Assets/Leaderboard/Rank-4+-background.png"));
var ___CSS_LOADER_URL___2___ = getUrl(__webpack_require__(/*! ../assets/App Skin Assets/Leaderboard/Top-3-Rank-background.png */ "./src/assets/App Skin Assets/Leaderboard/Top-3-Rank-background.png"));
var ___CSS_LOADER_URL___3___ = getUrl(__webpack_require__(/*! ../assets/rank-background.png */ "./src/assets/rank-background.png"));
var ___CSS_LOADER_URL___4___ = getUrl(__webpack_require__(/*! ../assets/top-rank-background.png */ "./src/assets/top-rank-background.png"));
var ___CSS_LOADER_URL___5___ = getUrl(__webpack_require__(/*! ../assets/default-profile.jpg */ "./src/assets/default-profile.jpg"));
// Module
exports.push([module.i, ".leaderboard-card {\n  background-color: transparent;\n  background-image: url(" + ___CSS_LOADER_URL___0___ + ");\n  background-position: top center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  margin-bottom: 15px;\n  max-height: 85px;\n  position: relative;\n  width: 100%;\n  background-image: url(" + ___CSS_LOADER_URL___1___ + ");\n  background-size: 100% 100%;\n}\n.leaderboard-card.top3 {\n  background-image: url(" + ___CSS_LOADER_URL___2___ + ");\n  background-size: 100% 100%;\n}\n.leaderboard-card__position {\n  align-items: center;\n  background-color: #696969;\n  background-image: url(" + ___CSS_LOADER_URL___3___ + ");\n  background-size: cover;\n  color: #d9d9d9;\n  display: flex;\n  font-size: 1.2em;\n  font-weight: bold;\n  height: 30px;\n  padding: 0 10px;\n  position: absolute;\n  top: 10px;\n  left: -7px;\n  width: 45px;\n}\n.leaderboard-card__position--top-three {\n  background-image: url(" + ___CSS_LOADER_URL___4___ + ");\n}\n.leaderboard-card__position span {\n  font-size: 0.8em;\n  position: absolute;\n  top: 3px;\n  left: 20px;\n}\n.leaderboard-card__content {\n  align-items: center;\n  color: white;\n  display: flex;\n  justify-content: space-between;\n  padding: 10px 20px;\n  width: 100%;\n}\n.leaderboard-card__image {\n  background-color: white;\n  background-image: url(" + ___CSS_LOADER_URL___5___ + ");\n  background-position: center;\n  background-size: cover;\n  height: 65px;\n  width: 65px;\n}\n.leaderboard-card__username {\n  font-size: 1.5em;\n  font-weight: bold;\n}\n.leaderboard-card__cards-collected {\n  text-align: center;\n}\n.leaderboard-card__cards-collected__number {\n  font-size: 1.5em;\n  font-weight: bold;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ../assets/stone-background.png */ "./src/assets/stone-background.png"));
// Module
exports.push([module.i, ".navigation[data-v-81440b78] {\n  display: flex;\n  flex-direction: column;\n  font-weight: bold;\n  width: 100%;\n}\n.navigation__item[data-v-81440b78] {\n  background-color: transparent;\n  background-image: url(" + ___CSS_LOADER_URL___0___ + ");\n  background-position: top center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  color: #fff;\n  cursor: pointer;\n  font-size: 1.5em;\n  margin-bottom: 20px;\n  padding: 29px 0;\n  text-align: center;\n  text-decoration: none;\n  width: 100%;\n}\n.navigation__item[data-v-81440b78]:hover {\n  transform: scale(1.1);\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true&":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "#qrReader[data-v-bdfa27a6] {\n  width: 100%;\n}\n.added-text[data-v-bdfa27a6] {\n  color: #fff;\n  font-size: 1.75em;\n  text-align: center;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true&":
/*!***************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true& ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".add[data-v-764c55d7] {\n  width: 100%;\n  padding: 30px 0px;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=style&index=0&lang=scss&":
/*!**********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Collection.vue?vue&type=style&index=0&lang=scss& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".collection {\n  width: 100%;\n}\n.preview-wrapper {\n  display: grid;\n  grid-gap: 20px;\n  grid-template-columns: 1fr 1fr;\n  justify-items: center;\n  width: 100%;\n  padding-bottom: 30px;\n}\n.navigation__back img {\n  width: 55px;\n  margin: -10px 10px;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true&":
/*!****************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".home[data-v-fae5bece] {\n  width: 100%;\n}\n.home__logo[data-v-fae5bece] {\n  padding: 35px 20px;\n  width: 100%;\n}\n.hometitle[data-v-fae5bece] {\n  padding-left: 50px;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".leaderboard[data-v-c7fd0e9a] {\n  width: 100%;\n}\n.navigation__back img[data-v-c7fd0e9a] {\n  width: 55px;\n  margin: -10px 10px;\n}\n.fade-enter-active[data-v-c7fd0e9a] {\n  transition: opacity 2s;\n}\n.fade-leave-active[data-v-c7fd0e9a] {\n  transition: opacity 0.5s;\n}\n.fade-enter[data-v-c7fd0e9a], .fade-leave-to[data-v-c7fd0e9a] {\n  opacity: 0;\n}\n.slide-in-move[data-v-c7fd0e9a] {\n  transition: opacity 1s linear, transform 1s ease-in-out;\n}\n.slide-in-leave-active[data-v-c7fd0e9a] {\n  transition: opacity 0.4s linear, transform 0.4s cubic-bezier(0.5, 0, 0.7, 0.4);\n  transition-delay: calc(0.3s * (var(--total) - var(--i)));\n}\n.slide-in-enter-active[data-v-c7fd0e9a] {\n  transition: opacity 1s linear, transform 1.5s cubic-bezier(0.2, 0.5, 0.1, 1);\n  transition-delay: calc(0.3s * var(--i));\n}\n.slide-in-enter[data-v-c7fd0e9a], .slide-in-leave-to[data-v-c7fd0e9a] {\n  opacity: 0;\n}\n.slide-in-enter[data-v-c7fd0e9a] {\n  transform: translateY(5em);\n}\n.slide-in-leave-to[data-v-c7fd0e9a] {\n  transform: translateY(3em);\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true&":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".locations[data-v-3b4780d8] {\n  width: 100%;\n}\n.navigation__back img[data-v-3b4780d8] {\n  width: 55px;\n  margin: -10px 10px;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names

module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], "{").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      // eslint-disable-next-line prefer-destructuring
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = modules[_i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(".concat(item[2], ") and (").concat(mediaQuery, ")");
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot).concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (url, needQuotes) {
  // eslint-disable-next-line no-underscore-dangle, no-param-reassign
  url = url.__esModule ? url["default"] : url;

  if (typeof url !== 'string') {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    // eslint-disable-next-line no-param-reassign
    url = url.slice(1, -1);
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url) || needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, '\\n'), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/file-loader/dist/cjs.js!./node_modules/qr-scanner/qr-scanner-worker.min.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/file-loader/dist/cjs.js!./node_modules/qr-scanner/qr-scanner-worker.min.js ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "55993a808d55c8ad7c33cc79e691e03e.js");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/qr-scanner/qr-scanner.min.js":
/*!***************************************************!*\
  !*** ./node_modules/qr-scanner/qr-scanner.min.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var e =
/*#__PURE__*/
function () {
  _createClass(e, null, [{
    key: "hasCamera",
    value: function hasCamera() {
      return navigator.mediaDevices.enumerateDevices().then(function (a) {
        return a.some(function (a) {
          return "videoinput" === a.kind;
        });
      })["catch"](function () {
        return !1;
      });
    }
  }]);

  function e(a, c) {
    var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : e.DEFAULT_CANVAS_SIZE;

    _classCallCheck(this, e);

    this.$video = a;
    this.$canvas = document.createElement("canvas");
    this._onDecode = c;
    this._paused = this._active = !1;
    this.$canvas.width = b;
    this.$canvas.height = b;
    this._sourceRect = {
      x: 0,
      y: 0,
      width: b,
      height: b
    };
    this._onCanPlay = this._onCanPlay.bind(this);
    this._onPlay = this._onPlay.bind(this);
    this._onVisibilityChange = this._onVisibilityChange.bind(this);
    this.$video.addEventListener("canplay", this._onCanPlay);
    this.$video.addEventListener("play", this._onPlay);
    document.addEventListener("visibilitychange", this._onVisibilityChange);
    this._qrWorker = new Worker(e.WORKER_PATH);
  }

  _createClass(e, [{
    key: "destroy",
    value: function destroy() {
      this.$video.removeEventListener("canplay", this._onCanPlay);
      this.$video.removeEventListener("play", this._onPlay);
      document.removeEventListener("visibilitychange", this._onVisibilityChange);
      this.stop();

      this._qrWorker.postMessage({
        type: "close"
      });
    }
  }, {
    key: "start",
    value: function start() {
      var _this = this;

      if (this._active && !this._paused) return Promise.resolve();
      "https:" !== window.location.protocol && console.warn("The camera stream is only accessible if the page is transferred via https.");
      this._active = !0;
      this._paused = !1;
      if (document.hidden) return Promise.resolve();
      clearTimeout(this._offTimeout);
      this._offTimeout = null;
      if (this.$video.srcObject) return this.$video.play(), Promise.resolve();
      var a = "environment";
      return this._getCameraStream("environment", !0)["catch"](function () {
        a = "user";
        return _this._getCameraStream();
      }).then(function (c) {
        _this.$video.srcObject = c;

        _this._setVideoMirror(a);
      })["catch"](function (a) {
        _this._active = !1;
        throw a;
      });
    }
  }, {
    key: "stop",
    value: function stop() {
      this.pause();
      this._active = !1;
    }
  }, {
    key: "pause",
    value: function pause() {
      var _this2 = this;

      this._paused = !0;
      this._active && (this.$video.pause(), this._offTimeout || (this._offTimeout = setTimeout(function () {
        var a = _this2.$video.srcObject && _this2.$video.srcObject.getTracks()[0];

        a && (a.stop(), _this2._offTimeout = _this2.$video.srcObject = null);
      }, 300)));
    }
  }, {
    key: "setGrayscaleWeights",
    value: function setGrayscaleWeights(a, c, b) {
      var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !0;

      this._qrWorker.postMessage({
        type: "grayscaleWeights",
        data: {
          red: a,
          green: c,
          blue: b,
          useIntegerApproximation: d
        }
      });
    }
  }, {
    key: "setInversionMode",
    value: function setInversionMode(a) {
      this._qrWorker.postMessage({
        type: "inversionMode",
        data: a
      });
    }
  }, {
    key: "_onCanPlay",
    value: function _onCanPlay() {
      this._updateSourceRect();

      this.$video.play();
    }
  }, {
    key: "_onPlay",
    value: function _onPlay() {
      this._updateSourceRect();

      this._scanFrame();
    }
  }, {
    key: "_onVisibilityChange",
    value: function _onVisibilityChange() {
      document.hidden ? this.pause() : this._active && this.start();
    }
  }, {
    key: "_updateSourceRect",
    value: function _updateSourceRect() {
      var a = Math.round(2 / 3 * Math.min(this.$video.videoWidth, this.$video.videoHeight));
      this._sourceRect.width = this._sourceRect.height = a;
      this._sourceRect.x = (this.$video.videoWidth - a) / 2;
      this._sourceRect.y = (this.$video.videoHeight - a) / 2;
    }
  }, {
    key: "_scanFrame",
    value: function _scanFrame() {
      var _this3 = this;

      if (!this._active || this.$video.paused || this.$video.ended) return !1;
      requestAnimationFrame(function () {
        e.scanImage(_this3.$video, _this3._sourceRect, _this3._qrWorker, _this3.$canvas, !0).then(_this3._onDecode, function (a) {
          _this3._active && "QR code not found." !== a && console.error(a);
        }).then(function () {
          return _this3._scanFrame();
        });
      });
    }
  }, {
    key: "_getCameraStream",
    value: function _getCameraStream(a) {
      var c = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
      var b = [{
        width: {
          min: 1024
        }
      }, {
        width: {
          min: 768
        }
      }, {}];
      a && (c && (a = {
        exact: a
      }), b.forEach(function (b) {
        return b.facingMode = a;
      }));
      return this._getMatchingCameraStream(b);
    }
  }, {
    key: "_getMatchingCameraStream",
    value: function _getMatchingCameraStream(a) {
      var _this4 = this;

      return 0 === a.length ? Promise.reject("Camera not found.") : navigator.mediaDevices.getUserMedia({
        video: a.shift()
      })["catch"](function () {
        return _this4._getMatchingCameraStream(a);
      });
    }
  }, {
    key: "_setVideoMirror",
    value: function _setVideoMirror(a) {
      this.$video.style.transform = "scaleX(" + ("user" === a ? -1 : 1) + ")";
    }
  }], [{
    key: "scanImage",
    value: function scanImage(a) {
      var c = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var f = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
      var g = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !1;
      var h = !1,
          l = new Promise(function (l, g) {
        b || (b = new Worker(e.WORKER_PATH), h = !0, b.postMessage({
          type: "inversionMode",
          data: "both"
        }));

        var n, _m, _k;

        _m = function m(a) {
          "qrResult" === a.data.type && (b.removeEventListener("message", _m), b.removeEventListener("error", _k), clearTimeout(n), null !== a.data.data ? l(a.data.data) : g("QR code not found."));
        };

        _k = function k(a) {
          b.removeEventListener("message", _m);
          b.removeEventListener("error", _k);
          clearTimeout(n);
          g("Scanner error: " + (a ? a.message || a : "Unknown Error"));
        };

        b.addEventListener("message", _m);
        b.addEventListener("error", _k);
        n = setTimeout(function () {
          return _k("timeout");
        }, 3E3);

        e._loadImage(a).then(function (a) {
          a = e._getImageData(a, c, d, f);
          b.postMessage({
            type: "decode",
            data: a
          }, [a.data.buffer]);
        })["catch"](_k);
      });
      c && g && (l = l["catch"](function () {
        return e.scanImage(a, null, b, d, f);
      }));
      return l = l["finally"](function () {
        h && b.postMessage({
          type: "close"
        });
      });
    }
  }, {
    key: "_getImageData",
    value: function _getImageData(a) {
      var c = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
      b = b || document.createElement("canvas");
      var f = c && c.x ? c.x : 0,
          g = c && c.y ? c.y : 0,
          h = c && c.width ? c.width : a.width || a.videoWidth;
      c = c && c.height ? c.height : a.height || a.videoHeight;
      d || b.width === h && b.height === c || (b.width = h, b.height = c);
      d = b.getContext("2d", {
        alpha: !1
      });
      d.imageSmoothingEnabled = !1;
      d.drawImage(a, f, g, h, c, 0, 0, b.width, b.height);
      return d.getImageData(0, 0, b.width, b.height);
    }
  }, {
    key: "_loadImage",
    value: function _loadImage(a) {
      if (a instanceof HTMLCanvasElement || a instanceof HTMLVideoElement || window.ImageBitmap && a instanceof window.ImageBitmap || window.OffscreenCanvas && a instanceof window.OffscreenCanvas) return Promise.resolve(a);
      if (a instanceof Image) return e._awaitImageLoad(a).then(function () {
        return a;
      });

      if (a instanceof File || a instanceof URL || "string" === typeof a) {
        var c = new Image();
        c.src = a instanceof File ? URL.createObjectURL(a) : a;
        return e._awaitImageLoad(c).then(function () {
          a instanceof File && URL.revokeObjectURL(c.src);
          return c;
        });
      }

      return Promise.reject("Unsupported image type.");
    }
  }, {
    key: "_awaitImageLoad",
    value: function _awaitImageLoad(a) {
      return new Promise(function (c, b) {
        if (a.complete && 0 !== a.naturalWidth) c();else {
          var _d, _f;

          _d = function d() {
            a.removeEventListener("load", _d);
            a.removeEventListener("error", _f);
            c();
          };

          _f = function f() {
            a.removeEventListener("load", _d);
            a.removeEventListener("error", _f);
            b("Image load error");
          };

          a.addEventListener("load", _d);
          a.addEventListener("error", _f);
        }
      });
    }
  }]);

  return e;
}();

e.DEFAULT_CANVAS_SIZE = 400;
e.WORKER_PATH = "qr-scanner-worker.min.js";
/* harmony default export */ __webpack_exports__["default"] = (e);

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function registerImmediate(handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function onGlobalMessage(event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function registerImmediate(handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function registerImmediate(handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function registerImmediate(handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function registerImmediate(handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=style&index=0&lang=scss&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=scss& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??ref--2-2!../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=style&index=0&lang=scss&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=style&index=0&lang=scss&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Card.vue?vue&type=style&index=0&lang=scss& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Card.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=style&index=0&lang=scss&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss&":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./CardPreview.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./LeaderboardCard.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=style&index=0&lang=scss&":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Collection.vue?vue&type=style&index=0&lang=scss& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Collection.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=style&index=0&lang=scss&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js??ref--2-2!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true&");

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var stylesInDom = {};

var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

function listToStyles(list, options) {
  var styles = [];
  var newStyles = {};

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var css = item[1];
    var media = item[2];
    var sourceMap = item[3];
    var part = {
      css: css,
      media: media,
      sourceMap: sourceMap
    };

    if (!newStyles[id]) {
      styles.push(newStyles[id] = {
        id: id,
        parts: [part]
      });
    } else {
      newStyles[id].parts.push(part);
    }
  }

  return styles;
}

function addStylesToDom(styles, options) {
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i];
    var domStyle = stylesInDom[item.id];
    var j = 0;

    if (domStyle) {
      domStyle.refs++;

      for (; j < domStyle.parts.length; j++) {
        domStyle.parts[j](item.parts[j]);
      }

      for (; j < item.parts.length; j++) {
        domStyle.parts.push(addStyle(item.parts[j], options));
      }
    } else {
      var parts = [];

      for (; j < item.parts.length; j++) {
        parts.push(addStyle(item.parts[j], options));
      }

      stylesInDom[item.id] = {
        id: item.id,
        refs: 1,
        parts: parts
      };
    }
  }
}

function insertStyleElement(options) {
  var style = document.createElement('style');

  if (typeof options.attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      options.attributes.nonce = nonce;
    }
  }

  Object.keys(options.attributes).forEach(function (key) {
    style.setAttribute(key, options.attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {};
  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  var styles = listToStyles(list, options);
  addStylesToDom(styles, options);
  return function update(newList) {
    var mayRemove = [];

    for (var i = 0; i < styles.length; i++) {
      var item = styles[i];
      var domStyle = stylesInDom[item.id];

      if (domStyle) {
        domStyle.refs--;
        mayRemove.push(domStyle);
      }
    }

    if (newList) {
      var newStyles = listToStyles(newList, options);
      addStylesToDom(newStyles, options);
    }

    for (var _i = 0; _i < mayRemove.length; _i++) {
      var _domStyle = mayRemove[_i];

      if (_domStyle.refs === 0) {
        for (var j = 0; j < _domStyle.parts.length; j++) {
          _domStyle.parts[j]();
        }

        delete stylesInDom[_domStyle.id];
      }
    }
  };
};

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=template&id=7ba5bd90&":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90& ***!
  \**********************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "app-content" }, [
    _c(
      "div",
      { staticClass: "card-collection__body" },
      [
        _c(
          "transition",
          { attrs: { name: "fade", mode: "out-in" } },
          [_c("router-view")],
          1
        )
      ],
      1
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=template&id=54cdc180&":
/*!**********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Card.vue?vue&type=template&id=54cdc180& ***!
  \**********************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "card-container" }, [
    _c(
      "header",
      [
        _c(
          "router-link",
          { staticClass: "navigation__back", attrs: { to: "/" } },
          [
            _c("img", {
              attrs: {
                src: __webpack_require__(/*! ../assets/stone-back-button.png */ "./src/assets/stone-back-button.png"),
                alt: ""
              }
            })
          ]
        ),
        _vm._v(" "),
        _c("h1", { staticClass: "heading1" }, [
          _vm._v(_vm._s(_vm.cardContent.title))
        ])
      ],
      1
    ),
    _vm._v(" "),
    _c("div", { staticClass: "card", class: { flipped: this.flipped } }, [
      _c(
        "div",
        { staticClass: "card__front" },
        [
          _c(
            "router-link",
            { staticClass: "navigation__back", attrs: { to: "/collection" } },
            [
              _c("img", {
                attrs: { src: __webpack_require__(/*! ../assets/back-button.png */ "./src/assets/back-button.png"), alt: "" }
              })
            ]
          ),
          _vm._v(" "),
          _c(
            "button",
            { staticClass: "card__front_flip", on: { click: _vm.flipCard } },
            [
              _c("img", {
                attrs: {
                  src: __webpack_require__(/*! ../assets/flip-card-button.png */ "./src/assets/flip-card-button.png"),
                  alt: ""
                }
              })
            ]
          ),
          _vm._v(" "),
          _vm.cardContent.id
            ? _c("div", { staticClass: "card__front_image" }, [
                _c("img", {
                  staticClass: "card__front_image_src",
                  attrs: {
                    src: _vm.getImgUrl(_vm.cardContent.imageFront),
                    alt: "card.title"
                  }
                })
              ])
            : _vm._e()
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "div",
        { staticClass: "card__back" },
        [
          _c(
            "router-link",
            { staticClass: "navigation__back", attrs: { to: "/collection" } },
            [
              _c("img", {
                attrs: { src: __webpack_require__(/*! ../assets/back-button.png */ "./src/assets/back-button.png"), alt: "" }
              })
            ]
          ),
          _vm._v(" "),
          _c(
            "button",
            { staticClass: "card__back_flip", on: { click: _vm.flipCard } },
            [
              _c("img", {
                attrs: {
                  src: __webpack_require__(/*! ../assets/flip-card-button.png */ "./src/assets/flip-card-button.png"),
                  alt: ""
                }
              })
            ]
          ),
          _vm._v(" "),
          _vm.cardContent.id
            ? _c("div", { staticClass: "card__back_image" }, [
                _c("img", {
                  staticClass: "card__back_image_src",
                  attrs: {
                    src: _vm.getImgUrl(_vm.cardContent.imageBack),
                    alt: "card.title"
                  }
                })
              ])
            : _vm._e()
        ],
        1
      )
    ])
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/CardPreview.vue?vue&type=template&id=d558bed0&":
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/CardPreview.vue?vue&type=template&id=d558bed0& ***!
  \*****************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("a", {
    staticClass: "preview-card",
    style: [
      _vm.cardDetails.imageFront
        ? {
            backgroundImage:
              "url(" +
              __webpack_require__("./src/assets sync recursive ^\\.\\/.*$")("./" + _vm.cardDetails.imagePreview) +
              ")"
          }
        : {}
    ],
    attrs: {
      href: _vm.cardDetails.title ? "/#/card/" + _vm.cardDetails.id : "#"
    }
  })
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6&":
/*!*********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6& ***!
  \*********************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "leaderboard-card" }, [
    _c(
      "div",
      {
        class: [
          "leaderboard-card__position",
          _vm.data.position === "1" ||
          _vm.data.position === "2" ||
          _vm.data.position === "3"
            ? "leaderboard-card__position--top-three"
            : ""
        ]
      },
      [
        _vm._v("\n        " + _vm._s(_vm.data.position) + "\n        "),
        _c("span", [_vm._v(_vm._s(_vm.data.ordinal))])
      ]
    ),
    _vm._v(" "),
    _c("div", { staticClass: "leaderboard-card__content" }, [
      _c("div", {
        staticClass: "leaderboard-card__image",
        style: [
          _vm.data.profileImage
            ? {
                backgroundImage:
                  "url(" + __webpack_require__("./src/assets sync recursive ^\\.\\/.*$")("./" + _vm.data.profileImage) + ")"
              }
            : {}
        ]
      }),
      _vm._v(" "),
      _c("div", { staticClass: "leaderboard-card__username" }, [
        _vm._v(_vm._s(_vm.data.username))
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "leaderboard-card__cards-collected" }, [
        _c(
          "span",
          { staticClass: "leaderboard-card__cards-collected__number" },
          [_vm._v(_vm._s(_vm.data.cardsCollected))]
        ),
        _vm._v(" "),
        _c("br"),
        _vm._v("\n            points\n        ")
      ])
    ])
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true&":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true& ***!
  \****************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "navigation" },
    _vm._l(_vm.routes, function(route) {
      return _c(
        "router-link",
        {
          key: route.text,
          staticClass: "navigation__item",
          attrs: { to: route.link }
        },
        [_vm._v("\n        " + _vm._s(route.text) + "\n    ")]
      )
    }),
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Scan.vue?vue&type=template&id=bdfa27a6&scoped=true&":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Scan.vue?vue&type=template&id=bdfa27a6&scoped=true& ***!
  \**********************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "addcard-container" }, [
    !_vm.scannedCard
      ? _c("div", { staticClass: "video-container" }, [
          _c(
            "header",
            [
              _c(
                "router-link",
                { staticClass: "navigation__back", attrs: { to: "/" } },
                [
                  _c("img", {
                    attrs: {
                      src: __webpack_require__(/*! ../assets/stone-back-button.png */ "./src/assets/stone-back-button.png"),
                      alt: ""
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c("h1", { staticClass: "heading1" }, [_vm._v("Scan a code")])
            ],
            1
          ),
          _vm._v(" "),
          _c("video", { attrs: { id: "qrReader" } })
        ])
      : _vm._e(),
    _vm._v(" "),
    _vm.scannedCard
      ? _c(
          "div",
          { staticClass: "card-preview" },
          [
            _c("card", {
              attrs: { "card-id": JSON.stringify(_vm.scannedCard.id) }
            })
          ],
          1
        )
      : _vm._e(),
    _vm._v(" "),
    _vm.scannedCard
      ? _c("h2", { staticClass: "added-text" }, [
          _vm._v(
            "\n        Successfully added " +
              _vm._s(_vm.scannedCard.title) +
              "\n    "
          )
        ])
      : _vm._e()
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Add.vue?vue&type=template&id=764c55d7&scoped=true&":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Add.vue?vue&type=template&id=764c55d7&scoped=true& ***!
  \****************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "add" },
    [
      _c(
        "router-link",
        { staticClass: "navigation__back", attrs: { to: "/" } },
        [
          _c("img", {
            attrs: { src: __webpack_require__(/*! ../assets/stone-back-button.png */ "./src/assets/stone-back-button.png"), alt: "" }
          })
        ]
      ),
      _vm._v(" "),
      _c("h1", { staticClass: "heading1", attrs: { "data-v-fae5bece": "" } }, [
        _vm._v("Add a card")
      ]),
      _vm._v(" "),
      _c("navigation", { attrs: { routes: _vm.routes } })
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=template&id=55026158&":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Collection.vue?vue&type=template&id=55026158& ***!
  \***********************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "collection" }, [
    _c(
      "header",
      [
        _c(
          "router-link",
          { staticClass: "navigation__back", attrs: { to: "/" } },
          [
            _c("img", {
              attrs: {
                src: __webpack_require__(/*! ../assets/stone-back-button.png */ "./src/assets/stone-back-button.png"),
                alt: ""
              }
            })
          ]
        ),
        _vm._v(" "),
        _c("h1", { staticClass: "heading1" }, [_vm._v("Collection")])
      ],
      1
    ),
    _vm._v(" "),
    _c(
      "div",
      { staticClass: "preview-wrapper" },
      _vm._l(_vm.$store.state.base.cards, function(card) {
        return _c("card-preview", {
          key: card.id,
          attrs: { "card-details": card }
        })
      }),
      1
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&":
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true& ***!
  \*****************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "home" },
    [
      _vm._m(0),
      _vm._v(" "),
      _c("navigation", { attrs: { routes: _vm.routes } })
    ],
    1
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("header", [
      _c("img", {
        staticClass: "home__logo",
        attrs: {
          src: __webpack_require__(/*! ../assets/wee-gaitherers-logo.png */ "./src/assets/wee-gaitherers-logo.png"),
          alt: "wee gaitherers logo"
        }
      })
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true&":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "leaderboard" },
    [
      _c(
        "header",
        [
          _c(
            "router-link",
            { staticClass: "navigation__back", attrs: { to: "/" } },
            [
              _c("img", {
                attrs: {
                  src: __webpack_require__(/*! ../assets/stone-back-button.png */ "./src/assets/stone-back-button.png"),
                  alt: ""
                }
              })
            ]
          ),
          _vm._v(" "),
          _c("h1", { staticClass: "heading1" }, [_vm._v("Leaderboard")])
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "transition",
        { attrs: { name: "fade" } },
        [
          _vm.showItems
            ? _c("leaderboard-card", {
                staticClass: "leaderboard-card",
                attrs: {
                  data: _vm.$store.state.base.leaderboardData[5],
                  "data-index": _vm.index
                }
              })
            : _vm._e()
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { staticClass: "heading1" }, [_vm._v("Friends Leaderboard")]),
      _vm._v(" "),
      _c(
        "transition-group",
        {
          style: { "--total": _vm.$store.state.base.leaderboardData.length },
          attrs: { tag: "div", name: "slide-in" }
        },
        [
          _vm._l(_vm.$store.state.base.leaderboardData, function(item, index) {
            return [
              _vm.showItems
                ? _c(
                    "div",
                    { key: index, style: { "--i": index } },
                    [
                      _c("leaderboard-card", {
                        staticClass: "leaderboard-card",
                        attrs: { data: item, "data-index": index }
                      })
                    ],
                    1
                  )
                : _vm._e()
            ]
          })
        ],
        2
      ),
      _vm._v(" "),
      _c("img", { attrs: { src: "", alt: "" } })
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Locations.vue?vue&type=template&id=3b4780d8&scoped=true&":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Locations.vue?vue&type=template&id=3b4780d8&scoped=true& ***!
  \**********************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "locations" }, [
    _c(
      "header",
      [
        _c(
          "router-link",
          { staticClass: "navigation__back", attrs: { to: "/" } },
          [
            _c("img", {
              attrs: {
                src: __webpack_require__(/*! ../assets/stone-back-button.png */ "./src/assets/stone-back-button.png"),
                alt: ""
              }
            })
          ]
        ),
        _vm._v(" "),
        _c("h1", { staticClass: "heading1" }, [_vm._v("Locations")])
      ],
      1
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/SingleCard.vue?vue&type=template&id=5489c532&":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/views/SingleCard.vue?vue&type=template&id=5489c532& ***!
  \***********************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [_c("card", { attrs: { "card-id": _vm.id } })], 1)
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue-router/dist/vue-router.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-router/dist/vue-router.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
  * vue-router v3.1.3
  * (c) 2019 Evan You
  * @license MIT
  */

/*  */
function assert(condition, message) {
  if (!condition) {
    throw new Error("[vue-router] " + message);
  }
}

function warn(condition, message) {
  if ( true && !condition) {
    typeof console !== 'undefined' && console.warn("[vue-router] " + message);
  }
}

function isError(err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1;
}

function isExtendedError(constructor, err) {
  return err instanceof constructor || // _name is to support IE9 too
  err && (err.name === constructor.name || err._name === constructor._name);
}

function extend(a, b) {
  for (var key in b) {
    a[key] = b[key];
  }

  return a;
}

var View = {
  name: 'RouterView',
  functional: true,
  props: {
    name: {
      type: String,
      "default": 'default'
    }
  },
  render: function render(_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data; // used by devtools to display a router-view badge

    data.routerView = true; // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots

    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {}); // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.

    var depth = 0;
    var inactive = false;

    while (parent && parent._routerRoot !== parent) {
      var vnodeData = parent.$vnode && parent.$vnode.data;

      if (vnodeData) {
        if (vnodeData.routerView) {
          depth++;
        }

        if (vnodeData.keepAlive && parent._inactive) {
          inactive = true;
        }
      }

      parent = parent.$parent;
    }

    data.routerViewDepth = depth; // render previous view if the tree is inactive and kept-alive

    if (inactive) {
      return h(cache[name], data, children);
    }

    var matched = route.matched[depth]; // render empty node if no matched route

    if (!matched) {
      cache[name] = null;
      return h();
    }

    var component = cache[name] = matched.components[name]; // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks

    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];

      if (val && current !== vm || !val && current === vm) {
        matched.instances[name] = val;
      }
    } // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;

    (data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    }; // register instance in init hook
    // in case kept-alive component be actived when routes changed


    data.hook.init = function (vnode) {
      if (vnode.data.keepAlive && vnode.componentInstance && vnode.componentInstance !== matched.instances[name]) {
        matched.instances[name] = vnode.componentInstance;
      }
    }; // resolve props


    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);

    if (propsToPass) {
      // clone to prevent mutation
      propsToPass = data.props = extend({}, propsToPass); // pass non-declared props as attrs

      var attrs = data.attrs = data.attrs || {};

      for (var key in propsToPass) {
        if (!component.props || !(key in component.props)) {
          attrs[key] = propsToPass[key];
          delete propsToPass[key];
        }
      }
    }

    return h(component, data, children);
  }
};

function resolveProps(route, config) {
  switch (_typeof(config)) {
    case 'undefined':
      return;

    case 'object':
      return config;

    case 'function':
      return config(route);

    case 'boolean':
      return config ? route.params : undefined;

    default:
      if (true) {
        warn(false, "props in \"" + route.path + "\" is a " + _typeof(config) + ", " + "expecting an object, function or boolean.");
      }

  }
}
/*  */


var encodeReserveRE = /[!'()*]/g;

var encodeReserveReplacer = function encodeReserveReplacer(c) {
  return '%' + c.charCodeAt(0).toString(16);
};

var commaRE = /%2C/g; // fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas

var encode = function encode(str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
};

var decode = decodeURIComponent;

function resolveQuery(query, extraQuery, _parseQuery) {
  if (extraQuery === void 0) extraQuery = {};
  var parse = _parseQuery || parseQuery;
  var parsedQuery;

  try {
    parsedQuery = parse(query || '');
  } catch (e) {
     true && warn(false, e.message);
    parsedQuery = {};
  }

  for (var key in extraQuery) {
    parsedQuery[key] = extraQuery[key];
  }

  return parsedQuery;
}

function parseQuery(query) {
  var res = {};
  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res;
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });
  return res;
}

function stringifyQuery(obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return '';
    }

    if (val === null) {
      return encode(key);
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }

        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&');
    }

    return encode(key) + '=' + encode(val);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&') : null;
  return res ? "?" + res : '';
}
/*  */


var trailingSlashRE = /\/?$/;

function createRoute(record, location, redirectedFrom, router) {
  var stringifyQuery = router && router.options.stringifyQuery;
  var query = location.query || {};

  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || record && record.name,
    meta: record && record.meta || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery),
    matched: record ? formatMatch(record) : []
  };

  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);
  }

  return Object.freeze(route);
}

function clone(value) {
  if (Array.isArray(value)) {
    return value.map(clone);
  } else if (value && _typeof(value) === 'object') {
    var res = {};

    for (var key in value) {
      res[key] = clone(value[key]);
    }

    return res;
  } else {
    return value;
  }
} // the starting route that represents the initial state


var START = createRoute(null, {
  path: '/'
});

function formatMatch(record) {
  var res = [];

  while (record) {
    res.unshift(record);
    record = record.parent;
  }

  return res;
}

function getFullPath(ref, _stringifyQuery) {
  var path = ref.path;
  var query = ref.query;
  if (query === void 0) query = {};
  var hash = ref.hash;
  if (hash === void 0) hash = '';
  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash;
}

function isSameRoute(a, b) {
  if (b === START) {
    return a === b;
  } else if (!b) {
    return false;
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && a.hash === b.hash && isObjectEqual(a.query, b.query);
  } else if (a.name && b.name) {
    return a.name === b.name && a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params);
  } else {
    return false;
  }
}

function isObjectEqual(a, b) {
  if (a === void 0) a = {};
  if (b === void 0) b = {}; // handle null value #1566

  if (!a || !b) {
    return a === b;
  }

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);

  if (aKeys.length !== bKeys.length) {
    return false;
  }

  return aKeys.every(function (key) {
    var aVal = a[key];
    var bVal = b[key]; // check nested equality

    if (_typeof(aVal) === 'object' && _typeof(bVal) === 'object') {
      return isObjectEqual(aVal, bVal);
    }

    return String(aVal) === String(bVal);
  });
}

function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}

function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }

  return true;
}
/*  */


function resolvePath(relative, base, append) {
  var firstChar = relative.charAt(0);

  if (firstChar === '/') {
    return relative;
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative;
  }

  var stack = base.split('/'); // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)

  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  } // resolve relative path


  var segments = relative.replace(/^\//, '').split('/');

  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];

    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  } // ensure leading slash


  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/');
}

function parsePath(path) {
  var hash = '';
  var query = '';
  var hashIndex = path.indexOf('#');

  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');

  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  };
}

function cleanPath(path) {
  return path.replace(/\/\//g, '/');
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};
/**
 * Expose `pathToRegexp`.
 */


var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length; // Ignore already escaped sequences.

    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7]; // Push the current path onto the tokens.

    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  } // Match any characters still remaining.


  if (index < str.length) {
    path += str.substr(index);
  } // If the path exists, push it onto the end.


  if (path) {
    tokens.push(path);
  }

  return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */


function compile(str, options) {
  return tokensToFunction(parse(str, options));
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */


function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */


function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Expose a method for transforming tokens into the path function.
 */


function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length); // Compile all the patterns before compilation.

  for (var i = 0; i < tokens.length; i++) {
    if (_typeof(tokens[i]) === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */


function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */


function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */


function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */


function flags(options) {
  return options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */


function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
  return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */


function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = ''; // Iterate over the tokens and create our regexp string.

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';
      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".

  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */


function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path,
    /** @type {!Array} */
    keys);
  }

  if (isarray(path)) {
    return arrayToRegexp(
    /** @type {!Array} */
    path,
    /** @type {!Array} */
    keys, options);
  }

  return stringToRegexp(
  /** @type {string} */
  path,
  /** @type {!Array} */
  keys, options);
}

pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;
/*  */
// $flow-disable-line

var regexpCompileCache = Object.create(null);

function fillParams(path, params, routeMsg) {
  params = params || {};

  try {
    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = pathToRegexp_1.compile(path)); // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}

    if (params.pathMatch) {
      params[0] = params.pathMatch;
    }

    return filler(params, {
      pretty: true
    });
  } catch (e) {
    if (true) {
      warn(false, "missing param for " + routeMsg + ": " + e.message);
    }

    return '';
  } finally {
    // delete the 0 if it was added
    delete params[0];
  }
}
/*  */


function normalizeLocation(raw, current, append, router) {
  var next = typeof raw === 'string' ? {
    path: raw
  } : raw; // named target

  if (next._normalized) {
    return next;
  } else if (next.name) {
    return extend({}, raw);
  } // relative params


  if (!next.path && next.params && current) {
    next = extend({}, next);
    next._normalized = true;
    var params = extend(extend({}, current.params), next.params);

    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, "path " + current.path);
    } else if (true) {
      warn(false, "relative params navigation requires a current route.");
    }

    return next;
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = current && current.path || '/';
  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;
  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);
  var hash = next.hash || parsedPath.hash;

  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  };
}
/*  */
// work around weird flow bug


var toTypes = [String, Object];
var eventTypes = [String, Array];

var noop = function noop() {};

var Link = {
  name: 'RouterLink',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      "default": 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      "default": 'click'
    }
  },
  render: function render(h) {
    var this$1 = this;
    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;
    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass; // Support global empty active class

    var activeClassFallback = globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null ? 'router-link-exact-active' : globalExactActiveClass;
    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;
    var compareTarget = route.redirectedFrom ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router) : route;
    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);

    var handler = function handler(e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location, noop);
        } else {
          router.push(location, noop);
        }
      }
    };

    var on = {
      click: guardEvent
    };

    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = {
      "class": classes
    };
    var scopedSlot = !this.$scopedSlots.$hasNormal && this.$scopedSlots["default"] && this.$scopedSlots["default"]({
      href: href,
      route: route,
      navigate: handler,
      isActive: classes[activeClass],
      isExactActive: classes[exactActiveClass]
    });

    if (scopedSlot) {
      if (scopedSlot.length === 1) {
        return scopedSlot[0];
      } else if (scopedSlot.length > 1 || !scopedSlot.length) {
        if (true) {
          warn(false, "RouterLink with to=\"" + this.props.to + "\" is trying to use a scoped slot but it didn't provide exactly one child.");
        }

        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot);
      }
    }

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = {
        href: href
      };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots["default"]);

      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var aData = a.data = extend({}, a.data);
        aData.on = aData.on || {}; // transform existing events in both objects into arrays so we can push later

        for (var event in aData.on) {
          var handler$1 = aData.on[event];

          if (event in on) {
            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];
          }
        } // append new listeners for router-link


        for (var event$1 in on) {
          if (event$1 in aData.on) {
            // on[event] is always a function
            aData.on[event$1].push(on[event$1]);
          } else {
            aData.on[event$1] = handler;
          }
        }

        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots["default"]);
  }
};

function guardEvent(e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
    return;
  } // don't redirect when preventDefault called


  if (e.defaultPrevented) {
    return;
  } // don't redirect on right click


  if (e.button !== undefined && e.button !== 0) {
    return;
  } // don't redirect if `target="_blank"`


  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');

    if (/\b_blank\b/i.test(target)) {
      return;
    }
  } // this may be a Weex event which doesn't have this method


  if (e.preventDefault) {
    e.preventDefault();
  }

  return true;
}

function findAnchor(children) {
  if (children) {
    var child;

    for (var i = 0; i < children.length; i++) {
      child = children[i];

      if (child.tag === 'a') {
        return child;
      }

      if (child.children && (child = findAnchor(child.children))) {
        return child;
      }
    }
  }
}

var _Vue;

function install(Vue) {
  if (install.installed && _Vue === Vue) {
    return;
  }

  install.installed = true;
  _Vue = Vue;

  var isDef = function isDef(v) {
    return v !== undefined;
  };

  var registerInstance = function registerInstance(vm, callVal) {
    var i = vm.$options._parentVnode;

    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;

        this._router.init(this);

        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = this.$parent && this.$parent._routerRoot || this;
      }

      registerInstance(this, this);
    },
    destroyed: function destroyed() {
      registerInstance(this);
    }
  });
  Object.defineProperty(Vue.prototype, '$router', {
    get: function get() {
      return this._routerRoot._router;
    }
  });
  Object.defineProperty(Vue.prototype, '$route', {
    get: function get() {
      return this._routerRoot._route;
    }
  });
  Vue.component('RouterView', View);
  Vue.component('RouterLink', Link);
  var strats = Vue.config.optionMergeStrategies; // use the same hook merging strategy for route hooks

  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}
/*  */


var inBrowser = typeof window !== 'undefined';
/*  */

function createRouteMap(routes, oldPathList, oldPathMap, oldNameMap) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || []; // $flow-disable-line

  var pathMap = oldPathMap || Object.create(null); // $flow-disable-line

  var nameMap = oldNameMap || Object.create(null);
  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  }); // ensure wildcard routes are always at the end

  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  if (true) {
    // warn if routes do not include leading slashes
    var found = pathList // check for missing leading slash
    .filter(function (path) {
      return path && path.charAt(0) !== '*' && path.charAt(0) !== '/';
    });

    if (found.length > 0) {
      var pathNames = found.map(function (path) {
        return "- " + path;
      }).join('\n');
      warn(false, "Non-nested routes must include a leading slash character. Fix the following routes: \n" + pathNames);
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  };
}

function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {
  var path = route.path;
  var name = route.name;

  if (true) {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(typeof route.component !== 'string', "route config \"component\" for path: " + String(path || name) + " cannot be a " + "string id. Use an actual component instead.");
  }

  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || {
      "default": route.component
    },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null ? {} : route.components ? route.props : {
      "default": route.props
    }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (true) {
      if (route.name && !route.redirect && route.children.some(function (child) {
        return /^\/?$/.test(child.path);
      })) {
        warn(false, "Named Route '" + route.name + "' has a default child route. " + "When navigating to this named route (:to=\"{name: '" + route.name + "'\"), " + "the default child route will not be rendered. Remove the name from " + "this route and use the name of the default child route for named " + "links instead.");
      }
    }

    route.children.forEach(function (child) {
      var childMatchAs = matchAs ? cleanPath(matchAs + "/" + child.path) : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];

    for (var i = 0; i < aliases.length; ++i) {
      var alias = aliases[i];

      if ( true && alias === path) {
        warn(false, "Found an alias with the same value as the path: \"" + path + "\". You have to remove that alias. It will be ignored in development."); // skip in dev to make it work

        continue;
      }

      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || '/' // matchAs
      );
    }
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if ( true && !matchAs) {
      warn(false, "Duplicate named routes definition: " + "{ name: \"" + name + "\", path: \"" + record.path + "\" }");
    }
  }
}

function compileRouteRegex(path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);

  if (true) {
    var keys = Object.create(null);
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], "Duplicate param keys in route with path: \"" + path + "\"");
      keys[key.name] = true;
    });
  }

  return regex;
}

function normalizePath(path, parent, strict) {
  if (!strict) {
    path = path.replace(/\/$/, '');
  }

  if (path[0] === '/') {
    return path;
  }

  if (parent == null) {
    return path;
  }

  return cleanPath(parent.path + "/" + path);
}
/*  */


function createMatcher(routes, router) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes(routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match(raw, currentRoute, redirectedFrom) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];

      if (true) {
        warn(record, "Route with name '" + name + "' does not exist");
      }

      if (!record) {
        return _createRoute(null, location);
      }

      var paramNames = record.regex.keys.filter(function (key) {
        return !key.optional;
      }).map(function (key) {
        return key.name;
      });

      if (_typeof(location.params) !== 'object') {
        location.params = {};
      }

      if (currentRoute && _typeof(currentRoute.params) === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      location.path = fillParams(record.path, location.params, "named route \"" + name + "\"");
      return _createRoute(record, location, redirectedFrom);
    } else if (location.path) {
      location.params = {};

      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];

        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom);
        }
      }
    } // no match


    return _createRoute(null, location);
  }

  function redirect(record, location) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function' ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = {
        path: redirect
      };
    }

    if (!redirect || _typeof(redirect) !== 'object') {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];

      if (true) {
        assert(targetRecord, "redirect failed: named route \"" + name + "\" not found.");
      }

      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location);
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record); // 2. resolve params

      var resolvedPath = fillParams(rawPath, params, "redirect route with path \"" + rawPath + "\""); // 3. rematch with existing query and hash

      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location);
    } else {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }
  }

  function alias(record, location, matchAs) {
    var aliasedPath = fillParams(matchAs, location.params, "aliased route with path \"" + matchAs + "\"");
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });

    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location);
    }

    return _createRoute(null, location);
  }

  function _createRoute(record, location, redirectedFrom) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location);
    }

    if (record && record.matchAs) {
      return alias(record, location, record.matchAs);
    }

    return createRoute(record, location, redirectedFrom, router);
  }

  return {
    match: match,
    addRoutes: addRoutes
  };
}

function matchRoute(regex, path, params) {
  var m = path.match(regex);

  if (!m) {
    return false;
  } else if (!params) {
    return true;
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];

    if (key) {
      // Fix #1994: using * with props: true generates a param named 0
      params[key.name || 'pathMatch'] = val;
    }
  }

  return true;
}

function resolveRecordPath(path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true);
}
/*  */
// use User Timing api (if present) for more accurate key precision


var Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;

function genStateKey() {
  return Time.now().toFixed(3);
}

var _key = genStateKey();

function getStateKey() {
  return _key;
}

function setStateKey(key) {
  return _key = key;
}
/*  */


var positionStore = Object.create(null);

function setupScroll() {
  // Fix for #1585 for Firefox
  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with
  // window.location.protocol + '//' + window.location.host
  // location.host contains the port and location.hostname doesn't
  var protocolAndPath = window.location.protocol + '//' + window.location.host;
  var absolutePath = window.location.href.replace(protocolAndPath, '');
  window.history.replaceState({
    key: getStateKey()
  }, '', absolutePath);
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();

    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll(router, to, from, isPop) {
  if (!router.app) {
    return;
  }

  var behavior = router.options.scrollBehavior;

  if (!behavior) {
    return;
  }

  if (true) {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  } // wait until re-render finishes before scrolling


  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior.call(router, to, from, isPop ? position : null);

    if (!shouldScroll) {
      return;
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll.then(function (shouldScroll) {
        scrollToPosition(shouldScroll, position);
      })["catch"](function (err) {
        if (true) {
          assert(false, err.toString());
        }
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition() {
  var key = getStateKey();

  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition() {
  var key = getStateKey();

  if (key) {
    return positionStore[key];
  }
}

function getElementPosition(el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  };
}

function isValidPosition(obj) {
  return isNumber(obj.x) || isNumber(obj.y);
}

function normalizePosition(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  };
}

function normalizeOffset(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  };
}

function isNumber(v) {
  return typeof v === 'number';
}

var hashStartsWithNumberRE = /^#\d/;

function scrollToPosition(shouldScroll, position) {
  var isObject = _typeof(shouldScroll) === 'object';

  if (isObject && typeof shouldScroll.selector === 'string') {
    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]
    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector
    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line
    ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line
    : document.querySelector(shouldScroll.selector);

    if (el) {
      var offset = shouldScroll.offset && _typeof(shouldScroll.offset) === 'object' ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    window.scrollTo(position.x, position.y);
  }
}
/*  */


var supportsPushState = inBrowser && function () {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }

  return window.history && 'pushState' in window.history;
}();

function pushState(url, replace) {
  saveScrollPosition(); // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls

  var history = window.history;

  try {
    if (replace) {
      history.replaceState({
        key: getStateKey()
      }, '', url);
    } else {
      history.pushState({
        key: setStateKey(genStateKey())
      }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState(url) {
  pushState(url, true);
}
/*  */


function runQueue(queue, fn, cb) {
  var step = function step(index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };

  step(0);
}
/*  */


function resolveAsyncComponents(matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;
    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;
        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef["default"];
          } // save resolved on async factory in case it's used elsewhere


          def.resolved = typeof resolvedDef === 'function' ? resolvedDef : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;

          if (pending <= 0) {
            next();
          }
        });
        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
           true && warn(false, msg);

          if (!error) {
            error = isError(reason) ? reason : new Error(msg);
            next(error);
          }
        });
        var res;

        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }

        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;

            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) {
      next();
    }
  };
}

function flatMapComponents(matched, fn) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return fn(m.components[key], m.instances[key], m, key);
    });
  }));
}

function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}

var hasSymbol = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';

function isESModule(obj) {
  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';
} // in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.


function once(fn) {
  var called = false;
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    if (called) {
      return;
    }

    called = true;
    return fn.apply(this, args);
  };
}

var NavigationDuplicated =
/*@__PURE__*/
function (Error) {
  function NavigationDuplicated(normalizedLocation) {
    Error.call(this);
    this.name = this._name = 'NavigationDuplicated'; // passing the message to super() doesn't seem to work in the transpiled version

    this.message = "Navigating to current location (\"" + normalizedLocation.fullPath + "\") is not allowed"; // add a stack property so services like Sentry can correctly display it

    Object.defineProperty(this, 'stack', {
      value: new Error().stack,
      writable: true,
      configurable: true
    }); // we could also have used
    // Error.captureStackTrace(this, this.constructor)
    // but it only exists on node and chrome
  }

  if (Error) NavigationDuplicated.__proto__ = Error;
  NavigationDuplicated.prototype = Object.create(Error && Error.prototype);
  NavigationDuplicated.prototype.constructor = NavigationDuplicated;
  return NavigationDuplicated;
}(Error); // support IE9


NavigationDuplicated._name = 'NavigationDuplicated';
/*  */

var History = function History(router, base) {
  this.router = router;
  this.base = normalizeBase(base); // start with a route object that stands for "nowhere"

  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen(cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady(cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);

    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError(errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
  var this$1 = this;
  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL(); // fire ready cbs once

    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) {
        cb(route);
      });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }

    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) {
        cb(err);
      });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
  var this$1 = this;
  var current = this.current;

  var abort = function abort(err) {
    // after merging https://github.com/vuejs/vue-router/pull/2771 we
    // When the user navigates through history through back/forward buttons
    // we do not want to throw the error. We only throw it if directly calling
    // push/replace. That's why it's not included in isError
    if (!isExtendedError(NavigationDuplicated, err) && isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }

    onAbort && onAbort(err);
  };

  if (isSameRoute(route, current) && // in the case the route map has been dynamically appended to
  route.matched.length === current.matched.length) {
    this.ensureURL();
    return abort(new NavigationDuplicated(route));
  }

  var ref = resolveQueue(this.current.matched, route.matched);
  var updated = ref.updated;
  var deactivated = ref.deactivated;
  var activated = ref.activated;
  var queue = [].concat( // in-component leave guards
  extractLeaveGuards(deactivated), // global before hooks
  this.router.beforeHooks, // in-component update hooks
  extractUpdateHooks(updated), // in-config enter guards
  activated.map(function (m) {
    return m.beforeEnter;
  }), // async components
  resolveAsyncComponents(activated));
  this.pending = route;

  var iterator = function iterator(hook, next) {
    if (this$1.pending !== route) {
      return abort();
    }

    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (typeof to === 'string' || _typeof(to) === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();

          if (_typeof(to) === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];

    var isValid = function isValid() {
      return this$1.current === route;
    }; // wait until async components are resolved before
    // extracting in-component enter guards


    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort();
      }

      this$1.pending = null;
      onComplete(route);

      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) {
            cb();
          });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute(route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase(base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = baseEl && baseEl.getAttribute('href') || '/'; // strip full URL origin

      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  } // make sure there's the starting slash


  if (base.charAt(0) !== '/') {
    base = '/' + base;
  } // remove trailing slash


  return base.replace(/\/$/, '');
}

function resolveQueue(current, next) {
  var i;
  var max = Math.max(current.length, next.length);

  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break;
    }
  }

  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  };
}

function extractGuards(records, name, bind, reverse) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);

    if (guard) {
      return Array.isArray(guard) ? guard.map(function (guard) {
        return bind(guard, instance, match, key);
      }) : bind(guard, instance, match, key);
    }
  });
  return flatten(reverse ? guards.reverse() : guards);
}

function extractGuard(def, key) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }

  return def.options[key];
}

function extractLeaveGuards(deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true);
}

function extractUpdateHooks(updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard);
}

function bindGuard(guard, instance) {
  if (instance) {
    return function boundRouteGuard() {
      return guard.apply(instance, arguments);
    };
  }
}

function extractEnterGuards(activated, cbs, isValid) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid);
  });
}

function bindEnterGuard(guard, match, key, cbs, isValid) {
  return function routeEnterGuard(to, from, next) {
    return guard(to, from, function (cb) {
      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }

      next(cb);
    });
  };
}

function poll(cb, // somehow flow cannot infer this is a function
instances, key, isValid) {
  if (instances[key] && !instances[key]._isBeingDestroyed // do not reuse being destroyed instance
  ) {
      cb(instances[key]);
    } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}
/*  */


var HTML5History =
/*@__PURE__*/
function (History) {
  function HTML5History(router, base) {
    var this$1 = this;
    History.call(this, router, base);
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    var initLocation = getLocation(this.base);
    window.addEventListener('popstate', function (e) {
      var current = this$1.current; // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.

      var location = getLocation(this$1.base);

      if (this$1.current === START && location === initLocation) {
        return;
      }

      this$1.transitionTo(location, function (route) {
        if (supportsScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }

  if (History) HTML5History.__proto__ = History;
  HTML5History.prototype = Object.create(History && History.prototype);
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go(n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL(push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
    return getLocation(this.base);
  };

  return HTML5History;
}(History);

function getLocation(base) {
  var path = decodeURI(window.location.pathname);

  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }

  return (path || '/') + window.location.search + window.location.hash;
}
/*  */


var HashHistory =
/*@__PURE__*/
function (History) {
  function HashHistory(router, base, fallback) {
    History.call(this, router, base); // check history fallback deeplinking

    if (fallback && checkFallback(this.base)) {
      return;
    }

    ensureSlash();
  }

  if (History) HashHistory.__proto__ = History;
  HashHistory.prototype = Object.create(History && History.prototype);
  HashHistory.prototype.constructor = HashHistory; // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early

  HashHistory.prototype.setupListeners = function setupListeners() {
    var this$1 = this;
    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {
      var current = this$1.current;

      if (!ensureSlash()) {
        return;
      }

      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }

        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    });
  };

  HashHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go(n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL(push) {
    var current = this.current.fullPath;

    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    return getHash();
  };

  return HashHistory;
}(History);

function checkFallback(base) {
  var location = getLocation(base);

  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true;
  }
}

function ensureSlash() {
  var path = getHash();

  if (path.charAt(0) === '/') {
    return true;
  }

  replaceHash('/' + path);
  return false;
}

function getHash() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#'); // empty path

  if (index < 0) {
    return '';
  }

  href = href.slice(index + 1); // decode the hash but not the search or hash
  // as search(query) is already decoded
  // https://github.com/vuejs/vue-router/issues/2708

  var searchIndex = href.indexOf('?');

  if (searchIndex < 0) {
    var hashIndex = href.indexOf('#');

    if (hashIndex > -1) {
      href = decodeURI(href.slice(0, hashIndex)) + href.slice(hashIndex);
    } else {
      href = decodeURI(href);
    }
  } else {
    if (searchIndex > -1) {
      href = decodeURI(href.slice(0, searchIndex)) + href.slice(searchIndex);
    }
  }

  return href;
}

function getUrl(path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return base + "#" + path;
}

function pushHash(path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash(path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}
/*  */


var AbstractHistory =
/*@__PURE__*/
function (History) {
  function AbstractHistory(router, base) {
    History.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if (History) AbstractHistory.__proto__ = History;
  AbstractHistory.prototype = Object.create(History && History.prototype);
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go(n) {
    var this$1 = this;
    var targetIndex = this.index + n;

    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return;
    }

    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    }, function (err) {
      if (isExtendedError(NavigationDuplicated, err)) {
        this$1.index = targetIndex;
      }
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/';
  };

  AbstractHistory.prototype.ensureURL = function ensureURL() {// noop
  };

  return AbstractHistory;
}(History);
/*  */


var VueRouter = function VueRouter(options) {
  if (options === void 0) options = {};
  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);
  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;

  if (this.fallback) {
    mode = 'hash';
  }

  if (!inBrowser) {
    mode = 'abstract';
  }

  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break;

    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break;

    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break;

    default:
      if (true) {
        assert(false, "invalid mode: " + mode);
      }

  }
};

var prototypeAccessors = {
  currentRoute: {
    configurable: true
  }
};

VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom);
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current;
};

VueRouter.prototype.init = function init(app
/* Vue component instance */
) {
  var this$1 = this;
   true && assert(install.installed, "not installed. Make sure to call `Vue.use(VueRouter)` " + "before creating root instance.");
  this.apps.push(app); // set up app destroyed handler
  // https://github.com/vuejs/vue-router/issues/2639

  app.$once('hook:destroyed', function () {
    // clean out app from this.apps array once destroyed
    var index = this$1.apps.indexOf(app);

    if (index > -1) {
      this$1.apps.splice(index, 1);
    } // ensure we still have a main app or null if no apps
    // we do not release the router so it can be reused


    if (this$1.app === app) {
      this$1.app = this$1.apps[0] || null;
    }
  }); // main app previously initialized
  // return as we don't need to set up new history listener

  if (this.app) {
    return;
  }

  this.app = app;
  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function setupHashListener() {
      history.setupListeners();
    };

    history.transitionTo(history.getCurrentLocation(), setupHashListener, setupHashListener);
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach(fn) {
  return registerHook(this.beforeHooks, fn);
};

VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
  return registerHook(this.resolveHooks, fn);
};

VueRouter.prototype.afterEach = function afterEach(fn) {
  return registerHook(this.afterHooks, fn);
};

VueRouter.prototype.onReady = function onReady(cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError(errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push(location, onComplete, onAbort) {
  var this$1 = this; // $flow-disable-line

  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.push(location, resolve, reject);
    });
  } else {
    this.history.push(location, onComplete, onAbort);
  }
};

VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
  var this$1 = this; // $flow-disable-line

  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.replace(location, resolve, reject);
    });
  } else {
    this.history.replace(location, onComplete, onAbort);
  }
};

VueRouter.prototype.go = function go(n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back() {
  this.go(-1);
};

VueRouter.prototype.forward = function forward() {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;

  if (!route) {
    return [];
  }

  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key];
    });
  }));
};

VueRouter.prototype.resolve = function resolve(to, current, append) {
  current = current || this.history.current;
  var location = normalizeLocation(to, current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  };
};

VueRouter.prototype.addRoutes = function addRoutes(routes) {
  this.matcher.addRoutes(routes);

  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties(VueRouter.prototype, prototypeAccessors);

function registerHook(list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);

    if (i > -1) {
      list.splice(i, 1);
    }
  };
}

function createHref(base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path;
}

VueRouter.install = install;
VueRouter.version = '3.1.3';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ __webpack_exports__["default"] = (VueRouter);

/***/ }),

/***/ "./node_modules/vue/dist/vue.esm.js":
/*!******************************************!*\
  !*** ./node_modules/vue/dist/vue.esm.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  _typeof(value) === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val["catch"] === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function identity(_) {
  return _;
};
/**
 * Generate a string containing static keys from compiler modules.
 */


function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child["extends"]) {
      parent = mergeOptions(parent, child["extends"], vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop["default"]; // warn against non-factory defaults for Object & Array

  if ( true && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = _typeof(value);

    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) {
    args[len] = arguments[len];
  }

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res["catch"](function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function timerFunc() {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function timerFunc() {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function timerFunc() {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function timerFunc() {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */


var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };

    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function warnReservedPrefix(target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key]["default"];
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots["default"] || (slots["default"] = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function normalized() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && _typeof(res) === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options["abstract"])) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function merged(a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      "default": children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data["class"])) {
    traverse(data["class"]);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp["default"];
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function forceRender(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options["abstract"]) {
    while (parent.$options["abstract"] && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options["abstract"]) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function getNow() {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + _typeof(methods[key]) + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor["super"]) {
    var superOptions = resolveConstructorOptions(Ctor["super"]);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  "abstract": true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots["default"];
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue["delete"] = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.10';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function mustUseProp(tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function convertEnumeratedValue(key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function isXlink(name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function getXlinkProp(name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function isFalsyAttrValue(val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data["class"]);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    "class": isDef(child["class"]) ? [child["class"], parent["class"]] : parent["class"]
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isPreTag = function isPreTag(tag) {
  return tag === 'pre';
};

var isReservedTag = function isReservedTag(tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
       true && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function blocker(e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data["class"]) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData["class"]))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);

    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;
          break;
        // "

        case 0x27:
          inSingle = true;
          break;
        // '

        case 0x60:
          inTemplateString = true;
          break;
        // `

        case 0x28:
          paren++;
          break;
        // (

        case 0x29:
          paren--;
          break;
        // )

        case 0x5B:
          square++;
          break;
        // [

        case 0x5D:
          square--;
          break;
        // ]

        case 0x7B:
          curly++;
          break;
        // {

        case 0x7D:
          curly--;
          break;
        // }
      }

      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0; // find first non-whitespace prev char

        for (; j >= 0; j--) {
          p = exp.charAt(j);

          if (p !== ' ') {
            break;
          }
        }

        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');

  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}
/*  */

/* eslint-disable no-unused-vars */


function baseWarn(msg, range) {
  console.error("[Vue compiler]: " + msg);
}
/* eslint-enable no-unused-vars */


function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
}

function addAttr(el, name, value, range, dynamic) {
  var attrs = dynamic ? el.dynamicAttrs || (el.dynamicAttrs = []) : el.attrs || (el.attrs = []);
  attrs.push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
} // add a raw attr (use this in preTransforms)


function addRawAttr(el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({
    name: name,
    value: value
  }, range));
}

function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker(symbol, name, dynamic) {
  return dynamic ? "_p(" + name + ",\"" + symbol + "\")" : symbol + name; // mark the event as captured
}

function addHandler(el, name, value, modifiers, important, warn, range, dynamic) {
  modifiers = modifiers || emptyObject; // warn prevent and passive modifier

  /* istanbul ignore if */

  if ( true && warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.', range);
  } // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.


  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  } // check capture modifier


  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }

  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */


  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;

  if (modifiers["native"]) {
    delete modifiers["native"];
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({
    value: value.trim(),
    dynamic: dynamic
  }, range);

  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */

  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr(el, name) {
  return el.rawAttrsMap[':' + name] || el.rawAttrsMap['v-bind:' + name] || el.rawAttrsMap[name];
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);

  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);

    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
} // note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.


function getAndRemoveAttr(el, name, removeFromMap) {
  var val;

  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;

    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }

  if (removeFromMap) {
    delete el.attrsMap[name];
  }

  return val;
}

function getAndRemoveAttrByRegex(el, name) {
  var list = el.attrsList;

  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];

    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr;
    }
  }
}

function rangeSetItem(item, range) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }

    if (range.end != null) {
      item.end = range.end;
    }
  }

  return item;
}
/*  */

/**
 * Cross-platform code generation for component v-model
 */


function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;
  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;

  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: "(" + value + ")",
    expression: JSON.stringify(value),
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}
/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */


function genAssignmentCode(value, assignment) {
  var res = parseModel(value);

  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}
/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */


var len, str, chr, index$1, expressionPos, expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');

    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */

    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;

  while (!eof()) {
    chr = next();

    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }

    if (chr === 0x5B) {
      inBracket++;
    }

    if (chr === 0x5D) {
      inBracket--;
    }

    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;

  while (!eof()) {
    chr = next();

    if (chr === stringQuote) {
      break;
    }
  }
}
/*  */


var warn$1; // in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model(el, dir, _warn) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (true) {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1("<" + el.tag + " v-model=\"" + value + "\" type=\"file\">:\n" + "File inputs are read only. Use a v-on:change listener instead.", el.rawAttrsMap['v-model']);
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers); // component v-model doesn't need extra runtime

    return false;
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers); // component v-model doesn't need extra runtime

    return false;
  } else if (true) {
    warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "v-model is not supported on this element type. " + 'If you are working with contenteditable, it\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.', el.rawAttrsMap['v-model']);
  } // ensure runtime directive metadata


  return true;
}

function genCheckboxModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked', "Array.isArray(" + value + ")" + "?_i(" + value + "," + valueBinding + ")>-1" + (trueValueBinding === 'true' ? ":(" + value + ")" : ":_q(" + value + "," + trueValueBinding + ")"));
  addHandler(el, 'change', "var $$a=" + value + "," + '$$el=$event.target,' + "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" + 'if(Array.isArray($$a)){' + "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," + '$$i=_i($$a,$$v);' + "if($$el.checked){$$i<0&&(" + genAssignmentCode(value, '$$a.concat([$$v])') + ")}" + "else{$$i>-1&&(" + genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))') + ")}" + "}else{" + genAssignmentCode(value, '$$c') + "}", null, true);
}

function genRadioModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? "_n(" + valueBinding + ")" : valueBinding;
  addProp(el, 'checked', "_q(" + value + "," + valueBinding + ")");
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" + ".call($event.target.options,function(o){return o.selected})" + ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" + "return " + (number ? '_n(val)' : 'val') + "})";
  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + genAssignmentCode(value, assignment);
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel(el, value, modifiers) {
  var type = el.attrsMap.type; // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type

  if (true) {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];

    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " + 'because the latter already expands to a value binding internally', el.rawAttrsMap[binding]);
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';
  var valueExpression = '$event.target.value';

  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);

  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', "(" + value + ")");
  addHandler(el, event, code, null, true);

  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.


function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecesarry `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function setProp(el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (_typeof(def$$1) === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function end() {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function onEnd(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
     true && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options["abstract"]) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function isNotTextNode(c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function isVShowDirective(d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  "abstract": true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots["default"];

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots["default"] || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (true) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ( true && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;

  if (!tagRE.test(text)) {
    return;
  }

  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;

  while (match = tagRE.exec(text)) {
    index = match.index; // push text token

    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    } // tag token


    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({
      '@binding': exp
    });
    lastIndex = index + match[0].length;
  }

  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }

  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}
/*  */


function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');

  if ( true && staticClass) {
    var res = parseText(staticClass, options.delimiters);

    if (res) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.', el.rawAttrsMap['class']);
    }
  }

  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }

  var classBinding = getBindingAttr(el, 'class', false
  /* getStatic */
  );

  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData(el) {
  var data = '';

  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }

  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }

  return data;
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};
/*  */

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');

  if (staticStyle) {
    /* istanbul ignore if */
    if (true) {
      var res = parseText(staticStyle, options.delimiters);

      if (res) {
        warn("style=\"" + staticStyle + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style="{{ val }}">, use <div :style="val">.', el.rawAttrsMap['style']);
      }
    }

    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false
  /* getStatic */
  );

  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1(el) {
  var data = '';

  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }

  if (el.styleBinding) {
    data += "style:(" + el.styleBinding + "),";
  }

  return data;
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};
/*  */

var decoder;
var he = {
  decode: function decode(html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent;
  }
};
/*  */

var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr'); // Elements that you can, intentionally, leave open
// (and which close themselves)

var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'); // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');
/**
 * Not type-checking this file because it's mostly vendor code.
 */
// Regular Expressions for parsing tags and attributes

var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + unicodeRegExp.source + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i; // #7298: escape - to avoid being pased as HTML comment when inlined in page

var comment = /^<!\--/;
var conditionalComment = /^<!\[/; // Special Elements (can contain anything)

var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};
var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g; // #5992

var isIgnoreNewlineTag = makeMap('pre,textarea', true);

var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;

  while (html) {
    last = html; // Make sure we're not in a plaintext content element like script/style

    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');

      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }

            advance(commentEnd + 3);
            continue;
          }
        } // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment


        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        } // Doctype:


        var doctypeMatch = html.match(doctype);

        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        } // End tag:


        var endTagMatch = html.match(endTag);

        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        } // Start tag:


        var startTagMatch = parseStartTag();

        if (startTagMatch) {
          handleStartTag(startTagMatch);

          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }

          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;

      if (textEnd >= 0) {
        rest = html.slice(textEnd);

        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);

          if (next < 0) {
            break;
          }

          textEnd += next;
          rest = html.slice(textEnd);
        }

        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;

        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }

        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }

        if (options.chars) {
          options.chars(text);
        }

        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);

      if ( true && !stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"", {
          start: index + html.length
        });
      }

      break;
    }
  } // Clean up any remaining tags


  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);

    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;

      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }

      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }

      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;
    var l = match.attrs.length;
    var attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };

      if ( true && options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({
        tag: tagName,
        lowerCasedTag: tagName.toLowerCase(),
        attrs: attrs,
        start: match.start,
        end: match.end
      });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;

    if (start == null) {
      start = index;
    }

    if (end == null) {
      end = index;
    } // Find the closest opened tag of the same type


    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();

      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ( true && (i > pos || !tagName) && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.", {
            start: stack[i].start,
            end: stack[i].end
          });
        }

        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      } // Remove the open elements from the stack


      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }

      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}
/*  */


var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;
var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;
var slotRE = /^v-slot(:|$)|^#/;
var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;
var invalidAttributeRE = /[\s"'<>\/=]/;
var decodeHTMLCached = cached(he.decode);
var emptySlotScopeToken = "_empty_"; // configurable state

var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  };
}
/**
 * Convert HTML string to AST.
 */


function parse(template, options) {
  warn$2 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;

  maybeComponent = function maybeComponent(el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;
  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement(element) {
    trimEndingWhitespace(element);

    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    } // tree management


    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root["if"] && (element.elseif || element["else"])) {
        if (true) {
          checkRootConstraints(element);
        }

        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else if (true) {
        warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.", {
          start: element.start
        });
      }
    }

    if (currentParent && !element.forbidden) {
      if (element.elseif || element["else"]) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }

        currentParent.children.push(element);
        element.parent = currentParent;
      }
    } // final children cleanup
    // filter out scoped slots


    element.children = element.children.filter(function (c) {
      return !c.slotScope;
    }); // remove trailing whitespace node again

    trimEndingWhitespace(element); // check pre state

    if (element.pre) {
      inVPre = false;
    }

    if (platformIsPreTag(element.tag)) {
      inPre = false;
    } // apply post-transforms


    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace(el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;

      while ((lastNode = el.children[el.children.length - 1]) && lastNode.type === 3 && lastNode.text === ' ') {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints(el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.', {
        start: el.start
      });
    }

    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.', el.rawAttrsMap['v-for']);
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start(tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag); // handle IE svg bug

      /* istanbul ignore if */

      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);

      if (ns) {
        element.ns = ns;
      }

      if (true) {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated;
          }, {});
        }

        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2("Invalid dynamic argument expression: attribute names cannot contain " + "spaces, quotes, <, >, / or =.", {
              start: attr.start + attr.name.indexOf("["),
              end: attr.start + attr.name.length
            });
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
         true && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.', {
          start: element.start
        });
      } // apply pre-transforms


      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);

        if (element.pre) {
          inVPre = true;
        }
      }

      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }

      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;

        if (true) {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end: function end(tag, start, end$1) {
      var element = stack[stack.length - 1]; // pop stack

      stack.length -= 1;
      currentParent = stack[stack.length - 1];

      if ( true && options.outputSourceRange) {
        element.end = end$1;
      }

      closeElement(element);
    },
    chars: function chars(text, start, end) {
      if (!currentParent) {
        if (true) {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.', {
              start: start
            });
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.", {
              start: start
            });
          }
        }

        return;
      } // IE textarea placeholder bug

      /* istanbul ignore if */


      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }

      var children = currentParent.children;

      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }

      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }

        var res;
        var child;

        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }

        if (child) {
          if ( true && options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }

          children.push(child);
        }
      }
    },
    comment: function comment(text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };

        if ( true && options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }

        currentParent.children.push(child);
      }
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var list = el.attrsList;
  var len = list.length;

  if (len) {
    var attrs = el.attrs = new Array(len);

    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };

      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element); // determine whether this is a plain element after
  // removing structural attributes

  element.plain = !element.key && !element.scopedSlots && !element.attrsList.length;
  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);

  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }

  processAttrs(element);
  return element;
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');

  if (exp) {
    if (true) {
      if (el.tag === 'template') {
        warn$2("<template> cannot be keyed. Place the key on real elements instead.", getRawBindingAttr(el, 'key'));
      }

      if (el["for"]) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;

        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2("Do not use v-for index as key on <transition-group> children, " + "this is the same as not using keys.", getRawBindingAttr(el, 'key'), true
          /* tip */
          );
        }
      }
    }

    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');

  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;

  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);

    if (res) {
      extend(el, res);
    } else if (true) {
      warn$2("Invalid v-for expression: " + exp, el.rawAttrsMap['v-for']);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);

  if (!inMatch) {
    return;
  }

  var res = {};
  res["for"] = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);

  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();

    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }

  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');

  if (exp) {
    el["if"] = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el["else"] = true;
    }

    var elseif = getAndRemoveAttr(el, 'v-else-if');

    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);

  if (prev && prev["if"]) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (true) {
    warn$2("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.", el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);
  }
}

function findPrevElement(children) {
  var i = children.length;

  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if ( true && children[i].text !== ' ') {
        warn$2("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.", children[i]);
      }

      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }

  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');

  if (once$$1 != null) {
    el.once = true;
  }
} // handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">


function processSlotContent(el) {
  var slotScope;

  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */

    if ( true && slotScope) {
      warn$2("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", el.rawAttrsMap['scope'], true);
    }

    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
    /* istanbul ignore if */
    if ( true && el.attrsMap['v-for']) {
      warn$2("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", el.rawAttrsMap['slot-scope'], true);
    }

    el.slotScope = slotScope;
  } // slot="xxx"


  var slotTarget = getBindingAttr(el, 'slot');

  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']); // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.

    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  } // 2.6 v-slot syntax


  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding) {
        if (true) {
          if (el.slotTarget || el.slotScope) {
            warn$2("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.parent && !maybeComponent(el.parent)) {
            warn$2("<template v-slot> can only appear at the root level inside " + "the receiving the component", el);
          }
        }

        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding$1) {
        if (true) {
          if (!maybeComponent(el)) {
            warn$2("v-slot can only be used on components or <template>.", slotBinding$1);
          }

          if (el.slotScope || el.slotTarget) {
            warn$2("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.scopedSlots) {
            warn$2("To avoid scope ambiguity, the default slot should also use " + "<template> syntax when there are other named slots.", slotBinding$1);
          }
        } // add the component's children to its default slot


        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true;
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken; // remove children as they are returned from scopedSlots now

        el.children = []; // mark el non-plain so data gets generated

        el.plain = false;
      }
    }
  }
}

function getSlotName(binding) {
  var name = binding.name.replace(slotRE, '');

  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else if (true) {
      warn$2("v-slot shorthand syntax requires a slot name.", binding);
    }
  }

  return dynamicArgRE.test(name) // dynamic [name]
  ? {
    name: name.slice(1, -1),
    dynamic: true
  } // static name
  : {
    name: "\"" + name + "\"",
    dynamic: false
  };
} // handle <slot/> outlets


function processSlotOutlet(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');

    if ( true && el.key) {
      warn$2("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.", getRawBindingAttr(el, 'key'));
    }
  }
}

function processComponent(el) {
  var binding;

  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }

  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;

  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;

    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true; // modifiers

      modifiers = parseModifiers(name.replace(dirRE, '')); // support .foo shorthand syntax for the .prop modifier

      if (modifiers) {
        name = name.replace(modifierRE, '');
      }

      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        if ( true && value.trim().length === 0) {
          warn$2("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"");
        }

        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);

            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }

          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }

          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");

            if (!isDynamic) {
              addHandler(el, "update:" + camelize(name), syncGen, null, false, warn$2, list[i]);

              if (hyphenate(name) !== camelize(name)) {
                addHandler(el, "update:" + hyphenate(name), syncGen, null, false, warn$2, list[i]);
              }
            } else {
              // handler w/ dynamic event name
              addHandler(el, "\"update:\"+(" + name + ")", syncGen, null, false, warn$2, list[i], true // dynamic
              );
            }
          }
        }

        if (modifiers && modifiers.prop || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else {
        // normal directives
        name = name.replace(dirRE, ''); // parse arg

        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;

        if (arg) {
          name = name.slice(0, -(arg.length + 1));

          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }

        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);

        if ( true && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (true) {
        var res = parseText(value, delimiters);

        if (res) {
          warn$2(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.', list[i]);
        }
      }

      addAttr(el, name, JSON.stringify(value), list[i]); // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation

      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;

  while (parent) {
    if (parent["for"] !== undefined) {
      return true;
    }

    parent = parent.parent;
  }

  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);

  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};

  for (var i = 0, l = attrs.length; i < l; i++) {
    if ( true && map[attrs[i].name] && !isIE && !isEdge) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }

    map[attrs[i].name] = attrs[i].value;
  }

  return map;
} // for script (e.g. type="x/template") or style, do not decode content


function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;
/* istanbul ignore next */

function guardIESVGBug(attrs) {
  var res = [];

  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];

    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }

  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;

  while (_el) {
    if (_el["for"] && _el.alias === value) {
      warn$2("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.", el.rawAttrsMap['v-model']);
    }

    _el = _el.parent;
  }
}
/*  */


function preTransformNode(el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;

    if (!map['v-model']) {
      return;
    }

    var typeBinding;

    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }

    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + map['v-bind'] + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? "&&(" + ifCondition + ")" : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true); // 1. checkbox

      var branch0 = cloneASTElement(el); // process for on the main node

      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed

      branch0["if"] = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0["if"],
        block: branch0
      }); // 2. add radio else-if condition

      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      }); // 3. other

      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0["else"] = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0;
    }
  }
}

function cloneASTElement(el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent);
}

var model$1 = {
  preTransformNode: preTransformNode
};
var modules$1 = [klass$1, style$1, model$1];
/*  */

function text(el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', "_s(" + dir.value + ")", dir);
  }
}
/*  */


function html(el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', "_s(" + dir.value + ")", dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};
/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};
/*  */

var isStaticKey;
var isPlatformReservedTag;
var genStaticKeysCached = cached(genStaticKeys$1);
/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

function optimize(root, options) {
  if (!root) {
    return;
  }

  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no; // first pass: mark all non-static nodes.

  markStatic$1(root); // second pass: mark static roots.

  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' + (keys ? ',' + keys : ''));
}

function markStatic$1(node) {
  node["static"] = isStatic(node);

  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }

    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);

      if (!child["static"]) {
        node["static"] = false;
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);

        if (!block["static"]) {
          node["static"] = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node["static"] || node.once) {
      node.staticInFor = isInFor;
    } // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.


    if (node["static"] && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }

    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node["for"]);
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }

  if (node.type === 3) {
    // text
    return true;
  }

  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node["if"] && !node["for"] && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;

    if (node.tag !== 'template') {
      return false;
    }

    if (node["for"]) {
      return true;
    }
  }

  return false;
}
/*  */


var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // KeyboardEvent.keyCode aliases

var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
}; // KeyboardEvent.key aliases

var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
}; // #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once

var genGuard = function genGuard(condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";

  for (var name in events) {
    var handlerCode = genHandler(events[name]);

    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }

  staticHandlers = "{" + staticHandlers.slice(0, -1) + "}";

  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + dynamicHandlers.slice(0, -1) + "])";
  } else {
    return prefix + staticHandlers;
  }
}

function genHandler(handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }

    return "function($event){" + (isFunctionInvocation ? "return " + handler.value : handler.value) + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];

    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key]; // left/right

        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }

    if (keys.length) {
      code += genKeyFilter(keys);
    } // Make sure modifiers like prevent and stop get executed after key filtering


    if (genModifierCode) {
      code += genModifierCode;
    }

    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : isFunctionInvocation ? "return " + handler.value : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return (// make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" + keys.map(genFilterCode).join('&&') + ")return null;"
  );
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);

  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }

  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}
/*  */


function on(el, dir) {
  if ( true && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }

  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}
/*  */


function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}
/*  */


var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};
/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;

  this.maybeComponent = function (el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el["for"] && !el.forProcessed) {
    return genFor(el, state);
  } else if (el["if"] && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;

    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;

      if (!el.plain || el.pre && state.maybeComponent(el)) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    } // module transforms


    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }

    return code;
  }
} // hoist static sub-trees out


function genStatic(el, state) {
  el.staticProcessed = true; // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.

  var originalPreState = state.pre;

  if (el.pre) {
    state.pre = el.pre;
  }

  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  state.pre = originalPreState;
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
} // v-once


function genOnce(el, state) {
  el.onceProcessed = true;

  if (el["if"] && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;

    while (parent) {
      if (parent["for"]) {
        key = parent.key;
        break;
      }

      parent = parent.parent;
    }

    if (!key) {
       true && state.warn("v-once can only be used inside v-for that is keyed. ", el.rawAttrsMap['v-once']);
      return genElement(el, state);
    }

    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion

  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();

  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  } // v-if with v-once should generate code like (a)?_m(0):_m(1)


  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el["for"];
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if ( true && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", el.rawAttrsMap['v-for'], true
    /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion

  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData$2(el, state) {
  var data = '{'; // directives first.
  // directives may mutate the el's other properties before they are generated.

  var dirs = genDirectives(el, state);

  if (dirs) {
    data += dirs + ',';
  } // key


  if (el.key) {
    data += "key:" + el.key + ",";
  } // ref


  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }

  if (el.refInFor) {
    data += "refInFor:true,";
  } // pre


  if (el.pre) {
    data += "pre:true,";
  } // record original tag name for components using "is" attribute


  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  } // module data generation functions


  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  } // attributes


  if (el.attrs) {
    data += "attrs:" + genProps(el.attrs) + ",";
  } // DOM props


  if (el.props) {
    data += "domProps:" + genProps(el.props) + ",";
  } // event handlers


  if (el.events) {
    data += genHandlers(el.events, false) + ",";
  }

  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true) + ",";
  } // slot target
  // only for non-scoped slots


  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  } // scoped slots


  if (el.scopedSlots) {
    data += genScopedSlots(el, el.scopedSlots, state) + ",";
  } // component v-model


  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  } // inline-template


  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);

    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }

  data = data.replace(/,$/, '') + '}'; // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.

  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + el.tag + "\"," + genProps(el.dynamicAttrs) + ")";
  } // v-bind data wrap


  if (el.wrapData) {
    data = el.wrapData(data);
  } // v-on data wrap


  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }

  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;

  if (!dirs) {
    return;
  }

  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;

  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];

    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }

    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:" + (dir.isDynamicArg ? dir.arg : "\"" + dir.arg + "\"") : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }

  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];

  if ( true && (el.children.length !== 1 || ast.type !== 1)) {
    state.warn('Inline-template components must have exactly one child element.', {
      start: el.start
    });
  }

  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(el, slots, state) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el["for"] || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return slot.slotTargetDynamic || slot["if"] || slot["for"] || containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    ;
  }); // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.

  var needsKey = !!el["if"]; // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.

  if (!needsForceUpdate) {
    var parent = el.parent;

    while (parent) {
      if (parent.slotScope && parent.slotScope !== emptySlotScopeToken || parent["for"]) {
        needsForceUpdate = true;
        break;
      }

      if (parent["if"]) {
        needsKey = true;
      }

      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots).map(function (key) {
    return genScopedSlot(slots[key], state);
  }).join(',');
  return "scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? ",null,false," + hash(generatedSlots) : "") + ")";
}

function hash(str) {
  var hash = 5381;
  var i = str.length;

  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  return hash >>> 0;
}

function containsSlotChild(el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true;
    }

    return el.children.some(containsSlotChild);
  }

  return false;
}

function genScopedSlot(el, state) {
  var isLegacySyntax = el.attrsMap['slot-scope'];

  if (el["if"] && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null");
  }

  if (el["for"] && !el.forProcessed) {
    return genFor(el, state, genScopedSlot);
  }

  var slotScope = el.slotScope === emptySlotScopeToken ? "" : String(el.slotScope);
  var fn = "function(" + slotScope + "){" + "return " + (el.tag === 'template' ? el["if"] && isLegacySyntax ? "(" + el["if"] + ")?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}"; // reverse proxy v-slot without scope on this.$slots

  var reverseProxy = slotScope ? "" : ",proxy:true";
  return "{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}";
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;

  if (children.length) {
    var el$1 = children[0]; // optimize single v-for

    if (children.length === 1 && el$1["for"] && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      var normalizationType = checkSkip ? state.maybeComponent(el$1) ? ",1" : ",0" : "";
      return "" + (altGenElement || genElement)(el$1, state) + normalizationType;
    }

    var normalizationType$1 = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType$1 ? "," + normalizationType$1 : '');
  }
} // determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed


function getNormalizationType(children, maybeComponent) {
  var res = 0;

  for (var i = 0; i < children.length; i++) {
    var el = children[i];

    if (el.type !== 1) {
      continue;
    }

    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }

    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }

  return res;
}

function needsNormalization(el) {
  return el["for"] !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  } else if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs || el.dynamicAttrs ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) {
    return {
      // slot props are camelized
      name: camelize(attr.name),
      value: attr.value,
      dynamic: attr.dynamic
    };
  })) : null;
  var bind$$1 = el.attrsMap['v-bind'];

  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }

  if (attrs) {
    res += "," + attrs;
  }

  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }

  return res + ')';
} // componentName is el.component, take it as argument to shun flow's pessimistic refinement


function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData$2(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var staticProps = "";
  var dynamicProps = "";

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);

    if (prop.dynamic) {
      dynamicProps += prop.name + "," + value + ",";
    } else {
      staticProps += "\"" + prop.name + "\":" + value + ",";
    }
  }

  staticProps = "{" + staticProps.slice(0, -1) + "}";

  if (dynamicProps) {
    return "_d(" + staticProps + ",[" + dynamicProps.slice(0, -1) + "])";
  } else {
    return staticProps;
  }
} // #3895, #4268


function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
}
/*  */
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed


var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b'); // these unary operators should not be used as property/method names

var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)'); // strip strings in expressions

var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g; // detect problematic expressions in a template

function detectErrors(ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode(node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];

        if (value) {
          var range = node.rawAttrsMap[name];

          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", warn, range);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", warn, range);
          }
        }
      }
    }

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent(exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);

  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim(), range);
  }

  checkExpression(exp, text, warn, range);
}

function checkFor(node, text, warn, range) {
  checkExpression(node["for"] || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier(ident, type, text, warn, range) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      warn("invalid " + type + " \"" + ident + "\" in expression: " + text.trim(), range);
    }
  }
}

function checkExpression(exp, text, warn, range) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);

    if (keywordMatch) {
      warn("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim(), range);
    } else {
      warn("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n", range);
    }
  }
}
/*  */


var range = 2;

function generateCodeFrame(source, start, end) {
  if (start === void 0) start = 0;
  if (end === void 0) end = source.length;
  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];

  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;

    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) {
          continue;
        }

        res.push("" + (j + 1) + repeat$1(" ", 3 - String(j + 1).length) + "|  " + lines[j]);
        var lineLength = lines[j].length;

        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }

          count += lineLength + 1;
        }
      }

      break;
    }
  }

  return res.join('\n');
}

function repeat$1(str, n) {
  var result = '';

  if (n > 0) {
    while (true) {
      // eslint-disable-line
      if (n & 1) {
        result += str;
      }

      n >>>= 1;

      if (n <= 0) {
        break;
      }

      str += str;
    }
  }

  return result;
}
/*  */


function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({
      err: err,
      code: code
    });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);
  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;
    /* istanbul ignore if */

    if (true) {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    } // check cache


    var key = options.delimiters ? String(options.delimiters) + template : template;

    if (cache[key]) {
      return cache[key];
    } // compile


    var compiled = compile(template, options); // check compilation errors/tips

    if (true) {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1("Error compiling template:\n\n" + e.msg + "\n\n" + generateCodeFrame(template, e.start, e.end), vm);
          });
        } else {
          warn$$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
      }

      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) {
            return tip(e.msg, vm);
          });
        } else {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }
    } // turn code into functions


    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    }); // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use

    /* istanbul ignore if */

    if (true) {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;
          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }

    return cache[key] = res;
  };
}
/*  */


function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function warn(msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if ( true && options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function warn(msg, range, tip) {
            var data = {
              msg: msg
            };

            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }

              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }

            (tip ? tips : errors).push(data);
          };
        } // merge custom modules


        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        } // merge custom directives


        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        } // copy other options


        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;
      var compiled = baseCompile(template.trim(), finalOptions);

      if (true) {
        detectErrors(compiled.ast, warn);
      }

      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}
/*  */
// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.


var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);

  if (options.optimize !== false) {
    optimize(ast, options);
  }

  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});
/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;
/*  */
// check whether current browser encodes a char inside attribute values

var div;

function getShouldDecode(href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0;
} // #3663: IE encodes newlines inside attribute values while other browsers don't


var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false; // #6828: chrome encodes content in a[href]

var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;
/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML;
});
var mount = Vue.prototype.$mount;

Vue.prototype.$mount = function (el, hydrating) {
  el = el && query(el);
  /* istanbul ignore if */

  if (el === document.body || el === document.documentElement) {
     true && warn("Do not mount Vue to <html> or <body> - mount to normal elements instead.");
    return this;
  }

  var options = this.$options; // resolve template/el and convert to render function

  if (!options.render) {
    var template = options.template;

    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */

          if ( true && !template) {
            warn("Template element not found or is empty: " + options.template, this);
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (true) {
          warn('invalid template option:' + template, this);
        }

        return this;
      }
    } else if (el) {
      template = getOuterHTML(el);
    }

    if (template) {
      /* istanbul ignore if */
      if ( true && config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;
      /* istanbul ignore if */

      if ( true && config.performance && mark) {
        mark('compile end');
        measure("vue " + this._name + " compile", 'compile', 'compile end');
      }
    }
  }

  return mount.call(this, el, hydrating);
};
/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */


function getOuterHTML(el) {
  if (el.outerHTML) {
    return el.outerHTML;
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML;
  }
}

Vue.compile = compileToFunctions;
/* harmony default export */ __webpack_exports__["default"] = (Vue);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vuex/dist/vuex.esm.js":
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * vuex v3.1.1
 * (c) 2019 Evan You
 * @license MIT
 */
function applyMixin(Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({
      beforeCreate: vuexInit
    });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;

    Vue.prototype._init = function (options) {
      if (options === void 0) options = {};
      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;

      _init.call(this, options);
    };
  }
  /**
   * Vuex init hook, injected into each instances init hooks list.
   */


  function vuexInit() {
    var options = this.$options; // store injection

    if (options.store) {
      this.$store = typeof options.store === 'function' ? options.store() : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin(store) {
  if (!devtoolHook) {
    return;
  }

  store._devtoolHook = devtoolHook;
  devtoolHook.emit('vuex:init', store);
  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });
  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}
/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */

/**
 * forEach for object
 */


function forEachValue(obj, fn) {
  Object.keys(obj).forEach(function (key) {
    return fn(obj[key], key);
  });
}

function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}

function isPromise(val) {
  return val && typeof val.then === 'function';
}

function assert(condition, msg) {
  if (!condition) {
    throw new Error("[vuex] " + msg);
  }
}

function partial(fn, arg) {
  return function () {
    return fn(arg);
  };
} // Base data struct for store's module, package with some attribute and method


var Module = function Module(rawModule, runtime) {
  this.runtime = runtime; // Store some children item

  this._children = Object.create(null); // Store the origin module object which passed by programmer

  this._rawModule = rawModule;
  var rawState = rawModule.state; // Store the origin module's state

  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = {
  namespaced: {
    configurable: true
  }
};

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced;
};

Module.prototype.addChild = function addChild(key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild(key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild(key) {
  return this._children[key];
};

Module.prototype.update = function update(rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;

  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }

  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }

  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild(fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter(fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction(fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation(fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties(Module.prototype, prototypeAccessors);

var ModuleCollection = function ModuleCollection(rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get(path) {
  return path.reduce(function (module, key) {
    return module.getChild(key);
  }, this.root);
};

ModuleCollection.prototype.getNamespace = function getNamespace(path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '');
  }, '');
};

ModuleCollection.prototype.update = function update$1(rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
  var this$1 = this;
  if (runtime === void 0) runtime = true;

  if (true) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);

  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  } // register nested modules


  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister(path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (!parent.getChild(key).runtime) {
    return;
  }

  parent.removeChild(key);
};

function update(path, targetModule, newModule) {
  if (true) {
    assertRawModule(path, newModule);
  } // update target module


  targetModule.update(newModule); // update nested modules

  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (true) {
          console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, " + 'manual reload is needed');
        }

        return;
      }

      update(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
    }
  }
}

var functionAssert = {
  assert: function assert(value) {
    return typeof value === 'function';
  },
  expected: 'function'
};
var objectAssert = {
  assert: function assert(value) {
    return typeof value === 'function' || _typeof(value) === 'object' && typeof value.handler === 'function';
  },
  expected: 'function or object with "handler" function'
};
var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule(path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) {
      return;
    }

    var assertOptions = assertTypes[key];
    forEachValue(rawModule[key], function (value, type) {
      assert(assertOptions.assert(value), makeAssertionMessage(path, key, type, value, assertOptions.expected));
    });
  });
}

function makeAssertionMessage(path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";

  if (path.length > 0) {
    buf += " in module \"" + path.join('.') + "\"";
  }

  buf += " is " + JSON.stringify(value) + ".";
  return buf;
}

var Vue; // bind on install

var Store = function Store(options) {
  var this$1 = this;
  if (options === void 0) options = {}; // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731

  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if (true) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins;
  if (plugins === void 0) plugins = [];
  var strict = options.strict;
  if (strict === void 0) strict = false; // store internal state

  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue(); // bind commit and dispatch to self

  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;

  this.dispatch = function boundDispatch(type, payload) {
    return dispatch.call(store, type, payload);
  };

  this.commit = function boundCommit(type, payload, options) {
    return commit.call(store, type, payload, options);
  }; // strict mode


  this.strict = strict;
  var state = this._modules.root.state; // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters

  installModule(this, state, [], this._modules.root); // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)

  resetStoreVM(this, state); // apply plugins

  plugins.forEach(function (plugin) {
    return plugin(this$1);
  });
  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;

  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = {
  state: {
    configurable: true
  }
};

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state;
};

prototypeAccessors$1.state.set = function (v) {
  if (true) {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit(_type, _payload, _options) {
  var this$1 = this; // check object-style commit

  var ref = unifyObjectStyle(_type, _payload, _options);
  var type = ref.type;
  var payload = ref.payload;
  var options = ref.options;
  var mutation = {
    type: type,
    payload: payload
  };
  var entry = this._mutations[type];

  if (!entry) {
    if (true) {
      console.error("[vuex] unknown mutation type: " + type);
    }

    return;
  }

  this._withCommit(function () {
    entry.forEach(function commitIterator(handler) {
      handler(payload);
    });
  });

  this._subscribers.forEach(function (sub) {
    return sub(mutation, this$1.state);
  });

  if ( true && options && options.silent) {
    console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. " + 'Use the filter functionality in the vue-devtools');
  }
};

Store.prototype.dispatch = function dispatch(_type, _payload) {
  var this$1 = this; // check object-style dispatch

  var ref = unifyObjectStyle(_type, _payload);
  var type = ref.type;
  var payload = ref.payload;
  var action = {
    type: type,
    payload: payload
  };
  var entry = this._actions[type];

  if (!entry) {
    if (true) {
      console.error("[vuex] unknown action type: " + type);
    }

    return;
  }

  try {
    this._actionSubscribers.filter(function (sub) {
      return sub.before;
    }).forEach(function (sub) {
      return sub.before(action, this$1.state);
    });
  } catch (e) {
    if (true) {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1 ? Promise.all(entry.map(function (handler) {
    return handler(payload);
  })) : entry[0](payload);
  return result.then(function (res) {
    try {
      this$1._actionSubscribers.filter(function (sub) {
        return sub.after;
      }).forEach(function (sub) {
        return sub.after(action, this$1.state);
      });
    } catch (e) {
      if (true) {
        console.warn("[vuex] error in after action subscribers: ");
        console.error(e);
      }
    }

    return res;
  });
};

Store.prototype.subscribe = function subscribe(fn) {
  return genericSubscribe(fn, this._subscribers);
};

Store.prototype.subscribeAction = function subscribeAction(fn) {
  var subs = typeof fn === 'function' ? {
    before: fn
  } : fn;
  return genericSubscribe(subs, this._actionSubscribers);
};

Store.prototype.watch = function watch(getter, cb, options) {
  var this$1 = this;

  if (true) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }

  return this._watcherVM.$watch(function () {
    return getter(this$1.state, this$1.getters);
  }, cb, options);
};

Store.prototype.replaceState = function replaceState(state) {
  var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule(path, rawModule, options) {
  if (options === void 0) options = {};

  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);

  installModule(this, this.state, path, this._modules.get(path), options.preserveState); // reset store to update getters...

  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule(path) {
  var this$1 = this;

  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);

  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue["delete"](parentState, path[path.length - 1]);
  });

  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate(newOptions) {
  this._modules.update(newOptions);

  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit(fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties(Store.prototype, prototypeAccessors$1);

function genericSubscribe(fn, subs) {
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }

  return function () {
    var i = subs.indexOf(fn);

    if (i > -1) {
      subs.splice(i, 1);
    }
  };
}

function resetStore(store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state; // init all modules

  installModule(store, state, [], store._modules.root, true); // reset vm

  resetStoreVM(store, state, hot);
}

function resetStoreVM(store, state, hot) {
  var oldVm = store._vm; // bind store public getters

  store.getters = {};
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure enviroment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function get() {
        return store._vm[key];
      },
      enumerable: true // for local getters

    });
  }); // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins

  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent; // enable strict mode for new vm

  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }

    Vue.nextTick(function () {
      return oldVm.$destroy();
    });
  }
}

function installModule(store, rootState, path, module, hot) {
  var isRoot = !path.length;

  var namespace = store._modules.getNamespace(path); // register in namespace map


  if (module.namespaced) {
    store._modulesNamespaceMap[namespace] = module;
  } // set state


  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];

    store._withCommit(function () {
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);
  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });
  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });
  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });
  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}
/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */


function makeLocalContext(store, namespace, path) {
  var noNamespace = namespace === '';
  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ( true && !store._actions[type]) {
          console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
          return;
        }
      }

      return store.dispatch(type, payload);
    },
    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ( true && !store._mutations[type]) {
          console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
          return;
        }
      }

      store.commit(type, payload, options);
    }
  }; // getters and state object must be gotten lazily
  // because they will be changed by vm update

  Object.defineProperties(local, {
    getters: {
      get: noNamespace ? function () {
        return store.getters;
      } : function () {
        return makeLocalGetters(store, namespace);
      }
    },
    state: {
      get: function get() {
        return getNestedState(store.state, path);
      }
    }
  });
  return local;
}

function makeLocalGetters(store, namespace) {
  var gettersProxy = {};
  var splitPos = namespace.length;
  Object.keys(store.getters).forEach(function (type) {
    // skip if the target getter is not match this namespace
    if (type.slice(0, splitPos) !== namespace) {
      return;
    } // extract local getter type


    var localType = type.slice(splitPos); // Add a port to the getters proxy.
    // Define as getter property because
    // we do not want to evaluate the getters in this time.

    Object.defineProperty(gettersProxy, localType, {
      get: function get() {
        return store.getters[type];
      },
      enumerable: true
    });
  });
  return gettersProxy;
}

function registerMutation(store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler(payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction(store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler(payload, cb) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload, cb);

    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }

    if (store._devtoolHook) {
      return res["catch"](function (err) {
        store._devtoolHook.emit('vuex:error', err);

        throw err;
      });
    } else {
      return res;
    }
  });
}

function registerGetter(store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (true) {
      console.error("[vuex] duplicate getter key: " + type);
    }

    return;
  }

  store._wrappedGetters[type] = function wrappedGetter(store) {
    return rawGetter(local.state, // local state
    local.getters, // local getters
    store.state, // root state
    store.getters // root getters
    );
  };
}

function enableStrictMode(store) {
  store._vm.$watch(function () {
    return this._data.$$state;
  }, function () {
    if (true) {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, {
    deep: true,
    sync: true
  });
}

function getNestedState(state, path) {
  return path.length ? path.reduce(function (state, key) {
    return state[key];
  }, state) : state;
}

function unifyObjectStyle(type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (true) {
    assert(typeof type === 'string', "expects string as the type, but found " + _typeof(type) + ".");
  }

  return {
    type: type,
    payload: payload,
    options: options
  };
}

function install(_Vue) {
  if (Vue && _Vue === Vue) {
    if (true) {
      console.error('[vuex] already installed. Vue.use(Vuex) should be called only once.');
    }

    return;
  }

  Vue = _Vue;
  applyMixin(Vue);
}
/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */


var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState() {
      var state = this.$store.state;
      var getters = this.$store.getters;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);

        if (!module) {
          return;
        }

        state = module.context.state;
        getters = module.context.getters;
      }

      return typeof val === 'function' ? val.call(this, state, getters) : state[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      } // Get the commit method from store


      var commit = this.$store.commit;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);

        if (!module) {
          return;
        }

        commit = module.context.commit;
      }

      return typeof val === 'function' ? val.apply(this, [commit].concat(args)) : commit.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */

var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val; // The namespace has been mutated by normalizeNamespace

    val = namespace + val;

    res[key] = function mappedGetter() {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return;
      }

      if ( true && !(val in this.$store.getters)) {
        console.error("[vuex] unknown getter: " + val);
        return;
      }

      return this.$store.getters[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      } // get dispatch function from store


      var dispatch = this.$store.dispatch;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);

        if (!module) {
          return;
        }

        dispatch = module.context.dispatch;
      }

      return typeof val === 'function' ? val.apply(this, [dispatch].concat(args)) : dispatch.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */

var createNamespacedHelpers = function createNamespacedHelpers(namespace) {
  return {
    mapState: mapState.bind(null, namespace),
    mapGetters: mapGetters.bind(null, namespace),
    mapMutations: mapMutations.bind(null, namespace),
    mapActions: mapActions.bind(null, namespace)
  };
};
/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */


function normalizeMap(map) {
  return Array.isArray(map) ? map.map(function (key) {
    return {
      key: key,
      val: key
    };
  }) : Object.keys(map).map(function (key) {
    return {
      key: key,
      val: map[key]
    };
  });
}
/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */


function normalizeNamespace(fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }

    return fn(namespace, map);
  };
}
/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */


function getModuleByNamespace(store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];

  if ( true && !module) {
    console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
  }

  return module;
}

var index_esm = {
  Store: Store,
  install: install,
  version: '3.1.1',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};
/* harmony default export */ __webpack_exports__["default"] = (index_esm);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./src/App.vue":
/*!*********************!*\
  !*** ./src/App.vue ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=template&id=7ba5bd90& */ "./src/App.vue?vue&type=template&id=7ba5bd90&");
/* harmony import */ var _App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App.vue?vue&type=style&index=0&lang=scss& */ "./src/App.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");

var script = {}



/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  script,
  _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__["render"],
  _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/App.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/App.vue?vue&type=style&index=0&lang=scss&":
/*!*******************************************************!*\
  !*** ./src/App.vue?vue&type=style&index=0&lang=scss& ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/style-loader/dist!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??ref--2-2!../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/App.vue?vue&type=template&id=7ba5bd90&":
/*!****************************************************!*\
  !*** ./src/App.vue?vue&type=template&id=7ba5bd90& ***!
  \****************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=template&id=7ba5bd90& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/App.vue?vue&type=template&id=7ba5bd90&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/assets sync \\.(png|jpg)$":
/*!***************************************************!*\
  !*** ./src/assets sync nonrecursive \.(png|jpg)$ ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./Back-of-Card.jpg": "./src/assets/Back-of-Card.jpg",
	"./Culross.jpg": "./src/assets/Culross.jpg",
	"./Doune_Castle.jpg": "./src/assets/Doune_Castle.jpg",
	"./Glencoe.jpg": "./src/assets/Glencoe.jpg",
	"./back-button.png": "./src/assets/back-button.png",
	"./default-card.png": "./src/assets/default-card.png",
	"./default-profile.jpg": "./src/assets/default-profile.jpg",
	"./fill-murray.jpg": "./src/assets/fill-murray.jpg",
	"./flip-card-button.png": "./src/assets/flip-card-button.png",
	"./greyfriars-bobby-back.png": "./src/assets/greyfriars-bobby-back.png",
	"./greyfriars-bobby-front.png": "./src/assets/greyfriars-bobby-front.png",
	"./place-cage.jpg": "./src/assets/place-cage.jpg",
	"./rank-background.png": "./src/assets/rank-background.png",
	"./robert-bruce-back.png": "./src/assets/robert-bruce-back.png",
	"./robert-bruce-front.png": "./src/assets/robert-bruce-front.png",
	"./robert-card-back.jpg": "./src/assets/robert-card-back.jpg",
	"./robert-the-bruce-card-back.jpg": "./src/assets/robert-the-bruce-card-back.jpg",
	"./robert-the-bruce-card-front.jpg": "./src/assets/robert-the-bruce-card-front.jpg",
	"./robert-the-bruce-preview.jpg": "./src/assets/robert-the-bruce-preview.jpg",
	"./stone-back-button.png": "./src/assets/stone-back-button.png",
	"./stone-background.png": "./src/assets/stone-background.png",
	"./tom-riddle-gs.png": "./src/assets/tom-riddle-gs.png",
	"./top-rank-background.png": "./src/assets/top-rank-background.png",
	"./voldemort.png": "./src/assets/voldemort.png",
	"./wee-gaitherers-logo.png": "./src/assets/wee-gaitherers-logo.png",
	"./wood-background.jpg": "./src/assets/wood-background.jpg"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/assets sync \\.(png|jpg)$";

/***/ }),

/***/ "./src/assets sync recursive ^\\.\\/.*$":
/*!**********************************!*\
  !*** ./src/assets sync ^\.\/.*$ ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./App Skin Assets/Leaderboard/Rank-4+-background.png": "./src/assets/App Skin Assets/Leaderboard/Rank-4+-background.png",
	"./App Skin Assets/Leaderboard/Top-3-Rank-background.png": "./src/assets/App Skin Assets/Leaderboard/Top-3-Rank-background.png",
	"./App Skin Assets/Universal/Stone-background-(menu-and-leaderboard).png": "./src/assets/App Skin Assets/Universal/Stone-background-(menu-and-leaderboard).png",
	"./App Skin Assets/Universal/Wood-Background.jpg": "./src/assets/App Skin Assets/Universal/Wood-Background.jpg",
	"./Back-of-Card.jpg": "./src/assets/Back-of-Card.jpg",
	"./Culross.jpg": "./src/assets/Culross.jpg",
	"./Doune_Castle.jpg": "./src/assets/Doune_Castle.jpg",
	"./Fonts/cooper-hewitt/CooperHewitt-Bold.otf": "./src/assets/Fonts/cooper-hewitt/CooperHewitt-Bold.otf",
	"./Fonts/cooper-hewitt/CooperHewitt-Medium.otf": "./src/assets/Fonts/cooper-hewitt/CooperHewitt-Medium.otf",
	"./Fonts/montserrat/Montserrat-Bold.otf": "./src/assets/Fonts/montserrat/Montserrat-Bold.otf",
	"./Fonts/montserrat/Montserrat-Medium.otf": "./src/assets/Fonts/montserrat/Montserrat-Medium.otf",
	"./Glencoe.jpg": "./src/assets/Glencoe.jpg",
	"./back-button.png": "./src/assets/back-button.png",
	"./default-card.png": "./src/assets/default-card.png",
	"./default-profile.jpg": "./src/assets/default-profile.jpg",
	"./fill-murray.jpg": "./src/assets/fill-murray.jpg",
	"./flip-card-button.png": "./src/assets/flip-card-button.png",
	"./greyfriars-bobby-back.png": "./src/assets/greyfriars-bobby-back.png",
	"./greyfriars-bobby-front.png": "./src/assets/greyfriars-bobby-front.png",
	"./place-cage.jpg": "./src/assets/place-cage.jpg",
	"./place-keanu.svg": "./src/assets/place-keanu.svg",
	"./rank-background.png": "./src/assets/rank-background.png",
	"./robert-bruce-back.png": "./src/assets/robert-bruce-back.png",
	"./robert-bruce-front.png": "./src/assets/robert-bruce-front.png",
	"./robert-card-back.jpg": "./src/assets/robert-card-back.jpg",
	"./robert-the-bruce-card-back.jpg": "./src/assets/robert-the-bruce-card-back.jpg",
	"./robert-the-bruce-card-front.jpg": "./src/assets/robert-the-bruce-card-front.jpg",
	"./robert-the-bruce-preview.jpg": "./src/assets/robert-the-bruce-preview.jpg",
	"./stone-back-button.png": "./src/assets/stone-back-button.png",
	"./stone-background.png": "./src/assets/stone-background.png",
	"./tom-riddle-gs.png": "./src/assets/tom-riddle-gs.png",
	"./top-rank-background.png": "./src/assets/top-rank-background.png",
	"./voldemort.png": "./src/assets/voldemort.png",
	"./wee-gaitherers-logo.png": "./src/assets/wee-gaitherers-logo.png",
	"./wood-background.jpg": "./src/assets/wood-background.jpg"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/assets sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./src/assets/App Skin Assets/Leaderboard/Rank-4+-background.png":
/*!***********************************************************************!*\
  !*** ./src/assets/App Skin Assets/Leaderboard/Rank-4+-background.png ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "689ba0d0f868b2a4d15d0d7ff84cfdbc.png";

/***/ }),

/***/ "./src/assets/App Skin Assets/Leaderboard/Top-3-Rank-background.png":
/*!**************************************************************************!*\
  !*** ./src/assets/App Skin Assets/Leaderboard/Top-3-Rank-background.png ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "f30a18a444cb3be5d7b4030243a6eadd.png";

/***/ }),

/***/ "./src/assets/App Skin Assets/Universal/Stone-background-(menu-and-leaderboard).png":
/*!******************************************************************************************!*\
  !*** ./src/assets/App Skin Assets/Universal/Stone-background-(menu-and-leaderboard).png ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "69989e4de4bc626317aec8998782a251.png";

/***/ }),

/***/ "./src/assets/App Skin Assets/Universal/Wood-Background.jpg":
/*!******************************************************************!*\
  !*** ./src/assets/App Skin Assets/Universal/Wood-Background.jpg ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "b80ce5ff5f297a491d732baaf47019ab.jpg";

/***/ }),

/***/ "./src/assets/Back-of-Card.jpg":
/*!*************************************!*\
  !*** ./src/assets/Back-of-Card.jpg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "ed7292fe780f72bbfc84e148bc12af22.jpg";

/***/ }),

/***/ "./src/assets/Culross.jpg":
/*!********************************!*\
  !*** ./src/assets/Culross.jpg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "562a09ff0938275ecb5c12bc5b756d71.jpg";

/***/ }),

/***/ "./src/assets/Doune_Castle.jpg":
/*!*************************************!*\
  !*** ./src/assets/Doune_Castle.jpg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "f84a3331444dc9bcb141c7d0162e46ef.jpg";

/***/ }),

/***/ "./src/assets/Fonts/cooper-hewitt/CooperHewitt-Bold.otf":
/*!**************************************************************!*\
  !*** ./src/assets/Fonts/cooper-hewitt/CooperHewitt-Bold.otf ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "27aceeb78605fc03e476ac514a0478ed.otf";

/***/ }),

/***/ "./src/assets/Fonts/cooper-hewitt/CooperHewitt-Medium.otf":
/*!****************************************************************!*\
  !*** ./src/assets/Fonts/cooper-hewitt/CooperHewitt-Medium.otf ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "da25a0c11cae8400d9bbb4561e3bb5a2.otf";

/***/ }),

/***/ "./src/assets/Fonts/cooper-hewitt/CooperHewitt-bold.otf":
/*!**************************************************************!*\
  !*** ./src/assets/Fonts/cooper-hewitt/CooperHewitt-bold.otf ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "27aceeb78605fc03e476ac514a0478ed.otf";

/***/ }),

/***/ "./src/assets/Fonts/montserrat/Montserrat-Bold.otf":
/*!*********************************************************!*\
  !*** ./src/assets/Fonts/montserrat/Montserrat-Bold.otf ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "9c71d42b6a840ecfda8fc555040a1c76.otf";

/***/ }),

/***/ "./src/assets/Fonts/montserrat/Montserrat-Medium.otf":
/*!***********************************************************!*\
  !*** ./src/assets/Fonts/montserrat/Montserrat-Medium.otf ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "d815b0a29adf3450c55f56e2fb813be4.otf";

/***/ }),

/***/ "./src/assets/Glencoe.jpg":
/*!********************************!*\
  !*** ./src/assets/Glencoe.jpg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "a825657a89acacd24d328e49df2d97d4.jpg";

/***/ }),

/***/ "./src/assets/back-button.png":
/*!************************************!*\
  !*** ./src/assets/back-button.png ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "1a36a2de5b988a7ed0e7c60f6407c809.png";

/***/ }),

/***/ "./src/assets/default-card.png":
/*!*************************************!*\
  !*** ./src/assets/default-card.png ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "13d3c1df8b96767f4aa5483ffd570bb3.png";

/***/ }),

/***/ "./src/assets/default-profile.jpg":
/*!****************************************!*\
  !*** ./src/assets/default-profile.jpg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "e43fe8ca9c869beeea06d651b50a00ce.jpg";

/***/ }),

/***/ "./src/assets/fill-murray.jpg":
/*!************************************!*\
  !*** ./src/assets/fill-murray.jpg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "250b29772dce72eceeed32b3c737a4e4.jpg";

/***/ }),

/***/ "./src/assets/flip-card-button.png":
/*!*****************************************!*\
  !*** ./src/assets/flip-card-button.png ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "c6e035241d06437b1d0436b6ffb8f912.png";

/***/ }),

/***/ "./src/assets/greyfriars-bobby-back.png":
/*!**********************************************!*\
  !*** ./src/assets/greyfriars-bobby-back.png ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "750d3a97b306680311f2e94e5052d479.png";

/***/ }),

/***/ "./src/assets/greyfriars-bobby-front.png":
/*!***********************************************!*\
  !*** ./src/assets/greyfriars-bobby-front.png ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "60325114a85d30e6ff36f26bd8805aa0.png";

/***/ }),

/***/ "./src/assets/place-cage.jpg":
/*!***********************************!*\
  !*** ./src/assets/place-cage.jpg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "733f6e7579e843731bcb10d7434502e1.jpg";

/***/ }),

/***/ "./src/assets/place-keanu.svg":
/*!************************************!*\
  !*** ./src/assets/place-keanu.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "26ef13e4bfdda442dd0a9b74734331ed.svg";

/***/ }),

/***/ "./src/assets/rank-background.png":
/*!****************************************!*\
  !*** ./src/assets/rank-background.png ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "689ba0d0f868b2a4d15d0d7ff84cfdbc.png";

/***/ }),

/***/ "./src/assets/robert-bruce-back.png":
/*!******************************************!*\
  !*** ./src/assets/robert-bruce-back.png ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "18130b6c3b9d3aed9938f9a61b1efdf0.png";

/***/ }),

/***/ "./src/assets/robert-bruce-front.png":
/*!*******************************************!*\
  !*** ./src/assets/robert-bruce-front.png ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "adf6c936cc4efd14576c45a379238a07.png";

/***/ }),

/***/ "./src/assets/robert-card-back.jpg":
/*!*****************************************!*\
  !*** ./src/assets/robert-card-back.jpg ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "f0ca1bbadb56b144082fb2e0b632712f.jpg";

/***/ }),

/***/ "./src/assets/robert-the-bruce-card-back.jpg":
/*!***************************************************!*\
  !*** ./src/assets/robert-the-bruce-card-back.jpg ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "9ee1fd471efb0dec4bedd61c7d7a8d29.jpg";

/***/ }),

/***/ "./src/assets/robert-the-bruce-card-front.jpg":
/*!****************************************************!*\
  !*** ./src/assets/robert-the-bruce-card-front.jpg ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "ff0a29f40bd008fcd02ca30b75e0c199.jpg";

/***/ }),

/***/ "./src/assets/robert-the-bruce-preview.jpg":
/*!*************************************************!*\
  !*** ./src/assets/robert-the-bruce-preview.jpg ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "8a53543bf496e6c023496bbbb3988e54.jpg";

/***/ }),

/***/ "./src/assets/stone-back-button.png":
/*!******************************************!*\
  !*** ./src/assets/stone-back-button.png ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "232a477fc0e65e56fe28f3c8b74aa5b4.png";

/***/ }),

/***/ "./src/assets/stone-background.png":
/*!*****************************************!*\
  !*** ./src/assets/stone-background.png ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "69989e4de4bc626317aec8998782a251.png";

/***/ }),

/***/ "./src/assets/tom-riddle-gs.png":
/*!**************************************!*\
  !*** ./src/assets/tom-riddle-gs.png ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "3928679a5bbc1676c9431a8ca544a0f6.png";

/***/ }),

/***/ "./src/assets/top-rank-background.png":
/*!********************************************!*\
  !*** ./src/assets/top-rank-background.png ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "f30a18a444cb3be5d7b4030243a6eadd.png";

/***/ }),

/***/ "./src/assets/voldemort.png":
/*!**********************************!*\
  !*** ./src/assets/voldemort.png ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "31cfd40719ae8342951be7fc68049e89.png";

/***/ }),

/***/ "./src/assets/wee-gaitherers-logo.png":
/*!********************************************!*\
  !*** ./src/assets/wee-gaitherers-logo.png ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "02de2b383f9d20920403311489bf9434.png";

/***/ }),

/***/ "./src/assets/wood-background.jpg":
/*!****************************************!*\
  !*** ./src/assets/wood-background.jpg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "b80ce5ff5f297a491d732baaf47019ab.jpg";

/***/ }),

/***/ "./src/components/Card.vue":
/*!*********************************!*\
  !*** ./src/components/Card.vue ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Card.vue?vue&type=template&id=54cdc180& */ "./src/components/Card.vue?vue&type=template&id=54cdc180&");
/* harmony import */ var _Card_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Card.vue?vue&type=script&lang=js& */ "./src/components/Card.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Card.vue?vue&type=style&index=0&lang=scss& */ "./src/components/Card.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Card_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/Card.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/Card.vue?vue&type=script&lang=js&":
/*!**********************************************************!*\
  !*** ./src/components/Card.vue?vue&type=script&lang=js& ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Card.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/Card.vue?vue&type=style&index=0&lang=scss&":
/*!*******************************************************************!*\
  !*** ./src/components/Card.vue?vue&type=style&index=0&lang=scss& ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Card.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/Card.vue?vue&type=template&id=54cdc180&":
/*!****************************************************************!*\
  !*** ./src/components/Card.vue?vue&type=template&id=54cdc180& ***!
  \****************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Card.vue?vue&type=template&id=54cdc180& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Card.vue?vue&type=template&id=54cdc180&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Card_vue_vue_type_template_id_54cdc180___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/components/CardPreview.vue":
/*!****************************************!*\
  !*** ./src/components/CardPreview.vue ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _CardPreview_vue_vue_type_template_id_d558bed0___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CardPreview.vue?vue&type=template&id=d558bed0& */ "./src/components/CardPreview.vue?vue&type=template&id=d558bed0&");
/* harmony import */ var _CardPreview_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CardPreview.vue?vue&type=script&lang=js& */ "./src/components/CardPreview.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _CardPreview_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CardPreview.vue?vue&type=style&index=0&lang=scss& */ "./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _CardPreview_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _CardPreview_vue_vue_type_template_id_d558bed0___WEBPACK_IMPORTED_MODULE_0__["render"],
  _CardPreview_vue_vue_type_template_id_d558bed0___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/CardPreview.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/CardPreview.vue?vue&type=script&lang=js&":
/*!*****************************************************************!*\
  !*** ./src/components/CardPreview.vue?vue&type=script&lang=js& ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./CardPreview.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/CardPreview.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss&":
/*!**************************************************************************!*\
  !*** ./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss& ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./CardPreview.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/CardPreview.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/CardPreview.vue?vue&type=template&id=d558bed0&":
/*!***********************************************************************!*\
  !*** ./src/components/CardPreview.vue?vue&type=template&id=d558bed0& ***!
  \***********************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_template_id_d558bed0___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./CardPreview.vue?vue&type=template&id=d558bed0& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/CardPreview.vue?vue&type=template&id=d558bed0&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_template_id_d558bed0___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CardPreview_vue_vue_type_template_id_d558bed0___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/components/Geo.vue":
/*!********************************!*\
  !*** ./src/components/Geo.vue ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");
var render, staticRenderFns
var script = {}


/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(
  script,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

component.options.__file = "src/components/Geo.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/LeaderboardCard.vue":
/*!********************************************!*\
  !*** ./src/components/LeaderboardCard.vue ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LeaderboardCard.vue?vue&type=template&id=790a88a6& */ "./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6&");
/* harmony import */ var _LeaderboardCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LeaderboardCard.vue?vue&type=script&lang=js& */ "./src/components/LeaderboardCard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LeaderboardCard.vue?vue&type=style&index=0&lang=scss& */ "./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _LeaderboardCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__["render"],
  _LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/LeaderboardCard.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/LeaderboardCard.vue?vue&type=script&lang=js&":
/*!*********************************************************************!*\
  !*** ./src/components/LeaderboardCard.vue?vue&type=script&lang=js& ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./LeaderboardCard.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&":
/*!******************************************************************************!*\
  !*** ./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss& ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./LeaderboardCard.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6&":
/*!***************************************************************************!*\
  !*** ./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6& ***!
  \***************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./LeaderboardCard.vue?vue&type=template&id=790a88a6& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/LeaderboardCard.vue?vue&type=template&id=790a88a6&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LeaderboardCard_vue_vue_type_template_id_790a88a6___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/components/Navigation.vue":
/*!***************************************!*\
  !*** ./src/components/Navigation.vue ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Navigation.vue?vue&type=template&id=81440b78&scoped=true& */ "./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true&");
/* harmony import */ var _Navigation_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Navigation.vue?vue&type=script&lang=js& */ "./src/components/Navigation.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& */ "./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Navigation_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "81440b78",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/Navigation.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/Navigation.vue?vue&type=script&lang=js&":
/*!****************************************************************!*\
  !*** ./src/components/Navigation.vue?vue&type=script&lang=js& ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Navigation.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&":
/*!*************************************************************************************************!*\
  !*** ./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=style&index=0&id=81440b78&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_style_index_0_id_81440b78_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true&":
/*!**********************************************************************************!*\
  !*** ./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true& ***!
  \**********************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Navigation.vue?vue&type=template&id=81440b78&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Navigation.vue?vue&type=template&id=81440b78&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Navigation_vue_vue_type_template_id_81440b78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/components/Scan.vue":
/*!*********************************!*\
  !*** ./src/components/Scan.vue ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Scan_vue_vue_type_template_id_bdfa27a6_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Scan.vue?vue&type=template&id=bdfa27a6&scoped=true& */ "./src/components/Scan.vue?vue&type=template&id=bdfa27a6&scoped=true&");
/* harmony import */ var _Scan_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Scan.vue?vue&type=script&lang=js& */ "./src/components/Scan.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Scan_vue_vue_type_style_index_0_id_bdfa27a6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true& */ "./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Scan_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Scan_vue_vue_type_template_id_bdfa27a6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Scan_vue_vue_type_template_id_bdfa27a6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "bdfa27a6",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/Scan.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/Scan.vue?vue&type=script&lang=js&":
/*!**********************************************************!*\
  !*** ./src/components/Scan.vue?vue&type=script&lang=js& ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Scan.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Scan.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true&":
/*!*******************************************************************************************!*\
  !*** ./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true& ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_style_index_0_id_bdfa27a6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Scan.vue?vue&type=style&index=0&id=bdfa27a6&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_style_index_0_id_bdfa27a6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_style_index_0_id_bdfa27a6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_style_index_0_id_bdfa27a6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_style_index_0_id_bdfa27a6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_style_index_0_id_bdfa27a6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/Scan.vue?vue&type=template&id=bdfa27a6&scoped=true&":
/*!****************************************************************************!*\
  !*** ./src/components/Scan.vue?vue&type=template&id=bdfa27a6&scoped=true& ***!
  \****************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_template_id_bdfa27a6_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Scan.vue?vue&type=template&id=bdfa27a6&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Scan.vue?vue&type=template&id=bdfa27a6&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_template_id_bdfa27a6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Scan_vue_vue_type_template_id_bdfa27a6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/config/routes.js":
/*!******************************!*\
  !*** ./src/config/routes.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _views_Collection_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/Collection.vue */ "./src/views/Collection.vue");
/* harmony import */ var _views_Leaderboard_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/Leaderboard.vue */ "./src/views/Leaderboard.vue");
/* harmony import */ var _views_Locations_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/Locations.vue */ "./src/views/Locations.vue");
/* harmony import */ var _views_Home_vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/Home.vue */ "./src/views/Home.vue");
/* harmony import */ var _views_SingleCard_vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/SingleCard.vue */ "./src/views/SingleCard.vue");
/* harmony import */ var _App_vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../App.vue */ "./src/App.vue");
/* harmony import */ var _views_Add_vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../views/Add.vue */ "./src/views/Add.vue");
/* harmony import */ var _components_Scan_vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/Scan.vue */ "./src/components/Scan.vue");
/* harmony import */ var _components_Geo_vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/Geo.vue */ "./src/components/Geo.vue");









var routes = [{
  path: '',
  component: _App_vue__WEBPACK_IMPORTED_MODULE_5__["default"],
  children: [{
    path: '',
    component: _views_Home_vue__WEBPACK_IMPORTED_MODULE_3__["default"]
  }, {
    path: '/collection/',
    component: _views_Collection_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
  }, {
    path: '/leaderboard',
    component: _views_Leaderboard_vue__WEBPACK_IMPORTED_MODULE_1__["default"]
  }, {
    path: '/locations',
    component: _views_Locations_vue__WEBPACK_IMPORTED_MODULE_2__["default"]
  }, {
    path: '/add',
    component: _views_Add_vue__WEBPACK_IMPORTED_MODULE_6__["default"]
  }, {
    path: 'geolocation',
    component: _components_Geo_vue__WEBPACK_IMPORTED_MODULE_8__["default"]
  }, {
    path: 'scan',
    component: _components_Scan_vue__WEBPACK_IMPORTED_MODULE_7__["default"]
  }, {
    path: '/card/:id',
    component: _views_SingleCard_vue__WEBPACK_IMPORTED_MODULE_4__["default"],
    props: true
  }]
}];
/* harmony default export */ __webpack_exports__["default"] = (routes);

/***/ }),

/***/ "./src/config/stores/base.js":
/*!***********************************!*\
  !*** ./src/config/stores/base.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);

var baseStore = {
  state: {
    loading: false,
    cards: [{
      id: 1,
      title: 'Greyfriars Bobby',
      imagePreview: 'greyfriars-bobby-front.png',
      imageFront: 'greyfriars-bobby-front.png',
      imageBack: 'greyfriars-bobby-back.png'
    }, {
      id: 2,
      title: 'Robert the Bruce',
      imagePreview: 'robert-the-bruce-preview.jpg',
      imageFront: 'robert-the-bruce-card-front.jpg',
      imageBack: 'robert-the-bruce-card-back.jpg'
    }, {
      id: 3,
      title: 'Glencoe',
      imagePreview: 'Glencoe.jpg',
      imageFront: 'Glencoe.jpg',
      imageBack: 'Back-of-Card.jpg'
    }, {
      id: 4,
      title: 'Culross',
      imagePreview: 'Culross.jpg',
      imageFront: 'Culross.jpg',
      imageBack: 'Back-of-Card.jpg'
    }],
    leaderboardData: [{
      profileImage: 'fill-murray.jpg',
      position: '1',
      ordinal: 'st',
      username: 'Venkman',
      cardsCollected: 12
    }, {
      position: '2',
      ordinal: 'nd',
      username: 'Cyclone',
      cardsCollected: 10
    }, {
      profileImage: 'place-cage.jpg',
      position: '3',
      ordinal: 'rd',
      username: 'DoomAir',
      cardsCollected: 9
    }, {
      position: '4',
      ordinal: 'th',
      username: 'FunBit',
      cardsCollected: 7
    }, {
      profileImage: 'place-keanu.svg',
      position: '5',
      ordinal: 'rd',
      username: 'JohnWick',
      cardsCollected: 7
    }, {
      position: '6',
      ordinal: 'th',
      username: 'BitFun',
      cardsCollected: 6
    }, {
      position: '7',
      ordinal: 'th',
      username: 'Cheesecake',
      cardsCollected: 1
    }],
    routelinks: [{
      link: '/collection',
      text: 'Collection'
    }, {
      link: '/leaderboard',
      text: 'Leaderboard'
    }, {
      link: '/account',
      text: 'Account'
    }, {
      link: '/locations',
      text: 'Locations'
    }, {
      link: '/add',
      text: 'Add a Card'
    }],
    subRoutes: {
      add: [{
        link: '/scan',
        text: 'Scan a card'
      }, {
        link: '/geolocation',
        text: 'Check location cards'
      }]
    }
  },
  mutations: {
    setLoading: function setLoading(state, status) {
      state.loading = status;
    },
    setCards: function setCards(state, cards) {
      state.cards = cards;
    },
    addCard: function addCard(state, card) {
      state.cards.push(card);
    }
  },
  actions: {
    fetchCards: function fetchCards(context) {
      context.commit('setLoading', true);
    },
    scanCard: function scanCard(context, card) {
      context.commit('addCard', card);
    }
  },
  getters: {
    getUserCards: function getUserCards(state) {
      return state.cards.filter(function (card) {
        return card.collected;
      });
    },
    getAllCards: function getAllCards(state) {
      return state.cards;
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = (baseStore);

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.esm.js");
/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue-router */ "./node_modules/vue-router/dist/vue-router.esm.js");
/* harmony import */ var _config_routes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/routes.js */ "./src/config/routes.js");
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
/* harmony import */ var _config_stores_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config/stores/base */ "./src/config/stores/base.js");





vue__WEBPACK_IMPORTED_MODULE_0__["default"].use(vue_router__WEBPACK_IMPORTED_MODULE_1__["default"]);
vue__WEBPACK_IMPORTED_MODULE_0__["default"].use(vuex__WEBPACK_IMPORTED_MODULE_3__["default"]);
var router = new vue_router__WEBPACK_IMPORTED_MODULE_1__["default"]({
  routes: _config_routes_js__WEBPACK_IMPORTED_MODULE_2__["default"]
});
var store = new vuex__WEBPACK_IMPORTED_MODULE_3__["default"].Store({
  modules: {
    base: _config_stores_base__WEBPACK_IMPORTED_MODULE_4__["default"]
  }
});
var app = new vue__WEBPACK_IMPORTED_MODULE_0__["default"]({
  store: store,
  router: router,
  el: '#app'
});

/***/ }),

/***/ "./src/views/Add.vue":
/*!***************************!*\
  !*** ./src/views/Add.vue ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Add_vue_vue_type_template_id_764c55d7_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Add.vue?vue&type=template&id=764c55d7&scoped=true& */ "./src/views/Add.vue?vue&type=template&id=764c55d7&scoped=true&");
/* harmony import */ var _Add_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Add.vue?vue&type=script&lang=js& */ "./src/views/Add.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Add_vue_vue_type_style_index_0_id_764c55d7_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true& */ "./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Add_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Add_vue_vue_type_template_id_764c55d7_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Add_vue_vue_type_template_id_764c55d7_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "764c55d7",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Add.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Add.vue?vue&type=script&lang=js&":
/*!****************************************************!*\
  !*** ./src/views/Add.vue?vue&type=script&lang=js& ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Add.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Add.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true&":
/*!*************************************************************************************!*\
  !*** ./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true& ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_id_764c55d7_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Add.vue?vue&type=style&index=0&id=764c55d7&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_id_764c55d7_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_id_764c55d7_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_id_764c55d7_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_id_764c55d7_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_id_764c55d7_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/views/Add.vue?vue&type=template&id=764c55d7&scoped=true&":
/*!**********************************************************************!*\
  !*** ./src/views/Add.vue?vue&type=template&id=764c55d7&scoped=true& ***!
  \**********************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_template_id_764c55d7_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Add.vue?vue&type=template&id=764c55d7&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Add.vue?vue&type=template&id=764c55d7&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_template_id_764c55d7_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_template_id_764c55d7_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/views/Collection.vue":
/*!**********************************!*\
  !*** ./src/views/Collection.vue ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Collection.vue?vue&type=template&id=55026158& */ "./src/views/Collection.vue?vue&type=template&id=55026158&");
/* harmony import */ var _Collection_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Collection.vue?vue&type=script&lang=js& */ "./src/views/Collection.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Collection_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Collection.vue?vue&type=style&index=0&lang=scss& */ "./src/views/Collection.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Collection_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Collection.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Collection.vue?vue&type=script&lang=js&":
/*!***********************************************************!*\
  !*** ./src/views/Collection.vue?vue&type=script&lang=js& ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Collection.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/views/Collection.vue?vue&type=style&index=0&lang=scss&":
/*!********************************************************************!*\
  !*** ./src/views/Collection.vue?vue&type=style&index=0&lang=scss& ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Collection.vue?vue&type=style&index=0&lang=scss& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=style&index=0&lang=scss&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/views/Collection.vue?vue&type=template&id=55026158&":
/*!*****************************************************************!*\
  !*** ./src/views/Collection.vue?vue&type=template&id=55026158& ***!
  \*****************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Collection.vue?vue&type=template&id=55026158& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Collection.vue?vue&type=template&id=55026158&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Collection_vue_vue_type_template_id_55026158___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/views/Home.vue":
/*!****************************!*\
  !*** ./src/views/Home.vue ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Home_vue_vue_type_template_id_fae5bece_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Home.vue?vue&type=template&id=fae5bece&scoped=true& */ "./src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&");
/* harmony import */ var _Home_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Home.vue?vue&type=script&lang=js& */ "./src/views/Home.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Home_vue_vue_type_style_index_0_id_fae5bece_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true& */ "./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Home_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Home_vue_vue_type_template_id_fae5bece_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Home_vue_vue_type_template_id_fae5bece_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "fae5bece",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Home.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Home.vue?vue&type=script&lang=js&":
/*!*****************************************************!*\
  !*** ./src/views/Home.vue?vue&type=script&lang=js& ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Home.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true&":
/*!**************************************************************************************!*\
  !*** ./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true& ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_fae5bece_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_fae5bece_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_fae5bece_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_fae5bece_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_fae5bece_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_fae5bece_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&":
/*!***********************************************************************!*\
  !*** ./src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true& ***!
  \***********************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_template_id_fae5bece_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Home.vue?vue&type=template&id=fae5bece&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_template_id_fae5bece_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_template_id_fae5bece_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/views/Leaderboard.vue":
/*!***********************************!*\
  !*** ./src/views/Leaderboard.vue ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true& */ "./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true&");
/* harmony import */ var _Leaderboard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Leaderboard.vue?vue&type=script&lang=js& */ "./src/views/Leaderboard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& */ "./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Leaderboard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "c7fd0e9a",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Leaderboard.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Leaderboard.vue?vue&type=script&lang=js&":
/*!************************************************************!*\
  !*** ./src/views/Leaderboard.vue?vue&type=script&lang=js& ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Leaderboard.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&":
/*!*********************************************************************************************!*\
  !*** ./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=style&index=0&id=c7fd0e9a&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_style_index_0_id_c7fd0e9a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true&":
/*!******************************************************************************!*\
  !*** ./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true& ***!
  \******************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Leaderboard.vue?vue&type=template&id=c7fd0e9a&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Leaderboard_vue_vue_type_template_id_c7fd0e9a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/views/Locations.vue":
/*!*********************************!*\
  !*** ./src/views/Locations.vue ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Locations_vue_vue_type_template_id_3b4780d8_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Locations.vue?vue&type=template&id=3b4780d8&scoped=true& */ "./src/views/Locations.vue?vue&type=template&id=3b4780d8&scoped=true&");
/* harmony import */ var _Locations_vue_vue_type_style_index_0_id_3b4780d8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true& */ "./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");

var script = {}



/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  script,
  _Locations_vue_vue_type_template_id_3b4780d8_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Locations_vue_vue_type_template_id_3b4780d8_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "3b4780d8",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/Locations.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true&":
/*!*******************************************************************************************!*\
  !*** ./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true& ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_style_index_0_id_3b4780d8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js??ref--2-2!../../node_modules/vue-loader/lib??vue-loader-options!./Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true& */ "./node_modules/style-loader/dist/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Locations.vue?vue&type=style&index=0&id=3b4780d8&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_style_index_0_id_3b4780d8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_style_index_0_id_3b4780d8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_style_index_0_id_3b4780d8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_style_index_0_id_3b4780d8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_dist_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_ref_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_style_index_0_id_3b4780d8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/views/Locations.vue?vue&type=template&id=3b4780d8&scoped=true&":
/*!****************************************************************************!*\
  !*** ./src/views/Locations.vue?vue&type=template&id=3b4780d8&scoped=true& ***!
  \****************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_template_id_3b4780d8_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Locations.vue?vue&type=template&id=3b4780d8&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/Locations.vue?vue&type=template&id=3b4780d8&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_template_id_3b4780d8_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Locations_vue_vue_type_template_id_3b4780d8_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/views/SingleCard.vue":
/*!**********************************!*\
  !*** ./src/views/SingleCard.vue ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _SingleCard_vue_vue_type_template_id_5489c532___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SingleCard.vue?vue&type=template&id=5489c532& */ "./src/views/SingleCard.vue?vue&type=template&id=5489c532&");
/* harmony import */ var _SingleCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SingleCard.vue?vue&type=script&lang=js& */ "./src/views/SingleCard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _SingleCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _SingleCard_vue_vue_type_template_id_5489c532___WEBPACK_IMPORTED_MODULE_0__["render"],
  _SingleCard_vue_vue_type_template_id_5489c532___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/SingleCard.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/views/SingleCard.vue?vue&type=script&lang=js&":
/*!***********************************************************!*\
  !*** ./src/views/SingleCard.vue?vue&type=script&lang=js& ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_SingleCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./SingleCard.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/views/SingleCard.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_SingleCard_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/views/SingleCard.vue?vue&type=template&id=5489c532&":
/*!*****************************************************************!*\
  !*** ./src/views/SingleCard.vue?vue&type=template&id=5489c532& ***!
  \*****************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_SingleCard_vue_vue_type_template_id_5489c532___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./SingleCard.vue?vue&type=template&id=5489c532& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/views/SingleCard.vue?vue&type=template&id=5489c532&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_SingleCard_vue_vue_type_template_id_5489c532___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_SingleCard_vue_vue_type_template_id_5489c532___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0NhcmQudnVlIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9DYXJkUHJldmlldy52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0xlYWRlcmJvYXJkQ2FyZC52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24udnVlIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9TY2FuLnZ1ZSIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL0FkZC52dWUiLCJ3ZWJwYWNrOi8vL3NyYy92aWV3cy9Db2xsZWN0aW9uLnZ1ZSIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL0hvbWUudnVlIiwid2VicGFjazovLy9zcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlIiwid2VicGFjazovLy9zcmMvdmlld3MvU2luZ2xlQ2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/NWJhMiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZT81NGRlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRQcmV2aWV3LnZ1ZT81MDAzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlYWRlcmJvYXJkQ2FyZC52dWU/NjAyOSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLnZ1ZT8yZWJkIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NjYW4udnVlP2E1ZGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0FkZC52dWU/ZWE2NiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvQ29sbGVjdGlvbi52dWU/ODI3ZSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvSG9tZS52dWU/NjY5ZiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlP2E3NzMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0xvY2F0aW9ucy52dWU/ZjRiZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FyLXNjYW5uZXIvcXItc2Nhbm5lci13b3JrZXIubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FyLXNjYW5uZXIvcXItc2Nhbm5lci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/MTYzMyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZT85NDE5Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRQcmV2aWV3LnZ1ZT80ODA4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlYWRlcmJvYXJkQ2FyZC52dWU/NjY3MCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLnZ1ZT9lZWQyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NjYW4udnVlPzM5MmEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0FkZC52dWU/NDY0NyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvQ29sbGVjdGlvbi52dWU/YTg5ZCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvSG9tZS52dWU/NjZlYiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlPzZlZjYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0xvY2F0aW9ucy52dWU/YzBhMCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/NjQ3YSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZT85YmIzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRQcmV2aWV3LnZ1ZT9jODBjIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlYWRlcmJvYXJkQ2FyZC52dWU/YTQzYiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLnZ1ZT9hMTk3Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NjYW4udnVlP2IyYTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0FkZC52dWU/MjVhNiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvQ29sbGVjdGlvbi52dWU/ZTk2YSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvSG9tZS52dWU/ZjQyMiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlPzhmOWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0xvY2F0aW9ucy52dWU/YTk4NiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvU2luZ2xlQ2FyZC52dWU/YmMxYSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtcm91dGVyL2Rpc3QvdnVlLXJvdXRlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZXgvZGlzdC92dWV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlIiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlPzY5NTEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/MjY4NSIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzIHN5bmMgbm9ucmVjdXJzaXZlIFxcLihwbmd8anBnKSQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cyBzeW5jIF5cXC5cXC8uKiQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9BcHAgU2tpbiBBc3NldHMvTGVhZGVyYm9hcmQvUmFuay00Ky1iYWNrZ3JvdW5kLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL0FwcCBTa2luIEFzc2V0cy9MZWFkZXJib2FyZC9Ub3AtMy1SYW5rLWJhY2tncm91bmQucG5nIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvQXBwIFNraW4gQXNzZXRzL1VuaXZlcnNhbC9TdG9uZS1iYWNrZ3JvdW5kLShtZW51LWFuZC1sZWFkZXJib2FyZCkucG5nIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvQXBwIFNraW4gQXNzZXRzL1VuaXZlcnNhbC9Xb29kLUJhY2tncm91bmQuanBnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvQmFjay1vZi1DYXJkLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL0N1bHJvc3MuanBnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvRG91bmVfQ2FzdGxlLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL0ZvbnRzL2Nvb3Blci1oZXdpdHQvQ29vcGVySGV3aXR0LUJvbGQub3RmIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvRm9udHMvY29vcGVyLWhld2l0dC9Db29wZXJIZXdpdHQtTWVkaXVtLm90ZiIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL0ZvbnRzL2Nvb3Blci1oZXdpdHQvQ29vcGVySGV3aXR0LWJvbGQub3RmIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvRm9udHMvbW9udHNlcnJhdC9Nb250c2VycmF0LUJvbGQub3RmIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvRm9udHMvbW9udHNlcnJhdC9Nb250c2VycmF0LU1lZGl1bS5vdGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9HbGVuY29lLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2JhY2stYnV0dG9uLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2RlZmF1bHQtY2FyZC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9kZWZhdWx0LXByb2ZpbGUuanBnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvZmlsbC1tdXJyYXkuanBnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvZmxpcC1jYXJkLWJ1dHRvbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9ncmV5ZnJpYXJzLWJvYmJ5LWJhY2sucG5nIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvZ3JleWZyaWFycy1ib2JieS1mcm9udC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9wbGFjZS1jYWdlLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3BsYWNlLWtlYW51LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3JhbmstYmFja2dyb3VuZC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9yb2JlcnQtYnJ1Y2UtYmFjay5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9yb2JlcnQtYnJ1Y2UtZnJvbnQucG5nIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvcm9iZXJ0LWNhcmQtYmFjay5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9yb2JlcnQtdGhlLWJydWNlLWNhcmQtYmFjay5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9yb2JlcnQtdGhlLWJydWNlLWNhcmQtZnJvbnQuanBnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvcm9iZXJ0LXRoZS1icnVjZS1wcmV2aWV3LmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3N0b25lLWJhY2stYnV0dG9uLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3N0b25lLWJhY2tncm91bmQucG5nIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvdG9tLXJpZGRsZS1ncy5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy90b3AtcmFuay1iYWNrZ3JvdW5kLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3ZvbGRlbW9ydC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy93ZWUtZ2FpdGhlcmVycy1sb2dvLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3dvb2QtYmFja2dyb3VuZC5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC52dWU/YjNiOCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkLnZ1ZT80ZGUyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmQudnVlPzVhZGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZFByZXZpZXcudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRQcmV2aWV3LnZ1ZT8wN2FjIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRQcmV2aWV3LnZ1ZT82Zjc2Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRQcmV2aWV3LnZ1ZT9lZjJlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0dlby52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGVhZGVyYm9hcmRDYXJkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MZWFkZXJib2FyZENhcmQudnVlPzQ1ZGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGVhZGVyYm9hcmRDYXJkLnZ1ZT82YTQ4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlYWRlcmJvYXJkQ2FyZC52dWU/YjBjMCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLnZ1ZT82OWQ5Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24udnVlPzY5MDAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi52dWU/ZDkxNSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TY2FuLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TY2FuLnZ1ZT9mOTdhIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NjYW4udnVlPzIzOTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2Nhbi52dWU/YTYxMSIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL3JvdXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL3N0b3Jlcy9iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvQWRkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvQWRkLnZ1ZT9kMjgyIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9BZGQudnVlPzdiM2UiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0FkZC52dWU/YWVmZiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvQ29sbGVjdGlvbi52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0NvbGxlY3Rpb24udnVlP2YxYzIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0NvbGxlY3Rpb24udnVlP2FmYTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0NvbGxlY3Rpb24udnVlPzFiOTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0hvbWUudnVlIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9Ib21lLnZ1ZT83YWFjIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9Ib21lLnZ1ZT8zYzVkIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9Ib21lLnZ1ZT8zODZmIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9MZWFkZXJib2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0xlYWRlcmJvYXJkLnZ1ZT80NzJlIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9MZWFkZXJib2FyZC52dWU/OTlhOSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlP2E1MDgiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0xvY2F0aW9ucy52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0xvY2F0aW9ucy52dWU/YzhjNSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvTG9jYXRpb25zLnZ1ZT9lMzM0Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9TaW5nbGVDYXJkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvU2luZ2xlQ2FyZC52dWU/YWJlMyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvU2luZ2xlQ2FyZC52dWU/MjE2MCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsInV0aWxzIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsInhockFkYXB0ZXIiLCJjb25maWciLCJQcm9taXNlIiwiZGlzcGF0Y2hYaHJSZXF1ZXN0IiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiaGVhZGVycyIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwib3BlbiIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwidXJsIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJoYW5kbGVMb2FkIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVVJMIiwiaW5kZXhPZiIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlRGF0YSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJoYW5kbGVBYm9ydCIsIm9uZXJyb3IiLCJoYW5kbGVFcnJvciIsIm9udGltZW91dCIsImhhbmRsZVRpbWVvdXQiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsImZvckVhY2giLCJzZXRSZXF1ZXN0SGVhZGVyIiwidmFsIiwia2V5IiwidG9Mb3dlckNhc2UiLCJlIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJ0aGVuIiwib25DYW5jZWxlZCIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiZGVmYXVsdHMiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJleHRlbmQiLCJheGlvcyIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwibWVzc2FnZSIsInRvU3RyaW5nIiwiX19DQU5DRUxfXyIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlRXhlY3V0b3IiLCJ0b2tlbiIsInJlYXNvbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJzb3VyY2UiLCJjIiwidmFsdWUiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJhcmd1bWVudHMiLCJjaGFpbiIsInVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMiLCJwdXNoIiwibGVuZ3RoIiwic2hpZnQiLCJnZXRVcmkiLCJyZXBsYWNlIiwiZm9yRWFjaE1ldGhvZE5vRGF0YSIsIm1lcmdlIiwiZm9yRWFjaE1ldGhvZFdpdGhEYXRhIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImlkIiwiZm4iLCJmb3JFYWNoSGFuZGxlciIsImgiLCJlbmhhbmNlRXJyb3IiLCJjb2RlIiwiZXJyb3IiLCJFcnJvciIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiYmFzZVVSTCIsInRyYW5zZm9ybVJlcXVlc3QiLCJjb21tb24iLCJjbGVhbkhlYWRlckNvbmZpZyIsImFkYXB0ZXIiLCJvbkFkYXB0ZXJSZXNvbHV0aW9uIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJvbkFkYXB0ZXJSZWplY3Rpb24iLCJpc0F4aW9zRXJyb3IiLCJ0b0pTT04iLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMiIsInByb3AiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwiaXNPYmplY3QiLCJkZWVwTWVyZ2UiLCJkZWZhdWx0VG9Db25maWcyIiwidmFsaWRhdGVTdGF0dXMiLCJmbnMiLCJ0cmFuc2Zvcm0iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJpc1VuZGVmaW5lZCIsImdldERlZmF1bHRBZGFwdGVyIiwicHJvY2VzcyIsIk9iamVjdCIsImNhbGwiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJtYXhDb250ZW50TGVuZ3RoIiwidGhpc0FyZyIsIndyYXAiLCJhcmdzIiwiQXJyYXkiLCJpIiwiYXBwbHkiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJzZXJpYWxpemUiLCJpc0FycmF5IiwicGFyc2VWYWx1ZSIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJoYXNobWFya0luZGV4Iiwic2xpY2UiLCJyZWxhdGl2ZVVSTCIsInN0YW5kYXJkQnJvd3NlckVudiIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsIm5vblN0YW5kYXJkQnJvd3NlckVudiIsInRlc3QiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50Iiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJub3JtYWxpemVkTmFtZSIsInByb2Nlc3NIZWFkZXIiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInNwbGl0IiwicGFyc2VyIiwibGluZSIsInRyaW0iLCJzdWJzdHIiLCJjb25jYXQiLCJjYWxsYmFjayIsImFyciIsIkZvcm1EYXRhIiwicmVzdWx0IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpc0Z1bmN0aW9uIiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInN0ciIsInByb2R1Y3QiLCJvYmoiLCJsIiwiaGFzT3duUHJvcGVydHkiLCJhc3NpZ25WYWx1ZSIsImEiLCJiIiwiY29uc3RydWN0b3IiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwibmVlZFF1b3RlcyIsIl9fZXNNb2R1bGUiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsInF1ZXVlIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsImxlbiIsInJ1biIsIm5leHRUaWNrIiwiSXRlbSIsImFycmF5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm1lZGlhRGV2aWNlcyIsImVudW1lcmF0ZURldmljZXMiLCJzb21lIiwia2luZCIsIkRFRkFVTFRfQ0FOVkFTX1NJWkUiLCIkdmlkZW8iLCIkY2FudmFzIiwiX29uRGVjb2RlIiwiX3BhdXNlZCIsIl9hY3RpdmUiLCJ3aWR0aCIsImhlaWdodCIsIl9zb3VyY2VSZWN0IiwieCIsInkiLCJfb25DYW5QbGF5IiwiX29uUGxheSIsIl9vblZpc2liaWxpdHlDaGFuZ2UiLCJfcXJXb3JrZXIiLCJXb3JrZXIiLCJXT1JLRVJfUEFUSCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdG9wIiwicG9zdE1lc3NhZ2UiLCJ0eXBlIiwiY29uc29sZSIsIndhcm4iLCJoaWRkZW4iLCJfb2ZmVGltZW91dCIsInNyY09iamVjdCIsInBsYXkiLCJfZ2V0Q2FtZXJhU3RyZWFtIiwiX3NldFZpZGVvTWlycm9yIiwicGF1c2UiLCJnZXRUcmFja3MiLCJkIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwidXNlSW50ZWdlckFwcHJveGltYXRpb24iLCJfdXBkYXRlU291cmNlUmVjdCIsIl9zY2FuRnJhbWUiLCJzdGFydCIsIk1hdGgiLCJyb3VuZCIsIm1pbiIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsInBhdXNlZCIsImVuZGVkIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2NhbkltYWdlIiwiZXhhY3QiLCJmYWNpbmdNb2RlIiwiX2dldE1hdGNoaW5nQ2FtZXJhU3RyZWFtIiwiZ2V0VXNlck1lZGlhIiwidmlkZW8iLCJzdHlsZSIsImYiLCJnIiwibiIsIm0iLCJrIiwiX2xvYWRJbWFnZSIsIl9nZXRJbWFnZURhdGEiLCJnZXRDb250ZXh0IiwiYWxwaGEiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJkcmF3SW1hZ2UiLCJnZXRJbWFnZURhdGEiLCJIVE1MQ2FudmFzRWxlbWVudCIsIkhUTUxWaWRlb0VsZW1lbnQiLCJJbWFnZUJpdG1hcCIsIk9mZnNjcmVlbkNhbnZhcyIsIkltYWdlIiwiX2F3YWl0SW1hZ2VMb2FkIiwiRmlsZSIsIlVSTCIsInNyYyIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsImNvbXBsZXRlIiwibmF0dXJhbFdpZHRoIiwiZ2xvYmFsIiwic2V0SW1tZWRpYXRlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJyZWdpc3RlckltbWVkaWF0ZSIsIkZ1bmN0aW9uIiwidGFzayIsImNsZWFySW1tZWRpYXRlIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwiaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24iLCJjYW5Vc2VQb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24iLCJtZXNzYWdlUHJlZml4IiwicmFuZG9tIiwib25HbG9iYWxNZXNzYWdlIiwiZXZlbnQiLCJhdHRhY2hFdmVudCIsImluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uIiwiY2hhbm5lbCIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24iLCJodG1sIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0IiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24iLCJhdHRhY2hUbyIsImdldFByb3RvdHlwZU9mIiwic2VsZiIsInNjb3BlIiwiVGltZW91dCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImNsb3NlIiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJvblRpbWVvdXQiLCJfb25UaW1lb3V0IiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwiaXNFcnJvciIsImVyciIsImlzRXh0ZW5kZWRFcnJvciIsIl9uYW1lIiwiVmlldyIsImZ1bmN0aW9uYWwiLCJwcm9wcyIsIlN0cmluZyIsInJlbmRlciIsIl8iLCJjaGlsZHJlbiIsInBhcmVudCIsInJvdXRlclZpZXciLCIkY3JlYXRlRWxlbWVudCIsInJvdXRlIiwiJHJvdXRlIiwiY2FjaGUiLCJfcm91dGVyVmlld0NhY2hlIiwiZGVwdGgiLCJpbmFjdGl2ZSIsIl9yb3V0ZXJSb290Iiwidm5vZGVEYXRhIiwiJHZub2RlIiwia2VlcEFsaXZlIiwiX2luYWN0aXZlIiwiJHBhcmVudCIsInJvdXRlclZpZXdEZXB0aCIsIm1hdGNoZWQiLCJjb21wb25lbnQiLCJjb21wb25lbnRzIiwicmVnaXN0ZXJSb3V0ZUluc3RhbmNlIiwidm0iLCJjdXJyZW50IiwiaW5zdGFuY2VzIiwiaG9vayIsInByZXBhdGNoIiwidm5vZGUiLCJjb21wb25lbnRJbnN0YW5jZSIsImluaXQiLCJwcm9wc1RvUGFzcyIsInJlc29sdmVQcm9wcyIsImF0dHJzIiwiZW5jb2RlUmVzZXJ2ZVJFIiwiZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyIiwiY2hhckNvZGVBdCIsImNvbW1hUkUiLCJkZWNvZGUiLCJyZXNvbHZlUXVlcnkiLCJxdWVyeSIsImV4dHJhUXVlcnkiLCJfcGFyc2VRdWVyeSIsInBhcnNlUXVlcnkiLCJwYXJzZWRRdWVyeSIsInJlcyIsInBhcmFtIiwic3RyaW5naWZ5UXVlcnkiLCJrZXlzIiwidmFsMiIsImZpbHRlciIsInRyYWlsaW5nU2xhc2hSRSIsImNyZWF0ZVJvdXRlIiwicmVjb3JkIiwicmVkaXJlY3RlZEZyb20iLCJyb3V0ZXIiLCJvcHRpb25zIiwiY2xvbmUiLCJtZXRhIiwiZnVsbFBhdGgiLCJnZXRGdWxsUGF0aCIsImZvcm1hdE1hdGNoIiwiZnJlZXplIiwiU1RBUlQiLCJfc3RyaW5naWZ5UXVlcnkiLCJpc1NhbWVSb3V0ZSIsImlzT2JqZWN0RXF1YWwiLCJhS2V5cyIsImJLZXlzIiwiZXZlcnkiLCJhVmFsIiwiYlZhbCIsImlzSW5jbHVkZWRSb3V0ZSIsInRhcmdldCIsInF1ZXJ5SW5jbHVkZXMiLCJyZXNvbHZlUGF0aCIsInJlbGF0aXZlIiwiYmFzZSIsImFwcGVuZCIsImZpcnN0Q2hhciIsInBvcCIsInNlZ21lbnRzIiwic2VnbWVudCIsInBhcnNlUGF0aCIsImhhc2hJbmRleCIsInF1ZXJ5SW5kZXgiLCJjbGVhblBhdGgiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwXzEiLCJwYXRoVG9SZWdleHAiLCJwYXJzZV8xIiwiY29tcGlsZV8xIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb25fMSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cF8xIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInRva2VucyIsImluZGV4IiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJlc2NhcGVkIiwib2Zmc2V0IiwibmV4dCIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJlbmNvZGVBc3RlcmlzayIsIm1hdGNoZXMiLCJvcHRzIiwicHJldHR5IiwiaiIsImF0dGFjaEtleXMiLCJyZSIsImZsYWdzIiwic2Vuc2l0aXZlIiwicmVnZXhwVG9SZWdleHAiLCJncm91cHMiLCJhcnJheVRvUmVnZXhwIiwicmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJzdHJpY3QiLCJlbmQiLCJlbmRzV2l0aERlbGltaXRlciIsInJlZ2V4cENvbXBpbGVDYWNoZSIsImZpbGxQYXJhbXMiLCJyb3V0ZU1zZyIsImZpbGxlciIsInBhdGhNYXRjaCIsIm5vcm1hbGl6ZUxvY2F0aW9uIiwicmF3IiwiX25vcm1hbGl6ZWQiLCJyYXdQYXRoIiwicGFyc2VkUGF0aCIsImJhc2VQYXRoIiwidG9UeXBlcyIsImV2ZW50VHlwZXMiLCJMaW5rIiwidG8iLCJyZXF1aXJlZCIsInRhZyIsIkJvb2xlYW4iLCJhY3RpdmVDbGFzcyIsImV4YWN0QWN0aXZlQ2xhc3MiLCJ0aGlzJDEiLCIkcm91dGVyIiwiY2xhc3NlcyIsImdsb2JhbEFjdGl2ZUNsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwiZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyIsImxpbmtFeGFjdEFjdGl2ZUNsYXNzIiwiYWN0aXZlQ2xhc3NGYWxsYmFjayIsImV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayIsImNvbXBhcmVUYXJnZXQiLCJoYW5kbGVyIiwiZ3VhcmRFdmVudCIsImNsaWNrIiwic2NvcGVkU2xvdCIsIiRzY29wZWRTbG90cyIsIiRoYXNOb3JtYWwiLCJuYXZpZ2F0ZSIsImlzQWN0aXZlIiwiaXNFeGFjdEFjdGl2ZSIsImZpbmRBbmNob3IiLCIkc2xvdHMiLCJpc1N0YXRpYyIsImFEYXRhIiwiaGFuZGxlciQxIiwiZXZlbnQkMSIsImFBdHRycyIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsImdldEF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0IiwiY2hpbGQiLCJfVnVlIiwiaW5zdGFsbCIsIlZ1ZSIsImluc3RhbGxlZCIsImlzRGVmIiwicmVnaXN0ZXJJbnN0YW5jZSIsImNhbGxWYWwiLCIkb3B0aW9ucyIsIl9wYXJlbnRWbm9kZSIsIm1peGluIiwiYmVmb3JlQ3JlYXRlIiwiX3JvdXRlciIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImhpc3RvcnkiLCJkZXN0cm95ZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIl9yb3V0ZSIsInN0cmF0cyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImJlZm9yZVJvdXRlRW50ZXIiLCJiZWZvcmVSb3V0ZUxlYXZlIiwiYmVmb3JlUm91dGVVcGRhdGUiLCJjcmVhdGVkIiwiaW5Ccm93c2VyIiwiY3JlYXRlUm91dGVNYXAiLCJyb3V0ZXMiLCJvbGRQYXRoTGlzdCIsIm9sZFBhdGhNYXAiLCJvbGROYW1lTWFwIiwicGF0aExpc3QiLCJwYXRoTWFwIiwibmFtZU1hcCIsImFkZFJvdXRlUmVjb3JkIiwic3BsaWNlIiwiZm91bmQiLCJwYXRoTmFtZXMiLCJtYXRjaEFzIiwicGF0aFRvUmVnZXhwT3B0aW9ucyIsIm5vcm1hbGl6ZWRQYXRoIiwibm9ybWFsaXplUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJyZWdleCIsImNvbXBpbGVSb3V0ZVJlZ2V4IiwicmVkaXJlY3QiLCJiZWZvcmVFbnRlciIsImNoaWxkTWF0Y2hBcyIsImFsaWFzIiwiYWxpYXNlcyIsImFsaWFzUm91dGUiLCJjcmVhdGVNYXRjaGVyIiwiYWRkUm91dGVzIiwiY3VycmVudFJvdXRlIiwiX2NyZWF0ZVJvdXRlIiwicGFyYW1OYW1lcyIsInJlY29yZCQxIiwibWF0Y2hSb3V0ZSIsIm9yaWdpbmFsUmVkaXJlY3QiLCJ0YXJnZXRSZWNvcmQiLCJyZXNvbHZlUmVjb3JkUGF0aCIsInJlc29sdmVkUGF0aCIsImFsaWFzZWRQYXRoIiwiYWxpYXNlZE1hdGNoIiwiYWxpYXNlZFJlY29yZCIsIlRpbWUiLCJwZXJmb3JtYW5jZSIsImdlblN0YXRlS2V5IiwidG9GaXhlZCIsIl9rZXkiLCJnZXRTdGF0ZUtleSIsInNldFN0YXRlS2V5IiwicG9zaXRpb25TdG9yZSIsInNldHVwU2Nyb2xsIiwicHJvdG9jb2xBbmRQYXRoIiwiYWJzb2x1dGVQYXRoIiwicmVwbGFjZVN0YXRlIiwic2F2ZVNjcm9sbFBvc2l0aW9uIiwic3RhdGUiLCJoYW5kbGVTY3JvbGwiLCJmcm9tIiwiaXNQb3AiLCJhcHAiLCJiZWhhdmlvciIsInNjcm9sbEJlaGF2aW9yIiwiJG5leHRUaWNrIiwicG9zaXRpb24iLCJnZXRTY3JvbGxQb3NpdGlvbiIsInNob3VsZFNjcm9sbCIsInNjcm9sbFRvUG9zaXRpb24iLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwiZWwiLCJkb2NFbCIsImRvY1JlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbFJlY3QiLCJsZWZ0IiwidG9wIiwiaXNWYWxpZFBvc2l0aW9uIiwibm9ybWFsaXplUG9zaXRpb24iLCJub3JtYWxpemVPZmZzZXQiLCJoYXNoU3RhcnRzV2l0aE51bWJlclJFIiwic2VsZWN0b3IiLCJnZXRFbGVtZW50QnlJZCIsInF1ZXJ5U2VsZWN0b3IiLCJzY3JvbGxUbyIsInN1cHBvcnRzUHVzaFN0YXRlIiwidWEiLCJwdXNoU3RhdGUiLCJydW5RdWV1ZSIsImNiIiwic3RlcCIsInJlc29sdmVBc3luY0NvbXBvbmVudHMiLCJoYXNBc3luYyIsInBlbmRpbmciLCJmbGF0TWFwQ29tcG9uZW50cyIsImRlZiIsImNpZCIsInJlc29sdmVkRGVmIiwiaXNFU01vZHVsZSIsInJlc29sdmVkIiwibXNnIiwiY29tcCIsImZsYXR0ZW4iLCJoYXNTeW1ib2wiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImNhbGxlZCIsIk5hdmlnYXRpb25EdXBsaWNhdGVkIiwibm9ybWFsaXplZExvY2F0aW9uIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJfX3Byb3RvX18iLCJIaXN0b3J5Iiwibm9ybWFsaXplQmFzZSIsInJlYWR5IiwicmVhZHlDYnMiLCJyZWFkeUVycm9yQ2JzIiwiZXJyb3JDYnMiLCJsaXN0ZW4iLCJvblJlYWR5IiwiZXJyb3JDYiIsIm9uRXJyb3IiLCJ0cmFuc2l0aW9uVG8iLCJvbkNvbXBsZXRlIiwib25BYm9ydCIsImNvbmZpcm1UcmFuc2l0aW9uIiwidXBkYXRlUm91dGUiLCJlbnN1cmVVUkwiLCJyZXNvbHZlUXVldWUiLCJ1cGRhdGVkIiwiZGVhY3RpdmF0ZWQiLCJhY3RpdmF0ZWQiLCJleHRyYWN0TGVhdmVHdWFyZHMiLCJiZWZvcmVIb29rcyIsImV4dHJhY3RVcGRhdGVIb29rcyIsIml0ZXJhdG9yIiwicG9zdEVudGVyQ2JzIiwiaXNWYWxpZCIsImVudGVyR3VhcmRzIiwiZXh0cmFjdEVudGVyR3VhcmRzIiwicmVzb2x2ZUhvb2tzIiwicHJldiIsImFmdGVySG9va3MiLCJiYXNlRWwiLCJtYXgiLCJleHRyYWN0R3VhcmRzIiwicmVjb3JkcyIsInJldmVyc2UiLCJndWFyZHMiLCJndWFyZCIsImV4dHJhY3RHdWFyZCIsImJpbmRHdWFyZCIsImJvdW5kUm91dGVHdWFyZCIsImNicyIsImJpbmRFbnRlckd1YXJkIiwicm91dGVFbnRlckd1YXJkIiwicG9sbCIsIl9pc0JlaW5nRGVzdHJveWVkIiwiSFRNTDVIaXN0b3J5IiwiZXhwZWN0U2Nyb2xsIiwic3VwcG9ydHNTY3JvbGwiLCJpbml0TG9jYXRpb24iLCJnZXRMb2NhdGlvbiIsImdvIiwiZnJvbVJvdXRlIiwiZ2V0Q3VycmVudExvY2F0aW9uIiwiZGVjb2RlVVJJIiwiSGFzaEhpc3RvcnkiLCJmYWxsYmFjayIsImNoZWNrRmFsbGJhY2siLCJlbnN1cmVTbGFzaCIsInNldHVwTGlzdGVuZXJzIiwiZ2V0SGFzaCIsInJlcGxhY2VIYXNoIiwicHVzaEhhc2giLCJzZWFyY2hJbmRleCIsImdldFVybCIsIkFic3RyYWN0SGlzdG9yeSIsInRhcmdldEluZGV4IiwiVnVlUm91dGVyIiwiYXBwcyIsIm1hdGNoZXIiLCJtb2RlIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiJG9uY2UiLCJzZXR1cEhhc2hMaXN0ZW5lciIsImJlZm9yZUVhY2giLCJyZWdpc3Rlckhvb2siLCJiZWZvcmVSZXNvbHZlIiwiYWZ0ZXJFYWNoIiwiYmFjayIsImZvcndhcmQiLCJnZXRNYXRjaGVkQ29tcG9uZW50cyIsImNyZWF0ZUhyZWYiLCJub3JtYWxpemVkVG8iLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW1wdHlPYmplY3QiLCJpc1VuZGVmIiwiaXNUcnVlIiwiaXNGYWxzZSIsImlzUHJpbWl0aXZlIiwiX3RvU3RyaW5nIiwidG9SYXdUeXBlIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJwYXJzZUZsb2F0IiwiZmxvb3IiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJoYXNPd24iLCJjYWNoZWQiLCJjYWNoZWRGbiIsImhpdCIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsImNhcGl0YWxpemUiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsInBvbHlmaWxsQmluZCIsImN0eCIsImJvdW5kRm4iLCJfbGVuZ3RoIiwibmF0aXZlQmluZCIsInRvQXJyYXkiLCJyZXQiLCJfZnJvbSIsInRvT2JqZWN0Iiwibm8iLCJpZGVudGl0eSIsImdlblN0YXRpY0tleXMiLCJyZWR1Y2UiLCJzdGF0aWNLZXlzIiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJhc3luYyIsIl9saWZlY3ljbGVIb29rcyIsInVuaWNvZGVSZWdFeHAiLCJpc1Jlc2VydmVkIiwiZW51bWVyYWJsZSIsImJhaWxSRSIsImhhc1Byb3RvIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0FuZHJvaWQiLCJpc0lPUyIsImlzQ2hyb21lIiwiaXNQaGFudG9tSlMiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIl9pc1NlcnZlciIsImlzU2VydmVyUmVuZGVyaW5nIiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJSZWZsZWN0Iiwib3duS2V5cyIsIl9TZXQiLCJTZXQiLCJzZXQiLCJoYXMiLCJhZGQiLCJjbGVhciIsInRpcCIsImdlbmVyYXRlQ29tcG9uZW50VHJhY2UiLCJmb3JtYXRDb21wb25lbnROYW1lIiwiaGFzQ29uc29sZSIsImNsYXNzaWZ5UkUiLCJjbGFzc2lmeSIsInRyYWNlIiwiaW5jbHVkZUZpbGUiLCIkcm9vdCIsIl9pc1Z1ZSIsIl9jb21wb25lbnRUYWciLCJmaWxlIiwiX19maWxlIiwidHJlZSIsImN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSIsImxhc3QiLCJ1aWQiLCJEZXAiLCJzdWJzIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5Iiwic29ydCIsInVwZGF0ZSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwidGV4dCIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwib3JpZ2luYWwiLCJtdXRhdG9yIiwib2IiLCJfX29iX18iLCJpbnNlcnRlZCIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJpdGVtcyIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsInByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0dGVyIiwic2V0dGVyIiwiY2hpbGRPYiIsInJlYWN0aXZlR2V0dGVyIiwiZGVwZW5kQXJyYXkiLCJyZWFjdGl2ZVNldHRlciIsIm5ld1ZhbCIsImRlbCIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsIm1lcmdlZERhdGFGbiIsIm1lcmdlZEluc3RhbmNlRGF0YUZuIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJkZWR1cGVIb29rcyIsImhvb2tzIiwibWVyZ2VBc3NldHMiLCJhc3NlcnRPYmplY3RUeXBlIiwia2V5JDEiLCJtZXRob2RzIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiY2hlY2tDb21wb25lbnRzIiwidmFsaWRhdGVDb21wb25lbnROYW1lIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVJbmplY3QiLCJub3JtYWxpemVkIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsImRpcnMiLCJkaXJlY3RpdmVzIiwiZGVmJCQxIiwibWVyZ2VPcHRpb25zIiwiX2Jhc2UiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImFzc2VydFByb3AiLCJfcHJvcHMiLCJnZXRUeXBlIiwidmFsaWQiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsImdldEludmFsaWRUeXBlTWVzc2FnZSIsInZhbGlkYXRvciIsInNpbXBsZUNoZWNrUkUiLCJ0IiwiaXNTYW1lVHlwZSIsInJlY2VpdmVkVHlwZSIsImV4cGVjdGVkVmFsdWUiLCJzdHlsZVZhbHVlIiwicmVjZWl2ZWRWYWx1ZSIsImlzRXhwbGljYWJsZSIsImlzQm9vbGVhbiIsIk51bWJlciIsImV4cGxpY2l0VHlwZXMiLCJlbGVtIiwiaW5mbyIsImN1ciIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiX2hhbmRsZWQiLCJsb2dFcnJvciIsImlzVXNpbmdNaWNyb1Rhc2siLCJjYWxsYmFja3MiLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInRpbWVyRnVuYyIsInAiLCJNdXRhdGlvbk9ic2VydmVyIiwiY291bnRlciIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoYXJhY3RlckRhdGEiLCJfcmVzb2x2ZSIsIm1hcmsiLCJtZWFzdXJlIiwicGVyZiIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwic3RhcnRUYWciLCJlbmRUYWciLCJpbml0UHJveHkiLCJhbGxvd2VkR2xvYmFscyIsIndhcm5Ob25QcmVzZW50Iiwid2FyblJlc2VydmVkUHJlZml4IiwiaGFzUHJveHkiLCJQcm94eSIsImlzQnVpbHRJbk1vZGlmaWVyIiwiaGFzSGFuZGxlciIsImlzQWxsb3dlZCIsIiRkYXRhIiwiZ2V0SGFuZGxlciIsIl93aXRoU3RyaXBwZWQiLCJfcmVuZGVyUHJveHkiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY3JlYXRlRm5JbnZva2VyIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib2xkT24iLCJyZW1vdmUkJDEiLCJjcmVhdGVPbmNlSGFuZGxlciIsIm9sZCIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJrZXlJbkxvd2VyQ2FzZSIsImNoZWNrUHJvcCIsInByZXNlcnZlIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJpc1RleHROb2RlIiwibmVzdGVkSW5kZXgiLCJsYXN0SW5kZXgiLCJfaXNWTGlzdCIsImluaXRQcm92aWRlIiwiX3Byb3ZpZGVkIiwiaW5pdEluamVjdGlvbnMiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsInByb3ZpZGVEZWZhdWx0IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwibm9ybWFsaXplU2NvcGVkU2xvdHMiLCJub3JtYWxTbG90cyIsInByZXZTbG90cyIsImhhc05vcm1hbFNsb3RzIiwiaXNTdGFibGUiLCIkc3RhYmxlIiwiJGtleSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3QiLCJrZXkkMiIsInByb3h5Tm9ybWFsU2xvdCIsInByb3h5IiwicmVuZGVyTGlzdCIsImRvbmUiLCJyZW5kZXJTbG90IiwiYmluZE9iamVjdCIsInNjb3BlZFNsb3RGbiIsIm5vZGVzIiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInN0YXRpY1JlbmRlckZucyIsIm1hcmtTdGF0aWMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsImV4aXN0aW5nIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwidmFsdWVzIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3MiLCJfbCIsIl90IiwiX3EiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX2UiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIl9jb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX3Njb3BlSWQiLCJfYyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJtZXJnZVByb3BzIiwicmVuZGVyQ29udGV4dCIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJ2bm9kZXMiLCJkZXZ0b29sc01ldGEiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaHlkcmF0aW5nIiwiX2lzRGVzdHJveWVkIiwibW91bnRlZE5vZGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwicXVldWVBY3RpdmF0ZWRDb21wb25lbnQiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsIiRkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJuYXRpdmVPbiIsImluc3RhbGxDb21wb25lbnRIb29rcyIsIl9pc0NvbXBvbmVudCIsImlubGluZVRlbXBsYXRlIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiX2NyZWF0ZUVsZW1lbnQiLCJpcyIsInByZSIsImFwcGx5TlMiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsImZvcmNlIiwiaW5pdFJlbmRlciIsIl92bm9kZSIsInBhcmVudFZub2RlIiwiX3JlbmRlckNoaWxkcmVuIiwicGFyZW50RGF0YSIsImlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJNaXhpbiIsIl9yZW5kZXIiLCJyZW5kZXJFcnJvciIsImVuc3VyZUN0b3IiLCJmYWN0b3J5IiwiZXJyb3JDb21wIiwib3duZXIiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCIkZm9yY2VVcGRhdGUiLCJkZWxheSIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJpbml0RXZlbnRzIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsImkkMSIsIiRlbWl0IiwibG93ZXJDYXNlRXZlbnQiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImluaXRMaWZlY3ljbGUiLCIkY2hpbGRyZW4iLCIkcmVmcyIsIl93YXRjaGVyIiwiX2RpcmVjdEluYWN0aXZlIiwibGlmZWN5Y2xlTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsInRlYXJkb3duIiwiX3dhdGNoZXJzIiwiX2RhdGEiLCJtb3VudENvbXBvbmVudCIsInRlbXBsYXRlIiwidXBkYXRlQ29tcG9uZW50IiwiX3VpZCIsIldhdGNoZXIiLCJiZWZvcmUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJpc0luSW5hY3RpdmVUcmVlIiwiZGlyZWN0IiwiTUFYX1VQREFURV9DT1VOVCIsImFjdGl2YXRlZENoaWxkcmVuIiwiY2lyY3VsYXIiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJyZXNldFNjaGVkdWxlclN0YXRlIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInVzZXIiLCJleHByZXNzaW9uIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJjYWxsVXBkYXRlZEhvb2tzIiwicXVldWVXYXRjaGVyIiwidWlkJDIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiZGVlcCIsImxhenkiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwicHJveHlHZXR0ZXIiLCJwcm94eVNldHRlciIsImluaXRTdGF0ZSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiaW5pdERhdGEiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJwcm9wc09wdGlvbnMiLCJpc1Jvb3QiLCJnZXREYXRhIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJkZWZpbmVDb21wdXRlZCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiY29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVXYXRjaGVyIiwiJHdhdGNoIiwic3RhdGVNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRzZXQiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwidW53YXRjaEZuIiwidWlkJDMiLCJpbml0TWl4aW4iLCJfaW5pdCIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIl9zZWxmIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwic3VwZXJPcHRpb25zIiwiY2FjaGVkU3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJpbml0VXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwiaW5pdE1peGluJDEiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIlZ1ZUNvbXBvbmVudCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJDb21wIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiZGVmaW5pdGlvbiIsImdldENvbXBvbmVudE5hbWUiLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY2FjaGVkJCQxIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJtb3VudGVkIiwicmVmJDEiLCJwYXJzZUludCIsImJ1aWx0SW5Db21wb25lbnRzIiwiaW5pdEdsb2JhbEFQSSIsImNvbmZpZ0RlZiIsIm9ic2VydmFibGUiLCJzc3JDb250ZXh0IiwiYWNjZXB0VmFsdWUiLCJhdHRyIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJpc0ZhbHN5QXR0clZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInJlbmRlckNsYXNzIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0Iiwic3RyaW5naWZpZWQiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJpc1ByZVRhZyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzVGV4dElucHV0VHlwZSIsInNlbGVjdGVkIiwiY3JlYXRlRWxlbWVudCQxIiwidGFnTmFtZSIsIm11bHRpcGxlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwiY3JlYXRlQ29tbWVudCIsImluc2VydEJlZm9yZSIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50Iiwic2V0U3R5bGVTY29wZSIsInNjb3BlSWQiLCJub2RlT3BzIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJzYW1lSW5wdXRUeXBlIiwidHlwZUEiLCJ0eXBlQiIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwiYmFja2VuZCIsImVtcHR5Tm9kZUF0IiwiY3JlYXRlUm1DYiIsImNoaWxkRWxtIiwicmVtb3ZlTm9kZSIsImlzVW5rbm93bkVsZW1lbnQkJDEiLCJpblZQcmUiLCJpZ25vcmUiLCJjcmVhdGluZ0VsbUluVlByZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsInBhcmVudEVsbSIsInJlZkVsbSIsIm5lc3RlZCIsIm93bmVyQXJyYXkiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJpbm5lck5vZGUiLCJ0cmFuc2l0aW9uIiwiYWN0aXZhdGUiLCJyZWYkJDEiLCJjaGVja0R1cGxpY2F0ZUtleXMiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJybSIsInVwZGF0ZUNoaWxkcmVuIiwib2xkQ2giLCJuZXdDaCIsInJlbW92ZU9ubHkiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwiY2FuTW92ZSIsInBhdGNoVm5vZGUiLCJmaW5kSWR4SW5PbGQiLCJzZWVuS2V5cyIsImh5ZHJhdGUiLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImh5ZHJhdGlvbkJhaWxlZCIsImlzUmVuZGVyZWRNb2R1bGUiLCJhc3NlcnROb2RlTWF0Y2giLCJoYXNDaGlsZE5vZGVzIiwiaW5uZXJIVE1MIiwiY2hpbGRyZW5NYXRjaCIsImZpcnN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZnVsbEludm9rZSIsIm5vZGVUeXBlIiwicGF0Y2giLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbGRFbG0iLCJfbGVhdmVDYiIsInBhdGNoYWJsZSIsImkkMiIsInVwZGF0ZURpcmVjdGl2ZXMiLCJ1bmJpbmREaXJlY3RpdmVzIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGREaXIiLCJjYWxsSG9vayQxIiwib2xkQXJnIiwiYXJnIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYmFzZVNldEF0dHIiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwia2xhc3MiLCJ2YWxpZERpdmlzaW9uQ2hhclJFIiwicGFyc2VGaWx0ZXJzIiwiZXhwIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsImZpbHRlcnMiLCJwdXNoRmlsdGVyIiwid3JhcEZpbHRlciIsImJhc2VXYXJuIiwicmFuZ2UiLCJwbHVja01vZHVsZUZ1bmN0aW9uIiwiYWRkUHJvcCIsImR5bmFtaWMiLCJyYW5nZVNldEl0ZW0iLCJwbGFpbiIsImFkZEF0dHIiLCJkeW5hbWljQXR0cnMiLCJhZGRSYXdBdHRyIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJhZGREaXJlY3RpdmUiLCJpc0R5bmFtaWNBcmciLCJwcmVwZW5kTW9kaWZpZXJNYXJrZXIiLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwicHJldmVudCIsInJpZ2h0IiwibWlkZGxlIiwiZXZlbnRzIiwibmF0aXZlRXZlbnRzIiwibmV3SGFuZGxlciIsImdldFJhd0JpbmRpbmdBdHRyIiwicmF3QXR0cnNNYXAiLCJnZXRCaW5kaW5nQXR0ciIsImdldFN0YXRpYyIsImR5bmFtaWNWYWx1ZSIsImdldEFuZFJlbW92ZUF0dHIiLCJzdGF0aWNWYWx1ZSIsInJlbW92ZUZyb21NYXAiLCJnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCIsImdlbkNvbXBvbmVudE1vZGVsIiwiYmFzZVZhbHVlRXhwcmVzc2lvbiIsInZhbHVlRXhwcmVzc2lvbiIsImFzc2lnbm1lbnQiLCJnZW5Bc3NpZ25tZW50Q29kZSIsInBhcnNlTW9kZWwiLCJjaHIiLCJpbmRleCQxIiwiZXhwcmVzc2lvblBvcyIsImV4cHJlc3Npb25FbmRQb3MiLCJsYXN0SW5kZXhPZiIsImVvZiIsImlzU3RyaW5nU3RhcnQiLCJwYXJzZVN0cmluZyIsInBhcnNlQnJhY2tldCIsImluQnJhY2tldCIsInN0cmluZ1F1b3RlIiwid2FybiQxIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsIl93YXJuIiwiZ2VuU2VsZWN0IiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJnZW5EZWZhdWx0TW9kZWwiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJzZWxlY3RlZFZhbCIsInZhbHVlJDEiLCJ0eXBlQmluZGluZyIsIm5lZWRDb21wb3NpdGlvbkd1YXJkIiwibm9ybWFsaXplRXZlbnRzIiwiY2hhbmdlIiwidGFyZ2V0JDEiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJfdk1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwiY3NzVGV4dCIsImxpc3REZWxpbWl0ZXIiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZ2V0U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZSIsInZlbmRvck5hbWVzIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJjYW5jZWxsZWQiLCJfZW50ZXJDYiIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiY2hlY2tEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJiZWZvcmVMZWF2ZSIsImFmdGVyTGVhdmUiLCJsZWF2ZUNhbmNlbGxlZCIsImRlbGF5TGVhdmUiLCJleHBsaWNpdExlYXZlRHVyYXRpb24iLCJwZXJmb3JtTGVhdmUiLCJpbnZva2VyRm5zIiwiX2VudGVyIiwicGxhdGZvcm1Nb2R1bGVzIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsIl92T3B0aW9ucyIsInNldFNlbGVjdGVkIiwiZ2V0VmFsdWUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwicHJldk9wdGlvbnMiLCJjdXJPcHRpb25zIiwibyIsIm5lZWRSZXNldCIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5IiwidW5iaW5kIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvblByb3BzIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsImlzU2FtZUNoaWxkIiwib2xkQ2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsInJlbW92ZWQiLCJjJDEiLCJwb3MiLCJoYXNNb3ZlIiwiY2FsbFBlbmRpbmdDYnMiLCJyZWNvcmRQb3NpdGlvbiIsImFwcGx5VHJhbnNsYXRpb24iLCJfcmVmbG93IiwiYm9keSIsIm9mZnNldEhlaWdodCIsIm1vdmVkIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwibmV3UG9zIiwib2xkUG9zIiwiZHgiLCJkeSIsInBsYXRmb3JtQ29tcG9uZW50cyIsImRlZmF1bHRUYWdSRSIsInJlZ2V4RXNjYXBlUkUiLCJidWlsZFJlZ2V4IiwiZGVsaW1pdGVycyIsInBhcnNlVGV4dCIsInRhZ1JFIiwicmF3VG9rZW5zIiwidG9rZW5WYWx1ZSIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhIiwia2xhc3MkMSIsInRyYW5zZm9ybU5vZGUkMSIsInN0eWxlQmluZGluZyIsImdlbkRhdGEkMSIsInN0eWxlJDEiLCJkZWNvZGVyIiwiaGUiLCJpc1VuYXJ5VGFnIiwiY2FuQmVMZWZ0T3BlblRhZyIsImlzTm9uUGhyYXNpbmdUYWciLCJhdHRyaWJ1dGUiLCJkeW5hbWljQXJnQXR0cmlidXRlIiwibmNuYW1lIiwicW5hbWVDYXB0dXJlIiwic3RhcnRUYWdPcGVuIiwic3RhcnRUYWdDbG9zZSIsImRvY3R5cGUiLCJjb21tZW50IiwiY29uZGl0aW9uYWxDb21tZW50IiwiaXNQbGFpblRleHRFbGVtZW50IiwicmVDYWNoZSIsImRlY29kaW5nTWFwIiwiZW5jb2RlZEF0dHIiLCJlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyIsImlzSWdub3JlTmV3bGluZVRhZyIsInNob3VsZElnbm9yZUZpcnN0TmV3bGluZSIsImRlY29kZUF0dHIiLCJzaG91bGREZWNvZGVOZXdsaW5lcyIsInBhcnNlSFRNTCIsImV4cGVjdEhUTUwiLCJpc1VuYXJ5VGFnJCQxIiwiY2FuQmVMZWZ0T3BlblRhZyQkMSIsImxhc3RUYWciLCJ0ZXh0RW5kIiwiY29tbWVudEVuZCIsInNob3VsZEtlZXBDb21tZW50Iiwic3Vic3RyaW5nIiwiYWR2YW5jZSIsImNvbmRpdGlvbmFsRW5kIiwiZG9jdHlwZU1hdGNoIiwiZW5kVGFnTWF0Y2giLCJjdXJJbmRleCIsInBhcnNlRW5kVGFnIiwic3RhcnRUYWdNYXRjaCIsInBhcnNlU3RhcnRUYWciLCJoYW5kbGVTdGFydFRhZyIsInJlc3QiLCJjaGFycyIsImVuZFRhZ0xlbmd0aCIsInN0YWNrZWRUYWciLCJyZVN0YWNrZWRUYWciLCJyZXN0JDEiLCJ1bmFyeVNsYXNoIiwidW5hcnkiLCJzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYiLCJvdXRwdXRTb3VyY2VSYW5nZSIsImxvd2VyQ2FzZWRUYWciLCJsb3dlckNhc2VkVGFnTmFtZSIsIm9uUkUiLCJkaXJSRSIsImZvckFsaWFzUkUiLCJmb3JJdGVyYXRvclJFIiwic3RyaXBQYXJlbnNSRSIsImR5bmFtaWNBcmdSRSIsImFyZ1JFIiwiYmluZFJFIiwibW9kaWZpZXJSRSIsInNsb3RSRSIsImxpbmVCcmVha1JFIiwid2hpdGVzcGFjZVJFJDEiLCJpbnZhbGlkQXR0cmlidXRlUkUiLCJkZWNvZGVIVE1MQ2FjaGVkIiwiZW1wdHlTbG90U2NvcGVUb2tlbiIsIndhcm4kMiIsInRyYW5zZm9ybXMiLCJwcmVUcmFuc2Zvcm1zIiwicG9zdFRyYW5zZm9ybXMiLCJwbGF0Zm9ybUlzUHJlVGFnIiwicGxhdGZvcm1NdXN0VXNlUHJvcCIsInBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlIiwibWF5YmVDb21wb25lbnQiLCJjcmVhdGVBU1RFbGVtZW50IiwibWFrZUF0dHJzTWFwIiwicHJlc2VydmVXaGl0ZXNwYWNlIiwid2hpdGVzcGFjZU9wdGlvbiIsIndoaXRlc3BhY2UiLCJyb290IiwiY3VycmVudFBhcmVudCIsImluUHJlIiwid2FybmVkIiwid2Fybk9uY2UiLCJjbG9zZUVsZW1lbnQiLCJlbGVtZW50IiwidHJpbUVuZGluZ1doaXRlc3BhY2UiLCJwcm9jZXNzZWQiLCJwcm9jZXNzRWxlbWVudCIsImVsc2VpZiIsImNoZWNrUm9vdENvbnN0cmFpbnRzIiwiYWRkSWZDb25kaXRpb24iLCJibG9jayIsImZvcmJpZGRlbiIsInByb2Nlc3NJZkNvbmRpdGlvbnMiLCJzbG90U2NvcGUiLCJzbG90VGFyZ2V0IiwibGFzdE5vZGUiLCJjb21tZW50cyIsInN0YXJ0JDEiLCJndWFyZElFU1ZHQnVnIiwiY3VtdWxhdGVkIiwiaXNGb3JiaWRkZW5UYWciLCJwcm9jZXNzUHJlIiwicHJvY2Vzc1Jhd0F0dHJzIiwicHJvY2Vzc0ZvciIsInByb2Nlc3NJZiIsInByb2Nlc3NPbmNlIiwiZW5kJDEiLCJpc1RleHRUYWciLCJwcm9jZXNzS2V5IiwicHJvY2Vzc1JlZiIsInByb2Nlc3NTbG90Q29udGVudCIsInByb2Nlc3NTbG90T3V0bGV0IiwicHJvY2Vzc0NvbXBvbmVudCIsInByb2Nlc3NBdHRycyIsIml0ZXJhdG9yMiIsIml0ZXJhdG9yMSIsImNoZWNrSW5Gb3IiLCJwYXJzZUZvciIsImluTWF0Y2giLCJpdGVyYXRvck1hdGNoIiwiZmluZFByZXZFbGVtZW50IiwiaWZDb25kaXRpb25zIiwic2xvdFRhcmdldER5bmFtaWMiLCJzbG90QmluZGluZyIsImdldFNsb3ROYW1lIiwic2xvdEJpbmRpbmckMSIsImR5bmFtaWMkMSIsInNsb3RDb250YWluZXIiLCJzbG90TmFtZSIsInN5bmNHZW4iLCJpc0R5bmFtaWMiLCJoYXNCaW5kaW5ncyIsInBhcnNlTW9kaWZpZXJzIiwiY2FtZWwiLCJhcmdNYXRjaCIsImNoZWNrRm9yQWxpYXNNb2RlbCIsImllTlNCdWciLCJpZU5TUHJlZml4IiwiX2VsIiwicHJlVHJhbnNmb3JtTm9kZSIsImlmQ29uZGl0aW9uIiwiaWZDb25kaXRpb25FeHRyYSIsImhhc0Vsc2UiLCJlbHNlSWZDb25kaXRpb24iLCJicmFuY2gwIiwiY2xvbmVBU1RFbGVtZW50IiwiYnJhbmNoMSIsImJyYW5jaDIiLCJtb2RlbCQxIiwibW9kdWxlcyQxIiwiZGlyZWN0aXZlcyQxIiwiYmFzZU9wdGlvbnMiLCJpc1N0YXRpY0tleSIsImlzUGxhdGZvcm1SZXNlcnZlZFRhZyIsImdlblN0YXRpY0tleXNDYWNoZWQiLCJnZW5TdGF0aWNLZXlzJDEiLCJvcHRpbWl6ZSIsIm1hcmtTdGF0aWMkMSIsIm1hcmtTdGF0aWNSb290cyIsImwkMSIsInN0YXRpY0luRm9yIiwic3RhdGljUm9vdCIsImlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIiwiZm5FeHBSRSIsImZuSW52b2tlUkUiLCJzaW1wbGVQYXRoUkUiLCJlc2MiLCJ0YWIiLCJzcGFjZSIsInVwIiwiZG93biIsImtleU5hbWVzIiwiZ2VuR3VhcmQiLCJtb2RpZmllckNvZGUiLCJjdHJsIiwiYWx0IiwiZ2VuSGFuZGxlcnMiLCJzdGF0aWNIYW5kbGVycyIsImR5bmFtaWNIYW5kbGVycyIsImhhbmRsZXJDb2RlIiwiZ2VuSGFuZGxlciIsImlzTWV0aG9kUGF0aCIsImlzRnVuY3Rpb25FeHByZXNzaW9uIiwiaXNGdW5jdGlvbkludm9jYXRpb24iLCJnZW5Nb2RpZmllckNvZGUiLCJrZXlNb2RpZmllciIsImdlbktleUZpbHRlciIsImdlbkZpbHRlckNvZGUiLCJrZXlWYWwiLCJrZXlDb2RlIiwia2V5TmFtZSIsIndyYXBMaXN0ZW5lcnMiLCJiaW5kJDEiLCJ3cmFwRGF0YSIsImJhc2VEaXJlY3RpdmVzIiwiY2xvYWsiLCJDb2RlZ2VuU3RhdGUiLCJkYXRhR2VuRm5zIiwib25jZUlkIiwiZ2VuZXJhdGUiLCJhc3QiLCJnZW5FbGVtZW50Iiwic3RhdGljUHJvY2Vzc2VkIiwiZ2VuU3RhdGljIiwib25jZVByb2Nlc3NlZCIsImdlbk9uY2UiLCJmb3JQcm9jZXNzZWQiLCJnZW5Gb3IiLCJpZlByb2Nlc3NlZCIsImdlbklmIiwiZ2VuQ2hpbGRyZW4iLCJnZW5TbG90IiwiZ2VuQ29tcG9uZW50IiwiZ2VuRGF0YSQyIiwib3JpZ2luYWxQcmVTdGF0ZSIsImFsdEdlbiIsImFsdEVtcHR5IiwiZ2VuSWZDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImdlblRlcm5hcnlFeHAiLCJhbHRIZWxwZXIiLCJnZW5EaXJlY3RpdmVzIiwiZ2VuUHJvcHMiLCJnZW5TY29wZWRTbG90cyIsImdlbklubGluZVRlbXBsYXRlIiwiaGFzUnVudGltZSIsIm5lZWRSdW50aW1lIiwiZ2VuIiwiaW5saW5lUmVuZGVyRm5zIiwiY29udGFpbnNTbG90Q2hpbGQiLCJuZWVkc0tleSIsImdlbmVyYXRlZFNsb3RzIiwiZ2VuU2NvcGVkU2xvdCIsImlzTGVnYWN5U3ludGF4IiwicmV2ZXJzZVByb3h5IiwiY2hlY2tTa2lwIiwiYWx0R2VuRWxlbWVudCIsImFsdEdlbk5vZGUiLCJlbCQxIiwibm9ybWFsaXphdGlvblR5cGUkMSIsImdldE5vcm1hbGl6YXRpb25UeXBlIiwiZ2VuTm9kZSIsIm5lZWRzTm9ybWFsaXphdGlvbiIsImdlbkNvbW1lbnQiLCJnZW5UZXh0IiwidHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzIiwiYmluZCQkMSIsImNvbXBvbmVudE5hbWUiLCJzdGF0aWNQcm9wcyIsImR5bmFtaWNQcm9wcyIsInByb2hpYml0ZWRLZXl3b3JkUkUiLCJ1bmFyeU9wZXJhdG9yc1JFIiwic3RyaXBTdHJpbmdSRSIsImRldGVjdEVycm9ycyIsImNoZWNrTm9kZSIsImNoZWNrRm9yIiwiY2hlY2tFdmVudCIsImNoZWNrRXhwcmVzc2lvbiIsInN0aXBwZWQiLCJrZXl3b3JkTWF0Y2giLCJjaGVja0lkZW50aWZpZXIiLCJpZGVudCIsImdlbmVyYXRlQ29kZUZyYW1lIiwibGluZXMiLCJjb3VudCIsInJlcGVhdCQxIiwibGluZUxlbmd0aCIsInBhZCIsImxlbmd0aCQxIiwiY3JlYXRlRnVuY3Rpb24iLCJlcnJvcnMiLCJjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIiwiY29tcGlsZVRvRnVuY3Rpb25zIiwid2FybiQkMSIsImNvbXBpbGVkIiwidGlwcyIsImZuR2VuRXJyb3JzIiwiY3JlYXRlQ29tcGlsZXJDcmVhdG9yIiwiYmFzZUNvbXBpbGUiLCJjcmVhdGVDb21waWxlciIsImZpbmFsT3B0aW9ucyIsImxlYWRpbmdTcGFjZUxlbmd0aCIsImRpdiIsImdldFNob3VsZERlY29kZSIsImlkVG9UZW1wbGF0ZSIsIm1vdW50IiwiZ2V0T3V0ZXJIVE1MIiwib3V0ZXJIVE1MIiwiY29udGFpbmVyIiwiYXBwbHlNaXhpbiIsInZ1ZXhJbml0Iiwic3RvcmUiLCIkc3RvcmUiLCJkZXZ0b29sSG9vayIsImRldnRvb2xQbHVnaW4iLCJfZGV2dG9vbEhvb2siLCJ0YXJnZXRTdGF0ZSIsInN1YnNjcmliZSIsIm11dGF0aW9uIiwiZm9yRWFjaFZhbHVlIiwiTW9kdWxlIiwicmF3TW9kdWxlIiwicnVudGltZSIsIl9jaGlsZHJlbiIsIl9yYXdNb2R1bGUiLCJyYXdTdGF0ZSIsIm5hbWVzcGFjZWQiLCJhZGRDaGlsZCIsImdldENoaWxkIiwiYWN0aW9ucyIsIm11dGF0aW9ucyIsImdldHRlcnMiLCJmb3JFYWNoQ2hpbGQiLCJmb3JFYWNoR2V0dGVyIiwiZm9yRWFjaEFjdGlvbiIsImZvckVhY2hNdXRhdGlvbiIsIk1vZHVsZUNvbGxlY3Rpb24iLCJyYXdSb290TW9kdWxlIiwicmVnaXN0ZXIiLCJnZXROYW1lc3BhY2UiLCJ1cGRhdGUkMSIsImFzc2VydFJhd01vZHVsZSIsIm5ld01vZHVsZSIsInJhd0NoaWxkTW9kdWxlIiwidW5yZWdpc3RlciIsInRhcmdldE1vZHVsZSIsImZ1bmN0aW9uQXNzZXJ0IiwiZXhwZWN0ZWQiLCJvYmplY3RBc3NlcnQiLCJhc3NlcnRUeXBlcyIsImFzc2VydE9wdGlvbnMiLCJtYWtlQXNzZXJ0aW9uTWVzc2FnZSIsImJ1ZiIsIlN0b3JlIiwicGx1Z2lucyIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJkaXNwYXRjaCIsImNvbW1pdCIsImJvdW5kRGlzcGF0Y2giLCJwYXlsb2FkIiwiYm91bmRDb21taXQiLCJpbnN0YWxsTW9kdWxlIiwicmVzZXRTdG9yZVZNIiwidXNlRGV2dG9vbHMiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSIsIl92bSIsIiQkc3RhdGUiLCJfdHlwZSIsIl9wYXlsb2FkIiwiX29wdGlvbnMiLCJ1bmlmeU9iamVjdFN0eWxlIiwiZW50cnkiLCJfd2l0aENvbW1pdCIsImNvbW1pdEl0ZXJhdG9yIiwiYWN0aW9uIiwiYWZ0ZXIiLCJnZW5lcmljU3Vic2NyaWJlIiwic3Vic2NyaWJlQWN0aW9uIiwicmVnaXN0ZXJNb2R1bGUiLCJwcmVzZXJ2ZVN0YXRlIiwidW5yZWdpc3Rlck1vZHVsZSIsInBhcmVudFN0YXRlIiwiZ2V0TmVzdGVkU3RhdGUiLCJyZXNldFN0b3JlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJob3QiLCJvbGRWbSIsIndyYXBwZWRHZXR0ZXJzIiwiZW5hYmxlU3RyaWN0TW9kZSIsInJvb3RTdGF0ZSIsIm1vZHVsZU5hbWUiLCJsb2NhbCIsIm1ha2VMb2NhbENvbnRleHQiLCJuYW1lc3BhY2VkVHlwZSIsInJlZ2lzdGVyTXV0YXRpb24iLCJyZWdpc3RlckFjdGlvbiIsInJlZ2lzdGVyR2V0dGVyIiwibm9OYW1lc3BhY2UiLCJtYWtlTG9jYWxHZXR0ZXJzIiwiZ2V0dGVyc1Byb3h5Iiwic3BsaXRQb3MiLCJsb2NhbFR5cGUiLCJ3cmFwcGVkTXV0YXRpb25IYW5kbGVyIiwid3JhcHBlZEFjdGlvbkhhbmRsZXIiLCJyb290R2V0dGVycyIsInJhd0dldHRlciIsIndyYXBwZWRHZXR0ZXIiLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsIm5vcm1hbGl6ZU1hcCIsIm1hcHBlZFN0YXRlIiwiZ2V0TW9kdWxlQnlOYW1lc3BhY2UiLCJ2dWV4IiwibWFwTXV0YXRpb25zIiwibWFwcGVkTXV0YXRpb24iLCJtYXBHZXR0ZXJzIiwibWFwcGVkR2V0dGVyIiwibWFwQWN0aW9ucyIsIm1hcHBlZEFjdGlvbiIsImNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzIiwiaGVscGVyIiwiaW5kZXhfZXNtIiwiQXBwIiwiSG9tZSIsIkNvbGxlY3Rpb24iLCJMZWFkZXJib2FyZCIsIkxvY2F0aW9ucyIsIkFkZENhcmQiLCJnZW9BZGQiLCJTY2FuQWRkIiwiU2luZ2xlQ2FyZCIsImJhc2VTdG9yZSIsImNhcmRzIiwiaW1hZ2VQcmV2aWV3IiwiaW1hZ2VGcm9udCIsImltYWdlQmFjayIsImxlYWRlcmJvYXJkRGF0YSIsInByb2ZpbGVJbWFnZSIsIm9yZGluYWwiLCJjYXJkc0NvbGxlY3RlZCIsInJvdXRlbGlua3MiLCJsaW5rIiwic3ViUm91dGVzIiwic2V0TG9hZGluZyIsInNldENhcmRzIiwiYWRkQ2FyZCIsImNhcmQiLCJmZXRjaENhcmRzIiwic2NhbkNhcmQiLCJnZXRVc2VyQ2FyZHMiLCJjb2xsZWN0ZWQiLCJnZXRBbGxDYXJkcyIsIlZ1ZXgiXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFD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O0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RDs7Ozs7Ozs7Ozs7QUN4REEsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7Ozs7QUNBeEMsaUJBQWlCLHFCQUF1QiwwQzs7Ozs7Ozs7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O0FBQUE7QUFBQTtBQUF5RjtBQUMzQjtBQUNMOzs7QUFHekQ7QUFDMEY7QUFDMUYsZ0JBQWdCLDJHQUFVO0FBQzFCLEVBQUUsZ0ZBQU07QUFDUixFQUFFLHFGQUFNO0FBQ1IsRUFBRSw4RkFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLElBQUksS0FBVSxFQUFFLFlBaUJmO0FBQ0Q7QUFDZSxnRjs7Ozs7Ozs7Ozs7O0FDdENmO0FBQUE7QUFBQSx3Q0FBa0wsQ0FBZ0Isb1BBQUcsRUFBQyxDOzs7Ozs7Ozs7Ozs7QUNBdE07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC5qc1wiKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kID8gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpIDogJ2dldCc7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB1dGlscy5mb3JFYWNoKFsndXJsJywgJ21ldGhvZCcsICdwYXJhbXMnLCAnZGF0YSddLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eSddLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKFtcbiAgICAnYmFzZVVSTCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJywgJ21heENvbnRlbnRMZW5ndGgnLFxuICAgICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JywgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLFxuICAgICdzb2NrZXRQYXRoJ1xuICBdLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICAvLyBPbmx5IE5vZGUuSlMgaGFzIGEgcHJvY2VzcyB2YXJpYWJsZSB0aGF0IGlzIG9mIFtbQ2xhc3NdXSBwcm9jZXNzXG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImNhcmQtY29udGFpbmVyXCI+XHJcbiAgICAgICAgPGhlYWRlcj5cclxuICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPVwiL1wiIGNsYXNzPVwibmF2aWdhdGlvbl9fYmFja1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuLi9hc3NldHMvc3RvbmUtYmFjay1idXR0b24ucG5nXCIgYWx0PVwiXCIgLz5cclxuICAgICAgICAgICAgPC9yb3V0ZXItbGluaz5cclxuICAgICAgICAgICAgPGgxIGNsYXNzPVwiaGVhZGluZzFcIj57eyBjYXJkQ29udGVudC50aXRsZSB9fTwvaDE+XHJcbiAgICAgICAgPC9oZWFkZXI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmRcIiB2LWJpbmQ6Y2xhc3M9XCJ7IGZsaXBwZWQ6IHRoaXMuZmxpcHBlZCB9XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkX19mcm9udFwiPlxyXG4gICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPVwiL2NvbGxlY3Rpb25cIiBjbGFzcz1cIm5hdmlnYXRpb25fX2JhY2tcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4uL2Fzc2V0cy9iYWNrLWJ1dHRvbi5wbmdcIiBhbHQ9XCJcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjYXJkX19mcm9udF9mbGlwXCIgQGNsaWNrPVwiZmxpcENhcmRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4uL2Fzc2V0cy9mbGlwLWNhcmQtYnV0dG9uLnBuZ1wiIGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkX19mcm9udF9pbWFnZVwiIHYtaWY9XCJjYXJkQ29udGVudC5pZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz1cImdldEltZ1VybChjYXJkQ29udGVudC5pbWFnZUZyb250KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cImNhcmQudGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNhcmRfX2Zyb250X2ltYWdlX3NyY1wiXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmRfX2JhY2tcIj5cclxuICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz1cIi9jb2xsZWN0aW9uXCIgY2xhc3M9XCJuYXZpZ2F0aW9uX19iYWNrXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuLi9hc3NldHMvYmFjay1idXR0b24ucG5nXCIgYWx0PVwiXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY2FyZF9fYmFja19mbGlwXCIgQGNsaWNrPVwiZmxpcENhcmRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4uL2Fzc2V0cy9mbGlwLWNhcmQtYnV0dG9uLnBuZ1wiIGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkX19iYWNrX2ltYWdlXCIgdi1pZj1cImNhcmRDb250ZW50LmlkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6c3JjPVwiZ2V0SW1nVXJsKGNhcmRDb250ZW50LmltYWdlQmFjaylcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJjYXJkLnRpdGxlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJjYXJkX19iYWNrX2ltYWdlX3NyY1wiXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjYXJkQ29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICBpbm5lckNhcmQ6IG51bGwsXHJcbiAgICAgICAgICAgIC8vIGNhcmQ6IG51bGwsXHJcblxyXG4gICAgICAgICAgICBjb3VudGVyOiAwLFxyXG4gICAgICAgICAgICB1cGRhdGVSYXRlOiAxLFxyXG4gICAgICAgICAgICBtb3VzZToge1xyXG4gICAgICAgICAgICAgICAgX3g6IDAsXHJcbiAgICAgICAgICAgICAgICBfeTogMCxcclxuICAgICAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwYXJlbnRFbDogbnVsbCxcclxuICAgICAgICAgICAgZmxpcHBlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNhblRpbHQ6IHRydWUsXHJcbiAgICAgICAgICAgIGNhcmRDb250ZW50OiB7fSxcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBjYXJkSWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuY2FyZENvbnRlbnQgPSB0aGlzLiRzdG9yZS5zdGF0ZS5iYXNlLmNhcmRzLmZpbmQoXHJcbiAgICAgICAgICAgIGNhcmQgPT4gY2FyZC5pZCA9PT0gcGFyc2VJbnQodGhpcy5jYXJkSWQpXHJcbiAgICAgICAgKVxyXG5cclxuICAgICAgICB0aGlzLmNhcmRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZCcpXHJcbiAgICAgICAgdGhpcy5pbm5lckNhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZCcpXHJcbiAgICAgICAgdGhpcy5jYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQnKVxyXG4gICAgICAgIHRoaXMuY2FyZENvbnRhaW5lci5vbm1vdXNlZW50ZXIgPSB0aGlzLm9uRW50ZXJcclxuICAgICAgICB0aGlzLmNhcmRDb250YWluZXIub25tb3VzZWxlYXZlID0gdGhpcy5vbkxlYXZlXHJcbiAgICAgICAgdGhpcy5jYXJkQ29udGFpbmVyLm9ubW91c2Vtb3ZlID0gdGhpcy5vbk1vdmVcclxuICAgICAgICB0aGlzLnNldE1vdXNlT3JpZ2luKHRoaXMuY2FyZENvbnRhaW5lcilcclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgZ2V0SW1nVXJsKGNhcmRJbWFnZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbWFnZXMgPSByZXF1aXJlLmNvbnRleHQoJy4uL2Fzc2V0cy8nLCBmYWxzZSwgL1xcLihwbmd8anBnKSQvKVxyXG4gICAgICAgICAgICByZXR1cm4gaW1hZ2VzKGAuLyR7Y2FyZEltYWdlfWApXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkVudGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy51cGRhdGVQZXJzcGVjdGl2ZShldmVudClcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jYW5UaWx0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyQ2FyZC5zdHlsZSA9ICcnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZsaXBDYXJkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5mbGlwcGVkID0gIXRoaXMuZmxpcHBlZFxyXG4gICAgICAgICAgICB0aGlzLmNhblRpbHQgPSBmYWxzZVxyXG4gICAgICAgICAgICBsZXQgc3R5bGUgPSBgcm90YXRlWCgwZGVnKSByb3RhdGVZKCR7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZsaXBwZWQgPyAnLTE4MCcgOiAnMCdcclxuICAgICAgICAgICAgfWRlZylgXHJcbiAgICAgICAgICAgIHRoaXMuZmxpcHBlZFxyXG4gICAgICAgICAgICAgICAgPyAodGhpcy5jYXJkQ29udGFpbmVyLnN0eWxlLnBlcnNwZWN0aXZlID0gJzYwMHB4JylcclxuICAgICAgICAgICAgICAgIDogc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhblRpbHQgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcmRDb250YWluZXIuc3R5bGUucGVyc3BlY3RpdmUgPSAnNjAwcHgnXHJcbiAgICAgICAgICAgICAgICAgIH0sIDUwMClcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FyZC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uTW92ZTogZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgLy8gaWYgKHRoaXMudGltZVVwZGF0ZSgpICYmIHRoaXMuY2FuVGlsdCkge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy51cGRhdGVQZXJzcGVjdGl2ZShldmVudClcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gdXBkYXRlUGVyc3BlY3RpdmU6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMudXBkYXRlTW91c2VQb3NpdGlvbihldmVudClcclxuICAgICAgICAvLyAgICAgdGhpcy51cGRhdGVUcmFuc2Zvcm0oXHJcbiAgICAgICAgLy8gICAgICAgICAodGhpcy5tb3VzZS55IC8gdGhpcy5pbm5lckNhcmQub2Zmc2V0SGVpZ2h0IC8gMikudG9GaXhlZCgyKSxcclxuICAgICAgICAvLyAgICAgICAgICh0aGlzLm1vdXNlLnggLyB0aGlzLmlubmVyQ2FyZC5vZmZzZXRXaWR0aCAvIDIpLnRvRml4ZWQoMilcclxuICAgICAgICAvLyAgICAgKVxyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgdGltZVVwZGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY291bnRlcisrICUgdGhpcy51cGRhdGVSYXRlID09PSAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1cGRhdGVNb3VzZVBvc2l0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGxldCBlID0gZXZlbnQgfHwgd2luZG93LmV2ZW50XHJcbiAgICAgICAgICAgIHRoaXMubW91c2UueCA9IGUuY2xpZW50WCAtIHRoaXMuX3hcclxuICAgICAgICAgICAgdGhpcy5tb3VzZS55ID0gKGUuY2xpZW50WSAtIHRoaXMuX3kpICogLTFcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldE1vdXNlT3JpZ2luKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ggPSBldmVudC5vZmZzZXRMZWZ0ICsgTWF0aC5mbG9vcihldmVudC5vZmZzZXRXaWR0aCAvIDIpXHJcbiAgICAgICAgICAgIHRoaXMuX3kgPSBldmVudC5vZmZzZXRUb3AgKyBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldEhlaWdodCAvIDIpXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1cGRhdGVUcmFuc2Zvcm0oeCwgeSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mbGlwcGVkKSByZXR1cm5cclxuICAgICAgICAgICAgbGV0IHN0eWxlID0gYHJvdGF0ZVgoJHt4fWRlZykgcm90YXRlWSgke3l9ZGVnKWBcclxuICAgICAgICAgICAgdGhpcy5pbm5lckNhcmQuc3R5bGUudHJhbnNmb3JtID0gc3R5bGVcclxuICAgICAgICAgICAgdGhpcy5pbm5lckNhcmQuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gc3R5bGVcclxuICAgICAgICAgICAgdGhpcy5pbm5lckNhcmQuc3R5bGUubW96VHJhbnNmb3JtID0gc3R5bGVcclxuICAgICAgICAgICAgdGhpcy5pbm5lckNhcmQuc3R5bGUubXNUcmFuc2Zvcm0gPSBzdHlsZVxyXG4gICAgICAgICAgICB0aGlzLmlubmVyQ2FyZC5zdHlsZS5vVHJhbnNmb3JtID0gc3R5bGVcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxufVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxyXG4uY2FyZC1jb250YWluZXIge1xyXG4gICAgcGVyc3BlY3RpdmU6IDgwMHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGhlaWdodDogMTAwJTtcclxufVxyXG4uY2FyZCB7XHJcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC41cztcclxuICAgIGhlaWdodDogNTMzcHg7XHJcbiAgICB3aWR0aDogMzAwcHg7XHJcbiAgICB0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcblxyXG4gICAgJl9fZnJvbnQsXHJcbiAgICAmX19iYWNrIHtcclxuICAgICAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgaGVpZ2h0OiA1MDBweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTAwJTtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IFtpbWFnZV0gYXV0byBbZm9vdGVyXSAxZnI7XHJcbiAgICAgICAgei1pbmRleDogMjtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcblxyXG4gICAgICAgICZfZmxpcCB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XHJcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICByaWdodDogMDtcclxuICAgICAgICAgICAgdG9wOiAtNXB4O1xyXG4gICAgICAgICAgICBtYXJnaW46IDFyZW07XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICAgICAgICAgIHotaW5kZXg6IDEwO1xyXG5cclxuICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMnB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAubmF2aWdhdGlvbl9fYmFjayB7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMXJlbTtcclxuICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICB0b3A6IC02cHg7XHJcbiAgICAgICAgICAgIGxlZnQ6IC0xMHB4O1xyXG5cclxuICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMnB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX2ltYWdlIHtcclxuICAgICAgICAgICAgbWF4LXdpZHRoOiAzMDBweDtcclxuICAgICAgICAgICAgaGVpZ2h0OiA1MDBweDtcclxuICAgICAgICAgICAgZ3JpZC1jb2x1bW46IDE7XHJcbiAgICAgICAgICAgIGdyaWQtcm93OiBpbWFnZTtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDYwMHB4O1xyXG4gICAgICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzogMnB4IDJweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX2Zvb3RlciB7XHJcbiAgICAgICAgICAgIGdyaWQtcm93OiBmb290ZXI7XHJcbiAgICAgICAgICAgIGdyaWQtY29sdW1uOiAxO1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xyXG4gICAgICAgICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogW3Jhcml0eV0gMWZyIFtuYW1lXSAzZnI7XHJcbiAgICAgICAgICAgICZfbmFtZSxcclxuICAgICAgICAgICAgJl9yYXJpdHkge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAmX3Jhcml0eSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDFyZW07XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwJTtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICZfX2JhY2sge1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSgxODBkZWcpO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgLy8gYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuXHJcbiAgICAgICAgaDEge1xyXG4gICAgICAgICAgICBtYXJnaW46IDNyZW0gMCAzcmVtIDA7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogM3JlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcclxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuM3JlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuPC9zdHlsZT5cclxuIiwiPHRlbXBsYXRlPlxyXG4gICAgPGFcclxuICAgICAgICA6aHJlZj1cImNhcmREZXRhaWxzLnRpdGxlID8gJy8jL2NhcmQvJyArIGNhcmREZXRhaWxzLmlkIDogJyMnXCJcclxuICAgICAgICBjbGFzcz1cInByZXZpZXctY2FyZFwiXHJcbiAgICAgICAgOnN0eWxlPVwiW1xyXG4gICAgICAgICAgICBjYXJkRGV0YWlscy5pbWFnZUZyb250XHJcbiAgICAgICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCgnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKGAuLi9hc3NldHMvJHtjYXJkRGV0YWlscy5pbWFnZVByZXZpZXd9YCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICcpJyxcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgOiB7fSxcclxuICAgICAgICBdXCJcclxuICAgID48L2E+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIGNhcmREZXRhaWxzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdCxcclxuICAgICAgICAgICAgcmVxdXJpZWQ6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbn1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cclxuLnByZXZpZXctY2FyZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL2RlZmF1bHQtY2FyZC5wbmcpO1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgIGhlaWdodDogMzMwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG48L3N0eWxlPlxyXG4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwibGVhZGVyYm9hcmQtY2FyZFwiPlxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgICAgOmNsYXNzPVwiW1xyXG4gICAgICAgICAgICAgICAgJ2xlYWRlcmJvYXJkLWNhcmRfX3Bvc2l0aW9uJyxcclxuICAgICAgICAgICAgICAgIGRhdGEucG9zaXRpb24gPT09ICcxJyB8fFxyXG4gICAgICAgICAgICAgICAgZGF0YS5wb3NpdGlvbiA9PT0gJzInIHx8XHJcbiAgICAgICAgICAgICAgICBkYXRhLnBvc2l0aW9uID09PSAnMydcclxuICAgICAgICAgICAgICAgICAgICA/ICdsZWFkZXJib2FyZC1jYXJkX19wb3NpdGlvbi0tdG9wLXRocmVlJ1xyXG4gICAgICAgICAgICAgICAgICAgIDogJycsXHJcbiAgICAgICAgICAgIF1cIlxyXG4gICAgICAgID5cclxuICAgICAgICAgICAge3sgZGF0YS5wb3NpdGlvbiB9fVxyXG4gICAgICAgICAgICA8c3Bhbj57eyBkYXRhLm9yZGluYWwgfX08L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImxlYWRlcmJvYXJkLWNhcmRfX2NvbnRlbnRcIj5cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJsZWFkZXJib2FyZC1jYXJkX19pbWFnZVwiXHJcbiAgICAgICAgICAgICAgICA6c3R5bGU9XCJbXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9maWxlSW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1cmwoJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKGAuLi9hc3NldHMvJHtkYXRhLnByb2ZpbGVJbWFnZX1gKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHt9LFxyXG4gICAgICAgICAgICAgICAgXVwiXHJcbiAgICAgICAgICAgID48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxlYWRlcmJvYXJkLWNhcmRfX3VzZXJuYW1lXCI+e3sgZGF0YS51c2VybmFtZSB9fTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGVhZGVyYm9hcmQtY2FyZF9fY2FyZHMtY29sbGVjdGVkXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxlYWRlcmJvYXJkLWNhcmRfX2NhcmRzLWNvbGxlY3RlZF9fbnVtYmVyXCI+e3tcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNhcmRzQ29sbGVjdGVkXHJcbiAgICAgICAgICAgICAgICB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgcG9pbnRzXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxyXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxufVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxyXG4ubGVhZGVyYm9hcmQtY2FyZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvc3RvbmUtYmFja2dyb3VuZC5wbmcpO1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogdG9wIGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxuICAgIG1heC1oZWlnaHQ6IDg1cHg7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vYXNzZXRzL0FwcCBTa2luIEFzc2V0cy9MZWFkZXJib2FyZC9SYW5rLTQrLWJhY2tncm91bmQucG5nJyk7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJTtcclxuICAgICYudG9wMyB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9hc3NldHMvQXBwIFNraW4gQXNzZXRzL0xlYWRlcmJvYXJkL1RvcC0zLVJhbmstYmFja2dyb3VuZC5wbmcnKTtcclxuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJTtcclxuICAgIH1cclxuXHJcbiAgICAmX19wb3NpdGlvbiB7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk2OTY5O1xyXG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvcmFuay1iYWNrZ3JvdW5kLnBuZyk7XHJcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICBjb2xvcjogI2Q5ZDlkOTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgaGVpZ2h0OiAzMHB4O1xyXG4gICAgICAgIHBhZGRpbmc6IDAgMTBweDtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiAxMHB4O1xyXG4gICAgICAgIGxlZnQ6IC03cHg7XHJcbiAgICAgICAgd2lkdGg6IDQ1cHg7XHJcblxyXG4gICAgICAgICYtLXRvcC10aHJlZSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9hc3NldHMvdG9wLXJhbmstYmFja2dyb3VuZC5wbmcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgdG9wOiAzcHg7XHJcbiAgICAgICAgICAgIGxlZnQ6IDIwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICZfX2NvbnRlbnQge1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuXHJcbiAgICAmX19pbWFnZSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2Fzc2V0cy9kZWZhdWx0LXByb2ZpbGUuanBnKTtcclxuICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XHJcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICBoZWlnaHQ6IDY1cHg7XHJcbiAgICAgICAgd2lkdGg6IDY1cHg7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fdXNlcm5hbWUge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS41ZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fY2FyZHMtY29sbGVjdGVkIHtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG4gICAgICAgICZfX251bWJlciB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41ZW07XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG48L3N0eWxlPlxyXG4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwibmF2aWdhdGlvblwiPlxyXG4gICAgICAgIDxyb3V0ZXItbGlua1xyXG4gICAgICAgICAgICB2LWZvcj1cInJvdXRlIGluIHJvdXRlc1wiXHJcbiAgICAgICAgICAgIDp0bz1cInJvdXRlLmxpbmtcIlxyXG4gICAgICAgICAgICA6a2V5PVwicm91dGUudGV4dFwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwibmF2aWdhdGlvbl9faXRlbVwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICB7eyByb3V0ZS50ZXh0IH19XHJcbiAgICAgICAgPC9yb3V0ZXItbGluaz5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHJvdXRlczogQXJyYXksXHJcbiAgICB9LFxyXG59XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbi5uYXZpZ2F0aW9uIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuXHJcbiAgICAmX19pdGVtIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL3N0b25lLWJhY2tncm91bmQucG5nKTtcclxuICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiB0b3AgY2VudGVyO1xyXG4gICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjVlbTtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgICAgIHBhZGRpbmc6IDI5cHggMDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG5cclxuICAgICAgICAvLyAmLnJvdXRlci1saW5rLWV4YWN0LWFjdGl2ZSxcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG48L3N0eWxlPlxyXG4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYWRkY2FyZC1jb250YWluZXJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidmlkZW8tY29udGFpbmVyXCIgdi1pZj1cIiFzY2FubmVkQ2FyZFwiPlxyXG4gICAgICAgICAgICA8aGVhZGVyPlxyXG4gICAgICAgICAgICA8cm91dGVyLWxpbmsgdG89XCIvXCIgY2xhc3M9XCJuYXZpZ2F0aW9uX19iYWNrXCI+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4uL2Fzc2V0cy9zdG9uZS1iYWNrLWJ1dHRvbi5wbmdcIiBhbHQ9XCJcIiAvPlxyXG4gICAgICAgICAgICA8L3JvdXRlci1saW5rPlxyXG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzPVwiaGVhZGluZzFcIj5TY2FuIGEgY29kZTwvaDE+XHJcbiAgICAgICAgICAgIDwvaGVhZGVyPlxyXG4gICAgICAgICAgICA8dmlkZW8gaWQ9XCJxclJlYWRlclwiPjwvdmlkZW8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtcHJldmlld1wiIHYtaWY9XCJzY2FubmVkQ2FyZFwiPlxyXG4gICAgICAgICAgICA8Y2FyZCA6Y2FyZC1pZD1cIkpTT04uc3RyaW5naWZ5KHNjYW5uZWRDYXJkLmlkKVwiPjwvY2FyZD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8aDIgY2xhc3M9XCJhZGRlZC10ZXh0XCIgdi1pZj1cInNjYW5uZWRDYXJkXCI+XHJcbiAgICAgICAgICAgIFN1Y2Nlc3NmdWxseSBhZGRlZCB7eyBzY2FubmVkQ2FyZC50aXRsZSB9fVxyXG4gICAgICAgIDwvaDI+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4jcXJSZWFkZXIge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuLmFkZGVkLXRleHQge1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICBmb250LXNpemU6IDEuNzVlbTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG48L3N0eWxlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgUXJTY2FubmVyIGZyb20gJ3FyLXNjYW5uZXInXHJcbmltcG9ydCBRclNjYW5uZXJXb3JrZXJQYXRoIGZyb20gJyEhZmlsZS1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3FyLXNjYW5uZXIvcXItc2Nhbm5lci13b3JrZXIubWluLmpzJ1xyXG5RclNjYW5uZXIuV09SS0VSX1BBVEggPSBRclNjYW5uZXJXb3JrZXJQYXRoXHJcbmltcG9ydCBDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZC52dWUnXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBjb21wb25lbnRzOiB7IENhcmQgfSxcclxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNjYW5uZXI6IG51bGwsXHJcbiAgICAgICAgICAgIHNjYW5uZWRUZXh0OiAnJyxcclxuICAgICAgICAgICAgc2Nhbm5lZENhcmQ6ICcnLFxyXG4gICAgICAgICAgICBlbGVtZW50OiBudWxsLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgZ2V0UXJDb2RlKGNvZGUpIHtcclxuICAgICAgICAgICAgaWYgKGNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJzZWRDb2RlID0gSlNPTi5wYXJzZShjb2RlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3NjYW5DYXJkJywgcGFyc2VkQ29kZSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lZENhcmQgPSBwYXJzZWRDb2RlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lTY2FubmVyKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVzdHJveVNjYW5uZXIoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5kZXN0cm95KClcclxuICAgICAgICAgICAgdGhpcy5zY2FubmVyID0gbnVsbFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0dXBTY2FubmVyKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjYW5uZXIgPSBuZXcgUXJTY2FubmVyKHRoaXMuZWxlbWVudCwgcmVzdWx0ID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFFyQ29kZShyZXN1bHQpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgdGhpcy5zY2FubmVyLnN0YXJ0KClcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIG1vdW50ZWQoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3FyUmVhZGVyJylcclxuICAgICAgICB0aGlzLnNldHVwU2Nhbm5lcigpXHJcbiAgICB9LFxyXG59XHJcbjwvc2NyaXB0PlxyXG4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYWRkXCI+XHJcbiAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz1cIi9cIiBjbGFzcz1cIm5hdmlnYXRpb25fX2JhY2tcIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi4vYXNzZXRzL3N0b25lLWJhY2stYnV0dG9uLnBuZ1wiIGFsdD1cIlwiIC8+XHJcbiAgICAgICAgICAgIDwvcm91dGVyLWxpbms+XHJcbiAgICAgICAgPGgxIGRhdGEtdi1mYWU1YmVjZT1cIlwiIGNsYXNzPVwiaGVhZGluZzFcIj5BZGQgYSBjYXJkPC9oMT5cclxuICAgICAgICA8bmF2aWdhdGlvbiA6cm91dGVzPVwicm91dGVzXCI+PC9uYXZpZ2F0aW9uPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvTmF2aWdhdGlvbi52dWUnXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICBOYXZpZ2F0aW9uLFxyXG4gICAgfSxcclxuICAgIGRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcm91dGVzOiBbXSxcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXMgPSB0aGlzLiRzdG9yZS5zdGF0ZS5iYXNlLnN1YlJvdXRlcy5hZGRcclxuICAgIH0sXHJcbn1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cclxuLmFkZCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDMwcHggMHB4O1xyXG59XHJcbjwvc3R5bGU+XHJcbiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJjb2xsZWN0aW9uXCI+XHJcbiAgICAgICAgPGhlYWRlcj5cclxuICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPVwiL1wiIGNsYXNzPVwibmF2aWdhdGlvbl9fYmFja1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuLi9hc3NldHMvc3RvbmUtYmFjay1idXR0b24ucG5nXCIgYWx0PVwiXCIgLz5cclxuICAgICAgICAgICAgPC9yb3V0ZXItbGluaz5cclxuICAgICAgICAgICAgPGgxIGNsYXNzPVwiaGVhZGluZzFcIj5Db2xsZWN0aW9uPC9oMT5cclxuICAgICAgICA8L2hlYWRlcj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJldmlldy13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgIDxjYXJkLXByZXZpZXdcclxuICAgICAgICAgICAgICAgIHYtZm9yPVwiY2FyZCBpbiAkc3RvcmUuc3RhdGUuYmFzZS5jYXJkc1wiXHJcbiAgICAgICAgICAgICAgICA6a2V5PVwiY2FyZC5pZFwiXHJcbiAgICAgICAgICAgICAgICA6Y2FyZC1kZXRhaWxzPVwiY2FyZFwiXHJcbiAgICAgICAgICAgID48L2NhcmQtcHJldmlldz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuaW1wb3J0IENhcmRQcmV2aWV3IGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZFByZXZpZXcudnVlJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgY29tcG9uZW50czogeyBDYXJkUHJldmlldyB9LFxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XHJcbi5jb2xsZWN0aW9uIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4ucHJldmlldy13cmFwcGVyIHtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLWdhcDogMjBweDtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcclxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZy1ib3R0b206IDMwcHg7XHJcbn1cclxuXHJcbi5uYXZpZ2F0aW9uX19iYWNrIHtcclxuICAgIGltZyB7XHJcbiAgICAgICAgd2lkdGg6IDU1cHg7XHJcbiAgICAgICAgbWFyZ2luOiAtMTBweCAxMHB4O1xyXG4gICAgfVxyXG59XHJcbjwvc3R5bGU+XHJcbiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJob21lXCI+XHJcbiAgICAgICAgPGhlYWRlcj5cclxuICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgc3JjPVwiLi4vYXNzZXRzL3dlZS1nYWl0aGVyZXJzLWxvZ28ucG5nXCJcclxuICAgICAgICAgICAgICAgIGFsdD1cIndlZSBnYWl0aGVyZXJzIGxvZ29cIlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJob21lX19sb2dvXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L2hlYWRlcj5cclxuICAgICAgICA8bmF2aWdhdGlvbiA6cm91dGVzPVwicm91dGVzXCI+PC9uYXZpZ2F0aW9uPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQgTmF2aWdhdGlvbiBmcm9tICcuLi9jb21wb25lbnRzL05hdmlnYXRpb24udnVlJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgY29tcG9uZW50czoge1xyXG4gICAgICAgIE5hdmlnYXRpb24sXHJcbiAgICB9LFxyXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcm91dGVzOiBbXSxcclxuICAgICAgICAgICAgaG9tZXBhZ2U6IHRydWUsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlZm9yZU1vdW50KCkge1xyXG4gICAgICAgIHRoaXMucm91dGVzID0gdGhpcy4kc3RvcmUuc3RhdGUuYmFzZS5yb3V0ZWxpbmtzXHJcbiAgICB9LFxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4uaG9tZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuXHJcbiAgICAmX19sb2dvIHtcclxuICAgICAgICBwYWRkaW5nOiAzNXB4IDIwcHg7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbn1cclxuLmhvbWV0aXRsZSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XHJcbn1cclxuPC9zdHlsZT5cclxuIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImxlYWRlcmJvYXJkXCI+XHJcbiAgICAgICAgPGhlYWRlcj5cclxuICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPVwiL1wiIGNsYXNzPVwibmF2aWdhdGlvbl9fYmFja1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuLi9hc3NldHMvc3RvbmUtYmFjay1idXR0b24ucG5nXCIgYWx0PVwiXCIgLz5cclxuICAgICAgICAgICAgPC9yb3V0ZXItbGluaz5cclxuICAgICAgICAgICAgPGgxIGNsYXNzPVwiaGVhZGluZzFcIj5MZWFkZXJib2FyZDwvaDE+XHJcbiAgICAgICAgPC9oZWFkZXI+XHJcbiAgICAgICAgPHRyYW5zaXRpb24gbmFtZT1cImZhZGVcIj5cclxuICAgICAgICAgICAgPGxlYWRlcmJvYXJkLWNhcmRcclxuICAgICAgICAgICAgICAgIHYtaWY9XCJzaG93SXRlbXNcIlxyXG4gICAgICAgICAgICAgICAgOmRhdGE9XCIkc3RvcmUuc3RhdGUuYmFzZS5sZWFkZXJib2FyZERhdGFbNV1cIlxyXG4gICAgICAgICAgICAgICAgOmRhdGEtaW5kZXg9XCJpbmRleFwiXHJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImxlYWRlcmJvYXJkLWNhcmRcIlxyXG4gICAgICAgICAgICA+PC9sZWFkZXJib2FyZC1jYXJkPlxyXG4gICAgICAgIDwvdHJhbnNpdGlvbj5cclxuICAgICAgICA8aDIgY2xhc3M9XCJoZWFkaW5nMVwiPkZyaWVuZHMgTGVhZGVyYm9hcmQ8L2gyPlxyXG4gICAgICAgIDx0cmFuc2l0aW9uLWdyb3VwXHJcbiAgICAgICAgICAgIHRhZz1cImRpdlwiXHJcbiAgICAgICAgICAgIG5hbWU9XCJzbGlkZS1pblwiXHJcbiAgICAgICAgICAgIDpzdHlsZT1cInsgJy0tdG90YWwnOiAkc3RvcmUuc3RhdGUuYmFzZS5sZWFkZXJib2FyZERhdGEubGVuZ3RoIH1cIlxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPHRlbXBsYXRlXHJcbiAgICAgICAgICAgICAgICB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gJHN0b3JlLnN0YXRlLmJhc2UubGVhZGVyYm9hcmREYXRhXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdiA6a2V5PVwiaW5kZXhcIiA6c3R5bGU9XCJ7ICctLWknOiBpbmRleCB9XCIgdi1pZj1cInNob3dJdGVtc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsZWFkZXJib2FyZC1jYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpkYXRhPVwiaXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpkYXRhLWluZGV4PVwiaW5kZXhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImxlYWRlcmJvYXJkLWNhcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgID48L2xlYWRlcmJvYXJkLWNhcmQ+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8L3RyYW5zaXRpb24tZ3JvdXA+XHJcbiAgICAgICAgPGltZyBzcmM9XCJcIiBhbHQ9XCJcIiAvPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQgTGVhZGVyYm9hcmRDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvTGVhZGVyYm9hcmRDYXJkLnZ1ZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGNvbXBvbmVudHM6IHsgTGVhZGVyYm9hcmRDYXJkIH0sXHJcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzaG93SXRlbXM6IGZhbHNlLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtb3VudGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0l0ZW1zID0gdHJ1ZVxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4ubGVhZGVyYm9hcmQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5uYXZpZ2F0aW9uX19iYWNrIHtcclxuICAgIGltZyB7XHJcbiAgICAgICAgd2lkdGg6IDU1cHg7XHJcbiAgICAgICAgbWFyZ2luOiAtMTBweCAxMHB4O1xyXG4gICAgfVxyXG59XHJcblxyXG4uZmFkZSB7XHJcbiAgICAmLWVudGVyLWFjdGl2ZSB7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAycztcclxuICAgIH1cclxuXHJcbiAgICAmLWxlYXZlLWFjdGl2ZSB7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzO1xyXG4gICAgfVxyXG5cclxuICAgICYtZW50ZXIsXHJcbiAgICAmLWxlYXZlLXRvIHtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgfVxyXG59XHJcblxyXG4uc2xpZGUtaW4ge1xyXG4gICAgJi1tb3ZlIHtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDFzIGxpbmVhciwgdHJhbnNmb3JtIDFzIGVhc2UtaW4tb3V0O1xyXG4gICAgfVxyXG5cclxuICAgICYtbGVhdmUtYWN0aXZlIHtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNHMgbGluZWFyLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm0gMC40cyBjdWJpYy1iZXppZXIoMC41LCAwLCAwLjcsIDAuNCk7XHJcbiAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogY2FsYygwLjNzICogKHZhcigtLXRvdGFsKSAtIHZhcigtLWkpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgJi1lbnRlci1hY3RpdmUge1xyXG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMXMgbGluZWFyLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm0gMS41cyBjdWJpYy1iZXppZXIoMC4yLCAwLjUsIDAuMSwgMSk7XHJcbiAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogY2FsYygwLjNzICogdmFyKC0taSkpO1xyXG4gICAgfVxyXG5cclxuICAgICYtZW50ZXIsXHJcbiAgICAmLWxlYXZlLXRvIHtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgfVxyXG5cclxuICAgICYtZW50ZXIge1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgICYtbGVhdmUtdG8ge1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzZW0pO1xyXG4gICAgfVxyXG59XHJcbjwvc3R5bGU+XHJcbiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXY+XHJcbiAgICAgICAgPGNhcmQgOmNhcmQtaWQ9XCJpZFwiPjwvY2FyZD5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuaW1wb3J0IENhcmQgZnJvbSAnLi4vY29tcG9uZW50cy9DYXJkLnZ1ZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGNvbXBvbmVudHM6IHsgQ2FyZCB9LFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBpZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59XHJcbjwvc2NyaXB0PlxyXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBJbXBvcnRzXG52YXIgZ2V0VXJsID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18wX19fID0gZ2V0VXJsKHJlcXVpcmUoXCIuL2Fzc2V0cy9Gb250cy9jb29wZXItaGV3aXR0L0Nvb3Blckhld2l0dC1NZWRpdW0ub3RmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzFfX18gPSBnZXRVcmwocmVxdWlyZShcIi4vYXNzZXRzL0ZvbnRzL2Nvb3Blci1oZXdpdHQvQ29vcGVySGV3aXR0LWJvbGQub3RmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzJfX18gPSBnZXRVcmwocmVxdWlyZShcIi4vYXNzZXRzL0ZvbnRzL21vbnRzZXJyYXQvTW9udHNlcnJhdC1NZWRpdW0ub3RmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzNfX18gPSBnZXRVcmwocmVxdWlyZShcIi4vYXNzZXRzL0ZvbnRzL21vbnRzZXJyYXQvTW9udHNlcnJhdC1Cb2xkLm90ZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX180X19fID0gZ2V0VXJsKHJlcXVpcmUoXCIuL2Fzc2V0cy93b29kLWJhY2tncm91bmQuanBnXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzVfX18gPSBnZXRVcmwocmVxdWlyZShcIi4vYXNzZXRzL0FwcCBTa2luIEFzc2V0cy9Vbml2ZXJzYWwvV29vZC1CYWNrZ3JvdW5kLmpwZ1wiKSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJoZXdpdHRcXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzBfX18gKyBcIikgZm9ybWF0KFxcXCJvcGVudHlwZVxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiaGV3aXR0XFxcIjtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzFfX18gKyBcIikgZm9ybWF0KFxcXCJvcGVudHlwZVxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwibW9udHNlcnJhdFxcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMl9fXyArIFwiKSBmb3JtYXQoXFxcIm9wZW50eXBlXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJtb250c2VycmF0XFxcIjtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzNfX18gKyBcIikgZm9ybWF0KFxcXCJvcGVudHlwZVxcXCIpO1xcbn1cXG4qIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbmh0bWwsXFxuYm9keSB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYmFja2dyb3VuZDogIzY2NjM3NTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuI2FwcCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGZkZmRmO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX180X19fICsgXCIpO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XFxuICBib3gtc2hhZG93OiAwIDEycHggMTVweCAwIHJnYmEoMCwgMCwgMCwgMC4yNCksIDAgMTdweCA1MHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBmb250LWZhbWlseTogXFxcImhld2l0dFxcXCI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fNV9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcXG59XFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuI2FwcCB7XFxuICAgIGhlaWdodDogNzMxcHg7XFxuICAgIHdpZHRoOiA0MTFweDtcXG59XFxufVxcbmFbaHJlZj1cXFwiI1xcXCJdIHtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcbmhlYWRlciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBmb250LWZhbWlseTogXFxcIm1vbnRzZXJyYXRcXFwiO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBwYWRkaW5nLXRvcDogMzBweDtcXG59XFxuaGVhZGVyIC5uYXZpZ2F0aW9uX19iYWNrIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTJweDtcXG59XFxuaGVhZGVyIHNwYW4ge1xcbiAgZm9udC1zaXplOiAzcmVtO1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0b3A6IDQwJTtcXG4gIHRyYW5zZm9ybTogcm90YXRlKC0zNWRlZyk7XFxuICBsZWZ0OiAtMiU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5oZWFkaW5nMSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGZvbnQtc2l6ZTogM2VtO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuLmFwcC1jb250ZW50IHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmNhcmQtY29sbGVjdGlvbl9fYm9keSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIHBhZGRpbmc6IDAgMTVweCAwIDE1cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLmNhcmQtY29sbGVjdGlvbl9fYm9keTo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLmZhZGUtZW50ZXItYWN0aXZlLFxcbi5mYWRlLWxlYXZlLWFjdGl2ZSB7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgZWFzZTtcXG59XFxuLmZhZGUtZW50ZXIsXFxuLmZhZGUtbGVhdmUtYWN0aXZlIHtcXG4gIG9wYWNpdHk6IDA7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jYXJkLWNvbnRhaW5lciB7XFxuICBwZXJzcGVjdGl2ZTogODAwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uY2FyZCB7XFxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC41cztcXG4gIGhlaWdodDogNTMzcHg7XFxuICB3aWR0aDogMzAwcHg7XFxuICB0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcbi5jYXJkX19mcm9udCwgLmNhcmRfX2JhY2sge1xcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgaGVpZ2h0OiA1MDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTAwJTtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogW2ltYWdlXSBhdXRvIFtmb290ZXJdIDFmcjtcXG4gIHotaW5kZXg6IDI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5jYXJkX19mcm9udF9mbGlwLCAuY2FyZF9fYmFja19mbGlwIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IC01cHg7XFxuICBtYXJnaW46IDFyZW07XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgei1pbmRleDogMTA7XFxufVxcbi5jYXJkX19mcm9udF9mbGlwIGltZywgLmNhcmRfX2JhY2tfZmxpcCBpbWcge1xcbiAgd2lkdGg6IDIycHg7XFxufVxcbi5jYXJkX19mcm9udCAubmF2aWdhdGlvbl9fYmFjaywgLmNhcmRfX2JhY2sgLm5hdmlnYXRpb25fX2JhY2sge1xcbiAgbWFyZ2luOiAxcmVtO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogLTZweDtcXG4gIGxlZnQ6IC0xMHB4O1xcbn1cXG4uY2FyZF9fZnJvbnQgLm5hdmlnYXRpb25fX2JhY2sgaW1nLCAuY2FyZF9fYmFjayAubmF2aWdhdGlvbl9fYmFjayBpbWcge1xcbiAgd2lkdGg6IDIycHg7XFxufVxcbi5jYXJkX19mcm9udF9pbWFnZSwgLmNhcmRfX2JhY2tfaW1hZ2Uge1xcbiAgbWF4LXdpZHRoOiAzMDBweDtcXG4gIGhlaWdodDogNTAwcHg7XFxuICBncmlkLWNvbHVtbjogMTtcXG4gIGdyaWQtcm93OiBpbWFnZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1heC1oZWlnaHQ6IDYwMHB4O1xcbn1cXG4uY2FyZF9fZnJvbnRfaW1hZ2UgaW1nLCAuY2FyZF9fYmFja19pbWFnZSBpbWcge1xcbiAgYm94LXNoYWRvdzogMnB4IDJweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uY2FyZF9fZnJvbnRfZm9vdGVyLCAuY2FyZF9fYmFja19mb290ZXIge1xcbiAgZ3JpZC1yb3c6IGZvb3RlcjtcXG4gIGdyaWQtY29sdW1uOiAxO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IFtyYXJpdHldIDFmciBbbmFtZV0gM2ZyO1xcbn1cXG4uY2FyZF9fZnJvbnRfZm9vdGVyX25hbWUsIC5jYXJkX19mcm9udF9mb290ZXJfcmFyaXR5LCAuY2FyZF9fYmFja19mb290ZXJfbmFtZSwgLmNhcmRfX2JhY2tfZm9vdGVyX3Jhcml0eSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4uY2FyZF9fZnJvbnRfZm9vdGVyX3Jhcml0eSwgLmNhcmRfX2JhY2tfZm9vdGVyX3Jhcml0eSB7XFxuICBtYXJnaW46IDFyZW07XFxuICBoZWlnaHQ6IDYwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTtcXG59XFxuLmNhcmRfX2JhY2sge1xcbiAgdHJhbnNmb3JtOiByb3RhdGVZKDE4MGRlZyk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi5jYXJkX19iYWNrIGgxIHtcXG4gIG1hcmdpbjogM3JlbSAwIDNyZW0gMDtcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXG59XFxuLmNhcmRfX2JhY2sgcCB7XFxuICBmb250LXNpemU6IDEuMnJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjNyZW07XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBJbXBvcnRzXG52YXIgZ2V0VXJsID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18wX19fID0gZ2V0VXJsKHJlcXVpcmUoXCIuLi9hc3NldHMvZGVmYXVsdC1jYXJkLnBuZ1wiKSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5wcmV2aWV3LWNhcmQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18wX19fICsgXCIpO1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGhlaWdodDogMzMwcHg7XFxuICB3aWR0aDogMTAwJTtcXG59XCIsIFwiXCJdKTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIEltcG9ydHNcbnZhciBnZXRVcmwgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzBfX18gPSBnZXRVcmwocmVxdWlyZShcIi4uL2Fzc2V0cy9zdG9uZS1iYWNrZ3JvdW5kLnBuZ1wiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18xX19fID0gZ2V0VXJsKHJlcXVpcmUoXCIuLi9hc3NldHMvQXBwIFNraW4gQXNzZXRzL0xlYWRlcmJvYXJkL1JhbmstNCstYmFja2dyb3VuZC5wbmdcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMl9fXyA9IGdldFVybChyZXF1aXJlKFwiLi4vYXNzZXRzL0FwcCBTa2luIEFzc2V0cy9MZWFkZXJib2FyZC9Ub3AtMy1SYW5rLWJhY2tncm91bmQucG5nXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzNfX18gPSBnZXRVcmwocmVxdWlyZShcIi4uL2Fzc2V0cy9yYW5rLWJhY2tncm91bmQucG5nXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzRfX18gPSBnZXRVcmwocmVxdWlyZShcIi4uL2Fzc2V0cy90b3AtcmFuay1iYWNrZ3JvdW5kLnBuZ1wiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX181X19fID0gZ2V0VXJsKHJlcXVpcmUoXCIuLi9hc3NldHMvZGVmYXVsdC1wcm9maWxlLmpwZ1wiKSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5sZWFkZXJib2FyZC1jYXJkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18wX19fICsgXCIpO1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogdG9wIGNlbnRlcjtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG4gIG1heC1oZWlnaHQ6IDg1cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMV9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO1xcbn1cXG4ubGVhZGVyYm9hcmQtY2FyZC50b3AzIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMl9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO1xcbn1cXG4ubGVhZGVyYm9hcmQtY2FyZF9fcG9zaXRpb24ge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2OTY5Njk7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzNfX18gKyBcIik7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgY29sb3I6ICNkOWQ5ZDk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgcGFkZGluZzogMCAxMHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxMHB4O1xcbiAgbGVmdDogLTdweDtcXG4gIHdpZHRoOiA0NXB4O1xcbn1cXG4ubGVhZGVyYm9hcmQtY2FyZF9fcG9zaXRpb24tLXRvcC10aHJlZSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzRfX18gKyBcIik7XFxufVxcbi5sZWFkZXJib2FyZC1jYXJkX19wb3NpdGlvbiBzcGFuIHtcXG4gIGZvbnQtc2l6ZTogMC44ZW07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDNweDtcXG4gIGxlZnQ6IDIwcHg7XFxufVxcbi5sZWFkZXJib2FyZC1jYXJkX19jb250ZW50IHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjb2xvcjogd2hpdGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5sZWFkZXJib2FyZC1jYXJkX19pbWFnZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fNV9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBoZWlnaHQ6IDY1cHg7XFxuICB3aWR0aDogNjVweDtcXG59XFxuLmxlYWRlcmJvYXJkLWNhcmRfX3VzZXJuYW1lIHtcXG4gIGZvbnQtc2l6ZTogMS41ZW07XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuLmxlYWRlcmJvYXJkLWNhcmRfX2NhcmRzLWNvbGxlY3RlZCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5sZWFkZXJib2FyZC1jYXJkX19jYXJkcy1jb2xsZWN0ZWRfX251bWJlciB7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBJbXBvcnRzXG52YXIgZ2V0VXJsID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18wX19fID0gZ2V0VXJsKHJlcXVpcmUoXCIuLi9hc3NldHMvc3RvbmUtYmFja2dyb3VuZC5wbmdcIikpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubmF2aWdhdGlvbltkYXRhLXYtODE0NDBiNzhdIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLm5hdmlnYXRpb25fX2l0ZW1bZGF0YS12LTgxNDQwYjc4XSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMF9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IHRvcCBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udC1zaXplOiAxLjVlbTtcXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XFxuICBwYWRkaW5nOiAyOXB4IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLm5hdmlnYXRpb25fX2l0ZW1bZGF0YS12LTgxNDQwYjc4XTpob3ZlciB7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNxclJlYWRlcltkYXRhLXYtYmRmYTI3YTZdIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uYWRkZWQtdGV4dFtkYXRhLXYtYmRmYTI3YTZdIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgZm9udC1zaXplOiAxLjc1ZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5hZGRbZGF0YS12LTc2NGM1NWQ3XSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDMwcHggMHB4O1xcbn1cIiwgXCJcIl0pO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY29sbGVjdGlvbiB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnByZXZpZXctd3JhcHBlciB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC1nYXA6IDIwcHg7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmctYm90dG9tOiAzMHB4O1xcbn1cXG4ubmF2aWdhdGlvbl9fYmFjayBpbWcge1xcbiAgd2lkdGg6IDU1cHg7XFxuICBtYXJnaW46IC0xMHB4IDEwcHg7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5ob21lW2RhdGEtdi1mYWU1YmVjZV0ge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5ob21lX19sb2dvW2RhdGEtdi1mYWU1YmVjZV0ge1xcbiAgcGFkZGluZzogMzVweCAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5ob21ldGl0bGVbZGF0YS12LWZhZTViZWNlXSB7XFxuICBwYWRkaW5nLWxlZnQ6IDUwcHg7XFxufVwiLCBcIlwiXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5sZWFkZXJib2FyZFtkYXRhLXYtYzdmZDBlOWFdIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubmF2aWdhdGlvbl9fYmFjayBpbWdbZGF0YS12LWM3ZmQwZTlhXSB7XFxuICB3aWR0aDogNTVweDtcXG4gIG1hcmdpbjogLTEwcHggMTBweDtcXG59XFxuLmZhZGUtZW50ZXItYWN0aXZlW2RhdGEtdi1jN2ZkMGU5YV0ge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAycztcXG59XFxuLmZhZGUtbGVhdmUtYWN0aXZlW2RhdGEtdi1jN2ZkMGU5YV0ge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzO1xcbn1cXG4uZmFkZS1lbnRlcltkYXRhLXYtYzdmZDBlOWFdLCAuZmFkZS1sZWF2ZS10b1tkYXRhLXYtYzdmZDBlOWFdIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcbi5zbGlkZS1pbi1tb3ZlW2RhdGEtdi1jN2ZkMGU5YV0ge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxcyBsaW5lYXIsIHRyYW5zZm9ybSAxcyBlYXNlLWluLW91dDtcXG59XFxuLnNsaWRlLWluLWxlYXZlLWFjdGl2ZVtkYXRhLXYtYzdmZDBlOWFdIHtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC40cyBsaW5lYXIsIHRyYW5zZm9ybSAwLjRzIGN1YmljLWJlemllcigwLjUsIDAsIDAuNywgMC40KTtcXG4gIHRyYW5zaXRpb24tZGVsYXk6IGNhbGMoMC4zcyAqICh2YXIoLS10b3RhbCkgLSB2YXIoLS1pKSkpO1xcbn1cXG4uc2xpZGUtaW4tZW50ZXItYWN0aXZlW2RhdGEtdi1jN2ZkMGU5YV0ge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxcyBsaW5lYXIsIHRyYW5zZm9ybSAxLjVzIGN1YmljLWJlemllcigwLjIsIDAuNSwgMC4xLCAxKTtcXG4gIHRyYW5zaXRpb24tZGVsYXk6IGNhbGMoMC4zcyAqIHZhcigtLWkpKTtcXG59XFxuLnNsaWRlLWluLWVudGVyW2RhdGEtdi1jN2ZkMGU5YV0sIC5zbGlkZS1pbi1sZWF2ZS10b1tkYXRhLXYtYzdmZDBlOWFdIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcbi5zbGlkZS1pbi1lbnRlcltkYXRhLXYtYzdmZDBlOWFdIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1ZW0pO1xcbn1cXG4uc2xpZGUtaW4tbGVhdmUtdG9bZGF0YS12LWM3ZmQwZTlhXSB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoM2VtKTtcXG59XCIsIFwiXCJdKTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmxvY2F0aW9uc1tkYXRhLXYtM2I0NzgwZDhdIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubmF2aWdhdGlvbl9fYmFjayBpbWdbZGF0YS12LTNiNDc4MGQ4XSB7XFxuICB3aWR0aDogNTVweDtcXG4gIG1hcmdpbjogLTEwcHggMTBweDtcXG59XCIsIFwiXCJdKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwie1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW19pXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCIoXCIuY29uY2F0KGl0ZW1bMl0sIFwiKSBhbmQgKFwiKS5jb25jYXQobWVkaWFRdWVyeSwgXCIpXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgbmVlZFF1b3Rlcykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXBhcmFtLXJlYXNzaWduXG4gIHVybCA9IHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpIHx8IG5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNTU5OTNhODA4ZDU1YzhhZDdjMzNjYzc5ZTY5MWUwM2UuanNcIjsiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiY2xhc3MgZXtzdGF0aWMgaGFzQ2FtZXJhKCl7cmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpLnRoZW4oKGEpPT5hLnNvbWUoKGEpPT5cInZpZGVvaW5wdXRcIj09PWEua2luZCkpLmNhdGNoKCgpPT4hMSl9Y29uc3RydWN0b3IoYSxjLGI9ZS5ERUZBVUxUX0NBTlZBU19TSVpFKXt0aGlzLiR2aWRlbz1hO3RoaXMuJGNhbnZhcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3RoaXMuX29uRGVjb2RlPWM7dGhpcy5fcGF1c2VkPXRoaXMuX2FjdGl2ZT0hMTt0aGlzLiRjYW52YXMud2lkdGg9Yjt0aGlzLiRjYW52YXMuaGVpZ2h0PWI7dGhpcy5fc291cmNlUmVjdD17eDowLHk6MCx3aWR0aDpiLGhlaWdodDpifTt0aGlzLl9vbkNhblBsYXk9dGhpcy5fb25DYW5QbGF5LmJpbmQodGhpcyk7dGhpcy5fb25QbGF5PXRoaXMuX29uUGxheS5iaW5kKHRoaXMpO3RoaXMuX29uVmlzaWJpbGl0eUNoYW5nZT10aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKTtcbnRoaXMuJHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5XCIsdGhpcy5fb25DYW5QbGF5KTt0aGlzLiR2aWRlby5hZGRFdmVudExpc3RlbmVyKFwicGxheVwiLHRoaXMuX29uUGxheSk7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIix0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UpO3RoaXMuX3FyV29ya2VyPW5ldyBXb3JrZXIoZS5XT1JLRVJfUEFUSCl9ZGVzdHJveSgpe3RoaXMuJHZpZGVvLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5XCIsdGhpcy5fb25DYW5QbGF5KTt0aGlzLiR2aWRlby5yZW1vdmVFdmVudExpc3RlbmVyKFwicGxheVwiLHRoaXMuX29uUGxheSk7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIix0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UpO3RoaXMuc3RvcCgpO3RoaXMuX3FyV29ya2VyLnBvc3RNZXNzYWdlKHt0eXBlOlwiY2xvc2VcIn0pfXN0YXJ0KCl7aWYodGhpcy5fYWN0aXZlJiYhdGhpcy5fcGF1c2VkKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblwiaHR0cHM6XCIhPT13aW5kb3cubG9jYXRpb24ucHJvdG9jb2wmJmNvbnNvbGUud2FybihcIlRoZSBjYW1lcmEgc3RyZWFtIGlzIG9ubHkgYWNjZXNzaWJsZSBpZiB0aGUgcGFnZSBpcyB0cmFuc2ZlcnJlZCB2aWEgaHR0cHMuXCIpO3RoaXMuX2FjdGl2ZT0hMDt0aGlzLl9wYXVzZWQ9ITE7aWYoZG9jdW1lbnQuaGlkZGVuKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTtjbGVhclRpbWVvdXQodGhpcy5fb2ZmVGltZW91dCk7dGhpcy5fb2ZmVGltZW91dD1udWxsO2lmKHRoaXMuJHZpZGVvLnNyY09iamVjdClyZXR1cm4gdGhpcy4kdmlkZW8ucGxheSgpLFByb21pc2UucmVzb2x2ZSgpO2xldCBhPVwiZW52aXJvbm1lbnRcIjtyZXR1cm4gdGhpcy5fZ2V0Q2FtZXJhU3RyZWFtKFwiZW52aXJvbm1lbnRcIiwhMCkuY2F0Y2goKCk9PnthPVwidXNlclwiO3JldHVybiB0aGlzLl9nZXRDYW1lcmFTdHJlYW0oKX0pLnRoZW4oKGMpPT57dGhpcy4kdmlkZW8uc3JjT2JqZWN0PWM7dGhpcy5fc2V0VmlkZW9NaXJyb3IoYSl9KS5jYXRjaCgoYSk9Plxue3RoaXMuX2FjdGl2ZT0hMTt0aHJvdyBhO30pfXN0b3AoKXt0aGlzLnBhdXNlKCk7dGhpcy5fYWN0aXZlPSExfXBhdXNlKCl7dGhpcy5fcGF1c2VkPSEwO3RoaXMuX2FjdGl2ZSYmKHRoaXMuJHZpZGVvLnBhdXNlKCksdGhpcy5fb2ZmVGltZW91dHx8KHRoaXMuX29mZlRpbWVvdXQ9c2V0VGltZW91dCgoKT0+e2xldCBhPXRoaXMuJHZpZGVvLnNyY09iamVjdCYmdGhpcy4kdmlkZW8uc3JjT2JqZWN0LmdldFRyYWNrcygpWzBdO2EmJihhLnN0b3AoKSx0aGlzLl9vZmZUaW1lb3V0PXRoaXMuJHZpZGVvLnNyY09iamVjdD1udWxsKX0sMzAwKSkpfXN0YXRpYyBzY2FuSW1hZ2UoYSxjPW51bGwsYj1udWxsLGQ9bnVsbCxmPSExLGc9ITEpe2xldCBoPSExLGw9bmV3IFByb21pc2UoKGwsZyk9PntifHwoYj1uZXcgV29ya2VyKGUuV09SS0VSX1BBVEgpLGg9ITAsYi5wb3N0TWVzc2FnZSh7dHlwZTpcImludmVyc2lvbk1vZGVcIixkYXRhOlwiYm90aFwifSkpO2xldCBuLG0sazttPShhKT0+e1wicXJSZXN1bHRcIj09PVxuYS5kYXRhLnR5cGUmJihiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsbSksYi5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIixrKSxjbGVhclRpbWVvdXQobiksbnVsbCE9PWEuZGF0YS5kYXRhP2woYS5kYXRhLmRhdGEpOmcoXCJRUiBjb2RlIG5vdCBmb3VuZC5cIikpfTtrPShhKT0+e2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixtKTtiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGspO2NsZWFyVGltZW91dChuKTtnKFwiU2Nhbm5lciBlcnJvcjogXCIrKGE/YS5tZXNzYWdlfHxhOlwiVW5rbm93biBFcnJvclwiKSl9O2IuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixtKTtiLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGspO249c2V0VGltZW91dCgoKT0+ayhcInRpbWVvdXRcIiksM0UzKTtlLl9sb2FkSW1hZ2UoYSkudGhlbigoYSk9PnthPWUuX2dldEltYWdlRGF0YShhLGMsZCxmKTtiLnBvc3RNZXNzYWdlKHt0eXBlOlwiZGVjb2RlXCIsZGF0YTphfSxbYS5kYXRhLmJ1ZmZlcl0pfSkuY2F0Y2goayl9KTtcbmMmJmcmJihsPWwuY2F0Y2goKCk9PmUuc2NhbkltYWdlKGEsbnVsbCxiLGQsZikpKTtyZXR1cm4gbD1sLmZpbmFsbHkoKCk9PntoJiZiLnBvc3RNZXNzYWdlKHt0eXBlOlwiY2xvc2VcIn0pfSl9c2V0R3JheXNjYWxlV2VpZ2h0cyhhLGMsYixkPSEwKXt0aGlzLl9xcldvcmtlci5wb3N0TWVzc2FnZSh7dHlwZTpcImdyYXlzY2FsZVdlaWdodHNcIixkYXRhOntyZWQ6YSxncmVlbjpjLGJsdWU6Yix1c2VJbnRlZ2VyQXBwcm94aW1hdGlvbjpkfX0pfXNldEludmVyc2lvbk1vZGUoYSl7dGhpcy5fcXJXb3JrZXIucG9zdE1lc3NhZ2Uoe3R5cGU6XCJpbnZlcnNpb25Nb2RlXCIsZGF0YTphfSl9X29uQ2FuUGxheSgpe3RoaXMuX3VwZGF0ZVNvdXJjZVJlY3QoKTt0aGlzLiR2aWRlby5wbGF5KCl9X29uUGxheSgpe3RoaXMuX3VwZGF0ZVNvdXJjZVJlY3QoKTt0aGlzLl9zY2FuRnJhbWUoKX1fb25WaXNpYmlsaXR5Q2hhbmdlKCl7ZG9jdW1lbnQuaGlkZGVuP3RoaXMucGF1c2UoKTp0aGlzLl9hY3RpdmUmJlxudGhpcy5zdGFydCgpfV91cGRhdGVTb3VyY2VSZWN0KCl7bGV0IGE9TWF0aC5yb3VuZCgyLzMqTWF0aC5taW4odGhpcy4kdmlkZW8udmlkZW9XaWR0aCx0aGlzLiR2aWRlby52aWRlb0hlaWdodCkpO3RoaXMuX3NvdXJjZVJlY3Qud2lkdGg9dGhpcy5fc291cmNlUmVjdC5oZWlnaHQ9YTt0aGlzLl9zb3VyY2VSZWN0Lng9KHRoaXMuJHZpZGVvLnZpZGVvV2lkdGgtYSkvMjt0aGlzLl9zb3VyY2VSZWN0Lnk9KHRoaXMuJHZpZGVvLnZpZGVvSGVpZ2h0LWEpLzJ9X3NjYW5GcmFtZSgpe2lmKCF0aGlzLl9hY3RpdmV8fHRoaXMuJHZpZGVvLnBhdXNlZHx8dGhpcy4kdmlkZW8uZW5kZWQpcmV0dXJuITE7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT57ZS5zY2FuSW1hZ2UodGhpcy4kdmlkZW8sdGhpcy5fc291cmNlUmVjdCx0aGlzLl9xcldvcmtlcix0aGlzLiRjYW52YXMsITApLnRoZW4odGhpcy5fb25EZWNvZGUsKGEpPT57dGhpcy5fYWN0aXZlJiZcIlFSIGNvZGUgbm90IGZvdW5kLlwiIT09YSYmXG5jb25zb2xlLmVycm9yKGEpfSkudGhlbigoKT0+dGhpcy5fc2NhbkZyYW1lKCkpfSl9X2dldENhbWVyYVN0cmVhbShhLGM9ITEpe2xldCBiPVt7d2lkdGg6e21pbjoxMDI0fX0se3dpZHRoOnttaW46NzY4fX0se31dO2EmJihjJiYoYT17ZXhhY3Q6YX0pLGIuZm9yRWFjaCgoYik9PmIuZmFjaW5nTW9kZT1hKSk7cmV0dXJuIHRoaXMuX2dldE1hdGNoaW5nQ2FtZXJhU3RyZWFtKGIpfV9nZXRNYXRjaGluZ0NhbWVyYVN0cmVhbShhKXtyZXR1cm4gMD09PWEubGVuZ3RoP1Byb21pc2UucmVqZWN0KFwiQ2FtZXJhIG5vdCBmb3VuZC5cIik6bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe3ZpZGVvOmEuc2hpZnQoKX0pLmNhdGNoKCgpPT50aGlzLl9nZXRNYXRjaGluZ0NhbWVyYVN0cmVhbShhKSl9X3NldFZpZGVvTWlycm9yKGEpe3RoaXMuJHZpZGVvLnN0eWxlLnRyYW5zZm9ybT1cInNjYWxlWChcIisoXCJ1c2VyXCI9PT1hPy0xOjEpK1wiKVwifXN0YXRpYyBfZ2V0SW1hZ2VEYXRhKGEsYz1cbm51bGwsYj1udWxsLGQ9ITEpe2I9Ynx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtsZXQgZj1jJiZjLng/Yy54OjAsZz1jJiZjLnk/Yy55OjAsaD1jJiZjLndpZHRoP2Mud2lkdGg6YS53aWR0aHx8YS52aWRlb1dpZHRoO2M9YyYmYy5oZWlnaHQ/Yy5oZWlnaHQ6YS5oZWlnaHR8fGEudmlkZW9IZWlnaHQ7ZHx8Yi53aWR0aD09PWgmJmIuaGVpZ2h0PT09Y3x8KGIud2lkdGg9aCxiLmhlaWdodD1jKTtkPWIuZ2V0Q29udGV4dChcIjJkXCIse2FscGhhOiExfSk7ZC5pbWFnZVNtb290aGluZ0VuYWJsZWQ9ITE7ZC5kcmF3SW1hZ2UoYSxmLGcsaCxjLDAsMCxiLndpZHRoLGIuaGVpZ2h0KTtyZXR1cm4gZC5nZXRJbWFnZURhdGEoMCwwLGIud2lkdGgsYi5oZWlnaHQpfXN0YXRpYyBfbG9hZEltYWdlKGEpe2lmKGEgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudHx8YSBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnR8fHdpbmRvdy5JbWFnZUJpdG1hcCYmYSBpbnN0YW5jZW9mIHdpbmRvdy5JbWFnZUJpdG1hcHx8XG53aW5kb3cuT2Zmc2NyZWVuQ2FudmFzJiZhIGluc3RhbmNlb2Ygd2luZG93Lk9mZnNjcmVlbkNhbnZhcylyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGEpO2lmKGEgaW5zdGFuY2VvZiBJbWFnZSlyZXR1cm4gZS5fYXdhaXRJbWFnZUxvYWQoYSkudGhlbigoKT0+YSk7aWYoYSBpbnN0YW5jZW9mIEZpbGV8fGEgaW5zdGFuY2VvZiBVUkx8fFwic3RyaW5nXCI9PT10eXBlb2YgYSl7bGV0IGM9bmV3IEltYWdlO2Muc3JjPWEgaW5zdGFuY2VvZiBGaWxlP1VSTC5jcmVhdGVPYmplY3RVUkwoYSk6YTtyZXR1cm4gZS5fYXdhaXRJbWFnZUxvYWQoYykudGhlbigoKT0+e2EgaW5zdGFuY2VvZiBGaWxlJiZVUkwucmV2b2tlT2JqZWN0VVJMKGMuc3JjKTtyZXR1cm4gY30pfXJldHVybiBQcm9taXNlLnJlamVjdChcIlVuc3VwcG9ydGVkIGltYWdlIHR5cGUuXCIpfXN0YXRpYyBfYXdhaXRJbWFnZUxvYWQoYSl7cmV0dXJuIG5ldyBQcm9taXNlKChjLGIpPT57aWYoYS5jb21wbGV0ZSYmMCE9PWEubmF0dXJhbFdpZHRoKWMoKTtcbmVsc2V7bGV0IGQsZjtkPSgpPT57YS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLGQpO2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZik7YygpfTtmPSgpPT57YS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLGQpO2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZik7YihcIkltYWdlIGxvYWQgZXJyb3JcIil9O2EuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixkKTthLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGYpfX0pfX1lLkRFRkFVTFRfQ0FOVkFTX1NJWkU9NDAwO2UuV09SS0VSX1BBVEg9XCJxci1zY2FubmVyLXdvcmtlci5taW4uanNcIjtleHBvcnQgZGVmYXVsdCBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXItc2Nhbm5lci5taW4uanMubWFwXG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2FyZFByZXZpZXcudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ODE0NDBiNzgmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU2Nhbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1iZGZhMjdhNiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsInZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BZGQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NzY0YzU1ZDcmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29sbGVjdGlvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsInZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ib21lLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWZhZTViZWNlJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWM3ZmQwZTlhJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xvY2F0aW9ucy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zYjQ3ODBkOCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZXMgPSBbXTtcbiAgdmFyIG5ld1N0eWxlcyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY3NzID0gaXRlbVsxXTtcbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdO1xuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH07XG5cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgcGFydHM6IFtwYXJ0XVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrKztcblxuICAgICAgZm9yICg7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIHJlZnM6IDEsXG4gICAgICAgIHBhcnRzOiBwYXJ0c1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhvcHRpb25zLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIG9wdGlvbnMuYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmF0dHJpYnV0ZXMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuYXR0cmlidXRlcyA6IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG4gICAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgICAgZG9tU3R5bGUucmVmcy0tO1xuICAgICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgICBhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtYXlSZW1vdmUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2RvbVN0eWxlID0gbWF5UmVtb3ZlW19pXTtcblxuICAgICAgaWYgKF9kb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2RvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgX2RvbVN0eWxlLnBhcnRzW2pdKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bX2RvbVN0eWxlLmlkXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59OyIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImFwcC1jb250ZW50XCIgfSwgW1xuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY2FyZC1jb2xsZWN0aW9uX19ib2R5XCIgfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJ0cmFuc2l0aW9uXCIsXG4gICAgICAgICAgeyBhdHRyczogeyBuYW1lOiBcImZhZGVcIiwgbW9kZTogXCJvdXQtaW5cIiB9IH0sXG4gICAgICAgICAgW19jKFwicm91dGVyLXZpZXdcIildLFxuICAgICAgICAgIDFcbiAgICAgICAgKVxuICAgICAgXSxcbiAgICAgIDFcbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmQtY29udGFpbmVyXCIgfSwgW1xuICAgIF9jKFxuICAgICAgXCJoZWFkZXJcIixcbiAgICAgIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJyb3V0ZXItbGlua1wiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibmF2aWdhdGlvbl9fYmFja1wiLCBhdHRyczogeyB0bzogXCIvXCIgfSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoXCIuLi9hc3NldHMvc3RvbmUtYmFjay1idXR0b24ucG5nXCIpLFxuICAgICAgICAgICAgICAgIGFsdDogXCJcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJoMVwiLCB7IHN0YXRpY0NsYXNzOiBcImhlYWRpbmcxXCIgfSwgW1xuICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNhcmRDb250ZW50LnRpdGxlKSlcbiAgICAgICAgXSlcbiAgICAgIF0sXG4gICAgICAxXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZFwiLCBjbGFzczogeyBmbGlwcGVkOiB0aGlzLmZsaXBwZWQgfSB9LCBbXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjYXJkX19mcm9udFwiIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwicm91dGVyLWxpbmtcIixcbiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibmF2aWdhdGlvbl9fYmFja1wiLCBhdHRyczogeyB0bzogXCIvY29sbGVjdGlvblwiIH0gfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZShcIi4uL2Fzc2V0cy9iYWNrLWJ1dHRvbi5wbmdcIiksIGFsdDogXCJcIiB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY2FyZF9fZnJvbnRfZmxpcFwiLCBvbjogeyBjbGljazogX3ZtLmZsaXBDYXJkIH0gfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoXCIuLi9hc3NldHMvZmxpcC1jYXJkLWJ1dHRvbi5wbmdcIiksXG4gICAgICAgICAgICAgICAgICBhbHQ6IFwiXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS5jYXJkQ29udGVudC5pZFxuICAgICAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmRfX2Zyb250X2ltYWdlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImNhcmRfX2Zyb250X2ltYWdlX3NyY1wiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0uZ2V0SW1nVXJsKF92bS5jYXJkQ29udGVudC5pbWFnZUZyb250KSxcbiAgICAgICAgICAgICAgICAgICAgYWx0OiBcImNhcmQudGl0bGVcIlxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgIF0sXG4gICAgICAgIDFcbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY2FyZF9fYmFja1wiIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwicm91dGVyLWxpbmtcIixcbiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibmF2aWdhdGlvbl9fYmFja1wiLCBhdHRyczogeyB0bzogXCIvY29sbGVjdGlvblwiIH0gfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZShcIi4uL2Fzc2V0cy9iYWNrLWJ1dHRvbi5wbmdcIiksIGFsdDogXCJcIiB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY2FyZF9fYmFja19mbGlwXCIsIG9uOiB7IGNsaWNrOiBfdm0uZmxpcENhcmQgfSB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZShcIi4uL2Fzc2V0cy9mbGlwLWNhcmQtYnV0dG9uLnBuZ1wiKSxcbiAgICAgICAgICAgICAgICAgIGFsdDogXCJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICApLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX3ZtLmNhcmRDb250ZW50LmlkXG4gICAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZF9fYmFja19pbWFnZVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjYXJkX19iYWNrX2ltYWdlX3NyY1wiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0uZ2V0SW1nVXJsKF92bS5jYXJkQ29udGVudC5pbWFnZUJhY2spLFxuICAgICAgICAgICAgICAgICAgICBhbHQ6IFwiY2FyZC50aXRsZVwiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKVxuICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImFcIiwge1xuICAgIHN0YXRpY0NsYXNzOiBcInByZXZpZXctY2FyZFwiLFxuICAgIHN0eWxlOiBbXG4gICAgICBfdm0uY2FyZERldGFpbHMuaW1hZ2VGcm9udFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTpcbiAgICAgICAgICAgICAgXCJ1cmwoXCIgK1xuICAgICAgICAgICAgICByZXF1aXJlKFwiLi4vYXNzZXRzL1wiICsgX3ZtLmNhcmREZXRhaWxzLmltYWdlUHJldmlldykgK1xuICAgICAgICAgICAgICBcIilcIlxuICAgICAgICAgIH1cbiAgICAgICAgOiB7fVxuICAgIF0sXG4gICAgYXR0cnM6IHtcbiAgICAgIGhyZWY6IF92bS5jYXJkRGV0YWlscy50aXRsZSA/IFwiLyMvY2FyZC9cIiArIF92bS5jYXJkRGV0YWlscy5pZCA6IFwiI1wiXG4gICAgfVxuICB9KVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsZWFkZXJib2FyZC1jYXJkXCIgfSwgW1xuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHtcbiAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICBcImxlYWRlcmJvYXJkLWNhcmRfX3Bvc2l0aW9uXCIsXG4gICAgICAgICAgX3ZtLmRhdGEucG9zaXRpb24gPT09IFwiMVwiIHx8XG4gICAgICAgICAgX3ZtLmRhdGEucG9zaXRpb24gPT09IFwiMlwiIHx8XG4gICAgICAgICAgX3ZtLmRhdGEucG9zaXRpb24gPT09IFwiM1wiXG4gICAgICAgICAgICA/IFwibGVhZGVyYm9hcmQtY2FyZF9fcG9zaXRpb24tLXRvcC10aHJlZVwiXG4gICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIFtcbiAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICBcIiArIF92bS5fcyhfdm0uZGF0YS5wb3NpdGlvbikgKyBcIlxcbiAgICAgICAgXCIpLFxuICAgICAgICBfYyhcInNwYW5cIiwgW192bS5fdihfdm0uX3MoX3ZtLmRhdGEub3JkaW5hbCkpXSlcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsZWFkZXJib2FyZC1jYXJkX19jb250ZW50XCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJsZWFkZXJib2FyZC1jYXJkX19pbWFnZVwiLFxuICAgICAgICBzdHlsZTogW1xuICAgICAgICAgIF92bS5kYXRhLnByb2ZpbGVJbWFnZVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOlxuICAgICAgICAgICAgICAgICAgXCJ1cmwoXCIgKyByZXF1aXJlKFwiLi4vYXNzZXRzL1wiICsgX3ZtLmRhdGEucHJvZmlsZUltYWdlKSArIFwiKVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge31cbiAgICAgICAgXVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsZWFkZXJib2FyZC1jYXJkX191c2VybmFtZVwiIH0sIFtcbiAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uZGF0YS51c2VybmFtZSkpXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxlYWRlcmJvYXJkLWNhcmRfX2NhcmRzLWNvbGxlY3RlZFwiIH0sIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJsZWFkZXJib2FyZC1jYXJkX19jYXJkcy1jb2xsZWN0ZWRfX251bWJlclwiIH0sXG4gICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLmRhdGEuY2FyZHNDb2xsZWN0ZWQpKV1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJiclwiKSxcbiAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAgcG9pbnRzXFxuICAgICAgICBcIilcbiAgICAgIF0pXG4gICAgXSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJuYXZpZ2F0aW9uXCIgfSxcbiAgICBfdm0uX2woX3ZtLnJvdXRlcywgZnVuY3Rpb24ocm91dGUpIHtcbiAgICAgIHJldHVybiBfYyhcbiAgICAgICAgXCJyb3V0ZXItbGlua1wiLFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiByb3V0ZS50ZXh0LFxuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm5hdmlnYXRpb25fX2l0ZW1cIixcbiAgICAgICAgICBhdHRyczogeyB0bzogcm91dGUubGluayB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIFwiICsgX3ZtLl9zKHJvdXRlLnRleHQpICsgXCJcXG4gICAgXCIpXVxuICAgICAgKVxuICAgIH0pLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJhZGRjYXJkLWNvbnRhaW5lclwiIH0sIFtcbiAgICAhX3ZtLnNjYW5uZWRDYXJkXG4gICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidmlkZW8tY29udGFpbmVyXCIgfSwgW1xuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJoZWFkZXJcIixcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJyb3V0ZXItbGlua1wiLFxuICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibmF2aWdhdGlvbl9fYmFja1wiLCBhdHRyczogeyB0bzogXCIvXCIgfSB9LFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoXCIuLi9hc3NldHMvc3RvbmUtYmFjay1idXR0b24ucG5nXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIGFsdDogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJoMVwiLCB7IHN0YXRpY0NsYXNzOiBcImhlYWRpbmcxXCIgfSwgW192bS5fdihcIlNjYW4gYSBjb2RlXCIpXSlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwidmlkZW9cIiwgeyBhdHRyczogeyBpZDogXCJxclJlYWRlclwiIH0gfSlcbiAgICAgICAgXSlcbiAgICAgIDogX3ZtLl9lKCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfdm0uc2Nhbm5lZENhcmRcbiAgICAgID8gX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNhcmQtcHJldmlld1wiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJjYXJkXCIsIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHsgXCJjYXJkLWlkXCI6IEpTT04uc3RyaW5naWZ5KF92bS5zY2FubmVkQ2FyZC5pZCkgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5zY2FubmVkQ2FyZFxuICAgICAgPyBfYyhcImgyXCIsIHsgc3RhdGljQ2xhc3M6IFwiYWRkZWQtdGV4dFwiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICBcIlxcbiAgICAgICAgU3VjY2Vzc2Z1bGx5IGFkZGVkIFwiICtcbiAgICAgICAgICAgICAgX3ZtLl9zKF92bS5zY2FubmVkQ2FyZC50aXRsZSkgK1xuICAgICAgICAgICAgICBcIlxcbiAgICBcIlxuICAgICAgICAgIClcbiAgICAgICAgXSlcbiAgICAgIDogX3ZtLl9lKClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJhZGRcIiB9LFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcInJvdXRlci1saW5rXCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibmF2aWdhdGlvbl9fYmFja1wiLCBhdHRyczogeyB0bzogXCIvXCIgfSB9LFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKFwiLi4vYXNzZXRzL3N0b25lLWJhY2stYnV0dG9uLnBuZ1wiKSwgYWx0OiBcIlwiIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiaDFcIiwgeyBzdGF0aWNDbGFzczogXCJoZWFkaW5nMVwiLCBhdHRyczogeyBcImRhdGEtdi1mYWU1YmVjZVwiOiBcIlwiIH0gfSwgW1xuICAgICAgICBfdm0uX3YoXCJBZGQgYSBjYXJkXCIpXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIm5hdmlnYXRpb25cIiwgeyBhdHRyczogeyByb3V0ZXM6IF92bS5yb3V0ZXMgfSB9KVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbGxlY3Rpb25cIiB9LCBbXG4gICAgX2MoXG4gICAgICBcImhlYWRlclwiLFxuICAgICAgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcInJvdXRlci1saW5rXCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJuYXZpZ2F0aW9uX19iYWNrXCIsIGF0dHJzOiB7IHRvOiBcIi9cIiB9IH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZShcIi4uL2Fzc2V0cy9zdG9uZS1iYWNrLWJ1dHRvbi5wbmdcIiksXG4gICAgICAgICAgICAgICAgYWx0OiBcIlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImgxXCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGluZzFcIiB9LCBbX3ZtLl92KFwiQ29sbGVjdGlvblwiKV0pXG4gICAgICBdLFxuICAgICAgMVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInByZXZpZXctd3JhcHBlclwiIH0sXG4gICAgICBfdm0uX2woX3ZtLiRzdG9yZS5zdGF0ZS5iYXNlLmNhcmRzLCBmdW5jdGlvbihjYXJkKSB7XG4gICAgICAgIHJldHVybiBfYyhcImNhcmQtcHJldmlld1wiLCB7XG4gICAgICAgICAga2V5OiBjYXJkLmlkLFxuICAgICAgICAgIGF0dHJzOiB7IFwiY2FyZC1kZXRhaWxzXCI6IGNhcmQgfVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICAxXG4gICAgKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7IHN0YXRpY0NsYXNzOiBcImhvbWVcIiB9LFxuICAgIFtcbiAgICAgIF92bS5fbSgwKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIm5hdmlnYXRpb25cIiwgeyBhdHRyczogeyByb3V0ZXM6IF92bS5yb3V0ZXMgfSB9KVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImhlYWRlclwiLCBbXG4gICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImhvbWVfX2xvZ29cIixcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICBzcmM6IHJlcXVpcmUoXCIuLi9hc3NldHMvd2VlLWdhaXRoZXJlcnMtbG9nby5wbmdcIiksXG4gICAgICAgICAgYWx0OiBcIndlZSBnYWl0aGVyZXJzIGxvZ29cIlxuICAgICAgICB9XG4gICAgICB9KVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwibGVhZGVyYm9hcmRcIiB9LFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcImhlYWRlclwiLFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcInJvdXRlci1saW5rXCIsXG4gICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcIm5hdmlnYXRpb25fX2JhY2tcIiwgYXR0cnM6IHsgdG86IFwiL1wiIH0gfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoXCIuLi9hc3NldHMvc3RvbmUtYmFjay1idXR0b24ucG5nXCIpLFxuICAgICAgICAgICAgICAgICAgYWx0OiBcIlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXVxuICAgICAgICAgICksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcImgxXCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGluZzFcIiB9LCBbX3ZtLl92KFwiTGVhZGVyYm9hcmRcIildKVxuICAgICAgICBdLFxuICAgICAgICAxXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcInRyYW5zaXRpb25cIixcbiAgICAgICAgeyBhdHRyczogeyBuYW1lOiBcImZhZGVcIiB9IH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uc2hvd0l0ZW1zXG4gICAgICAgICAgICA/IF9jKFwibGVhZGVyYm9hcmQtY2FyZFwiLCB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibGVhZGVyYm9hcmQtY2FyZFwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICBkYXRhOiBfdm0uJHN0b3JlLnN0YXRlLmJhc2UubGVhZGVyYm9hcmREYXRhWzVdLFxuICAgICAgICAgICAgICAgICAgXCJkYXRhLWluZGV4XCI6IF92bS5pbmRleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImgyXCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGluZzFcIiB9LCBbX3ZtLl92KFwiRnJpZW5kcyBMZWFkZXJib2FyZFwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcInRyYW5zaXRpb24tZ3JvdXBcIixcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiB7IFwiLS10b3RhbFwiOiBfdm0uJHN0b3JlLnN0YXRlLmJhc2UubGVhZGVyYm9hcmREYXRhLmxlbmd0aCB9LFxuICAgICAgICAgIGF0dHJzOiB7IHRhZzogXCJkaXZcIiwgbmFtZTogXCJzbGlkZS1pblwiIH1cbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF92bS5fbChfdm0uJHN0b3JlLnN0YXRlLmJhc2UubGVhZGVyYm9hcmREYXRhLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgX3ZtLnNob3dJdGVtc1xuICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiBpbmRleCwgc3R5bGU6IHsgXCItLWlcIjogaW5kZXggfSB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJsZWFkZXJib2FyZC1jYXJkXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImxlYWRlcmJvYXJkLWNhcmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGRhdGE6IGl0ZW0sIFwiZGF0YS1pbmRleFwiOiBpbmRleCB9XG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9KVxuICAgICAgICBdLFxuICAgICAgICAyXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiaW1nXCIsIHsgYXR0cnM6IHsgc3JjOiBcIlwiLCBhbHQ6IFwiXCIgfSB9KVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxvY2F0aW9uc1wiIH0sIFtcbiAgICBfYyhcbiAgICAgIFwiaGVhZGVyXCIsXG4gICAgICBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwicm91dGVyLWxpbmtcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcIm5hdmlnYXRpb25fX2JhY2tcIiwgYXR0cnM6IHsgdG86IFwiL1wiIH0gfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKFwiLi4vYXNzZXRzL3N0b25lLWJhY2stYnV0dG9uLnBuZ1wiKSxcbiAgICAgICAgICAgICAgICBhbHQ6IFwiXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiaDFcIiwgeyBzdGF0aWNDbGFzczogXCJoZWFkaW5nMVwiIH0sIFtfdm0uX3YoXCJMb2NhdGlvbnNcIildKVxuICAgICAgXSxcbiAgICAgIDFcbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbX2MoXCJjYXJkXCIsIHsgYXR0cnM6IHsgXCJjYXJkLWlkXCI6IF92bS5pZCB9IH0pXSwgMSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiLyohXG4gICogdnVlLXJvdXRlciB2My4xLjNcbiAgKiAoYykgMjAxOSBFdmFuIFlvdVxuICAqIEBsaWNlbnNlIE1JVFxuICAqL1xuLyogICovXG5cbmZ1bmN0aW9uIGFzc2VydCAoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKChcIlt2dWUtcm91dGVyXSBcIiArIG1lc3NhZ2UpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm4gKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZGl0aW9uKSB7XG4gICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2FybigoXCJbdnVlLXJvdXRlcl0gXCIgKyBtZXNzYWdlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFcnJvciAoZXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXJyKS5pbmRleE9mKCdFcnJvcicpID4gLTFcbn1cblxuZnVuY3Rpb24gaXNFeHRlbmRlZEVycm9yIChjb25zdHJ1Y3RvciwgZXJyKSB7XG4gIHJldHVybiAoXG4gICAgZXJyIGluc3RhbmNlb2YgY29uc3RydWN0b3IgfHxcbiAgICAvLyBfbmFtZSBpcyB0byBzdXBwb3J0IElFOSB0b29cbiAgICAoZXJyICYmIChlcnIubmFtZSA9PT0gY29uc3RydWN0b3IubmFtZSB8fCBlcnIuX25hbWUgPT09IGNvbnN0cnVjdG9yLl9uYW1lKSlcbiAgKVxufVxuXG5mdW5jdGlvbiBleHRlbmQgKGEsIGIpIHtcbiAgZm9yICh2YXIga2V5IGluIGIpIHtcbiAgICBhW2tleV0gPSBiW2tleV07XG4gIH1cbiAgcmV0dXJuIGFcbn1cblxudmFyIFZpZXcgPSB7XG4gIG5hbWU6ICdSb3V0ZXJWaWV3JyxcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChfLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG5cbiAgICAvLyB1c2VkIGJ5IGRldnRvb2xzIHRvIGRpc3BsYXkgYSByb3V0ZXItdmlldyBiYWRnZVxuICAgIGRhdGEucm91dGVyVmlldyA9IHRydWU7XG5cbiAgICAvLyBkaXJlY3RseSB1c2UgcGFyZW50IGNvbnRleHQncyBjcmVhdGVFbGVtZW50KCkgZnVuY3Rpb25cbiAgICAvLyBzbyB0aGF0IGNvbXBvbmVudHMgcmVuZGVyZWQgYnkgcm91dGVyLXZpZXcgY2FuIHJlc29sdmUgbmFtZWQgc2xvdHNcbiAgICB2YXIgaCA9IHBhcmVudC4kY3JlYXRlRWxlbWVudDtcbiAgICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gICAgdmFyIHJvdXRlID0gcGFyZW50LiRyb3V0ZTtcbiAgICB2YXIgY2FjaGUgPSBwYXJlbnQuX3JvdXRlclZpZXdDYWNoZSB8fCAocGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgPSB7fSk7XG5cbiAgICAvLyBkZXRlcm1pbmUgY3VycmVudCB2aWV3IGRlcHRoLCBhbHNvIGNoZWNrIHRvIHNlZSBpZiB0aGUgdHJlZVxuICAgIC8vIGhhcyBiZWVuIHRvZ2dsZWQgaW5hY3RpdmUgYnV0IGtlcHQtYWxpdmUuXG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICB2YXIgaW5hY3RpdmUgPSBmYWxzZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5fcm91dGVyUm9vdCAhPT0gcGFyZW50KSB7XG4gICAgICB2YXIgdm5vZGVEYXRhID0gcGFyZW50LiR2bm9kZSAmJiBwYXJlbnQuJHZub2RlLmRhdGE7XG4gICAgICBpZiAodm5vZGVEYXRhKSB7XG4gICAgICAgIGlmICh2bm9kZURhdGEucm91dGVyVmlldykge1xuICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZub2RlRGF0YS5rZWVwQWxpdmUgJiYgcGFyZW50Ll9pbmFjdGl2ZSkge1xuICAgICAgICAgIGluYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIGRhdGEucm91dGVyVmlld0RlcHRoID0gZGVwdGg7XG5cbiAgICAvLyByZW5kZXIgcHJldmlvdXMgdmlldyBpZiB0aGUgdHJlZSBpcyBpbmFjdGl2ZSBhbmQga2VwdC1hbGl2ZVxuICAgIGlmIChpbmFjdGl2ZSkge1xuICAgICAgcmV0dXJuIGgoY2FjaGVbbmFtZV0sIGRhdGEsIGNoaWxkcmVuKVxuICAgIH1cblxuICAgIHZhciBtYXRjaGVkID0gcm91dGUubWF0Y2hlZFtkZXB0aF07XG4gICAgLy8gcmVuZGVyIGVtcHR5IG5vZGUgaWYgbm8gbWF0Y2hlZCByb3V0ZVxuICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgY2FjaGVbbmFtZV0gPSBudWxsO1xuICAgICAgcmV0dXJuIGgoKVxuICAgIH1cblxuICAgIHZhciBjb21wb25lbnQgPSBjYWNoZVtuYW1lXSA9IG1hdGNoZWQuY29tcG9uZW50c1tuYW1lXTtcblxuICAgIC8vIGF0dGFjaCBpbnN0YW5jZSByZWdpc3RyYXRpb24gaG9va1xuICAgIC8vIHRoaXMgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGluc3RhbmNlJ3MgaW5qZWN0ZWQgbGlmZWN5Y2xlIGhvb2tzXG4gICAgZGF0YS5yZWdpc3RlclJvdXRlSW5zdGFuY2UgPSBmdW5jdGlvbiAodm0sIHZhbCkge1xuICAgICAgLy8gdmFsIGNvdWxkIGJlIHVuZGVmaW5lZCBmb3IgdW5yZWdpc3RyYXRpb25cbiAgICAgIHZhciBjdXJyZW50ID0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV07XG4gICAgICBpZiAoXG4gICAgICAgICh2YWwgJiYgY3VycmVudCAhPT0gdm0pIHx8XG4gICAgICAgICghdmFsICYmIGN1cnJlbnQgPT09IHZtKVxuICAgICAgKSB7XG4gICAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFsc28gcmVnaXN0ZXIgaW5zdGFuY2UgaW4gcHJlcGF0Y2ggaG9va1xuICAgIC8vIGluIGNhc2UgdGhlIHNhbWUgY29tcG9uZW50IGluc3RhbmNlIGlzIHJldXNlZCBhY3Jvc3MgZGlmZmVyZW50IHJvdXRlc1xuICAgIDsoZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSkpLnByZXBhdGNoID0gZnVuY3Rpb24gKF8sIHZub2RlKSB7XG4gICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnN0YW5jZSBpbiBpbml0IGhvb2tcbiAgICAvLyBpbiBjYXNlIGtlcHQtYWxpdmUgY29tcG9uZW50IGJlIGFjdGl2ZWQgd2hlbiByb3V0ZXMgY2hhbmdlZFxuICAgIGRhdGEuaG9vay5pbml0ID0gZnVuY3Rpb24gKHZub2RlKSB7XG4gICAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUgJiZcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgIT09IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdXG4gICAgICApIHtcbiAgICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gcmVzb2x2ZSBwcm9wc1xuICAgIHZhciBwcm9wc1RvUGFzcyA9IGRhdGEucHJvcHMgPSByZXNvbHZlUHJvcHMocm91dGUsIG1hdGNoZWQucHJvcHMgJiYgbWF0Y2hlZC5wcm9wc1tuYW1lXSk7XG4gICAgaWYgKHByb3BzVG9QYXNzKSB7XG4gICAgICAvLyBjbG9uZSB0byBwcmV2ZW50IG11dGF0aW9uXG4gICAgICBwcm9wc1RvUGFzcyA9IGRhdGEucHJvcHMgPSBleHRlbmQoe30sIHByb3BzVG9QYXNzKTtcbiAgICAgIC8vIHBhc3Mgbm9uLWRlY2xhcmVkIHByb3BzIGFzIGF0dHJzXG4gICAgICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzID0gZGF0YS5hdHRycyB8fCB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wc1RvUGFzcykge1xuICAgICAgICBpZiAoIWNvbXBvbmVudC5wcm9wcyB8fCAhKGtleSBpbiBjb21wb25lbnQucHJvcHMpKSB7XG4gICAgICAgICAgYXR0cnNba2V5XSA9IHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgICAgZGVsZXRlIHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaChjb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKVxuICB9XG59O1xuXG5mdW5jdGlvbiByZXNvbHZlUHJvcHMgKHJvdXRlLCBjb25maWcpIHtcbiAgc3dpdGNoICh0eXBlb2YgY29uZmlnKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVyblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGNvbmZpZyhyb3V0ZSlcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjb25maWcgPyByb3V0ZS5wYXJhbXMgOiB1bmRlZmluZWRcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcInByb3BzIGluIFxcXCJcIiArIChyb3V0ZS5wYXRoKSArIFwiXFxcIiBpcyBhIFwiICsgKHR5cGVvZiBjb25maWcpICsgXCIsIFwiICtcbiAgICAgICAgICBcImV4cGVjdGluZyBhbiBvYmplY3QsIGZ1bmN0aW9uIG9yIGJvb2xlYW4uXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGVuY29kZVJlc2VydmVSRSA9IC9bIScoKSpdL2c7XG52YXIgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNik7IH07XG52YXIgY29tbWFSRSA9IC8lMkMvZztcblxuLy8gZml4ZWQgZW5jb2RlVVJJQ29tcG9uZW50IHdoaWNoIGlzIG1vcmUgY29uZm9ybWFudCB0byBSRkMzOTg2OlxuLy8gLSBlc2NhcGVzIFshJygpKl1cbi8vIC0gcHJlc2VydmUgY29tbWFzXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgLnJlcGxhY2UoZW5jb2RlUmVzZXJ2ZVJFLCBlbmNvZGVSZXNlcnZlUmVwbGFjZXIpXG4gIC5yZXBsYWNlKGNvbW1hUkUsICcsJyk7IH07XG5cbnZhciBkZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XG5cbmZ1bmN0aW9uIHJlc29sdmVRdWVyeSAoXG4gIHF1ZXJ5LFxuICBleHRyYVF1ZXJ5LFxuICBfcGFyc2VRdWVyeVxuKSB7XG4gIGlmICggZXh0cmFRdWVyeSA9PT0gdm9pZCAwICkgZXh0cmFRdWVyeSA9IHt9O1xuXG4gIHZhciBwYXJzZSA9IF9wYXJzZVF1ZXJ5IHx8IHBhcnNlUXVlcnk7XG4gIHZhciBwYXJzZWRRdWVyeTtcbiAgdHJ5IHtcbiAgICBwYXJzZWRRdWVyeSA9IHBhcnNlKHF1ZXJ5IHx8ICcnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihmYWxzZSwgZS5tZXNzYWdlKTtcbiAgICBwYXJzZWRRdWVyeSA9IHt9O1xuICB9XG4gIGZvciAodmFyIGtleSBpbiBleHRyYVF1ZXJ5KSB7XG4gICAgcGFyc2VkUXVlcnlba2V5XSA9IGV4dHJhUXVlcnlba2V5XTtcbiAgfVxuICByZXR1cm4gcGFyc2VkUXVlcnlcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWVyeSAocXVlcnkpIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnJlcGxhY2UoL14oXFw/fCN8JikvLCAnJyk7XG5cbiAgaWYgKCFxdWVyeSkge1xuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHF1ZXJ5LnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydHMuc2hpZnQoKSk7XG4gICAgdmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDBcbiAgICAgID8gZGVjb2RlKHBhcnRzLmpvaW4oJz0nKSlcbiAgICAgIDogbnVsbDtcblxuICAgIGlmIChyZXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzW2tleV0pKSB7XG4gICAgICByZXNba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trZXldID0gW3Jlc1trZXldLCB2YWxdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlRdWVyeSAob2JqKSB7XG4gIHZhciByZXMgPSBvYmogPyBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHZhbCA9IG9ialtrZXldO1xuXG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZW5jb2RlKGtleSlcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbiAodmFsMikge1xuICAgICAgICBpZiAodmFsMiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbDIgPT09IG51bGwpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGUoa2V5KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodmFsMikpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQuam9pbignJicpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbClcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lmxlbmd0aCA+IDA7IH0pLmpvaW4oJyYnKSA6IG51bGw7XG4gIHJldHVybiByZXMgPyAoXCI/XCIgKyByZXMpIDogJydcbn1cblxuLyogICovXG5cbnZhciB0cmFpbGluZ1NsYXNoUkUgPSAvXFwvPyQvO1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZSAoXG4gIHJlY29yZCxcbiAgbG9jYXRpb24sXG4gIHJlZGlyZWN0ZWRGcm9tLFxuICByb3V0ZXJcbikge1xuICB2YXIgc3RyaW5naWZ5UXVlcnkgPSByb3V0ZXIgJiYgcm91dGVyLm9wdGlvbnMuc3RyaW5naWZ5UXVlcnk7XG5cbiAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnkgfHwge307XG4gIHRyeSB7XG4gICAgcXVlcnkgPSBjbG9uZShxdWVyeSk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJvdXRlID0ge1xuICAgIG5hbWU6IGxvY2F0aW9uLm5hbWUgfHwgKHJlY29yZCAmJiByZWNvcmQubmFtZSksXG4gICAgbWV0YTogKHJlY29yZCAmJiByZWNvcmQubWV0YSkgfHwge30sXG4gICAgcGF0aDogbG9jYXRpb24ucGF0aCB8fCAnLycsXG4gICAgaGFzaDogbG9jYXRpb24uaGFzaCB8fCAnJyxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgcGFyYW1zOiBsb2NhdGlvbi5wYXJhbXMgfHwge30sXG4gICAgZnVsbFBhdGg6IGdldEZ1bGxQYXRoKGxvY2F0aW9uLCBzdHJpbmdpZnlRdWVyeSksXG4gICAgbWF0Y2hlZDogcmVjb3JkID8gZm9ybWF0TWF0Y2gocmVjb3JkKSA6IFtdXG4gIH07XG4gIGlmIChyZWRpcmVjdGVkRnJvbSkge1xuICAgIHJvdXRlLnJlZGlyZWN0ZWRGcm9tID0gZ2V0RnVsbFBhdGgocmVkaXJlY3RlZEZyb20sIHN0cmluZ2lmeVF1ZXJ5KTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShyb3V0ZSlcbn1cblxuZnVuY3Rpb24gY2xvbmUgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoY2xvbmUpXG4gIH0gZWxzZSBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIHJlc1trZXldID0gY2xvbmUodmFsdWVba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxufVxuXG4vLyB0aGUgc3RhcnRpbmcgcm91dGUgdGhhdCByZXByZXNlbnRzIHRoZSBpbml0aWFsIHN0YXRlXG52YXIgU1RBUlQgPSBjcmVhdGVSb3V0ZShudWxsLCB7XG4gIHBhdGg6ICcvJ1xufSk7XG5cbmZ1bmN0aW9uIGZvcm1hdE1hdGNoIChyZWNvcmQpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB3aGlsZSAocmVjb3JkKSB7XG4gICAgcmVzLnVuc2hpZnQocmVjb3JkKTtcbiAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0RnVsbFBhdGggKFxuICByZWYsXG4gIF9zdHJpbmdpZnlRdWVyeVxuKSB7XG4gIHZhciBwYXRoID0gcmVmLnBhdGg7XG4gIHZhciBxdWVyeSA9IHJlZi5xdWVyeTsgaWYgKCBxdWVyeSA9PT0gdm9pZCAwICkgcXVlcnkgPSB7fTtcbiAgdmFyIGhhc2ggPSByZWYuaGFzaDsgaWYgKCBoYXNoID09PSB2b2lkIDAgKSBoYXNoID0gJyc7XG5cbiAgdmFyIHN0cmluZ2lmeSA9IF9zdHJpbmdpZnlRdWVyeSB8fCBzdHJpbmdpZnlRdWVyeTtcbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyBzdHJpbmdpZnkocXVlcnkpICsgaGFzaFxufVxuXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZSAoYSwgYikge1xuICBpZiAoYiA9PT0gU1RBUlQpIHtcbiAgICByZXR1cm4gYSA9PT0gYlxuICB9IGVsc2UgaWYgKCFiKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAoYS5wYXRoICYmIGIucGF0aCkge1xuICAgIHJldHVybiAoXG4gICAgICBhLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSA9PT0gYi5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgJiZcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpXG4gICAgKVxuICB9IGVsc2UgaWYgKGEubmFtZSAmJiBiLm5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5uYW1lID09PSBiLm5hbWUgJiZcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucGFyYW1zLCBiLnBhcmFtcylcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFcXVhbCAoYSwgYikge1xuICBpZiAoIGEgPT09IHZvaWQgMCApIGEgPSB7fTtcbiAgaWYgKCBiID09PSB2b2lkIDAgKSBiID0ge307XG5cbiAgLy8gaGFuZGxlIG51bGwgdmFsdWUgIzE1NjZcbiAgaWYgKCFhIHx8ICFiKSB7IHJldHVybiBhID09PSBiIH1cbiAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBhVmFsID0gYVtrZXldO1xuICAgIHZhciBiVmFsID0gYltrZXldO1xuICAgIC8vIGNoZWNrIG5lc3RlZCBlcXVhbGl0eVxuICAgIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGJWYWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RFcXVhbChhVmFsLCBiVmFsKVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFWYWwpID09PSBTdHJpbmcoYlZhbClcbiAgfSlcbn1cblxuZnVuY3Rpb24gaXNJbmNsdWRlZFJvdXRlIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIChcbiAgICBjdXJyZW50LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykuaW5kZXhPZihcbiAgICAgIHRhcmdldC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpXG4gICAgKSA9PT0gMCAmJlxuICAgICghdGFyZ2V0Lmhhc2ggfHwgY3VycmVudC5oYXNoID09PSB0YXJnZXQuaGFzaCkgJiZcbiAgICBxdWVyeUluY2x1ZGVzKGN1cnJlbnQucXVlcnksIHRhcmdldC5xdWVyeSlcbiAgKVxufVxuXG5mdW5jdGlvbiBxdWVyeUluY2x1ZGVzIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGlmICghKGtleSBpbiBjdXJyZW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCAoXG4gIHJlbGF0aXZlLFxuICBiYXNlLFxuICBhcHBlbmRcbikge1xuICB2YXIgZmlyc3RDaGFyID0gcmVsYXRpdmUuY2hhckF0KDApO1xuICBpZiAoZmlyc3RDaGFyID09PSAnLycpIHtcbiAgICByZXR1cm4gcmVsYXRpdmVcbiAgfVxuXG4gIGlmIChmaXJzdENoYXIgPT09ICc/JyB8fCBmaXJzdENoYXIgPT09ICcjJykge1xuICAgIHJldHVybiBiYXNlICsgcmVsYXRpdmVcbiAgfVxuXG4gIHZhciBzdGFjayA9IGJhc2Uuc3BsaXQoJy8nKTtcblxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2VnbWVudCBpZjpcbiAgLy8gLSBub3QgYXBwZW5kaW5nXG4gIC8vIC0gYXBwZW5kaW5nIHRvIHRyYWlsaW5nIHNsYXNoIChsYXN0IHNlZ21lbnQgaXMgZW1wdHkpXG4gIGlmICghYXBwZW5kIHx8ICFzdGFja1tzdGFjay5sZW5ndGggLSAxXSkge1xuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgLy8gcmVzb2x2ZSByZWxhdGl2ZSBwYXRoXG4gIHZhciBzZWdtZW50cyA9IHJlbGF0aXZlLnJlcGxhY2UoL15cXC8vLCAnJykuc3BsaXQoJy8nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgaWYgKHNlZ21lbnQgPT09ICcuLicpIHtcbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gJy4nKSB7XG4gICAgICBzdGFjay5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoXG4gIGlmIChzdGFja1swXSAhPT0gJycpIHtcbiAgICBzdGFjay51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIHJldHVybiBzdGFjay5qb2luKCcvJylcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBxdWVyeSA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgaGFzaCA9IHBhdGguc2xpY2UoaGFzaEluZGV4KTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHF1ZXJ5SW5kZXggPSBwYXRoLmluZGV4T2YoJz8nKTtcbiAgaWYgKHF1ZXJ5SW5kZXggPj0gMCkge1xuICAgIHF1ZXJ5ID0gcGF0aC5zbGljZShxdWVyeUluZGV4ICsgMSk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgcXVlcnlJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIGhhc2g6IGhhc2hcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhblBhdGggKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwvXFwvL2csICcvJylcbn1cblxudmFyIGlzYXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xudmFyIHBhdGhUb1JlZ2V4cF8xID0gcGF0aFRvUmVnZXhwO1xudmFyIHBhcnNlXzEgPSBwYXJzZTtcbnZhciBjb21waWxlXzEgPSBjb21waWxlO1xudmFyIHRva2Vuc1RvRnVuY3Rpb25fMSA9IHRva2Vuc1RvRnVuY3Rpb247XG52YXIgdG9rZW5zVG9SZWdFeHBfMSA9IHRva2Vuc1RvUmVnRXhwO1xuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpO1xuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciBrZXkgPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcGF0aCA9ICcnO1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nO1xuICB2YXIgcmVzO1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF07XG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV07XG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleDtcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KTtcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoO1xuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdO1xuICAgIHZhciBwcmVmaXggPSByZXNbMl07XG4gICAgdmFyIG5hbWUgPSByZXNbM107XG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF07XG4gICAgdmFyIGdyb3VwID0gcmVzWzVdO1xuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XTtcbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN107XG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgICAgIHBhdGggPSAnJztcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXg7XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJztcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyO1xuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cDtcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSk7XG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKTtcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJyc7XG4gICAgdmFyIGRhdGEgPSBvYmogfHwge307XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW47XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXTtcbiAgICAgIHZhciBzZWdtZW50O1xuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKTtcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpO1xuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzO1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZyk7XG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKTtcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSk7XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKTtcbiAgICBrZXlzID0gW107XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2U7XG4gIHZhciByb3V0ZSA9ICcnO1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KTtcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknO1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pO1xuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJztcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknO1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKTtcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXI7XG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPyc7XG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnO1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSc7XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxucGF0aFRvUmVnZXhwXzEucGFyc2UgPSBwYXJzZV8xO1xucGF0aFRvUmVnZXhwXzEuY29tcGlsZSA9IGNvbXBpbGVfMTtcbnBhdGhUb1JlZ2V4cF8xLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXzE7XG5cbi8qICAqL1xuXG4vLyAkZmxvdy1kaXNhYmxlLWxpbmVcbnZhciByZWdleHBDb21waWxlQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBmaWxsUGFyYW1zIChcbiAgcGF0aCxcbiAgcGFyYW1zLFxuICByb3V0ZU1zZ1xuKSB7XG4gIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgdHJ5IHtcbiAgICB2YXIgZmlsbGVyID1cbiAgICAgIHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSB8fFxuICAgICAgKHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSA9IHBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUocGF0aCkpO1xuXG4gICAgLy8gRml4ICMyNTA1IHJlc29sdmluZyBhc3RlcmlzayByb3V0ZXMgeyBuYW1lOiAnbm90LWZvdW5kJywgcGFyYW1zOiB7IHBhdGhNYXRjaDogJy9ub3QtZm91bmQnIH19XG4gICAgaWYgKHBhcmFtcy5wYXRoTWF0Y2gpIHsgcGFyYW1zWzBdID0gcGFyYW1zLnBhdGhNYXRjaDsgfVxuXG4gICAgcmV0dXJuIGZpbGxlcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgKFwibWlzc2luZyBwYXJhbSBmb3IgXCIgKyByb3V0ZU1zZyArIFwiOiBcIiArIChlLm1lc3NhZ2UpKSk7XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9IGZpbmFsbHkge1xuICAgIC8vIGRlbGV0ZSB0aGUgMCBpZiBpdCB3YXMgYWRkZWRcbiAgICBkZWxldGUgcGFyYW1zWzBdO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVMb2NhdGlvbiAoXG4gIHJhdyxcbiAgY3VycmVudCxcbiAgYXBwZW5kLFxuICByb3V0ZXJcbikge1xuICB2YXIgbmV4dCA9IHR5cGVvZiByYXcgPT09ICdzdHJpbmcnID8geyBwYXRoOiByYXcgfSA6IHJhdztcbiAgLy8gbmFtZWQgdGFyZ2V0XG4gIGlmIChuZXh0Ll9ub3JtYWxpemVkKSB7XG4gICAgcmV0dXJuIG5leHRcbiAgfSBlbHNlIGlmIChuZXh0Lm5hbWUpIHtcbiAgICByZXR1cm4gZXh0ZW5kKHt9LCByYXcpXG4gIH1cblxuICAvLyByZWxhdGl2ZSBwYXJhbXNcbiAgaWYgKCFuZXh0LnBhdGggJiYgbmV4dC5wYXJhbXMgJiYgY3VycmVudCkge1xuICAgIG5leHQgPSBleHRlbmQoe30sIG5leHQpO1xuICAgIG5leHQuX25vcm1hbGl6ZWQgPSB0cnVlO1xuICAgIHZhciBwYXJhbXMgPSBleHRlbmQoZXh0ZW5kKHt9LCBjdXJyZW50LnBhcmFtcyksIG5leHQucGFyYW1zKTtcbiAgICBpZiAoY3VycmVudC5uYW1lKSB7XG4gICAgICBuZXh0Lm5hbWUgPSBjdXJyZW50Lm5hbWU7XG4gICAgICBuZXh0LnBhcmFtcyA9IHBhcmFtcztcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnQubWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgIHZhciByYXdQYXRoID0gY3VycmVudC5tYXRjaGVkW2N1cnJlbnQubWF0Y2hlZC5sZW5ndGggLSAxXS5wYXRoO1xuICAgICAgbmV4dC5wYXRoID0gZmlsbFBhcmFtcyhyYXdQYXRoLCBwYXJhbXMsIChcInBhdGggXCIgKyAoY3VycmVudC5wYXRoKSkpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgXCJyZWxhdGl2ZSBwYXJhbXMgbmF2aWdhdGlvbiByZXF1aXJlcyBhIGN1cnJlbnQgcm91dGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgdmFyIHBhcnNlZFBhdGggPSBwYXJzZVBhdGgobmV4dC5wYXRoIHx8ICcnKTtcbiAgdmFyIGJhc2VQYXRoID0gKGN1cnJlbnQgJiYgY3VycmVudC5wYXRoKSB8fCAnLyc7XG4gIHZhciBwYXRoID0gcGFyc2VkUGF0aC5wYXRoXG4gICAgPyByZXNvbHZlUGF0aChwYXJzZWRQYXRoLnBhdGgsIGJhc2VQYXRoLCBhcHBlbmQgfHwgbmV4dC5hcHBlbmQpXG4gICAgOiBiYXNlUGF0aDtcblxuICB2YXIgcXVlcnkgPSByZXNvbHZlUXVlcnkoXG4gICAgcGFyc2VkUGF0aC5xdWVyeSxcbiAgICBuZXh0LnF1ZXJ5LFxuICAgIHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5wYXJzZVF1ZXJ5XG4gICk7XG5cbiAgdmFyIGhhc2ggPSBuZXh0Lmhhc2ggfHwgcGFyc2VkUGF0aC5oYXNoO1xuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgaGFzaCA9IFwiI1wiICsgaGFzaDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbi8qICAqL1xuXG4vLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1Z1xudmFyIHRvVHlwZXMgPSBbU3RyaW5nLCBPYmplY3RdO1xudmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbnZhciBMaW5rID0ge1xuICBuYW1lOiAnUm91dGVyTGluaycsXG4gIHByb3BzOiB7XG4gICAgdG86IHtcbiAgICAgIHR5cGU6IHRvVHlwZXMsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnYSdcbiAgICB9LFxuICAgIGV4YWN0OiBCb29sZWFuLFxuICAgIGFwcGVuZDogQm9vbGVhbixcbiAgICByZXBsYWNlOiBCb29sZWFuLFxuICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGV2ZW50OiB7XG4gICAgICB0eXBlOiBldmVudFR5cGVzLFxuICAgICAgZGVmYXVsdDogJ2NsaWNrJ1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByb3V0ZXIgPSB0aGlzLiRyb3V0ZXI7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLiRyb3V0ZTtcbiAgICB2YXIgcmVmID0gcm91dGVyLnJlc29sdmUoXG4gICAgICB0aGlzLnRvLFxuICAgICAgY3VycmVudCxcbiAgICAgIHRoaXMuYXBwZW5kXG4gICAgKTtcbiAgICB2YXIgbG9jYXRpb24gPSByZWYubG9jYXRpb247XG4gICAgdmFyIHJvdXRlID0gcmVmLnJvdXRlO1xuICAgIHZhciBocmVmID0gcmVmLmhyZWY7XG5cbiAgICB2YXIgY2xhc3NlcyA9IHt9O1xuICAgIHZhciBnbG9iYWxBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcztcbiAgICB2YXIgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIC8vIFN1cHBvcnQgZ2xvYmFsIGVtcHR5IGFjdGl2ZSBjbGFzc1xuICAgIHZhciBhY3RpdmVDbGFzc0ZhbGxiYWNrID1cbiAgICAgIGdsb2JhbEFjdGl2ZUNsYXNzID09IG51bGwgPyAncm91dGVyLWxpbmstYWN0aXZlJyA6IGdsb2JhbEFjdGl2ZUNsYXNzO1xuICAgIHZhciBleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2sgPVxuICAgICAgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgID8gJ3JvdXRlci1saW5rLWV4YWN0LWFjdGl2ZSdcbiAgICAgICAgOiBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIHZhciBhY3RpdmVDbGFzcyA9XG4gICAgICB0aGlzLmFjdGl2ZUNsYXNzID09IG51bGwgPyBhY3RpdmVDbGFzc0ZhbGxiYWNrIDogdGhpcy5hY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzcyA9XG4gICAgICB0aGlzLmV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgICA/IGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFja1xuICAgICAgICA6IHRoaXMuZXhhY3RBY3RpdmVDbGFzcztcblxuICAgIHZhciBjb21wYXJlVGFyZ2V0ID0gcm91dGUucmVkaXJlY3RlZEZyb21cbiAgICAgID8gY3JlYXRlUm91dGUobnVsbCwgbm9ybWFsaXplTG9jYXRpb24ocm91dGUucmVkaXJlY3RlZEZyb20pLCBudWxsLCByb3V0ZXIpXG4gICAgICA6IHJvdXRlO1xuXG4gICAgY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXSA9IGlzU2FtZVJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpO1xuICAgIGNsYXNzZXNbYWN0aXZlQ2xhc3NdID0gdGhpcy5leGFjdFxuICAgICAgPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICA6IGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7XG4gICAgICAgIGlmICh0aGlzJDEucmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlci5yZXBsYWNlKGxvY2F0aW9uLCBub29wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChsb2NhdGlvbiwgbm9vcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG9uID0geyBjbGljazogZ3VhcmRFdmVudCB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgb25bZV0gPSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uW3RoaXMuZXZlbnRdID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHsgY2xhc3M6IGNsYXNzZXMgfTtcblxuICAgIHZhciBzY29wZWRTbG90ID1cbiAgICAgICF0aGlzLiRzY29wZWRTbG90cy4kaGFzTm9ybWFsICYmXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0ICYmXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0KHtcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBuYXZpZ2F0ZTogaGFuZGxlcixcbiAgICAgICAgaXNBY3RpdmU6IGNsYXNzZXNbYWN0aXZlQ2xhc3NdLFxuICAgICAgICBpc0V4YWN0QWN0aXZlOiBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICB9KTtcblxuICAgIGlmIChzY29wZWRTbG90KSB7XG4gICAgICBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHNjb3BlZFNsb3RbMF1cbiAgICAgIH0gZWxzZSBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPiAxIHx8ICFzY29wZWRTbG90Lmxlbmd0aCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIChcIlJvdXRlckxpbmsgd2l0aCB0bz1cXFwiXCIgKyAodGhpcy5wcm9wcy50bykgKyBcIlxcXCIgaXMgdHJ5aW5nIHRvIHVzZSBhIHNjb3BlZCBzbG90IGJ1dCBpdCBkaWRuJ3QgcHJvdmlkZSBleGFjdGx5IG9uZSBjaGlsZC5cIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZWRTbG90Lmxlbmd0aCA9PT0gMCA/IGgoKSA6IGgoJ3NwYW4nLCB7fSwgc2NvcGVkU2xvdClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy50YWcgPT09ICdhJykge1xuICAgICAgZGF0YS5vbiA9IG9uO1xuICAgICAgZGF0YS5hdHRycyA9IHsgaHJlZjogaHJlZiB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaW5kIHRoZSBmaXJzdCA8YT4gY2hpbGQgYW5kIGFwcGx5IGxpc3RlbmVyIGFuZCBocmVmXG4gICAgICB2YXIgYSA9IGZpbmRBbmNob3IodGhpcy4kc2xvdHMuZGVmYXVsdCk7XG4gICAgICBpZiAoYSkge1xuICAgICAgICAvLyBpbiBjYXNlIHRoZSA8YT4gaXMgYSBzdGF0aWMgbm9kZVxuICAgICAgICBhLmlzU3RhdGljID0gZmFsc2U7XG4gICAgICAgIHZhciBhRGF0YSA9IChhLmRhdGEgPSBleHRlbmQoe30sIGEuZGF0YSkpO1xuICAgICAgICBhRGF0YS5vbiA9IGFEYXRhLm9uIHx8IHt9O1xuICAgICAgICAvLyB0cmFuc2Zvcm0gZXhpc3RpbmcgZXZlbnRzIGluIGJvdGggb2JqZWN0cyBpbnRvIGFycmF5cyBzbyB3ZSBjYW4gcHVzaCBsYXRlclxuICAgICAgICBmb3IgKHZhciBldmVudCBpbiBhRGF0YS5vbikge1xuICAgICAgICAgIHZhciBoYW5kbGVyJDEgPSBhRGF0YS5vbltldmVudF07XG4gICAgICAgICAgaWYgKGV2ZW50IGluIG9uKSB7XG4gICAgICAgICAgICBhRGF0YS5vbltldmVudF0gPSBBcnJheS5pc0FycmF5KGhhbmRsZXIkMSkgPyBoYW5kbGVyJDEgOiBbaGFuZGxlciQxXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwZW5kIG5ldyBsaXN0ZW5lcnMgZm9yIHJvdXRlci1saW5rXG4gICAgICAgIGZvciAodmFyIGV2ZW50JDEgaW4gb24pIHtcbiAgICAgICAgICBpZiAoZXZlbnQkMSBpbiBhRGF0YS5vbikge1xuICAgICAgICAgICAgLy8gb25bZXZlbnRdIGlzIGFsd2F5cyBhIGZ1bmN0aW9uXG4gICAgICAgICAgICBhRGF0YS5vbltldmVudCQxXS5wdXNoKG9uW2V2ZW50JDFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYURhdGEub25bZXZlbnQkMV0gPSBoYW5kbGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhQXR0cnMgPSAoYS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhLmRhdGEuYXR0cnMpKTtcbiAgICAgICAgYUF0dHJzLmhyZWYgPSBocmVmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG9lc24ndCBoYXZlIDxhPiBjaGlsZCwgYXBwbHkgbGlzdGVuZXIgdG8gc2VsZlxuICAgICAgICBkYXRhLm9uID0gb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGhpcy50YWcsIGRhdGEsIHRoaXMuJHNsb3RzLmRlZmF1bHQpXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGd1YXJkRXZlbnQgKGUpIHtcbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2l0aCBjb250cm9sIGtleXNcbiAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCB3aGVuIHByZXZlbnREZWZhdWx0IGNhbGxlZFxuICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXG4gIGlmIChlLmJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9uICE9PSAwKSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IGlmIGB0YXJnZXQ9XCJfYmxhbmtcImBcbiAgaWYgKGUuY3VycmVudFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuICAgIGlmICgvXFxiX2JsYW5rXFxiL2kudGVzdCh0YXJnZXQpKSB7IHJldHVybiB9XG4gIH1cbiAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxuICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaW5kQW5jaG9yIChjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICdhJykge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbiAmJiAoY2hpbGQgPSBmaW5kQW5jaG9yKGNoaWxkLmNoaWxkcmVuKSkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBfVnVlO1xuXG5mdW5jdGlvbiBpbnN0YWxsIChWdWUpIHtcbiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkICYmIF9WdWUgPT09IFZ1ZSkgeyByZXR1cm4gfVxuICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7XG5cbiAgX1Z1ZSA9IFZ1ZTtcblxuICB2YXIgaXNEZWYgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdiAhPT0gdW5kZWZpbmVkOyB9O1xuXG4gIHZhciByZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCBjYWxsVmFsKSB7XG4gICAgdmFyIGkgPSB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gICAgaWYgKGlzRGVmKGkpICYmIGlzRGVmKGkgPSBpLmRhdGEpICYmIGlzRGVmKGkgPSBpLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSkpIHtcbiAgICAgIGkodm0sIGNhbGxWYWwpO1xuICAgIH1cbiAgfTtcblxuICBWdWUubWl4aW4oe1xuICAgIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gYmVmb3JlQ3JlYXRlICgpIHtcbiAgICAgIGlmIChpc0RlZih0aGlzLiRvcHRpb25zLnJvdXRlcikpIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JvdXRlciA9IHRoaXMuJG9wdGlvbnMucm91dGVyO1xuICAgICAgICB0aGlzLl9yb3V0ZXIuaW5pdCh0aGlzKTtcbiAgICAgICAgVnVlLnV0aWwuZGVmaW5lUmVhY3RpdmUodGhpcywgJ19yb3V0ZScsIHRoaXMuX3JvdXRlci5oaXN0b3J5LmN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcm91dGVyUm9vdCA9ICh0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50Ll9yb3V0ZXJSb290KSB8fCB0aGlzO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCB0aGlzKTtcbiAgICB9LFxuICAgIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRyb3V0ZXInLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGVyIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgeyByZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGUgfVxuICB9KTtcblxuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJWaWV3JywgVmlldyk7XG4gIFZ1ZS5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBMaW5rKTtcblxuICB2YXIgc3RyYXRzID0gVnVlLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG4gIC8vIHVzZSB0aGUgc2FtZSBob29rIG1lcmdpbmcgc3RyYXRlZ3kgZm9yIHJvdXRlIGhvb2tzXG4gIHN0cmF0cy5iZWZvcmVSb3V0ZUVudGVyID0gc3RyYXRzLmJlZm9yZVJvdXRlTGVhdmUgPSBzdHJhdHMuYmVmb3JlUm91dGVVcGRhdGUgPSBzdHJhdHMuY3JlYXRlZDtcbn1cblxuLyogICovXG5cbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlTWFwIChcbiAgcm91dGVzLFxuICBvbGRQYXRoTGlzdCxcbiAgb2xkUGF0aE1hcCxcbiAgb2xkTmFtZU1hcFxuKSB7XG4gIC8vIHRoZSBwYXRoIGxpc3QgaXMgdXNlZCB0byBjb250cm9sIHBhdGggbWF0Y2hpbmcgcHJpb3JpdHlcbiAgdmFyIHBhdGhMaXN0ID0gb2xkUGF0aExpc3QgfHwgW107XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgcGF0aE1hcCA9IG9sZFBhdGhNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciBuYW1lTWFwID0gb2xkTmFtZU1hcCB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJvdXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCByb3V0ZSk7XG4gIH0pO1xuXG4gIC8vIGVuc3VyZSB3aWxkY2FyZCByb3V0ZXMgYXJlIGFsd2F5cyBhdCB0aGUgZW5kXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGF0aExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHBhdGhMaXN0W2ldID09PSAnKicpIHtcbiAgICAgIHBhdGhMaXN0LnB1c2gocGF0aExpc3Quc3BsaWNlKGksIDEpWzBdKTtcbiAgICAgIGwtLTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAvLyB3YXJuIGlmIHJvdXRlcyBkbyBub3QgaW5jbHVkZSBsZWFkaW5nIHNsYXNoZXNcbiAgICB2YXIgZm91bmQgPSBwYXRoTGlzdFxuICAgIC8vIGNoZWNrIGZvciBtaXNzaW5nIGxlYWRpbmcgc2xhc2hcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhdGgpIHsgcmV0dXJuIHBhdGggJiYgcGF0aC5jaGFyQXQoMCkgIT09ICcqJyAmJiBwYXRoLmNoYXJBdCgwKSAhPT0gJy8nOyB9KTtcblxuICAgIGlmIChmb3VuZC5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgcGF0aE5hbWVzID0gZm91bmQubWFwKGZ1bmN0aW9uIChwYXRoKSB7IHJldHVybiAoXCItIFwiICsgcGF0aCk7IH0pLmpvaW4oJ1xcbicpO1xuICAgICAgd2FybihmYWxzZSwgKFwiTm9uLW5lc3RlZCByb3V0ZXMgbXVzdCBpbmNsdWRlIGEgbGVhZGluZyBzbGFzaCBjaGFyYWN0ZXIuIEZpeCB0aGUgZm9sbG93aW5nIHJvdXRlczogXFxuXCIgKyBwYXRoTmFtZXMpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhMaXN0OiBwYXRoTGlzdCxcbiAgICBwYXRoTWFwOiBwYXRoTWFwLFxuICAgIG5hbWVNYXA6IG5hbWVNYXBcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRSb3V0ZVJlY29yZCAoXG4gIHBhdGhMaXN0LFxuICBwYXRoTWFwLFxuICBuYW1lTWFwLFxuICByb3V0ZSxcbiAgcGFyZW50LFxuICBtYXRjaEFzXG4pIHtcbiAgdmFyIHBhdGggPSByb3V0ZS5wYXRoO1xuICB2YXIgbmFtZSA9IHJvdXRlLm5hbWU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHBhdGggIT0gbnVsbCwgXCJcXFwicGF0aFxcXCIgaXMgcmVxdWlyZWQgaW4gYSByb3V0ZSBjb25maWd1cmF0aW9uLlwiKTtcbiAgICBhc3NlcnQoXG4gICAgICB0eXBlb2Ygcm91dGUuY29tcG9uZW50ICE9PSAnc3RyaW5nJyxcbiAgICAgIFwicm91dGUgY29uZmlnIFxcXCJjb21wb25lbnRcXFwiIGZvciBwYXRoOiBcIiArIChTdHJpbmcoXG4gICAgICAgIHBhdGggfHwgbmFtZVxuICAgICAgKSkgKyBcIiBjYW5ub3QgYmUgYSBcIiArIFwic3RyaW5nIGlkLiBVc2UgYW4gYWN0dWFsIGNvbXBvbmVudCBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuXG4gIHZhciBwYXRoVG9SZWdleHBPcHRpb25zID1cbiAgICByb3V0ZS5wYXRoVG9SZWdleHBPcHRpb25zIHx8IHt9O1xuICB2YXIgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVQYXRoKHBhdGgsIHBhcmVudCwgcGF0aFRvUmVnZXhwT3B0aW9ucy5zdHJpY3QpO1xuXG4gIGlmICh0eXBlb2Ygcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcGF0aFRvUmVnZXhwT3B0aW9ucy5zZW5zaXRpdmUgPSByb3V0ZS5jYXNlU2Vuc2l0aXZlO1xuICB9XG5cbiAgdmFyIHJlY29yZCA9IHtcbiAgICBwYXRoOiBub3JtYWxpemVkUGF0aCxcbiAgICByZWdleDogY29tcGlsZVJvdXRlUmVnZXgobm9ybWFsaXplZFBhdGgsIHBhdGhUb1JlZ2V4cE9wdGlvbnMpLFxuICAgIGNvbXBvbmVudHM6IHJvdXRlLmNvbXBvbmVudHMgfHwgeyBkZWZhdWx0OiByb3V0ZS5jb21wb25lbnQgfSxcbiAgICBpbnN0YW5jZXM6IHt9LFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgbWF0Y2hBczogbWF0Y2hBcyxcbiAgICByZWRpcmVjdDogcm91dGUucmVkaXJlY3QsXG4gICAgYmVmb3JlRW50ZXI6IHJvdXRlLmJlZm9yZUVudGVyLFxuICAgIG1ldGE6IHJvdXRlLm1ldGEgfHwge30sXG4gICAgcHJvcHM6XG4gICAgICByb3V0ZS5wcm9wcyA9PSBudWxsXG4gICAgICAgID8ge31cbiAgICAgICAgOiByb3V0ZS5jb21wb25lbnRzXG4gICAgICAgICAgPyByb3V0ZS5wcm9wc1xuICAgICAgICAgIDogeyBkZWZhdWx0OiByb3V0ZS5wcm9wcyB9XG4gIH07XG5cbiAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgLy8gV2FybiBpZiByb3V0ZSBpcyBuYW1lZCwgZG9lcyBub3QgcmVkaXJlY3QgYW5kIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuXG4gICAgLy8gSWYgdXNlcnMgbmF2aWdhdGUgdG8gdGhpcyByb3V0ZSBieSBuYW1lLCB0aGUgZGVmYXVsdCBjaGlsZCB3aWxsXG4gICAgLy8gbm90IGJlIHJlbmRlcmVkIChHSCBJc3N1ZSAjNjI5KVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHJvdXRlLm5hbWUgJiZcbiAgICAgICAgIXJvdXRlLnJlZGlyZWN0ICYmXG4gICAgICAgIHJvdXRlLmNoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiAvXlxcLz8kLy50ZXN0KGNoaWxkLnBhdGgpOyB9KVxuICAgICAgKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJOYW1lZCBSb3V0ZSAnXCIgKyAocm91dGUubmFtZSkgKyBcIicgaGFzIGEgZGVmYXVsdCBjaGlsZCByb3V0ZS4gXCIgK1xuICAgICAgICAgICAgXCJXaGVuIG5hdmlnYXRpbmcgdG8gdGhpcyBuYW1lZCByb3V0ZSAoOnRvPVxcXCJ7bmFtZTogJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInXFxcIiksIFwiICtcbiAgICAgICAgICAgIFwidGhlIGRlZmF1bHQgY2hpbGQgcm91dGUgd2lsbCBub3QgYmUgcmVuZGVyZWQuIFJlbW92ZSB0aGUgbmFtZSBmcm9tIFwiICtcbiAgICAgICAgICAgIFwidGhpcyByb3V0ZSBhbmQgdXNlIHRoZSBuYW1lIG9mIHRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIGZvciBuYW1lZCBcIiArXG4gICAgICAgICAgICBcImxpbmtzIGluc3RlYWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm91dGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHZhciBjaGlsZE1hdGNoQXMgPSBtYXRjaEFzXG4gICAgICAgID8gY2xlYW5QYXRoKChtYXRjaEFzICsgXCIvXCIgKyAoY2hpbGQucGF0aCkpKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBjaGlsZCwgcmVjb3JkLCBjaGlsZE1hdGNoQXMpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFwYXRoTWFwW3JlY29yZC5wYXRoXSkge1xuICAgIHBhdGhMaXN0LnB1c2gocmVjb3JkLnBhdGgpO1xuICAgIHBhdGhNYXBbcmVjb3JkLnBhdGhdID0gcmVjb3JkO1xuICB9XG5cbiAgaWYgKHJvdXRlLmFsaWFzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgYWxpYXNlcyA9IEFycmF5LmlzQXJyYXkocm91dGUuYWxpYXMpID8gcm91dGUuYWxpYXMgOiBbcm91dGUuYWxpYXNdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxpYXNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGFsaWFzID0gYWxpYXNlc1tpXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFsaWFzID09PSBwYXRoKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgKFwiRm91bmQgYW4gYWxpYXMgd2l0aCB0aGUgc2FtZSB2YWx1ZSBhcyB0aGUgcGF0aDogXFxcIlwiICsgcGF0aCArIFwiXFxcIi4gWW91IGhhdmUgdG8gcmVtb3ZlIHRoYXQgYWxpYXMuIEl0IHdpbGwgYmUgaWdub3JlZCBpbiBkZXZlbG9wbWVudC5cIilcbiAgICAgICAgKTtcbiAgICAgICAgLy8gc2tpcCBpbiBkZXYgdG8gbWFrZSBpdCB3b3JrXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciBhbGlhc1JvdXRlID0ge1xuICAgICAgICBwYXRoOiBhbGlhcyxcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuXG4gICAgICB9O1xuICAgICAgYWRkUm91dGVSZWNvcmQoXG4gICAgICAgIHBhdGhMaXN0LFxuICAgICAgICBwYXRoTWFwLFxuICAgICAgICBuYW1lTWFwLFxuICAgICAgICBhbGlhc1JvdXRlLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIHJlY29yZC5wYXRoIHx8ICcvJyAvLyBtYXRjaEFzXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChuYW1lKSB7XG4gICAgaWYgKCFuYW1lTWFwW25hbWVdKSB7XG4gICAgICBuYW1lTWFwW25hbWVdID0gcmVjb3JkO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbWF0Y2hBcykge1xuICAgICAgd2FybihcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIFwiRHVwbGljYXRlIG5hbWVkIHJvdXRlcyBkZWZpbml0aW9uOiBcIiArXG4gICAgICAgICAgXCJ7IG5hbWU6IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIsIHBhdGg6IFxcXCJcIiArIChyZWNvcmQucGF0aCkgKyBcIlxcXCIgfVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21waWxlUm91dGVSZWdleCAoXG4gIHBhdGgsXG4gIHBhdGhUb1JlZ2V4cE9wdGlvbnNcbikge1xuICB2YXIgcmVnZXggPSBwYXRoVG9SZWdleHBfMShwYXRoLCBbXSwgcGF0aFRvUmVnZXhwT3B0aW9ucyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJlZ2V4LmtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB3YXJuKFxuICAgICAgICAha2V5c1trZXkubmFtZV0sXG4gICAgICAgIChcIkR1cGxpY2F0ZSBwYXJhbSBrZXlzIGluIHJvdXRlIHdpdGggcGF0aDogXFxcIlwiICsgcGF0aCArIFwiXFxcIlwiKVxuICAgICAgKTtcbiAgICAgIGtleXNba2V5Lm5hbWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVnZXhcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUGF0aCAoXG4gIHBhdGgsXG4gIHBhcmVudCxcbiAgc3RyaWN0XG4pIHtcbiAgaWYgKCFzdHJpY3QpIHsgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwvJC8sICcnKTsgfVxuICBpZiAocGF0aFswXSA9PT0gJy8nKSB7IHJldHVybiBwYXRoIH1cbiAgaWYgKHBhcmVudCA9PSBudWxsKSB7IHJldHVybiBwYXRoIH1cbiAgcmV0dXJuIGNsZWFuUGF0aCgoKHBhcmVudC5wYXRoKSArIFwiL1wiICsgcGF0aCkpXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gY3JlYXRlTWF0Y2hlciAoXG4gIHJvdXRlcyxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHJlZiA9IGNyZWF0ZVJvdXRlTWFwKHJvdXRlcyk7XG4gIHZhciBwYXRoTGlzdCA9IHJlZi5wYXRoTGlzdDtcbiAgdmFyIHBhdGhNYXAgPSByZWYucGF0aE1hcDtcbiAgdmFyIG5hbWVNYXAgPSByZWYubmFtZU1hcDtcblxuICBmdW5jdGlvbiBhZGRSb3V0ZXMgKHJvdXRlcykge1xuICAgIGNyZWF0ZVJvdXRlTWFwKHJvdXRlcywgcGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXApO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF0Y2ggKFxuICAgIHJhdyxcbiAgICBjdXJyZW50Um91dGUsXG4gICAgcmVkaXJlY3RlZEZyb21cbiAgKSB7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24ocmF3LCBjdXJyZW50Um91dGUsIGZhbHNlLCByb3V0ZXIpO1xuICAgIHZhciBuYW1lID0gbG9jYXRpb24ubmFtZTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4ocmVjb3JkLCAoXCJSb3V0ZSB3aXRoIG5hbWUgJ1wiICsgbmFtZSArIFwiJyBkb2VzIG5vdCBleGlzdFwiKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlY29yZCkgeyByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKSB9XG4gICAgICB2YXIgcGFyYW1OYW1lcyA9IHJlY29yZC5yZWdleC5rZXlzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gIWtleS5vcHRpb25hbDsgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkubmFtZTsgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24ucGFyYW1zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBsb2NhdGlvbi5wYXJhbXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRSb3V0ZSAmJiB0eXBlb2YgY3VycmVudFJvdXRlLnBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGN1cnJlbnRSb3V0ZS5wYXJhbXMpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gbG9jYXRpb24ucGFyYW1zKSAmJiBwYXJhbU5hbWVzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5wYXJhbXNba2V5XSA9IGN1cnJlbnRSb3V0ZS5wYXJhbXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbG9jYXRpb24ucGF0aCA9IGZpbGxQYXJhbXMocmVjb3JkLnBhdGgsIGxvY2F0aW9uLnBhcmFtcywgKFwibmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aCkge1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aExpc3RbaV07XG4gICAgICAgIHZhciByZWNvcmQkMSA9IHBhdGhNYXBbcGF0aF07XG4gICAgICAgIGlmIChtYXRjaFJvdXRlKHJlY29yZCQxLnJlZ2V4LCBsb2NhdGlvbi5wYXRoLCBsb2NhdGlvbi5wYXJhbXMpKSB7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQkMSwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG5vIG1hdGNoXG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZGlyZWN0IChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb25cbiAgKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVkaXJlY3QgPSByZWNvcmQucmVkaXJlY3Q7XG4gICAgdmFyIHJlZGlyZWN0ID0gdHlwZW9mIG9yaWdpbmFsUmVkaXJlY3QgPT09ICdmdW5jdGlvbidcbiAgICAgID8gb3JpZ2luYWxSZWRpcmVjdChjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpKVxuICAgICAgOiBvcmlnaW5hbFJlZGlyZWN0O1xuXG4gICAgaWYgKHR5cGVvZiByZWRpcmVjdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlZGlyZWN0ID0geyBwYXRoOiByZWRpcmVjdCB9O1xuICAgIH1cblxuICAgIGlmICghcmVkaXJlY3QgfHwgdHlwZW9mIHJlZGlyZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSwgKFwiaW52YWxpZCByZWRpcmVjdCBvcHRpb246IFwiICsgKEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cblxuICAgIHZhciByZSA9IHJlZGlyZWN0O1xuICAgIHZhciBuYW1lID0gcmUubmFtZTtcbiAgICB2YXIgcGF0aCA9IHJlLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXJhbXMgPSBsb2NhdGlvbi5wYXJhbXM7XG4gICAgcXVlcnkgPSByZS5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSA/IHJlLnF1ZXJ5IDogcXVlcnk7XG4gICAgaGFzaCA9IHJlLmhhc093blByb3BlcnR5KCdoYXNoJykgPyByZS5oYXNoIDogaGFzaDtcbiAgICBwYXJhbXMgPSByZS5oYXNPd25Qcm9wZXJ0eSgncGFyYW1zJykgPyByZS5wYXJhbXMgOiBwYXJhbXM7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgLy8gcmVzb2x2ZWQgbmFtZWQgZGlyZWN0XG4gICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydCh0YXJnZXRSZWNvcmQsIChcInJlZGlyZWN0IGZhaWxlZDogbmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBub3QgZm91bmQuXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaCh7XG4gICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2gsXG4gICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSBpZiAocGF0aCkge1xuICAgICAgLy8gMS4gcmVzb2x2ZSByZWxhdGl2ZSByZWRpcmVjdFxuICAgICAgdmFyIHJhd1BhdGggPSByZXNvbHZlUmVjb3JkUGF0aChwYXRoLCByZWNvcmQpO1xuICAgICAgLy8gMi4gcmVzb2x2ZSBwYXJhbXNcbiAgICAgIHZhciByZXNvbHZlZFBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicmVkaXJlY3Qgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIHJhd1BhdGggKyBcIlxcXCJcIikpO1xuICAgICAgLy8gMy4gcmVtYXRjaCB3aXRoIGV4aXN0aW5nIHF1ZXJ5IGFuZCBoYXNoXG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2hcbiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFsaWFzIChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb24sXG4gICAgbWF0Y2hBc1xuICApIHtcbiAgICB2YXIgYWxpYXNlZFBhdGggPSBmaWxsUGFyYW1zKG1hdGNoQXMsIGxvY2F0aW9uLnBhcmFtcywgKFwiYWxpYXNlZCByb3V0ZSB3aXRoIHBhdGggXFxcIlwiICsgbWF0Y2hBcyArIFwiXFxcIlwiKSk7XG4gICAgdmFyIGFsaWFzZWRNYXRjaCA9IG1hdGNoKHtcbiAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgcGF0aDogYWxpYXNlZFBhdGhcbiAgICB9KTtcbiAgICBpZiAoYWxpYXNlZE1hdGNoKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9IGFsaWFzZWRNYXRjaC5tYXRjaGVkO1xuICAgICAgdmFyIGFsaWFzZWRSZWNvcmQgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07XG4gICAgICBsb2NhdGlvbi5wYXJhbXMgPSBhbGlhc2VkTWF0Y2gucGFyYW1zO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShhbGlhc2VkUmVjb3JkLCBsb2NhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVSb3V0ZSAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLnJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gcmVkaXJlY3QocmVjb3JkLCByZWRpcmVjdGVkRnJvbSB8fCBsb2NhdGlvbilcbiAgICB9XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQubWF0Y2hBcykge1xuICAgICAgcmV0dXJuIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIHJlY29yZC5tYXRjaEFzKVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcilcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGFkZFJvdXRlczogYWRkUm91dGVzXG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZSAoXG4gIHJlZ2V4LFxuICBwYXRoLFxuICBwYXJhbXNcbikge1xuICB2YXIgbSA9IHBhdGgubWF0Y2gocmVnZXgpO1xuXG4gIGlmICghbSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IG0ubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIga2V5ID0gcmVnZXgua2V5c1tpIC0gMV07XG4gICAgdmFyIHZhbCA9IHR5cGVvZiBtW2ldID09PSAnc3RyaW5nJyA/IGRlY29kZVVSSUNvbXBvbmVudChtW2ldKSA6IG1baV07XG4gICAgaWYgKGtleSkge1xuICAgICAgLy8gRml4ICMxOTk0OiB1c2luZyAqIHdpdGggcHJvcHM6IHRydWUgZ2VuZXJhdGVzIGEgcGFyYW0gbmFtZWQgMFxuICAgICAgcGFyYW1zW2tleS5uYW1lIHx8ICdwYXRoTWF0Y2gnXSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUmVjb3JkUGF0aCAocGF0aCwgcmVjb3JkKSB7XG4gIHJldHVybiByZXNvbHZlUGF0aChwYXRoLCByZWNvcmQucGFyZW50ID8gcmVjb3JkLnBhcmVudC5wYXRoIDogJy8nLCB0cnVlKVxufVxuXG4vKiAgKi9cblxuLy8gdXNlIFVzZXIgVGltaW5nIGFwaSAoaWYgcHJlc2VudCkgZm9yIG1vcmUgYWNjdXJhdGUga2V5IHByZWNpc2lvblxudmFyIFRpbWUgPVxuICBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3dcbiAgICA/IHdpbmRvdy5wZXJmb3JtYW5jZVxuICAgIDogRGF0ZTtcblxuZnVuY3Rpb24gZ2VuU3RhdGVLZXkgKCkge1xuICByZXR1cm4gVGltZS5ub3coKS50b0ZpeGVkKDMpXG59XG5cbnZhciBfa2V5ID0gZ2VuU3RhdGVLZXkoKTtcblxuZnVuY3Rpb24gZ2V0U3RhdGVLZXkgKCkge1xuICByZXR1cm4gX2tleVxufVxuXG5mdW5jdGlvbiBzZXRTdGF0ZUtleSAoa2V5KSB7XG4gIHJldHVybiAoX2tleSA9IGtleSlcbn1cblxuLyogICovXG5cbnZhciBwb3NpdGlvblN0b3JlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gc2V0dXBTY3JvbGwgKCkge1xuICAvLyBGaXggZm9yICMxNTg1IGZvciBGaXJlZm94XG4gIC8vIEZpeCBmb3IgIzIxOTUgQWRkIG9wdGlvbmFsIHRoaXJkIGF0dHJpYnV0ZSB0byB3b3JrYXJvdW5kIGEgYnVnIGluIHNhZmFyaSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTgyNjc4XG4gIC8vIEZpeCBmb3IgIzI3NzQgU3VwcG9ydCBmb3IgYXBwcyBsb2FkZWQgZnJvbSBXaW5kb3dzIGZpbGUgc2hhcmVzIG5vdCBtYXBwZWQgdG8gbmV0d29yayBkcml2ZXM6IHJlcGxhY2VkIGxvY2F0aW9uLm9yaWdpbiB3aXRoXG4gIC8vIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdFxuICAvLyBsb2NhdGlvbi5ob3N0IGNvbnRhaW5zIHRoZSBwb3J0IGFuZCBsb2NhdGlvbi5ob3N0bmFtZSBkb2Vzbid0XG4gIHZhciBwcm90b2NvbEFuZFBhdGggPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gIHZhciBhYnNvbHV0ZVBhdGggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKHByb3RvY29sQW5kUGF0aCwgJycpO1xuICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGdldFN0YXRlS2V5KCkgfSwgJycsIGFic29sdXRlUGF0aCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gICAgaWYgKGUuc3RhdGUgJiYgZS5zdGF0ZS5rZXkpIHtcbiAgICAgIHNldFN0YXRlS2V5KGUuc3RhdGUua2V5KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTY3JvbGwgKFxuICByb3V0ZXIsXG4gIHRvLFxuICBmcm9tLFxuICBpc1BvcFxuKSB7XG4gIGlmICghcm91dGVyLmFwcCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJlaGF2aW9yID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gIGlmICghYmVoYXZpb3IpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiZWhhdmlvciA9PT0gJ2Z1bmN0aW9uJywgXCJzY3JvbGxCZWhhdmlvciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICAvLyB3YWl0IHVudGlsIHJlLXJlbmRlciBmaW5pc2hlcyBiZWZvcmUgc2Nyb2xsaW5nXG4gIHJvdXRlci5hcHAuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIHZhciBzaG91bGRTY3JvbGwgPSBiZWhhdmlvci5jYWxsKFxuICAgICAgcm91dGVyLFxuICAgICAgdG8sXG4gICAgICBmcm9tLFxuICAgICAgaXNQb3AgPyBwb3NpdGlvbiA6IG51bGxcbiAgICApO1xuXG4gICAgaWYgKCFzaG91bGRTY3JvbGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2hvdWxkU2Nyb2xsLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNob3VsZFNjcm9sbFxuICAgICAgICAudGhlbihmdW5jdGlvbiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgICAgc2Nyb2xsVG9Qb3NpdGlvbigoc2hvdWxkU2Nyb2xsKSwgcG9zaXRpb24pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY3JvbGxUb1Bvc2l0aW9uKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbiAoKSB7XG4gIHZhciBrZXkgPSBnZXRTdGF0ZUtleSgpO1xuICBpZiAoa2V5KSB7XG4gICAgcG9zaXRpb25TdG9yZVtrZXldID0ge1xuICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbiAoKSB7XG4gIHZhciBrZXkgPSBnZXRTdGF0ZUtleSgpO1xuICBpZiAoa2V5KSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uU3RvcmVba2V5XVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbiAoZWwsIG9mZnNldCkge1xuICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBkb2NSZWN0ID0gZG9jRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB4OiBlbFJlY3QubGVmdCAtIGRvY1JlY3QubGVmdCAtIG9mZnNldC54LFxuICAgIHk6IGVsUmVjdC50b3AgLSBkb2NSZWN0LnRvcCAtIG9mZnNldC55XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZFBvc2l0aW9uIChvYmopIHtcbiAgcmV0dXJuIGlzTnVtYmVyKG9iai54KSB8fCBpc051bWJlcihvYmoueSlcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgIHk6IGlzTnVtYmVyKG9iai55KSA/IG9iai55IDogd2luZG93LnBhZ2VZT2Zmc2V0XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplT2Zmc2V0IChvYmopIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBpc051bWJlcihvYmoueCkgPyBvYmoueCA6IDAsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiAwXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIgKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnbnVtYmVyJ1xufVxuXG52YXIgaGFzaFN0YXJ0c1dpdGhOdW1iZXJSRSA9IC9eI1xcZC87XG5cbmZ1bmN0aW9uIHNjcm9sbFRvUG9zaXRpb24gKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pIHtcbiAgdmFyIGlzT2JqZWN0ID0gdHlwZW9mIHNob3VsZFNjcm9sbCA9PT0gJ29iamVjdCc7XG4gIGlmIChpc09iamVjdCAmJiB0eXBlb2Ygc2hvdWxkU2Nyb2xsLnNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIC8vIGdldEVsZW1lbnRCeUlkIHdvdWxkIHN0aWxsIGZhaWwgaWYgdGhlIHNlbGVjdG9yIGNvbnRhaW5zIGEgbW9yZSBjb21wbGljYXRlZCBxdWVyeSBsaWtlICNtYWluW2RhdGEtYXR0cl1cbiAgICAvLyBidXQgYXQgdGhlIHNhbWUgdGltZSwgaXQgZG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgdG8gc2VsZWN0IGFuIGVsZW1lbnQgd2l0aCBhbiBpZCBhbmQgYW4gZXh0cmEgc2VsZWN0b3JcbiAgICB2YXIgZWwgPSBoYXNoU3RhcnRzV2l0aE51bWJlclJFLnRlc3Qoc2hvdWxkU2Nyb2xsLnNlbGVjdG9yKSAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2hvdWxkU2Nyb2xsLnNlbGVjdG9yLnNsaWNlKDEpKSAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzaG91bGRTY3JvbGwuc2VsZWN0b3IpO1xuXG4gICAgaWYgKGVsKSB7XG4gICAgICB2YXIgb2Zmc2V0ID1cbiAgICAgICAgc2hvdWxkU2Nyb2xsLm9mZnNldCAmJiB0eXBlb2Ygc2hvdWxkU2Nyb2xsLm9mZnNldCA9PT0gJ29iamVjdCdcbiAgICAgICAgICA/IHNob3VsZFNjcm9sbC5vZmZzZXRcbiAgICAgICAgICA6IHt9O1xuICAgICAgb2Zmc2V0ID0gbm9ybWFsaXplT2Zmc2V0KG9mZnNldCk7XG4gICAgICBwb3NpdGlvbiA9IGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGlzVmFsaWRQb3NpdGlvbihzaG91bGRTY3JvbGwpKSB7XG4gICAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0ICYmIGlzVmFsaWRQb3NpdGlvbihzaG91bGRTY3JvbGwpKSB7XG4gICAgcG9zaXRpb24gPSBub3JtYWxpemVQb3NpdGlvbihzaG91bGRTY3JvbGwpO1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uKSB7XG4gICAgd2luZG93LnNjcm9sbFRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgc3VwcG9ydHNQdXNoU3RhdGUgPVxuICBpbkJyb3dzZXIgJiZcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICAgIGlmIChcbiAgICAgICh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJlxuICAgICAgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJlxuICAgICAgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmXG4gICAgICB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3RvcnlcbiAgfSkoKTtcblxuZnVuY3Rpb24gcHVzaFN0YXRlICh1cmwsIHJlcGxhY2UpIHtcbiAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gIC8vIHRyeS4uLmNhdGNoIHRoZSBwdXNoU3RhdGUgY2FsbCB0byBnZXQgYXJvdW5kIFNhZmFyaVxuICAvLyBET00gRXhjZXB0aW9uIDE4IHdoZXJlIGl0IGxpbWl0cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzXG4gIHZhciBoaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHRyeSB7XG4gICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBnZXRTdGF0ZUtleSgpIH0sICcnLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7IGtleTogc2V0U3RhdGVLZXkoZ2VuU3RhdGVLZXkoKSkgfSwgJycsIHVybCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uW3JlcGxhY2UgPyAncmVwbGFjZScgOiAnYXNzaWduJ10odXJsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlU3RhdGUgKHVybCkge1xuICBwdXNoU3RhdGUodXJsLCB0cnVlKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJ1blF1ZXVlIChxdWV1ZSwgZm4sIGNiKSB7XG4gIHZhciBzdGVwID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgY2IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHF1ZXVlW2luZGV4XSkge1xuICAgICAgICBmbihxdWV1ZVtpbmRleF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGVwKGluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3RlcCgwKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudHMgKG1hdGNoZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0bywgZnJvbSwgbmV4dCkge1xuICAgIHZhciBoYXNBc3luYyA9IGZhbHNlO1xuICAgIHZhciBwZW5kaW5nID0gMDtcbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgZmxhdE1hcENvbXBvbmVudHMobWF0Y2hlZCwgZnVuY3Rpb24gKGRlZiwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgLy8gaWYgaXQncyBhIGZ1bmN0aW9uIGFuZCBkb2Vzbid0IGhhdmUgY2lkIGF0dGFjaGVkLFxuICAgICAgLy8gYXNzdW1lIGl0J3MgYW4gYXN5bmMgY29tcG9uZW50IHJlc29sdmUgZnVuY3Rpb24uXG4gICAgICAvLyB3ZSBhcmUgbm90IHVzaW5nIFZ1ZSdzIGRlZmF1bHQgYXN5bmMgcmVzb2x2aW5nIG1lY2hhbmlzbSBiZWNhdXNlXG4gICAgICAvLyB3ZSB3YW50IHRvIGhhbHQgdGhlIG5hdmlnYXRpb24gdW50aWwgdGhlIGluY29taW5nIGNvbXBvbmVudCBoYXMgYmVlblxuICAgICAgLy8gcmVzb2x2ZWQuXG4gICAgICBpZiAodHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWYuY2lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaGFzQXN5bmMgPSB0cnVlO1xuICAgICAgICBwZW5kaW5nKys7XG5cbiAgICAgICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXNvbHZlZERlZikge1xuICAgICAgICAgIGlmIChpc0VTTW9kdWxlKHJlc29sdmVkRGVmKSkge1xuICAgICAgICAgICAgcmVzb2x2ZWREZWYgPSByZXNvbHZlZERlZi5kZWZhdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzYXZlIHJlc29sdmVkIG9uIGFzeW5jIGZhY3RvcnkgaW4gY2FzZSBpdCdzIHVzZWQgZWxzZXdoZXJlXG4gICAgICAgICAgZGVmLnJlc29sdmVkID0gdHlwZW9mIHJlc29sdmVkRGVmID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHJlc29sdmVkRGVmXG4gICAgICAgICAgICA6IF9WdWUuZXh0ZW5kKHJlc29sdmVkRGVmKTtcbiAgICAgICAgICBtYXRjaC5jb21wb25lbnRzW2tleV0gPSByZXNvbHZlZERlZjtcbiAgICAgICAgICBwZW5kaW5nLS07XG4gICAgICAgICAgaWYgKHBlbmRpbmcgPD0gMCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIHZhciBtc2cgPSBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudCBcIiArIGtleSArIFwiOiBcIiArIHJlYXNvbjtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIG1zZyk7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IgPSBpc0Vycm9yKHJlYXNvbilcbiAgICAgICAgICAgICAgPyByZWFzb25cbiAgICAgICAgICAgICAgOiBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICAgIG5leHQoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXMgPSBkZWYocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbmV3IHN5bnRheCBpbiBWdWUgMi4zXG4gICAgICAgICAgICB2YXIgY29tcCA9IHJlcy5jb21wb25lbnQ7XG4gICAgICAgICAgICBpZiAoY29tcCAmJiB0eXBlb2YgY29tcC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbXAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFoYXNBc3luYykgeyBuZXh0KCk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0TWFwQ29tcG9uZW50cyAoXG4gIG1hdGNoZWQsXG4gIGZuXG4pIHtcbiAgcmV0dXJuIGZsYXR0ZW4obWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4oXG4gICAgICBtLmNvbXBvbmVudHNba2V5XSxcbiAgICAgIG0uaW5zdGFuY2VzW2tleV0sXG4gICAgICBtLCBrZXlcbiAgICApOyB9KVxuICB9KSlcbn1cblxuZnVuY3Rpb24gZmxhdHRlbiAoYXJyKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcnIpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5mdW5jdGlvbiBpc0VTTW9kdWxlIChvYmopIHtcbiAgcmV0dXJuIG9iai5fX2VzTW9kdWxlIHx8IChoYXNTeW1ib2wgJiYgb2JqW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxufVxuXG4vLyBpbiBXZWJwYWNrIDIsIHJlcXVpcmUuZW5zdXJlIG5vdyBhbHNvIHJldHVybnMgYSBQcm9taXNlXG4vLyBzbyB0aGUgcmVzb2x2ZS9yZWplY3QgZnVuY3Rpb25zIG1heSBnZXQgY2FsbGVkIGFuIGV4dHJhIHRpbWVcbi8vIGlmIHRoZSB1c2VyIHVzZXMgYW4gYXJyb3cgZnVuY3Rpb24gc2hvcnRoYW5kIHRoYXQgaGFwcGVucyB0b1xuLy8gcmV0dXJuIHRoYXQgUHJvbWlzZS5cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICBpZiAoY2FsbGVkKSB7IHJldHVybiB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncylcbiAgfVxufVxuXG52YXIgTmF2aWdhdGlvbkR1cGxpY2F0ZWQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChFcnJvcikge1xuICBmdW5jdGlvbiBOYXZpZ2F0aW9uRHVwbGljYXRlZCAobm9ybWFsaXplZExvY2F0aW9uKSB7XG4gICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLl9uYW1lID0gJ05hdmlnYXRpb25EdXBsaWNhdGVkJztcbiAgICAvLyBwYXNzaW5nIHRoZSBtZXNzYWdlIHRvIHN1cGVyKCkgZG9lc24ndCBzZWVtIHRvIHdvcmsgaW4gdGhlIHRyYW5zcGlsZWQgdmVyc2lvblxuICAgIHRoaXMubWVzc2FnZSA9IFwiTmF2aWdhdGluZyB0byBjdXJyZW50IGxvY2F0aW9uIChcXFwiXCIgKyAobm9ybWFsaXplZExvY2F0aW9uLmZ1bGxQYXRoKSArIFwiXFxcIikgaXMgbm90IGFsbG93ZWRcIjtcbiAgICAvLyBhZGQgYSBzdGFjayBwcm9wZXJ0eSBzbyBzZXJ2aWNlcyBsaWtlIFNlbnRyeSBjYW4gY29ycmVjdGx5IGRpc3BsYXkgaXRcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywge1xuICAgICAgdmFsdWU6IG5ldyBFcnJvcigpLnN0YWNrLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvLyB3ZSBjb3VsZCBhbHNvIGhhdmUgdXNlZFxuICAgIC8vIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gICAgLy8gYnV0IGl0IG9ubHkgZXhpc3RzIG9uIG5vZGUgYW5kIGNocm9tZVxuICB9XG5cbiAgaWYgKCBFcnJvciApIE5hdmlnYXRpb25EdXBsaWNhdGVkLl9fcHJvdG9fXyA9IEVycm9yO1xuICBOYXZpZ2F0aW9uRHVwbGljYXRlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFcnJvciAmJiBFcnJvci5wcm90b3R5cGUgKTtcbiAgTmF2aWdhdGlvbkR1cGxpY2F0ZWQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTmF2aWdhdGlvbkR1cGxpY2F0ZWQ7XG5cbiAgcmV0dXJuIE5hdmlnYXRpb25EdXBsaWNhdGVkO1xufShFcnJvcikpO1xuXG4vLyBzdXBwb3J0IElFOVxuTmF2aWdhdGlvbkR1cGxpY2F0ZWQuX25hbWUgPSAnTmF2aWdhdGlvbkR1cGxpY2F0ZWQnO1xuXG4vKiAgKi9cblxudmFyIEhpc3RvcnkgPSBmdW5jdGlvbiBIaXN0b3J5IChyb3V0ZXIsIGJhc2UpIHtcbiAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG4gIHRoaXMuYmFzZSA9IG5vcm1hbGl6ZUJhc2UoYmFzZSk7XG4gIC8vIHN0YXJ0IHdpdGggYSByb3V0ZSBvYmplY3QgdGhhdCBzdGFuZHMgZm9yIFwibm93aGVyZVwiXG4gIHRoaXMuY3VycmVudCA9IFNUQVJUO1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gIHRoaXMucmVhZHlDYnMgPSBbXTtcbiAgdGhpcy5yZWFkeUVycm9yQ2JzID0gW107XG4gIHRoaXMuZXJyb3JDYnMgPSBbXTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbiAoY2IpIHtcbiAgdGhpcy5jYiA9IGNiO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUub25SZWFkeSA9IGZ1bmN0aW9uIG9uUmVhZHkgKGNiLCBlcnJvckNiKSB7XG4gIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgY2IoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlYWR5Q2JzLnB1c2goY2IpO1xuICAgIGlmIChlcnJvckNiKSB7XG4gICAgICB0aGlzLnJlYWR5RXJyb3JDYnMucHVzaChlcnJvckNiKTtcbiAgICB9XG4gIH1cbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuZXJyb3JDYnMucHVzaChlcnJvckNiKTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLnRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIHRyYW5zaXRpb25UbyAoXG4gIGxvY2F0aW9uLFxuICBvbkNvbXBsZXRlLFxuICBvbkFib3J0XG4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgcm91dGUgPSB0aGlzLnJvdXRlci5tYXRjaChsb2NhdGlvbiwgdGhpcy5jdXJyZW50KTtcbiAgdGhpcy5jb25maXJtVHJhbnNpdGlvbihcbiAgICByb3V0ZSxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzJDEudXBkYXRlUm91dGUocm91dGUpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIHRoaXMkMS5lbnN1cmVVUkwoKTtcblxuICAgICAgLy8gZmlyZSByZWFkeSBjYnMgb25jZVxuICAgICAgaWYgKCF0aGlzJDEucmVhZHkpIHtcbiAgICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcyQxLnJlYWR5Q2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgY2Iocm91dGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChvbkFib3J0KSB7XG4gICAgICAgIG9uQWJvcnQoZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnIgJiYgIXRoaXMkMS5yZWFkeSkge1xuICAgICAgICB0aGlzJDEucmVhZHkgPSB0cnVlO1xuICAgICAgICB0aGlzJDEucmVhZHlFcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb24gKHJvdXRlLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gIHZhciBhYm9ydCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAvLyBhZnRlciBtZXJnaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL3B1bGwvMjc3MSB3ZVxuICAgIC8vIFdoZW4gdGhlIHVzZXIgbmF2aWdhdGVzIHRocm91Z2ggaGlzdG9yeSB0aHJvdWdoIGJhY2svZm9yd2FyZCBidXR0b25zXG4gICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gdGhyb3cgdGhlIGVycm9yLiBXZSBvbmx5IHRocm93IGl0IGlmIGRpcmVjdGx5IGNhbGxpbmdcbiAgICAvLyBwdXNoL3JlcGxhY2UuIFRoYXQncyB3aHkgaXQncyBub3QgaW5jbHVkZWQgaW4gaXNFcnJvclxuICAgIGlmICghaXNFeHRlbmRlZEVycm9yKE5hdmlnYXRpb25EdXBsaWNhdGVkLCBlcnIpICYmIGlzRXJyb3IoZXJyKSkge1xuICAgICAgaWYgKHRoaXMkMS5lcnJvckNicy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcyQxLmVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKGZhbHNlLCAndW5jYXVnaHQgZXJyb3IgZHVyaW5nIHJvdXRlIG5hdmlnYXRpb246Jyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25BYm9ydCAmJiBvbkFib3J0KGVycik7XG4gIH07XG4gIGlmIChcbiAgICBpc1NhbWVSb3V0ZShyb3V0ZSwgY3VycmVudCkgJiZcbiAgICAvLyBpbiB0aGUgY2FzZSB0aGUgcm91dGUgbWFwIGhhcyBiZWVuIGR5bmFtaWNhbGx5IGFwcGVuZGVkIHRvXG4gICAgcm91dGUubWF0Y2hlZC5sZW5ndGggPT09IGN1cnJlbnQubWF0Y2hlZC5sZW5ndGhcbiAgKSB7XG4gICAgdGhpcy5lbnN1cmVVUkwoKTtcbiAgICByZXR1cm4gYWJvcnQobmV3IE5hdmlnYXRpb25EdXBsaWNhdGVkKHJvdXRlKSlcbiAgfVxuXG4gIHZhciByZWYgPSByZXNvbHZlUXVldWUoXG4gICAgdGhpcy5jdXJyZW50Lm1hdGNoZWQsXG4gICAgcm91dGUubWF0Y2hlZFxuICApO1xuICAgIHZhciB1cGRhdGVkID0gcmVmLnVwZGF0ZWQ7XG4gICAgdmFyIGRlYWN0aXZhdGVkID0gcmVmLmRlYWN0aXZhdGVkO1xuICAgIHZhciBhY3RpdmF0ZWQgPSByZWYuYWN0aXZhdGVkO1xuXG4gIHZhciBxdWV1ZSA9IFtdLmNvbmNhdChcbiAgICAvLyBpbi1jb21wb25lbnQgbGVhdmUgZ3VhcmRzXG4gICAgZXh0cmFjdExlYXZlR3VhcmRzKGRlYWN0aXZhdGVkKSxcbiAgICAvLyBnbG9iYWwgYmVmb3JlIGhvb2tzXG4gICAgdGhpcy5yb3V0ZXIuYmVmb3JlSG9va3MsXG4gICAgLy8gaW4tY29tcG9uZW50IHVwZGF0ZSBob29rc1xuICAgIGV4dHJhY3RVcGRhdGVIb29rcyh1cGRhdGVkKSxcbiAgICAvLyBpbi1jb25maWcgZW50ZXIgZ3VhcmRzXG4gICAgYWN0aXZhdGVkLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5iZWZvcmVFbnRlcjsgfSksXG4gICAgLy8gYXN5bmMgY29tcG9uZW50c1xuICAgIHJlc29sdmVBc3luY0NvbXBvbmVudHMoYWN0aXZhdGVkKVxuICApO1xuXG4gIHRoaXMucGVuZGluZyA9IHJvdXRlO1xuICB2YXIgaXRlcmF0b3IgPSBmdW5jdGlvbiAoaG9vaywgbmV4dCkge1xuICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgIHJldHVybiBhYm9ydCgpXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBob29rKHJvdXRlLCBjdXJyZW50LCBmdW5jdGlvbiAodG8pIHtcbiAgICAgICAgaWYgKHRvID09PSBmYWxzZSB8fCBpc0Vycm9yKHRvKSkge1xuICAgICAgICAgIC8vIG5leHQoZmFsc2UpIC0+IGFib3J0IG5hdmlnYXRpb24sIGVuc3VyZSBjdXJyZW50IFVSTFxuICAgICAgICAgIHRoaXMkMS5lbnN1cmVVUkwodHJ1ZSk7XG4gICAgICAgICAgYWJvcnQodG8pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdG8ubmFtZSA9PT0gJ3N0cmluZycpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBuZXh0KCcvJykgb3IgbmV4dCh7IHBhdGg6ICcvJyB9KSAtPiByZWRpcmVjdFxuICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gJ29iamVjdCcgJiYgdG8ucmVwbGFjZSkge1xuICAgICAgICAgICAgdGhpcyQxLnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzJDEucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNvbmZpcm0gdHJhbnNpdGlvbiBhbmQgcGFzcyBvbiB0aGUgdmFsdWVcbiAgICAgICAgICBuZXh0KHRvKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWJvcnQoZSk7XG4gICAgfVxuICB9O1xuXG4gIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3N0RW50ZXJDYnMgPSBbXTtcbiAgICB2YXIgaXNWYWxpZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5jdXJyZW50ID09PSByb3V0ZTsgfTtcbiAgICAvLyB3YWl0IHVudGlsIGFzeW5jIGNvbXBvbmVudHMgYXJlIHJlc29sdmVkIGJlZm9yZVxuICAgIC8vIGV4dHJhY3RpbmcgaW4tY29tcG9uZW50IGVudGVyIGd1YXJkc1xuICAgIHZhciBlbnRlckd1YXJkcyA9IGV4dHJhY3RFbnRlckd1YXJkcyhhY3RpdmF0ZWQsIHBvc3RFbnRlckNicywgaXNWYWxpZCk7XG4gICAgdmFyIHF1ZXVlID0gZW50ZXJHdWFyZHMuY29uY2F0KHRoaXMkMS5yb3V0ZXIucmVzb2x2ZUhvb2tzKTtcbiAgICBydW5RdWV1ZShxdWV1ZSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgICAgcmV0dXJuIGFib3J0KClcbiAgICAgIH1cbiAgICAgIHRoaXMkMS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgaWYgKHRoaXMkMS5yb3V0ZXIuYXBwKSB7XG4gICAgICAgIHRoaXMkMS5yb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcG9zdEVudGVyQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICBjYigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS51cGRhdGVSb3V0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVJvdXRlIChyb3V0ZSkge1xuICB2YXIgcHJldiA9IHRoaXMuY3VycmVudDtcbiAgdGhpcy5jdXJyZW50ID0gcm91dGU7XG4gIHRoaXMuY2IgJiYgdGhpcy5jYihyb3V0ZSk7XG4gIHRoaXMucm91dGVyLmFmdGVySG9va3MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICAgIGhvb2sgJiYgaG9vayhyb3V0ZSwgcHJldik7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZSAoYmFzZSkge1xuICBpZiAoIWJhc2UpIHtcbiAgICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcbiAgICAgIHZhciBiYXNlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcbiAgICAgIC8vIHN0cmlwIGZ1bGwgVVJMIG9yaWdpblxuICAgICAgYmFzZSA9IGJhc2UucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC9bXlxcL10rLywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlID0gJy8nO1xuICAgIH1cbiAgfVxuICAvLyBtYWtlIHN1cmUgdGhlcmUncyB0aGUgc3RhcnRpbmcgc2xhc2hcbiAgaWYgKGJhc2UuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBiYXNlID0gJy8nICsgYmFzZTtcbiAgfVxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2xhc2hcbiAgcmV0dXJuIGJhc2UucmVwbGFjZSgvXFwvJC8sICcnKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUXVldWUgKFxuICBjdXJyZW50LFxuICBuZXh0XG4pIHtcbiAgdmFyIGk7XG4gIHZhciBtYXggPSBNYXRoLm1heChjdXJyZW50Lmxlbmd0aCwgbmV4dC5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICBpZiAoY3VycmVudFtpXSAhPT0gbmV4dFtpXSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVkOiBuZXh0LnNsaWNlKDAsIGkpLFxuICAgIGFjdGl2YXRlZDogbmV4dC5zbGljZShpKSxcbiAgICBkZWFjdGl2YXRlZDogY3VycmVudC5zbGljZShpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZHMgKFxuICByZWNvcmRzLFxuICBuYW1lLFxuICBiaW5kLFxuICByZXZlcnNlXG4pIHtcbiAgdmFyIGd1YXJkcyA9IGZsYXRNYXBDb21wb25lbnRzKHJlY29yZHMsIGZ1bmN0aW9uIChkZWYsIGluc3RhbmNlLCBtYXRjaCwga2V5KSB7XG4gICAgdmFyIGd1YXJkID0gZXh0cmFjdEd1YXJkKGRlZiwgbmFtZSk7XG4gICAgaWYgKGd1YXJkKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShndWFyZClcbiAgICAgICAgPyBndWFyZC5tYXAoZnVuY3Rpb24gKGd1YXJkKSB7IHJldHVybiBiaW5kKGd1YXJkLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSk7IH0pXG4gICAgICAgIDogYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZsYXR0ZW4ocmV2ZXJzZSA/IGd1YXJkcy5yZXZlcnNlKCkgOiBndWFyZHMpXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZCAoXG4gIGRlZixcbiAga2V5XG4pIHtcbiAgaWYgKHR5cGVvZiBkZWYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBleHRlbmQgbm93IHNvIHRoYXQgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZC5cbiAgICBkZWYgPSBfVnVlLmV4dGVuZChkZWYpO1xuICB9XG4gIHJldHVybiBkZWYub3B0aW9uc1trZXldXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RMZWF2ZUd1YXJkcyAoZGVhY3RpdmF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoZGVhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUxlYXZlJywgYmluZEd1YXJkLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VXBkYXRlSG9va3MgKHVwZGF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHModXBkYXRlZCwgJ2JlZm9yZVJvdXRlVXBkYXRlJywgYmluZEd1YXJkKVxufVxuXG5mdW5jdGlvbiBiaW5kR3VhcmQgKGd1YXJkLCBpbnN0YW5jZSkge1xuICBpZiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRSb3V0ZUd1YXJkICgpIHtcbiAgICAgIHJldHVybiBndWFyZC5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RW50ZXJHdWFyZHMgKFxuICBhY3RpdmF0ZWQsXG4gIGNicyxcbiAgaXNWYWxpZFxuKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKFxuICAgIGFjdGl2YXRlZCxcbiAgICAnYmVmb3JlUm91dGVFbnRlcicsXG4gICAgZnVuY3Rpb24gKGd1YXJkLCBfLCBtYXRjaCwga2V5KSB7XG4gICAgICByZXR1cm4gYmluZEVudGVyR3VhcmQoZ3VhcmQsIG1hdGNoLCBrZXksIGNicywgaXNWYWxpZClcbiAgICB9XG4gIClcbn1cblxuZnVuY3Rpb24gYmluZEVudGVyR3VhcmQgKFxuICBndWFyZCxcbiAgbWF0Y2gsXG4gIGtleSxcbiAgY2JzLFxuICBpc1ZhbGlkXG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJvdXRlRW50ZXJHdWFyZCAodG8sIGZyb20sIG5leHQpIHtcbiAgICByZXR1cm4gZ3VhcmQodG8sIGZyb20sIGZ1bmN0aW9uIChjYikge1xuICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gIzc1MFxuICAgICAgICAgIC8vIGlmIGEgcm91dGVyLXZpZXcgaXMgd3JhcHBlZCB3aXRoIGFuIG91dC1pbiB0cmFuc2l0aW9uLFxuICAgICAgICAgIC8vIHRoZSBpbnN0YW5jZSBtYXkgbm90IGhhdmUgYmVlbiByZWdpc3RlcmVkIGF0IHRoaXMgdGltZS5cbiAgICAgICAgICAvLyB3ZSB3aWxsIG5lZWQgdG8gcG9sbCBmb3IgcmVnaXN0cmF0aW9uIHVudGlsIGN1cnJlbnQgcm91dGVcbiAgICAgICAgICAvLyBpcyBubyBsb25nZXIgdmFsaWQuXG4gICAgICAgICAgcG9sbChjYiwgbWF0Y2guaW5zdGFuY2VzLCBrZXksIGlzVmFsaWQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG5leHQoY2IpO1xuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gcG9sbCAoXG4gIGNiLCAvLyBzb21laG93IGZsb3cgY2Fubm90IGluZmVyIHRoaXMgaXMgYSBmdW5jdGlvblxuICBpbnN0YW5jZXMsXG4gIGtleSxcbiAgaXNWYWxpZFxuKSB7XG4gIGlmIChcbiAgICBpbnN0YW5jZXNba2V5XSAmJlxuICAgICFpbnN0YW5jZXNba2V5XS5faXNCZWluZ0Rlc3Ryb3llZCAvLyBkbyBub3QgcmV1c2UgYmVpbmcgZGVzdHJveWVkIGluc3RhbmNlXG4gICkge1xuICAgIGNiKGluc3RhbmNlc1trZXldKTtcbiAgfSBlbHNlIGlmIChpc1ZhbGlkKCkpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHBvbGwoY2IsIGluc3RhbmNlcywga2V5LCBpc1ZhbGlkKTtcbiAgICB9LCAxNik7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIVE1MNUhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5KSB7XG4gIGZ1bmN0aW9uIEhUTUw1SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcblxuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHNldHVwU2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRMb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMuYmFzZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG5cbiAgICAgIC8vIEF2b2lkaW5nIGZpcnN0IGBwb3BzdGF0ZWAgZXZlbnQgZGlzcGF0Y2hlZCBpbiBzb21lIGJyb3dzZXJzIGJ1dCBmaXJzdFxuICAgICAgLy8gaGlzdG9yeSByb3V0ZSBub3QgdXBkYXRlZCBzaW5jZSBhc3luYyBndWFyZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcyQxLmJhc2UpO1xuICAgICAgaWYgKHRoaXMkMS5jdXJyZW50ID09PSBTVEFSVCAmJiBsb2NhdGlvbiA9PT0gaW5pdExvY2F0aW9uKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgaGFuZGxlU2Nyb2xsKHJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEhUTUw1SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5O1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSAmJiBIaXN0b3J5LnByb3RvdHlwZSApO1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSFRNTDVIaXN0b3J5O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaFN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJlcGxhY2VTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICBpZiAoZ2V0TG9jYXRpb24odGhpcy5iYXNlKSAhPT0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGNsZWFuUGF0aCh0aGlzLmJhc2UgKyB0aGlzLmN1cnJlbnQuZnVsbFBhdGgpO1xuICAgICAgcHVzaCA/IHB1c2hTdGF0ZShjdXJyZW50KSA6IHJlcGxhY2VTdGF0ZShjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRMb2NhdGlvbih0aGlzLmJhc2UpXG4gIH07XG5cbiAgcmV0dXJuIEhUTUw1SGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbiAoYmFzZSkge1xuICB2YXIgcGF0aCA9IGRlY29kZVVSSSh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICBpZiAoYmFzZSAmJiBwYXRoLmluZGV4T2YoYmFzZSkgPT09IDApIHtcbiAgICBwYXRoID0gcGF0aC5zbGljZShiYXNlLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgd2luZG93LmxvY2F0aW9uLmhhc2hcbn1cblxuLyogICovXG5cbnZhciBIYXNoSGlzdG9yeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEhpc3RvcnkpIHtcbiAgZnVuY3Rpb24gSGFzaEhpc3RvcnkgKHJvdXRlciwgYmFzZSwgZmFsbGJhY2spIHtcbiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcbiAgICAvLyBjaGVjayBoaXN0b3J5IGZhbGxiYWNrIGRlZXBsaW5raW5nXG4gICAgaWYgKGZhbGxiYWNrICYmIGNoZWNrRmFsbGJhY2sodGhpcy5iYXNlKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGVuc3VyZVNsYXNoKCk7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkgKSBIYXNoSGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5O1xuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5ICYmIEhpc3RvcnkucHJvdG90eXBlICk7XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhhc2hIaXN0b3J5O1xuXG4gIC8vIHRoaXMgaXMgZGVsYXllZCB1bnRpbCB0aGUgYXBwIG1vdW50c1xuICAvLyB0byBhdm9pZCB0aGUgaGFzaGNoYW5nZSBsaXN0ZW5lciBiZWluZyBmaXJlZCB0b28gZWFybHlcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnNldHVwTGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHNldHVwU2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBzdXBwb3J0c1B1c2hTdGF0ZSA/ICdwb3BzdGF0ZScgOiAnaGFzaGNoYW5nZScsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG4gICAgICAgIGlmICghZW5zdXJlU2xhc2goKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHRoaXMkMS50cmFuc2l0aW9uVG8oZ2V0SGFzaCgpLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICAgICAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgcHVzaEhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudC5mdWxsUGF0aDtcbiAgICBpZiAoZ2V0SGFzaCgpICE9PSBjdXJyZW50KSB7XG4gICAgICBwdXNoID8gcHVzaEhhc2goY3VycmVudCkgOiByZXBsYWNlSGFzaChjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEhhc2goKVxuICB9O1xuXG4gIHJldHVybiBIYXNoSGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBjaGVja0ZhbGxiYWNrIChiYXNlKSB7XG4gIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGJhc2UpO1xuICBpZiAoIS9eXFwvIy8udGVzdChsb2NhdGlvbikpIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShjbGVhblBhdGgoYmFzZSArICcvIycgKyBsb2NhdGlvbikpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuZnVuY3Rpb24gZW5zdXJlU2xhc2ggKCkge1xuICB2YXIgcGF0aCA9IGdldEhhc2goKTtcbiAgaWYgKHBhdGguY2hhckF0KDApID09PSAnLycpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJlcGxhY2VIYXNoKCcvJyArIHBhdGgpO1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaCAoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIC8vIGVtcHR5IHBhdGhcbiAgaWYgKGluZGV4IDwgMCkgeyByZXR1cm4gJycgfVxuXG4gIGhyZWYgPSBocmVmLnNsaWNlKGluZGV4ICsgMSk7XG4gIC8vIGRlY29kZSB0aGUgaGFzaCBidXQgbm90IHRoZSBzZWFyY2ggb3IgaGFzaFxuICAvLyBhcyBzZWFyY2gocXVlcnkpIGlzIGFscmVhZHkgZGVjb2RlZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjcwOFxuICB2YXIgc2VhcmNoSW5kZXggPSBocmVmLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4IDwgMCkge1xuICAgIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaEluZGV4ID4gLTEpIHtcbiAgICAgIGhyZWYgPSBkZWNvZGVVUkkoaHJlZi5zbGljZSgwLCBoYXNoSW5kZXgpKSArIGhyZWYuc2xpY2UoaGFzaEluZGV4KTtcbiAgICB9IGVsc2UgeyBocmVmID0gZGVjb2RlVVJJKGhyZWYpOyB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNlYXJjaEluZGV4ID4gLTEpIHtcbiAgICAgIGhyZWYgPSBkZWNvZGVVUkkoaHJlZi5zbGljZSgwLCBzZWFyY2hJbmRleCkpICsgaHJlZi5zbGljZShzZWFyY2hJbmRleCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGhyZWZcbn1cblxuZnVuY3Rpb24gZ2V0VXJsIChwYXRoKSB7XG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHZhciBiYXNlID0gaSA+PSAwID8gaHJlZi5zbGljZSgwLCBpKSA6IGhyZWY7XG4gIHJldHVybiAoYmFzZSArIFwiI1wiICsgcGF0aClcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2ggKHBhdGgpIHtcbiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgcHVzaFN0YXRlKGdldFVybChwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoIChwYXRoKSB7XG4gIGlmIChzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgIHJlcGxhY2VTdGF0ZShnZXRVcmwocGF0aCkpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGdldFVybChwYXRoKSk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBBYnN0cmFjdEhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5KSB7XG4gIGZ1bmN0aW9uIEFic3RyYWN0SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG4gICAgdGhpcy5zdGFjayA9IFtdO1xuICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEFic3RyYWN0SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5O1xuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSAmJiBIaXN0b3J5LnByb3RvdHlwZSApO1xuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQWJzdHJhY3RIaXN0b3J5O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXggKyAxKS5jb25jYXQocm91dGUpO1xuICAgICAgICB0aGlzJDEuaW5kZXgrKztcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIH0sXG4gICAgICBvbkFib3J0XG4gICAgKTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICB0aGlzJDEuc3RhY2sgPSB0aGlzJDEuc3RhY2suc2xpY2UoMCwgdGhpcyQxLmluZGV4KS5jb25jYXQocm91dGUpO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5pbmRleCArIG47XG4gICAgaWYgKHRhcmdldEluZGV4IDwgMCB8fCB0YXJnZXRJbmRleCA+PSB0aGlzLnN0YWNrLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciByb3V0ZSA9IHRoaXMuc3RhY2tbdGFyZ2V0SW5kZXhdO1xuICAgIHRoaXMuY29uZmlybVRyYW5zaXRpb24oXG4gICAgICByb3V0ZSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcyQxLmluZGV4ID0gdGFyZ2V0SW5kZXg7XG4gICAgICAgIHRoaXMkMS51cGRhdGVSb3V0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoaXNFeHRlbmRlZEVycm9yKE5hdmlnYXRpb25EdXBsaWNhdGVkLCBlcnIpKSB7XG4gICAgICAgICAgdGhpcyQxLmluZGV4ID0gdGFyZ2V0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudCA/IGN1cnJlbnQuZnVsbFBhdGggOiAnLydcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAoKSB7XG4gICAgLy8gbm9vcFxuICB9O1xuXG4gIHJldHVybiBBYnN0cmFjdEhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuLyogICovXG5cblxuXG52YXIgVnVlUm91dGVyID0gZnVuY3Rpb24gVnVlUm91dGVyIChvcHRpb25zKSB7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHRoaXMuYXBwID0gbnVsbDtcbiAgdGhpcy5hcHBzID0gW107XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuYmVmb3JlSG9va3MgPSBbXTtcbiAgdGhpcy5yZXNvbHZlSG9va3MgPSBbXTtcbiAgdGhpcy5hZnRlckhvb2tzID0gW107XG4gIHRoaXMubWF0Y2hlciA9IGNyZWF0ZU1hdGNoZXIob3B0aW9ucy5yb3V0ZXMgfHwgW10sIHRoaXMpO1xuXG4gIHZhciBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICdoYXNoJztcbiAgdGhpcy5mYWxsYmFjayA9IG1vZGUgPT09ICdoaXN0b3J5JyAmJiAhc3VwcG9ydHNQdXNoU3RhdGUgJiYgb3B0aW9ucy5mYWxsYmFjayAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgbW9kZSA9ICdoYXNoJztcbiAgfVxuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIG1vZGUgPSAnYWJzdHJhY3QnO1xuICB9XG4gIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSAnaGlzdG9yeSc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSFRNTDVIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2hhc2gnOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhhc2hIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSwgdGhpcy5mYWxsYmFjayk7XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Fic3RyYWN0JzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBBYnN0cmFjdEhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlKTtcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgKFwiaW52YWxpZCBtb2RlOiBcIiArIG1vZGUpKTtcbiAgICAgIH1cbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY3VycmVudFJvdXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiBtYXRjaCAoXG4gIHJhdyxcbiAgY3VycmVudCxcbiAgcmVkaXJlY3RlZEZyb21cbikge1xuICByZXR1cm4gdGhpcy5tYXRjaGVyLm1hdGNoKHJhdywgY3VycmVudCwgcmVkaXJlY3RlZEZyb20pXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuY3VycmVudFJvdXRlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuaGlzdG9yeSAmJiB0aGlzLmhpc3RvcnkuY3VycmVudFxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gaW5pdCAoYXBwIC8qIFZ1ZSBjb21wb25lbnQgaW5zdGFuY2UgKi8pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydChcbiAgICBpbnN0YWxsLmluc3RhbGxlZCxcbiAgICBcIm5vdCBpbnN0YWxsZWQuIE1ha2Ugc3VyZSB0byBjYWxsIGBWdWUudXNlKFZ1ZVJvdXRlcilgIFwiICtcbiAgICBcImJlZm9yZSBjcmVhdGluZyByb290IGluc3RhbmNlLlwiXG4gICk7XG5cbiAgdGhpcy5hcHBzLnB1c2goYXBwKTtcblxuICAvLyBzZXQgdXAgYXBwIGRlc3Ryb3llZCBoYW5kbGVyXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8yNjM5XG4gIGFwcC4kb25jZSgnaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gY2xlYW4gb3V0IGFwcCBmcm9tIHRoaXMuYXBwcyBhcnJheSBvbmNlIGRlc3Ryb3llZFxuICAgIHZhciBpbmRleCA9IHRoaXMkMS5hcHBzLmluZGV4T2YoYXBwKTtcbiAgICBpZiAoaW5kZXggPiAtMSkgeyB0aGlzJDEuYXBwcy5zcGxpY2UoaW5kZXgsIDEpOyB9XG4gICAgLy8gZW5zdXJlIHdlIHN0aWxsIGhhdmUgYSBtYWluIGFwcCBvciBudWxsIGlmIG5vIGFwcHNcbiAgICAvLyB3ZSBkbyBub3QgcmVsZWFzZSB0aGUgcm91dGVyIHNvIGl0IGNhbiBiZSByZXVzZWRcbiAgICBpZiAodGhpcyQxLmFwcCA9PT0gYXBwKSB7IHRoaXMkMS5hcHAgPSB0aGlzJDEuYXBwc1swXSB8fCBudWxsOyB9XG4gIH0pO1xuXG4gIC8vIG1haW4gYXBwIHByZXZpb3VzbHkgaW5pdGlhbGl6ZWRcbiAgLy8gcmV0dXJuIGFzIHdlIGRvbid0IG5lZWQgdG8gc2V0IHVwIG5ldyBoaXN0b3J5IGxpc3RlbmVyXG4gIGlmICh0aGlzLmFwcCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdGhpcy5hcHAgPSBhcHA7XG5cbiAgdmFyIGhpc3RvcnkgPSB0aGlzLmhpc3Rvcnk7XG5cbiAgaWYgKGhpc3RvcnkgaW5zdGFuY2VvZiBIVE1MNUhpc3RvcnkpIHtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpKTtcbiAgfSBlbHNlIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSGFzaEhpc3RvcnkpIHtcbiAgICB2YXIgc2V0dXBIYXNoTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBoaXN0b3J5LnNldHVwTGlzdGVuZXJzKCk7XG4gICAgfTtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhcbiAgICAgIGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCksXG4gICAgICBzZXR1cEhhc2hMaXN0ZW5lcixcbiAgICAgIHNldHVwSGFzaExpc3RlbmVyXG4gICAgKTtcbiAgfVxuXG4gIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHRoaXMkMS5hcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkge1xuICAgICAgYXBwLl9yb3V0ZSA9IHJvdXRlO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uIGJlZm9yZUVhY2ggKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5iZWZvcmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZVJlc29sdmUgPSBmdW5jdGlvbiBiZWZvcmVSZXNvbHZlIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMucmVzb2x2ZUhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWZ0ZXJFYWNoID0gZnVuY3Rpb24gYWZ0ZXJFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYWZ0ZXJIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25SZWFkeShjYiwgZXJyb3JDYik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuaGlzdG9yeS5vbkVycm9yKGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFvbkNvbXBsZXRlICYmICFvbkFib3J0ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0aGlzJDEuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oaXN0b3J5LnB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIW9uQ29tcGxldGUgJiYgIW9uQWJvcnQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRoaXMkMS5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCk7XG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICB0aGlzLmhpc3RvcnkuZ28obik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJhY2sgPSBmdW5jdGlvbiBiYWNrICgpIHtcbiAgdGhpcy5nbygtMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiBmb3J3YXJkICgpIHtcbiAgdGhpcy5nbygxKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ2V0TWF0Y2hlZENvbXBvbmVudHMgPSBmdW5jdGlvbiBnZXRNYXRjaGVkQ29tcG9uZW50cyAodG8pIHtcbiAgdmFyIHJvdXRlID0gdG9cbiAgICA/IHRvLm1hdGNoZWRcbiAgICAgID8gdG9cbiAgICAgIDogdGhpcy5yZXNvbHZlKHRvKS5yb3V0ZVxuICAgIDogdGhpcy5jdXJyZW50Um91dGU7XG4gIGlmICghcm91dGUpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCByb3V0ZS5tYXRjaGVkLm1hcChmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhtLmNvbXBvbmVudHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gbS5jb21wb25lbnRzW2tleV1cbiAgICB9KVxuICB9KSlcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUgKFxuICB0byxcbiAgY3VycmVudCxcbiAgYXBwZW5kXG4pIHtcbiAgY3VycmVudCA9IGN1cnJlbnQgfHwgdGhpcy5oaXN0b3J5LmN1cnJlbnQ7XG4gIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZUxvY2F0aW9uKFxuICAgIHRvLFxuICAgIGN1cnJlbnQsXG4gICAgYXBwZW5kLFxuICAgIHRoaXNcbiAgKTtcbiAgdmFyIHJvdXRlID0gdGhpcy5tYXRjaChsb2NhdGlvbiwgY3VycmVudCk7XG4gIHZhciBmdWxsUGF0aCA9IHJvdXRlLnJlZGlyZWN0ZWRGcm9tIHx8IHJvdXRlLmZ1bGxQYXRoO1xuICB2YXIgYmFzZSA9IHRoaXMuaGlzdG9yeS5iYXNlO1xuICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYoYmFzZSwgZnVsbFBhdGgsIHRoaXMubW9kZSk7XG4gIHJldHVybiB7XG4gICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgIHJvdXRlOiByb3V0ZSxcbiAgICBocmVmOiBocmVmLFxuICAgIC8vIGZvciBiYWNrd2FyZHMgY29tcGF0XG4gICAgbm9ybWFsaXplZFRvOiBsb2NhdGlvbixcbiAgICByZXNvbHZlZDogcm91dGVcbiAgfVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5hZGRSb3V0ZXMgPSBmdW5jdGlvbiBhZGRSb3V0ZXMgKHJvdXRlcykge1xuICB0aGlzLm1hdGNoZXIuYWRkUm91dGVzKHJvdXRlcyk7XG4gIGlmICh0aGlzLmhpc3RvcnkuY3VycmVudCAhPT0gU1RBUlQpIHtcbiAgICB0aGlzLmhpc3RvcnkudHJhbnNpdGlvblRvKHRoaXMuaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSk7XG4gIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWdWVSb3V0ZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJIb29rIChsaXN0LCBmbikge1xuICBsaXN0LnB1c2goZm4pO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gbGlzdC5pbmRleE9mKGZuKTtcbiAgICBpZiAoaSA+IC0xKSB7IGxpc3Quc3BsaWNlKGksIDEpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlSHJlZiAoYmFzZSwgZnVsbFBhdGgsIG1vZGUpIHtcbiAgdmFyIHBhdGggPSBtb2RlID09PSAnaGFzaCcgPyAnIycgKyBmdWxsUGF0aCA6IGZ1bGxQYXRoO1xuICByZXR1cm4gYmFzZSA/IGNsZWFuUGF0aChiYXNlICsgJy8nICsgcGF0aCkgOiBwYXRoXG59XG5cblZ1ZVJvdXRlci5pbnN0YWxsID0gaW5zdGFsbDtcblZ1ZVJvdXRlci52ZXJzaW9uID0gJzMuMS4zJztcblxuaWYgKGluQnJvd3NlciAmJiB3aW5kb3cuVnVlKSB7XG4gIHdpbmRvdy5WdWUudXNlKFZ1ZVJvdXRlcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZVJvdXRlcjtcbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTBcbiAqIChjKSAyMDE0LTIwMTkgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gKFxuICAgIGlzRGVmKHZhbCkgJiZcbiAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nXG4gIClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgKGlzUGxhaW5PYmplY3QodmFsKSAmJiB2YWwudG9TdHJpbmcgPT09IF90b1N0cmluZylcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZVxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gcG9seWZpbGxCaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4gID8gbmF0aXZlQmluZFxuICA6IHBvbHlmaWxsQmluZDtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXG4gKiB3aXRoIC4uLnJlc3QgKGh0dHBzOi8vZmxvdy5vcmcvYmxvZy8yMDE3LzA1LzA3L1N0cmljdC1GdW5jdGlvbi1DYWxsLUFyaXR5LykuXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0cmluZyBjb250YWluaW5nIHN0YXRpYyBrZXlzIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyAobW9kdWxlcykge1xuICByZXR1cm4gbW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGtleXMsIG0pIHtcbiAgICByZXR1cm4ga2V5cy5jb25jYXQobS5zdGF0aWNLZXlzIHx8IFtdKVxuICB9LCBbXSkuam9pbignLCcpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJyxcbiAgJ3NlcnZlclByZWZldGNoJ1xuXTtcblxuLyogICovXG5cblxuXG52YXIgY29uZmlnID0gKHtcbiAgLyoqXG4gICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XG4gICAqL1xuICBwcm9kdWN0aW9uVGlwOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbFxuICAgICAgPyB2bS5vcHRpb25zXG4gICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICA/IHZtLiRvcHRpb25zIHx8IHZtLmNvbnN0cnVjdG9yLm9wdGlvbnNcbiAgICAgICAgOiB2bTtcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgdmFyIGZpbGUgPSBvcHRpb25zLl9fZmlsZTtcbiAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiPFwiICsgKGNsYXNzaWZ5KG5hbWUpKSArIFwiPlwiKSA6IFwiPEFub255bW91cz5cIikgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgbiA+Pj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdmFsaWRhdG9yID0gcHJvcC52YWxpZGF0b3I7XG4gIGlmICh2YWxpZGF0b3IpIHtcbiAgICBpZiAoIXZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbCkkLztcblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUpIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxuLyoqXG4gKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gKiBiZWNhdXNlIGEgc2ltcGxlIGVxdWFsaXR5IGNoZWNrIHdpbGwgZmFpbCB3aGVuIHJ1bm5pbmdcbiAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZSAoZm4pIHtcbiAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJ1xufVxuXG5mdW5jdGlvbiBpc1NhbWVUeXBlIChhLCBiKSB7XG4gIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpXG59XG5cbmZ1bmN0aW9uIGdldFR5cGVJbmRleCAodHlwZSwgZXhwZWN0ZWRUeXBlcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMVxuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlc1tpXSwgdHlwZSkpIHtcbiAgICAgIHJldHVybiBpXG4gICAgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UgKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7XG4gIHZhciBtZXNzYWdlID0gXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgIFwiIEV4cGVjdGVkIFwiICsgKGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykpO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcbiAgdmFyIHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gIHZhciBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxuICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyBleHBlY3RlZFZhbHVlO1xuICB9XG4gIG1lc3NhZ2UgKz0gXCIsIGdvdCBcIiArIHJlY2VpdmVkVHlwZSArIFwiIFwiO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcbiAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIndpdGggdmFsdWUgXCIgKyByZWNlaXZlZFZhbHVlICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICB2YXIgZXhwbGljaXRUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ107XG4gIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW07IH0pXG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbiAoKSB7XG4gIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgcmV0dXJuIGFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbic7IH0pXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICAvLyBEZWFjdGl2YXRlIGRlcHMgdHJhY2tpbmcgd2hpbGUgcHJvY2Vzc2luZyBlcnJvciBoYW5kbGVyIHRvIGF2b2lkIHBvc3NpYmxlIGluZmluaXRlIHJlbmRlcmluZy5cbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVleC9pc3N1ZXMvMTUwNVxuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgaWYgKHZtKSB7XG4gICAgICB2YXIgY3VyID0gdm07XG4gICAgICB3aGlsZSAoKGN1ciA9IGN1ci4kcGFyZW50KSkge1xuICAgICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtcbiAgICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoY2FwdHVyZSkgeyByZXR1cm4gfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcgKFxuICBoYW5kbGVyLFxuICBjb250ZXh0LFxuICBhcmdzLFxuICB2bSxcbiAgaW5mb1xuKSB7XG4gIHZhciByZXM7XG4gIHRyeSB7XG4gICAgcmVzID0gYXJncyA/IGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncykgOiBoYW5kbGVyLmNhbGwoY29udGV4dCk7XG4gICAgaWYgKHJlcyAmJiAhcmVzLl9pc1Z1ZSAmJiBpc1Byb21pc2UocmVzKSAmJiAhcmVzLl9oYW5kbGVkKSB7XG4gICAgICByZXMuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvICsgXCIgKFByb21pc2UvYXN5bmMpXCIpOyB9KTtcbiAgICAgIC8vIGlzc3VlICM5NTExXG4gICAgICAvLyBhdm9pZCBjYXRjaCB0cmlnZ2VyaW5nIG11bHRpcGxlIHRpbWVzIHdoZW4gbmVzdGVkIGNhbGxzXG4gICAgICByZXMuX2hhbmRsZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZiB0aGUgdXNlciBpbnRlbnRpb25hbGx5IHRocm93cyB0aGUgb3JpZ2luYWwgZXJyb3IgaW4gdGhlIGhhbmRsZXIsXG4gICAgICAvLyBkbyBub3QgbG9nIGl0IHR3aWNlXG4gICAgICBpZiAoZSAhPT0gZXJyKSB7XG4gICAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGlzVXNpbmdNaWNyb1Rhc2sgPSBmYWxzZTtcblxudmFyIGNhbGxiYWNrcyA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkge1xuICBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbi8vIEluIDIuNSB3ZSB1c2VkIChtYWNybykgdGFza3MgKGluIGNvbWJpbmF0aW9uIHdpdGggbWljcm90YXNrcykuXG4vLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludFxuLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBBbHNvLCB1c2luZyAobWFjcm8pIHRhc2tzIGluIGV2ZW50IGhhbmRsZXIgd291bGQgY2F1c2Ugc29tZSB3ZWlyZCBiZWhhdmlvcnNcbi8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLlxuLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuLy8gQSBtYWpvciBkcmF3YmFjayBvZiB0aGlzIHRyYWRlb2ZmIGlzIHRoYXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zXG4vLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbi8vIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZSBldmVudCAoIzY1NjYpLlxudmFyIHRpbWVyRnVuYztcblxuLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4vLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcbiAgICAvLyBJbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICghaXNJRSAmJiB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICBpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKSB8fFxuICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgTXV0YXRpb25PYnNlcnZlci50b1N0cmluZygpID09PSAnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJ1xuKSkge1xuICAvLyBVc2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAvLyBlLmcuIFBoYW50b21KUywgaU9TNywgQW5kcm9pZCA0LjRcbiAgLy8gKCM2NDY2IE11dGF0aW9uT2JzZXJ2ZXIgaXMgdW5yZWxpYWJsZSBpbiBJRTExKVxuICB2YXIgY291bnRlciA9IDE7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoQ2FsbGJhY2tzKTtcbiAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwge1xuICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgfSk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudGVyID0gKGNvdW50ZXIgKyAxKSAlIDI7XG4gICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTtcbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxuICAvLyBUZWNoaW5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscycgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc2xvdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgIHJlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHJlc1swXS5pc0NvbW1lbnQpIC8vICM5NjU4XG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGlmIChoYXNTeW1ib2wgJiYgdmFsW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHJldCA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdmFsW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzT2JqZWN0KGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgbm9kZXMgPSBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVpY2FsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XG4gICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xuICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKCFkYXRhIHx8ICFkYXRhLnByZSkgJiYgaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2UgaWYgKGlzRGVmKHZub2RlKSkge1xuICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7IHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgZm9yY2UgPSB0cnVlO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoXG4gICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWYgIzUzMThcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4vLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2Rlc1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1ZXMgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICAgIC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpICYmIHZub2RlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvclxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgdmFyIG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChvd25lciAmJiAhaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgdmFyIG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTtcbiAgICB2YXIgc3luYyA9IHRydWU7XG4gICAgdmFyIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgdmFyIHRpbWVyVGltZW91dCA9IG51bGxcblxuICAgIDsob3duZXIpLiRvbignaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUob3duZXJzLCBvd25lcik7IH0pO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIChvd25lcnNbaV0pLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZyk7XG4gICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyVGltZW91dCk7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgICAgICAgICAgICAgPyAoXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjYnNbaV0sIHZtLCBhcmdzLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHtcbiAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG4gICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCAoXG4gIHZtLFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgdm0uJGVsID0gZWw7XG4gIGlmICghdm0uJG9wdGlvbnMucmVuZGVyKSB7XG4gICAgdm0uJG9wdGlvbnMucmVuZGVyID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB8fFxuICAgICAgICB2bS4kb3B0aW9ucy5lbCB8fCBlbCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAnY29tcGlsZXIgaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgdmFyIHVwZGF0ZUNvbXBvbmVudDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5hbWUgPSB2bS5fbmFtZTtcbiAgICAgIHZhciBpZCA9IHZtLl91aWQ7XG4gICAgICB2YXIgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgaWQ7XG4gICAgICB2YXIgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyBpZDtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2YXIgdm5vZGUgPSB2bS5fcmVuZGVyKCk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiByZW5kZXJcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiBwYXRjaFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gd2Ugc2V0IHRoaXMgdG8gdm0uX3dhdGNoZXIgaW5zaWRlIHRoZSB3YXRjaGVyJ3MgY29uc3RydWN0b3JcbiAgLy8gc2luY2UgdGhlIHdhdGNoZXIncyBpbml0aWFsIHBhdGNoIG1heSBjYWxsICRmb3JjZVVwZGF0ZSAoZS5nLiBpbnNpZGUgY2hpbGRcbiAgLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZFxuICBuZXcgV2F0Y2hlcih2bSwgdXBkYXRlQ29tcG9uZW50LCBub29wLCB7XG4gICAgYmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUgKCkge1xuICAgICAgaWYgKHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgdHJ1ZSAvKiBpc1JlbmRlcldhdGNoZXIgKi8pO1xuICBoeWRyYXRpbmcgPSBmYWxzZTtcblxuICAvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZlxuICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICB2bS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgfVxuICByZXR1cm4gdm1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQgKFxuICB2bSxcbiAgcHJvcHNEYXRhLFxuICBsaXN0ZW5lcnMsXG4gIHBhcmVudFZub2RlLFxuICByZW5kZXJDaGlsZHJlblxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbi5cblxuICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgZHluYW1pYyBzY29wZWRTbG90cyAoaGFuZC13cml0dGVuIG9yIGNvbXBpbGVkIGJ1dCB3aXRoXG4gIC8vIGR5bmFtaWMgc2xvdCBuYW1lcykuIFN0YXRpYyBzY29wZWQgc2xvdHMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBoYXMgdGhlXG4gIC8vIFwiJHN0YWJsZVwiIG1hcmtlci5cbiAgdmFyIG5ld1Njb3BlZFNsb3RzID0gcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cztcbiAgdmFyIG9sZFNjb3BlZFNsb3RzID0gdm0uJHNjb3BlZFNsb3RzO1xuICB2YXIgaGFzRHluYW1pY1Njb3BlZFNsb3QgPSAhIShcbiAgICAobmV3U2NvcGVkU2xvdHMgJiYgIW5ld1Njb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG9sZFNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAmJiAhb2xkU2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAobmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkgIT09IG5ld1Njb3BlZFNsb3RzLiRrZXkpXG4gICk7XG5cbiAgLy8gQW55IHN0YXRpYyBzbG90IGNoaWxkcmVuIGZyb20gdGhlIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGR1cmluZyBwYXJlbnQnc1xuICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBoYXNEeW5hbWljU2NvcGVkU2xvdFxuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgdGhpcy5iZWZvcmUgPSBvcHRpb25zLmJlZm9yZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZtID0gdGhpcy52bTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcG9wVGFyZ2V0KCk7XG4gICAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdGhpcy5kZXBzW2ldLmRlcGVuZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSBzZWxmIGZyb20gYWxsIGRlcGVuZGVuY2llcycgc3Vic2NyaWJlciBsaXN0LlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uID0ge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogbm9vcCxcbiAgc2V0OiBub29wXG59O1xuXG5mdW5jdGlvbiBwcm94eSAodGFyZ2V0LCBzb3VyY2VLZXksIGtleSkge1xuICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gZnVuY3Rpb24gcHJveHlHZXR0ZXIgKCkge1xuICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XVxuICB9O1xuICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gcHJveHlTZXR0ZXIgKHZhbCkge1xuICAgIHRoaXNbc291cmNlS2V5XVtrZXldID0gdmFsO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGluaXRTdGF0ZSAodm0pIHtcbiAgdm0uX3dhdGNoZXJzID0gW107XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnM7XG4gIGlmIChvcHRzLnByb3BzKSB7IGluaXRQcm9wcyh2bSwgb3B0cy5wcm9wcyk7IH1cbiAgaWYgKG9wdHMubWV0aG9kcykgeyBpbml0TWV0aG9kcyh2bSwgb3B0cy5tZXRob2RzKTsgfVxuICBpZiAob3B0cy5kYXRhKSB7XG4gICAgaW5pdERhdGEodm0pO1xuICB9IGVsc2Uge1xuICAgIG9ic2VydmUodm0uX2RhdGEgPSB7fSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgfVxuICBpZiAob3B0cy5jb21wdXRlZCkgeyBpbml0Q29tcHV0ZWQodm0sIG9wdHMuY29tcHV0ZWQpOyB9XG4gIGlmIChvcHRzLndhdGNoICYmIG9wdHMud2F0Y2ggIT09IG5hdGl2ZVdhdGNoKSB7XG4gICAgaW5pdFdhdGNoKHZtLCBvcHRzLndhdGNoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMgKHZtLCBwcm9wc09wdGlvbnMpIHtcbiAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm0uX3Byb3BzID0ge307XG4gIC8vIGNhY2hlIHByb3Aga2V5cyBzbyB0aGF0IGZ1dHVyZSBwcm9wcyB1cGRhdGVzIGNhbiBpdGVyYXRlIHVzaW5nIEFycmF5XG4gIC8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLlxuICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG4gIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICBpZiAoIWlzUm9vdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gIH1cbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wc09wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGh5cGhlbmF0ZWRLZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIC8vIHN0YXRpYyBwcm9wcyBhcmUgYWxyZWFkeSBwcm94aWVkIG9uIHRoZSBjb21wb25lbnQncyBwcm90b3R5cGVcbiAgICAvLyBkdXJpbmcgVnVlLmV4dGVuZCgpLiBXZSBvbmx5IG5lZWQgdG8gcHJveHkgcHJvcHMgZGVmaW5lZCBhdFxuICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBwcm94eSh2bSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzT3B0aW9ucykgbG9vcCgga2V5ICk7XG4gIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEgKHZtKSB7XG4gIHZhciBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbidcbiAgICA/IGdldERhdGEoZGF0YSwgdm0pXG4gICAgOiBkYXRhIHx8IHt9O1xuICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICBkYXRhID0ge307XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgdmFyIG1ldGhvZHMgPSB2bS4kb3B0aW9ucy5tZXRob2RzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChtZXRob2RzICYmIGhhc093bihtZXRob2RzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBkYXRhIHByb3BlcnR5LlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgfVxuICB9XG4gIC8vIG9ic2VydmUgZGF0YVxuICBvYnNlcnZlKGRhdGEsIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG59XG5cbmZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBkYXRhIGdldHRlcnNcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIHJldHVybiBkYXRhLmNhbGwodm0sIHZtKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgIHJldHVybiB7fVxuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbnZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXG4gIHZhciBpc1NTUiA9IGlzU2VydmVyUmVuZGVyaW5nKCk7XG5cbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIi5cIiksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YS5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMucHJvcHMgJiYga2V5IGluIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpXG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gcGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO1xuICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztcblxuICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICBvcHRzLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgaWYgKEN0b3Iuc3VwZXIpIHtcbiAgICB2YXIgc3VwZXJPcHRpb25zID0gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yLnN1cGVyKTtcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7XG4gICAgICAvLyB1cGRhdGUgYmFzZSBleHRlbmQgb3B0aW9uc1xuICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xuICAgICAgICBleHRlbmQoQ3Rvci5leHRlbmRPcHRpb25zLCBtb2RpZmllZE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3RvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgbW9kaWZpZWQ7XG4gIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChrZWVwQWxpdmVJbnN0YW5jZSwgZmlsdGVyKSB7XG4gIHZhciBjYWNoZSA9IGtlZXBBbGl2ZUluc3RhbmNlLmNhY2hlO1xuICB2YXIga2V5cyA9IGtlZXBBbGl2ZUluc3RhbmNlLmtleXM7XG4gIHZhciBfdm5vZGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5fdm5vZGU7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICBpZiAoY2FjaGVkTm9kZSkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNhY2hlZE5vZGUuY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKFxuICBjYWNoZSxcbiAga2V5LFxuICBrZXlzLFxuICBjdXJyZW50XG4pIHtcbiAgdmFyIGNhY2hlZCQkMSA9IGNhY2hlW2tleV07XG4gIGlmIChjYWNoZWQkJDEgJiYgKCFjdXJyZW50IHx8IGNhY2hlZCQkMS50YWcgIT09IGN1cnJlbnQudGFnKSkge1xuICAgIGNhY2hlZCQkMS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICB9XG4gIGNhY2hlW2tleV0gPSBudWxsO1xuICByZW1vdmUoa2V5cywga2V5KTtcbn1cblxudmFyIHBhdHRlcm5UeXBlcyA9IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldO1xuXG52YXIgS2VlcEFsaXZlID0ge1xuICBuYW1lOiAna2VlcC1hbGl2ZScsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHByb3BzOiB7XG4gICAgaW5jbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIGV4Y2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gICAgdGhpcy4kd2F0Y2goJ2V4Y2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgc2xvdCA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgdmFyIGluY2x1ZGUgPSByZWYuaW5jbHVkZTtcbiAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAvLyBleGNsdWRlZFxuICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG5cbiAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYkMS5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmJDEua2V5cztcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgLy8gbWFrZSBjdXJyZW50IGtleSBmcmVzaGVzdFxuICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSlcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIC8vIDIuNiBleHBsaWNpdCBvYnNlcnZhYmxlIEFQSVxuICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYnNlcnZlKG9iaik7XG4gICAgcmV0dXJuIG9ialxuICB9O1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7XG4gIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFxufSk7XG5cblZ1ZS52ZXJzaW9uID0gJzIuNi4xMCc7XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbnZhciBjb252ZXJ0RW51bWVyYXRlZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnXG4gICAgPyAnZmFsc2UnXG4gICAgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlXG4gICAgOiBrZXkgPT09ICdjb250ZW50ZWRpdGFibGUnICYmIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogJ3RydWUnXG59O1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUHJlVGFnID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnID09PSAncHJlJzsgfTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJlxuICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG5mdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpO1xuICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlJCQxXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEgKHZub2RlLCBpblZQcmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIWluVlByZSAmJlxuICAgICAgIXZub2RlLm5zICYmXG4gICAgICAhKFxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xuICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpXG4gICAgICAgICAgICA/IGlnbm9yZS50ZXN0KHZub2RlLnRhZylcbiAgICAgICAgICAgIDogaWdub3JlID09PSB2bm9kZS50YWdcbiAgICAgICAgfSlcbiAgICAgICkgJiZcbiAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZylcbiAgICApXG4gIH1cblxuICB2YXIgY3JlYXRpbmdFbG1JblZQcmUgPSAwO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAoXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG0sXG4gICAgbmVzdGVkLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXhcbiAgKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIFRoaXMgdm5vZGUgd2FzIHVzZWQgaW4gYSBwcmV2aW91cyByZW5kZXIhXG4gICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2VcbiAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb25cbiAgICAgIC8vIHJlZmVyZW5jZSBub2RlLiBJbnN0ZWFkLCB3ZSBjbG9uZSB0aGUgbm9kZSBvbi1kZW1hbmQgYmVmb3JlIGNyZWF0aW5nXG4gICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC5cbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHBhcmVudEVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVLZXlzIChjaGlsZHJlbikge1xuICAgIHZhciBzZWVuS2V5cyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2bm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleTtcbiAgICAgIGlmIChpc0RlZihrZXkpKSB7XG4gICAgICAgIGlmIChzZWVuS2V5c1trZXldKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIChcIkR1cGxpY2F0ZSBrZXlzIGRldGVjdGVkOiAnXCIgKyBrZXkgKyBcIicuIFRoaXMgbWF5IGNhdXNlIGFuIHVwZGF0ZSBlcnJvci5cIiksXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZCAobm9kZSwgb2xkQ2gsIHN0YXJ0LCBlbmQpIHtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdmFyIGMgPSBvbGRDaFtpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiBzYW1lVm5vZGUobm9kZSwgYykpIHsgcmV0dXJuIGkgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoVm5vZGUgKFxuICAgIG9sZFZub2RlLFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4LFxuICAgIHJlbW92ZU9ubHlcbiAgKSB7XG4gICAgaWYgKG9sZFZub2RlID09PSB2bm9kZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIGNsb25lIHJldXNlZCB2bm9kZVxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhlbG0sIG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkgJiYgaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSkge1xuICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbnZhciB2YWxpZERpdmlzaW9uQ2hhclJFID0gL1tcXHcpLitcXC1fJFxcXV0vO1xuXG5mdW5jdGlvbiBwYXJzZUZpbHRlcnMgKGV4cCkge1xuICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgdmFyIGluRG91YmxlID0gZmFsc2U7XG4gIHZhciBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7XG4gIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gIHZhciBjdXJseSA9IDA7XG4gIHZhciBzcXVhcmUgPSAwO1xuICB2YXIgcGFyZW4gPSAwO1xuICB2YXIgbGFzdEZpbHRlckluZGV4ID0gMDtcbiAgdmFyIGMsIHByZXYsIGksIGV4cHJlc3Npb24sIGZpbHRlcnM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgIHByZXYgPSBjO1xuICAgIGMgPSBleHAuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5Eb3VibGUpIHtcbiAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1QykgeyBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmXG4gICAgICBleHAuY2hhckNvZGVBdChpIC0gMSkgIT09IDB4N0MgJiZcbiAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICkge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hGaWx0ZXIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMHgyMjogaW5Eb3VibGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vIFwiXG4gICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgY2FzZSAweDYwOiBpblRlbXBsYXRlU3RyaW5nID0gdHJ1ZTsgYnJlYWsgLy8gYFxuICAgICAgICBjYXNlIDB4Mjg6IHBhcmVuKys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyAoXG4gICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgY2FzZSAweDVCOiBzcXVhcmUrKzsgYnJlYWsgICAgICAgICAgICAgICAgLy8gW1xuICAgICAgICBjYXNlIDB4NUQ6IHNxdWFyZS0tOyBicmVhayAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgY2FzZSAweDdEOiBjdXJseS0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICB2YXIgaiA9IGkgLSAxO1xuICAgICAgICB2YXIgcCA9ICh2b2lkIDApO1xuICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBwID0gZXhwLmNoYXJBdChqKTtcbiAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXAgfHwgIXZhbGlkRGl2aXNpb25DaGFyUkUudGVzdChwKSkge1xuICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICB9IGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xuICAgIHB1c2hGaWx0ZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkge1xuICAgIChmaWx0ZXJzIHx8IChmaWx0ZXJzID0gW10pKS5wdXNoKGV4cC5zbGljZShsYXN0RmlsdGVySW5kZXgsIGkpLnRyaW0oKSk7XG4gICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gIH1cblxuICBpZiAoZmlsdGVycykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHByZXNzaW9uID0gd3JhcEZpbHRlcihleHByZXNzaW9uLCBmaWx0ZXJzW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICB2YXIgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7XG4gIGlmIChpIDwgMCkge1xuICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIGZpbHRlciArIFwiXFxcIikoXCIgKyBleHAgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICB2YXIgYXJncyA9IGZpbHRlci5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIG5hbWUgKyBcIlxcXCIpKFwiICsgZXhwICsgKGFyZ3MgIT09ICcpJyA/ICcsJyArIGFyZ3MgOiBhcmdzKSlcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5mdW5jdGlvbiBiYXNlV2FybiAobXNnLCByYW5nZSkge1xuICBjb25zb2xlLmVycm9yKChcIltWdWUgY29tcGlsZXJdOiBcIiArIG1zZykpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uIChcbiAgbW9kdWxlcyxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIG1vZHVsZXNcbiAgICA/IG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtW2tleV07IH0pLmZpbHRlcihmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfSlcbiAgICA6IFtdXG59XG5cbmZ1bmN0aW9uIGFkZFByb3AgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICB2YXIgYXR0cnMgPSBkeW5hbWljXG4gICAgPyAoZWwuZHluYW1pY0F0dHJzIHx8IChlbC5keW5hbWljQXR0cnMgPSBbXSkpXG4gICAgOiAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKTtcbiAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuLy8gYWRkIGEgcmF3IGF0dHIgKHVzZSB0aGlzIGluIHByZVRyYW5zZm9ybXMpXG5mdW5jdGlvbiBhZGRSYXdBdHRyIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlKSB7XG4gIGVsLmF0dHJzTWFwW25hbWVdID0gdmFsdWU7XG4gIGVsLmF0dHJzTGlzdC5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9LCByYW5nZSkpO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgaXNEeW5hbWljQXJnLFxuICBtb2RpZmllcnMsXG4gIHJhbmdlXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd05hbWU6IHJhd05hbWUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGFyZzogYXJnLFxuICAgIGlzRHluYW1pY0FyZzogaXNEeW5hbWljQXJnLFxuICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllck1hcmtlciAoc3ltYm9sLCBuYW1lLCBkeW5hbWljKSB7XG4gIHJldHVybiBkeW5hbWljXG4gICAgPyAoXCJfcChcIiArIG5hbWUgKyBcIixcXFwiXCIgKyBzeW1ib2wgKyBcIlxcXCIpXCIpXG4gICAgOiBzeW1ib2wgKyBuYW1lIC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICBlbCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIG1vZGlmaWVycyxcbiAgaW1wb3J0YW50LFxuICB3YXJuLFxuICByYW5nZSxcbiAgZHluYW1pY1xuKSB7XG4gIG1vZGlmaWVycyA9IG1vZGlmaWVycyB8fCBlbXB0eU9iamVjdDtcbiAgLy8gd2FybiBwcmV2ZW50IGFuZCBwYXNzaXZlIG1vZGlmaWVyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuICYmXG4gICAgbW9kaWZpZXJzLnByZXZlbnQgJiYgbW9kaWZpZXJzLnBhc3NpdmVcbiAgKSB7XG4gICAgd2FybihcbiAgICAgICdwYXNzaXZlIGFuZCBwcmV2ZW50IGNhblxcJ3QgYmUgdXNlZCB0b2dldGhlci4gJyArXG4gICAgICAnUGFzc2l2ZSBoYW5kbGVyIGNhblxcJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cblxuICAvLyBub3JtYWxpemUgY2xpY2sucmlnaHQgYW5kIGNsaWNrLm1pZGRsZSBzaW5jZSB0aGV5IGRvbid0IGFjdHVhbGx5IGZpcmVcbiAgLy8gdGhpcyBpcyB0ZWNobmljYWxseSBicm93c2VyLXNwZWNpZmljLCBidXQgYXQgbGVhc3QgZm9yIG5vdyBicm93c2VycyBhcmVcbiAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gIGlmIChtb2RpZmllcnMucmlnaHQpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J2NvbnRleHRtZW51JzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ2NvbnRleHRtZW51JztcbiAgICAgIGRlbGV0ZSBtb2RpZmllcnMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1vZGlmaWVycy5taWRkbGUpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J21vdXNldXAnOihcIiArIG5hbWUgKyBcIilcIjtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIG5hbWUgPSAnbW91c2V1cCc7XG4gICAgfVxuICB9XG5cbiAgLy8gY2hlY2sgY2FwdHVyZSBtb2RpZmllclxuICBpZiAobW9kaWZpZXJzLmNhcHR1cmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLmNhcHR1cmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignIScsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIGlmIChtb2RpZmllcnMub25jZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCd+JywgbmFtZSwgZHluYW1pYyk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChtb2RpZmllcnMucGFzc2l2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMucGFzc2l2ZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCcmJywgbmFtZSwgZHluYW1pYyk7XG4gIH1cblxuICB2YXIgZXZlbnRzO1xuICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMubmF0aXZlO1xuICAgIGV2ZW50cyA9IGVsLm5hdGl2ZUV2ZW50cyB8fCAoZWwubmF0aXZlRXZlbnRzID0ge30pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50cyA9IGVsLmV2ZW50cyB8fCAoZWwuZXZlbnRzID0ge30pO1xuICB9XG5cbiAgdmFyIG5ld0hhbmRsZXIgPSByYW5nZVNldEl0ZW0oeyB2YWx1ZTogdmFsdWUudHJpbSgpLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKTtcbiAgaWYgKG1vZGlmaWVycyAhPT0gZW1wdHlPYmplY3QpIHtcbiAgICBuZXdIYW5kbGVyLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgfVxuXG4gIHZhciBoYW5kbGVycyA9IGV2ZW50c1tuYW1lXTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgIGltcG9ydGFudCA/IGhhbmRsZXJzLnVuc2hpZnQobmV3SGFuZGxlcikgOiBoYW5kbGVycy5wdXNoKG5ld0hhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGhhbmRsZXJzKSB7XG4gICAgZXZlbnRzW25hbWVdID0gaW1wb3J0YW50ID8gW25ld0hhbmRsZXIsIGhhbmRsZXJzXSA6IFtoYW5kbGVycywgbmV3SGFuZGxlcl07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW25hbWVdID0gbmV3SGFuZGxlcjtcbiAgfVxuXG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFJhd0JpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWVcbikge1xuICByZXR1cm4gZWwucmF3QXR0cnNNYXBbJzonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFsndi1iaW5kOicgKyBuYW1lXSB8fFxuICAgIGVsLnJhd0F0dHJzTWFwW25hbWVdXG59XG5cbmZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIGdldFN0YXRpY1xuKSB7XG4gIHZhciBkeW5hbWljVmFsdWUgPVxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gIGlmIChkeW5hbWljVmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKVxuICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICB2YXIgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG4vLyBub3RlOiB0aGlzIG9ubHkgcmVtb3ZlcyB0aGUgYXR0ciBmcm9tIHRoZSBBcnJheSAoYXR0cnNMaXN0KSBzbyB0aGF0IGl0XG4vLyBkb2Vzbid0IGdldCBwcm9jZXNzZWQgYnkgcHJvY2Vzc0F0dHJzLlxuLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4vLyBuZWVkZWQgZHVyaW5nIGNvZGVnZW4uXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJlbW92ZUZyb21NYXBcbikge1xuICB2YXIgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHJlbW92ZUZyb21NYXApIHtcbiAgICBkZWxldGUgZWwuYXR0cnNNYXBbbmFtZV07XG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGxpc3RbaV07XG4gICAgaWYgKG5hbWUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgIHJldHVybiBhdHRyXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJhbmdlU2V0SXRlbSAoXG4gIGl0ZW0sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgICB9XG4gICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICBpdGVtLmVuZCA9IHJhbmdlLmVuZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW1cbn1cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5mdW5jdGlvbiBnZW5Db21wb25lbnRNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG5cbiAgdmFyIGJhc2VWYWx1ZUV4cHJlc3Npb24gPSAnJCR2JztcbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9IGJhc2VWYWx1ZUV4cHJlc3Npb247XG4gIGlmICh0cmltKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID1cbiAgICAgIFwiKHR5cGVvZiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIiA9PT0gJ3N0cmluZydcIiArXG4gICAgICBcIj8gXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIudHJpbSgpXCIgK1xuICAgICAgXCI6IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIGlmIChudW1iZXIpIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cbiAgdmFyIGFzc2lnbm1lbnQgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICBlbC5tb2RlbCA9IHtcbiAgICB2YWx1ZTogKFwiKFwiICsgdmFsdWUgKyBcIilcIiksXG4gICAgZXhwcmVzc2lvbjogSlNPTi5zdHJpbmdpZnkodmFsdWUpLFxuICAgIGNhbGxiYWNrOiAoXCJmdW5jdGlvbiAoXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpIHtcIiArIGFzc2lnbm1lbnQgKyBcIn1cIilcbiAgfTtcbn1cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuZnVuY3Rpb24gZ2VuQXNzaWdubWVudENvZGUgKFxuICB2YWx1ZSxcbiAgYXNzaWdubWVudFxuKSB7XG4gIHZhciByZXMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcbiAgaWYgKHJlcy5rZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gKHZhbHVlICsgXCI9XCIgKyBhc3NpZ25tZW50KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCIkc2V0KFwiICsgKHJlcy5leHApICsgXCIsIFwiICsgKHJlcy5rZXkpICsgXCIsIFwiICsgYXNzaWdubWVudCArIFwiKVwiKVxuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYSB2LW1vZGVsIGV4cHJlc3Npb24gaW50byBhIGJhc2UgcGF0aCBhbmQgYSBmaW5hbCBrZXkgc2VnbWVudC5cbiAqIEhhbmRsZXMgYm90aCBkb3QtcGF0aCBhbmQgcG9zc2libGUgc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIFBvc3NpYmxlIGNhc2VzOlxuICpcbiAqIC0gdGVzdFxuICogLSB0ZXN0W2tleV1cbiAqIC0gdGVzdFt0ZXN0MVtrZXldXVxuICogLSB0ZXN0W1wiYVwiXVtrZXldXG4gKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFba2V5XV1cbiAqIC0gdGVzdC54eHguYVtcImFzYVwiXVt0ZXN0MVtrZXldXVxuICpcbiAqL1xuXG52YXIgbGVuLCBzdHIsIGNociwgaW5kZXgkMSwgZXhwcmVzc2lvblBvcywgZXhwcmVzc2lvbkVuZFBvcztcblxuXG5cbmZ1bmN0aW9uIHBhcnNlTW9kZWwgKHZhbCkge1xuICAvLyBGaXggaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS9wdWxsLzc3MzBcbiAgLy8gYWxsb3cgdi1tb2RlbD1cIm9iai52YWwgXCIgKHRyYWlsaW5nIHdoaXRlc3BhY2UpXG4gIHZhbCA9IHZhbC50cmltKCk7XG4gIGxlbiA9IHZhbC5sZW5ndGg7XG5cbiAgaWYgKHZhbC5pbmRleE9mKCdbJykgPCAwIHx8IHZhbC5sYXN0SW5kZXhPZignXScpIDwgbGVuIC0gMSkge1xuICAgIGluZGV4JDEgPSB2YWwubGFzdEluZGV4T2YoJy4nKTtcbiAgICBpZiAoaW5kZXgkMSA+IC0xKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBleHA6IHZhbC5zbGljZSgwLCBpbmRleCQxKSxcbiAgICAgICAga2V5OiAnXCInICsgdmFsLnNsaWNlKGluZGV4JDEgKyAxKSArICdcIidcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwsXG4gICAgICAgIGtleTogbnVsbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0ciA9IHZhbDtcbiAgaW5kZXgkMSA9IGV4cHJlc3Npb25Qb3MgPSBleHByZXNzaW9uRW5kUG9zID0gMDtcblxuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09IDB4NUIpIHtcbiAgICAgIHBhcnNlQnJhY2tldChjaHIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwOiB2YWwuc2xpY2UoMCwgZXhwcmVzc2lvblBvcyksXG4gICAga2V5OiB2YWwuc2xpY2UoZXhwcmVzc2lvblBvcyArIDEsIGV4cHJlc3Npb25FbmRQb3MpXG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dCAoKSB7XG4gIHJldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4JDEpXG59XG5cbmZ1bmN0aW9uIGVvZiAoKSB7XG4gIHJldHVybiBpbmRleCQxID49IGxlblxufVxuXG5mdW5jdGlvbiBpc1N0cmluZ1N0YXJ0IChjaHIpIHtcbiAgcmV0dXJuIGNociA9PT0gMHgyMiB8fCBjaHIgPT09IDB4Mjdcbn1cblxuZnVuY3Rpb24gcGFyc2VCcmFja2V0IChjaHIpIHtcbiAgdmFyIGluQnJhY2tldCA9IDE7XG4gIGV4cHJlc3Npb25Qb3MgPSBpbmRleCQxO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoY2hyID09PSAweDVCKSB7IGluQnJhY2tldCsrOyB9XG4gICAgaWYgKGNociA9PT0gMHg1RCkgeyBpbkJyYWNrZXQtLTsgfVxuICAgIGlmIChpbkJyYWNrZXQgPT09IDApIHtcbiAgICAgIGV4cHJlc3Npb25FbmRQb3MgPSBpbmRleCQxO1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VTdHJpbmcgKGNocikge1xuICB2YXIgc3RyaW5nUXVvdGUgPSBjaHI7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGNociA9PT0gc3RyaW5nUXVvdGUpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiQxO1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuZnVuY3Rpb24gbW9kZWwgKFxuICBlbCxcbiAgZGlyLFxuICBfd2FyblxuKSB7XG4gIHdhcm4kMSA9IF93YXJuO1xuICB2YXIgdmFsdWUgPSBkaXIudmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBkaXIubW9kaWZpZXJzO1xuICB2YXIgdGFnID0gZWwudGFnO1xuICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBpbnB1dHMgd2l0aCB0eXBlPVwiZmlsZVwiIGFyZSByZWFkIG9ubHkgYW5kIHNldHRpbmcgdGhlIGlucHV0J3NcbiAgICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHR5cGU9XFxcImZpbGVcXFwiPjpcXG5cIiArXG4gICAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgIGdlblNlbGVjdChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIGdlblJhZGlvTW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICBnZW5EZWZhdWx0TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKCFjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4kMShcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgXCJ2LW1vZGVsIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBlbGVtZW50IHR5cGUuIFwiICtcbiAgICAgICdJZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBjb250ZW50ZWRpdGFibGUsIGl0XFwncyByZWNvbW1lbmRlZCB0byAnICtcbiAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgKTtcbiAgfVxuXG4gIC8vIGVuc3VyZSBydW50aW1lIGRpcmVjdGl2ZSBtZXRhZGF0YVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBnZW5DaGVja2JveE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YXIgdHJ1ZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHJ1ZS12YWx1ZScpIHx8ICd0cnVlJztcbiAgdmFyIGZhbHNlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdmYWxzZS12YWx1ZScpIHx8ICdmYWxzZSc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJyxcbiAgICBcIkFycmF5LmlzQXJyYXkoXCIgKyB2YWx1ZSArIFwiKVwiICtcbiAgICBcIj9faShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIik+LTFcIiArIChcbiAgICAgIHRydWVWYWx1ZUJpbmRpbmcgPT09ICd0cnVlJ1xuICAgICAgICA/IChcIjooXCIgKyB2YWx1ZSArIFwiKVwiKVxuICAgICAgICA6IChcIjpfcShcIiArIHZhbHVlICsgXCIsXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpXCIpXG4gICAgKVxuICApO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJyxcbiAgICBcInZhciAkJGE9XCIgKyB2YWx1ZSArIFwiLFwiICtcbiAgICAgICAgJyQkZWw9JGV2ZW50LnRhcmdldCwnICtcbiAgICAgICAgXCIkJGM9JCRlbC5jaGVja2VkPyhcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIik6KFwiICsgZmFsc2VWYWx1ZUJpbmRpbmcgKyBcIik7XCIgK1xuICAgICdpZihBcnJheS5pc0FycmF5KCQkYSkpeycgK1xuICAgICAgXCJ2YXIgJCR2PVwiICsgKG51bWJlciA/ICdfbignICsgdmFsdWVCaW5kaW5nICsgJyknIDogdmFsdWVCaW5kaW5nKSArIFwiLFwiICtcbiAgICAgICAgICAnJCRpPV9pKCQkYSwkJHYpOycgK1xuICAgICAgXCJpZigkJGVsLmNoZWNrZWQpeyQkaTwwJiYoXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuY29uY2F0KFskJHZdKScpKSArIFwiKX1cIiArXG4gICAgICBcImVsc2V7JCRpPi0xJiYoXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKScpKSArIFwiKX1cIiArXG4gICAgXCJ9ZWxzZXtcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYycpKSArIFwifVwiLFxuICAgIG51bGwsIHRydWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2VuUmFkaW9Nb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFsdWVCaW5kaW5nID0gbnVtYmVyID8gKFwiX24oXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikgOiB2YWx1ZUJpbmRpbmc7XG4gIGFkZFByb3AoZWwsICdjaGVja2VkJywgKFwiX3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUJpbmRpbmcpLCBudWxsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2VuU2VsZWN0IChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciBzZWxlY3RlZFZhbCA9IFwiQXJyYXkucHJvdG90eXBlLmZpbHRlclwiICtcbiAgICBcIi5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pXCIgK1xuICAgIFwiLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXFxcIl92YWx1ZVxcXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAobnVtYmVyID8gJ19uKHZhbCknIDogJ3ZhbCcpICsgXCJ9KVwiO1xuXG4gIHZhciBhc3NpZ25tZW50ID0gJyRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXSc7XG4gIHZhciBjb2RlID0gXCJ2YXIgJCRzZWxlY3RlZFZhbCA9IFwiICsgc2VsZWN0ZWRWYWwgKyBcIjtcIjtcbiAgY29kZSA9IGNvZGUgKyBcIiBcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYXNzaWdubWVudCkpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgY29kZSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIC8vIHdhcm4gaWYgdi1iaW5kOnZhbHVlIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWxcbiAgLy8gZXhjZXB0IGZvciBpbnB1dHMgd2l0aCB2LWJpbmQ6dHlwZVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciB2YWx1ZSQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp2YWx1ZSddIHx8IGVsLmF0dHJzTWFwWyc6dmFsdWUnXTtcbiAgICB2YXIgdHlwZUJpbmRpbmcgPSBlbC5hdHRyc01hcFsndi1iaW5kOnR5cGUnXSB8fCBlbC5hdHRyc01hcFsnOnR5cGUnXTtcbiAgICBpZiAodmFsdWUkMSAmJiAhdHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBiaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp2YWx1ZSddID8gJ3YtYmluZDp2YWx1ZScgOiAnOnZhbHVlJztcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYmluZGluZyArIFwiPVxcXCJcIiArIHZhbHVlJDEgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggdi1tb2RlbCBvbiB0aGUgc2FtZSBlbGVtZW50IFwiICtcbiAgICAgICAgJ2JlY2F1c2UgdGhlIGxhdHRlciBhbHJlYWR5IGV4cGFuZHMgdG8gYSB2YWx1ZSBiaW5kaW5nIGludGVybmFsbHknLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFtiaW5kaW5nXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbGF6eSA9IHJlZi5sYXp5O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgdmFyIG5lZWRDb21wb3NpdGlvbkd1YXJkID0gIWxhenkgJiYgdHlwZSAhPT0gJ3JhbmdlJztcbiAgdmFyIGV2ZW50ID0gbGF6eVxuICAgID8gJ2NoYW5nZSdcbiAgICA6IHR5cGUgPT09ICdyYW5nZSdcbiAgICAgID8gUkFOR0VfVE9LRU5cbiAgICAgIDogJ2lucHV0JztcblxuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gJyRldmVudC50YXJnZXQudmFsdWUnO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKClcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcbiAgaWYgKG5lZWRDb21wb3NpdGlvbkd1YXJkKSB7XG4gICAgY29kZSA9IFwiaWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuO1wiICsgY29kZTtcbiAgfVxuXG4gIGFkZFByb3AoZWwsICd2YWx1ZScsIChcIihcIiArIHZhbHVlICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgZXZlbnQsIGNvZGUsIG51bGwsIHRydWUpO1xuICBpZiAodHJpbSB8fCBudW1iZXIpIHtcbiAgICBhZGRIYW5kbGVyKGVsLCAnYmx1cicsICckZm9yY2VVcGRhdGUoKScpO1xuICB9XG59XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gIzk0NDY6IEZpcmVmb3ggPD0gNTMgKGluIHBhcnRpY3VsYXIsIEVTUiA1MikgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXBcbi8vIGltcGxlbWVudGF0aW9uIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc29cbi8vIHNhZmUgdG8gZXhjbHVkZS5cbnZhciB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyXG4gIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsXG4gIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICBpZiAodXNlTWljcm90YXNrRml4KSB7XG4gICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgIHZhciBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IG9yaWdpbmFsLl93cmFwcGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cbiAgICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluXG4gICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHxcbiAgICAgICAgLy8gZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgaGFuZGxlciBhdHRhY2htZW50XG4gICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgIC8vIGJhaWwgZm9yIGVudmlyb25tZW50cyB0aGF0IGhhdmUgYnVnZ3kgZXZlbnQudGltZVN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4gICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICBlLnRpbWVTdGFtcCA8PSAwIHx8XG4gICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcbiAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgY3JlYXRlT25jZUhhbmRsZXIkMSwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG52YXIgc3ZnQ29udGFpbmVyO1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWxtLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyAmJiBpc1NWRyhlbG0udGFnTmFtZSkgJiYgaXNVbmRlZihlbG0uaW5uZXJIVE1MKSkge1xuICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGlubmVySFRNTCBmb3IgU1ZHIGVsZW1lbnRzXG4gICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzdmdDb250YWluZXIuaW5uZXJIVE1MID0gXCI8c3ZnPlwiICsgY3VyICsgXCI8L3N2Zz5cIjtcbiAgICAgIHZhciBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIHNraXAgdGhlIHVwZGF0ZSBpZiBvbGQgYW5kIG5ldyBWRE9NIHN0YXRlIGlzIHRoZSBzYW1lLlxuICAgICAgLy8gYHZhbHVlYCBpcyBoYW5kbGVkIHNlcGFyYXRlbHkgYmVjYXVzZSB0aGUgRE9NIHZhbHVlIG1heSBiZSB0ZW1wb3JhcmlseVxuICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgIC8vIFRoaXMgICM0NTIxIGJ5IHNraXBwaW5nIHRoZSB1bm5lY2VzYXJyeSBgY2hlY2tlZGAgdXBkYXRlLlxuICAgICAgY3VyICE9PSBvbGRQcm9wc1trZXldXG4gICAgKSB7XG4gICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93XG4gICAgICAvLyBlLmcuIGB2YWx1ZWAgb24gPHByb2dyZXNzPiB3LyBub24tZmluaXRlIHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKG5hbWUpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciBlbXB0eVN0eWxlO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gZW1wdHlTdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICBpZiAobmFtZSBpbiBlbXB0eVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkRGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gIC8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgd2FudHNcbiAgLy8gdG8gbXV0YXRlIGl0LlxuICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICA/IGV4dGVuZCh7fSwgc3R5bGUpXG4gICAgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbnZhciB3aGl0ZXNwYWNlUkUgPSAvXFxzKy87XG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xuLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3Rpbmdcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzc1xuICAgID8gYXBwZWFyQ2xhc3NcbiAgICA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzXG4gICAgPyBhcHBlYXJUb0NsYXNzXG4gICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKVxuICAgIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpXG4gICAgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodGhpcy5faGFzTW92ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpbkJyb3dzZXIpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG52YXIgZGVmYXVsdFRhZ1JFID0gL1xce1xceygoPzoufFxccj9cXG4pKz8pXFx9XFx9L2c7XG52YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xcXVxcL1xcXFxdL2c7XG5cbnZhciBidWlsZFJlZ2V4ID0gY2FjaGVkKGZ1bmN0aW9uIChkZWxpbWl0ZXJzKSB7XG4gIHZhciBvcGVuID0gZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgdmFyIGNsb3NlID0gZGVsaW1pdGVyc1sxXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAob3BlbiArICcoKD86LnxcXFxcbikrPyknICsgY2xvc2UsICdnJylcbn0pO1xuXG5cblxuZnVuY3Rpb24gcGFyc2VUZXh0IChcbiAgdGV4dCxcbiAgZGVsaW1pdGVyc1xuKSB7XG4gIHZhciB0YWdSRSA9IGRlbGltaXRlcnMgPyBidWlsZFJlZ2V4KGRlbGltaXRlcnMpIDogZGVmYXVsdFRhZ1JFO1xuICBpZiAoIXRhZ1JFLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciByYXdUb2tlbnMgPSBbXTtcbiAgdmFyIGxhc3RJbmRleCA9IHRhZ1JFLmxhc3RJbmRleCA9IDA7XG4gIHZhciBtYXRjaCwgaW5kZXgsIHRva2VuVmFsdWU7XG4gIHdoaWxlICgobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSkge1xuICAgIGluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgLy8gcHVzaCB0ZXh0IHRva2VuXG4gICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgsIGluZGV4KSk7XG4gICAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gICAgfVxuICAgIC8vIHRhZyB0b2tlblxuICAgIHZhciBleHAgPSBwYXJzZUZpbHRlcnMobWF0Y2hbMV0udHJpbSgpKTtcbiAgICB0b2tlbnMucHVzaCgoXCJfcyhcIiArIGV4cCArIFwiKVwiKSk7XG4gICAgcmF3VG9rZW5zLnB1c2goeyAnQGJpbmRpbmcnOiBleHAgfSk7XG4gICAgbGFzdEluZGV4ID0gaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gIH1cbiAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4KSk7XG4gICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZXhwcmVzc2lvbjogdG9rZW5zLmpvaW4oJysnKSxcbiAgICB0b2tlbnM6IHJhd1Rva2Vuc1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlIChlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY0NsYXNzID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2NsYXNzJyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG4gICAgdmFyIHJlcyA9IHBhcnNlVGV4dChzdGF0aWNDbGFzcywgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICBpZiAocmVzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImNsYXNzPVxcXCJcIiArIHN0YXRpY0NsYXNzICsgXCJcXFwiOiBcIiArXG4gICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBjbGFzcz1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmNsYXNzPVwidmFsXCI+LicsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWydjbGFzcyddXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhdGljQ2xhc3MpIHtcbiAgICBlbC5zdGF0aWNDbGFzcyA9IEpTT04uc3RyaW5naWZ5KHN0YXRpY0NsYXNzKTtcbiAgfVxuICB2YXIgY2xhc3NCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdjbGFzcycsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChjbGFzc0JpbmRpbmcpIHtcbiAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY0NsYXNzKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5jbGFzc0JpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBrbGFzcyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGE6IGdlbkRhdGFcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlJDEgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgaWYgKHN0YXRpY1N0eWxlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljU3R5bGUsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJzdHlsZT1cXFwiXCIgKyBzdGF0aWNTdHlsZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgc3R5bGU9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpzdHlsZT1cInZhbFwiPi4nLFxuICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydzdHlsZSddXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLnN0YXRpY1N0eWxlID0gSlNPTi5zdHJpbmdpZnkocGFyc2VTdHlsZVRleHQoc3RhdGljU3R5bGUpKTtcbiAgfVxuXG4gIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDEgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuc3R5bGVCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcInN0eWxlOihcIiArIChlbC5zdHlsZUJpbmRpbmcpICsgXCIpLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBzdHlsZSQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQxXG59O1xuXG4vKiAgKi9cblxudmFyIGRlY29kZXI7XG5cbnZhciBoZSA9IHtcbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGUgKGh0bWwpIHtcbiAgICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkZWNvZGVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIGRlY29kZXIudGV4dENvbnRlbnRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBpc1VuYXJ5VGFnID0gbWFrZU1hcChcbiAgJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLCcgK1xuICAnbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInXG4pO1xuXG4vLyBFbGVtZW50cyB0aGF0IHlvdSBjYW4sIGludGVudGlvbmFsbHksIGxlYXZlIG9wZW5cbi8vIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcbnZhciBjYW5CZUxlZnRPcGVuVGFnID0gbWFrZU1hcChcbiAgJ2NvbGdyb3VwLGRkLGR0LGxpLG9wdGlvbnMscCx0ZCx0Zm9vdCx0aCx0aGVhZCx0cixzb3VyY2UnXG4pO1xuXG4vLyBIVE1MNSB0YWdzIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbCNlbGVtZW50cy0zXG4vLyBQaHJhc2luZyBDb250ZW50IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RvbS5odG1sI3BocmFzaW5nLWNvbnRlbnRcbnZhciBpc05vblBocmFzaW5nVGFnID0gbWFrZU1hcChcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSwnICtcbiAgJ2gxLGgyLGgzLGg0LGg1LGg2LGhlYWQsaGVhZGVyLGhncm91cCxocixodG1sLGxlZ2VuZCxsaSxtZW51aXRlbSxtZXRhLCcgK1xuICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuICAndGl0bGUsdHIsdHJhY2snXG4pO1xuXG4vKipcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGl0J3MgbW9zdGx5IHZlbmRvciBjb2RlLlxuICovXG5cbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xudmFyIGF0dHJpYnV0ZSA9IC9eXFxzKihbXlxcc1wiJzw+XFwvPV0rKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xudmFyIGR5bmFtaWNBcmdBdHRyaWJ1dGUgPSAvXlxccyooKD86di1bXFx3LV0rOnxAfDp8IylcXFtbXj1dK1xcXVteXFxzXCInPD5cXC89XSopKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG52YXIgbmNuYW1lID0gXCJbYS16QS1aX11bXFxcXC1cXFxcLjAtOV9hLXpBLVpcIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qXCI7XG52YXIgcW5hbWVDYXB0dXJlID0gXCIoKD86XCIgKyBuY25hbWUgKyBcIlxcXFw6KT9cIiArIG5jbmFtZSArIFwiKVwiO1xudmFyIHN0YXJ0VGFnT3BlbiA9IG5ldyBSZWdFeHAoKFwiXjxcIiArIHFuYW1lQ2FwdHVyZSkpO1xudmFyIHN0YXJ0VGFnQ2xvc2UgPSAvXlxccyooXFwvPyk+LztcbnZhciBlbmRUYWcgPSBuZXcgUmVnRXhwKChcIl48XFxcXC9cIiArIHFuYW1lQ2FwdHVyZSArIFwiW14+XSo+XCIpKTtcbnZhciBkb2N0eXBlID0gL148IURPQ1RZUEUgW14+XSs+L2k7XG4vLyAjNzI5ODogZXNjYXBlIC0gdG8gYXZvaWQgYmVpbmcgcGFzZWQgYXMgSFRNTCBjb21tZW50IHdoZW4gaW5saW5lZCBpbiBwYWdlXG52YXIgY29tbWVudCA9IC9ePCFcXC0tLztcbnZhciBjb25kaXRpb25hbENvbW1lbnQgPSAvXjwhXFxbLztcblxuLy8gU3BlY2lhbCBFbGVtZW50cyAoY2FuIGNvbnRhaW4gYW55dGhpbmcpXG52YXIgaXNQbGFpblRleHRFbGVtZW50ID0gbWFrZU1hcCgnc2NyaXB0LHN0eWxlLHRleHRhcmVhJywgdHJ1ZSk7XG52YXIgcmVDYWNoZSA9IHt9O1xuXG52YXIgZGVjb2RpbmdNYXAgPSB7XG4gICcmbHQ7JzogJzwnLFxuICAnJmd0Oyc6ICc+JyxcbiAgJyZxdW90Oyc6ICdcIicsXG4gICcmYW1wOyc6ICcmJyxcbiAgJyYjMTA7JzogJ1xcbicsXG4gICcmIzk7JzogJ1xcdCcsXG4gICcmIzM5Oyc6IFwiJ1wiXG59O1xudmFyIGVuY29kZWRBdHRyID0gLyYoPzpsdHxndHxxdW90fGFtcHwjMzkpOy9nO1xudmFyIGVuY29kZWRBdHRyV2l0aE5ld0xpbmVzID0gLyYoPzpsdHxndHxxdW90fGFtcHwjMzl8IzEwfCM5KTsvZztcblxuLy8gIzU5OTJcbnZhciBpc0lnbm9yZU5ld2xpbmVUYWcgPSBtYWtlTWFwKCdwcmUsdGV4dGFyZWEnLCB0cnVlKTtcbnZhciBzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUgPSBmdW5jdGlvbiAodGFnLCBodG1sKSB7IHJldHVybiB0YWcgJiYgaXNJZ25vcmVOZXdsaW5lVGFnKHRhZykgJiYgaHRtbFswXSA9PT0gJ1xcbic7IH07XG5cbmZ1bmN0aW9uIGRlY29kZUF0dHIgKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcykge1xuICB2YXIgcmUgPSBzaG91bGREZWNvZGVOZXdsaW5lcyA/IGVuY29kZWRBdHRyV2l0aE5ld0xpbmVzIDogZW5jb2RlZEF0dHI7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKHJlLCBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIGRlY29kaW5nTWFwW21hdGNoXTsgfSlcbn1cblxuZnVuY3Rpb24gcGFyc2VIVE1MIChodG1sLCBvcHRpb25zKSB7XG4gIHZhciBzdGFjayA9IFtdO1xuICB2YXIgZXhwZWN0SFRNTCA9IG9wdGlvbnMuZXhwZWN0SFRNTDtcbiAgdmFyIGlzVW5hcnlUYWckJDEgPSBvcHRpb25zLmlzVW5hcnlUYWcgfHwgbm87XG4gIHZhciBjYW5CZUxlZnRPcGVuVGFnJCQxID0gb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnIHx8IG5vO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdCwgbGFzdFRhZztcbiAgd2hpbGUgKGh0bWwpIHtcbiAgICBsYXN0ID0gaHRtbDtcbiAgICAvLyBNYWtlIHN1cmUgd2UncmUgbm90IGluIGEgcGxhaW50ZXh0IGNvbnRlbnQgZWxlbWVudCBsaWtlIHNjcmlwdC9zdHlsZVxuICAgIGlmICghbGFzdFRhZyB8fCAhaXNQbGFpblRleHRFbGVtZW50KGxhc3RUYWcpKSB7XG4gICAgICB2YXIgdGV4dEVuZCA9IGh0bWwuaW5kZXhPZignPCcpO1xuICAgICAgaWYgKHRleHRFbmQgPT09IDApIHtcbiAgICAgICAgLy8gQ29tbWVudDpcbiAgICAgICAgaWYgKGNvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIHZhciBjb21tZW50RW5kID0gaHRtbC5pbmRleE9mKCctLT4nKTtcblxuICAgICAgICAgIGlmIChjb21tZW50RW5kID49IDApIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3VsZEtlZXBDb21tZW50KSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMuY29tbWVudChodG1sLnN1YnN0cmluZyg0LCBjb21tZW50RW5kKSwgaW5kZXgsIGluZGV4ICsgY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWR2YW5jZShjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29uZGl0aW9uYWxfY29tbWVudCNEb3dubGV2ZWwtcmV2ZWFsZWRfY29uZGl0aW9uYWxfY29tbWVudFxuICAgICAgICBpZiAoY29uZGl0aW9uYWxDb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29uZGl0aW9uYWxFbmQgPSBodG1sLmluZGV4T2YoJ10+Jyk7XG5cbiAgICAgICAgICBpZiAoY29uZGl0aW9uYWxFbmQgPj0gMCkge1xuICAgICAgICAgICAgYWR2YW5jZShjb25kaXRpb25hbEVuZCArIDIpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEb2N0eXBlOlxuICAgICAgICB2YXIgZG9jdHlwZU1hdGNoID0gaHRtbC5tYXRjaChkb2N0eXBlKTtcbiAgICAgICAgaWYgKGRvY3R5cGVNYXRjaCkge1xuICAgICAgICAgIGFkdmFuY2UoZG9jdHlwZU1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuZCB0YWc6XG4gICAgICAgIHZhciBlbmRUYWdNYXRjaCA9IGh0bWwubWF0Y2goZW5kVGFnKTtcbiAgICAgICAgaWYgKGVuZFRhZ01hdGNoKSB7XG4gICAgICAgICAgdmFyIGN1ckluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgYWR2YW5jZShlbmRUYWdNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIHBhcnNlRW5kVGFnKGVuZFRhZ01hdGNoWzFdLCBjdXJJbmRleCwgaW5kZXgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGFydCB0YWc6XG4gICAgICAgIHZhciBzdGFydFRhZ01hdGNoID0gcGFyc2VTdGFydFRhZygpO1xuICAgICAgICBpZiAoc3RhcnRUYWdNYXRjaCkge1xuICAgICAgICAgIGhhbmRsZVN0YXJ0VGFnKHN0YXJ0VGFnTWF0Y2gpO1xuICAgICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhcnRUYWdNYXRjaC50YWdOYW1lLCBodG1sKSkge1xuICAgICAgICAgICAgYWR2YW5jZSgxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdGV4dCA9ICh2b2lkIDApLCByZXN0ID0gKHZvaWQgMCksIG5leHQgPSAodm9pZCAwKTtcbiAgICAgIGlmICh0ZXh0RW5kID49IDApIHtcbiAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICAhZW5kVGFnLnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhc3RhcnRUYWdPcGVuLnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhY29tbWVudC50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIWNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KHJlc3QpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIDwgaW4gcGxhaW4gdGV4dCwgYmUgZm9yZ2l2aW5nIGFuZCB0cmVhdCBpdCBhcyB0ZXh0XG4gICAgICAgICAgbmV4dCA9IHJlc3QuaW5kZXhPZignPCcsIDEpO1xuICAgICAgICAgIGlmIChuZXh0IDwgMCkgeyBicmVhayB9XG4gICAgICAgICAgdGV4dEVuZCArPSBuZXh0O1xuICAgICAgICAgIHJlc3QgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB9XG4gICAgICAgIHRleHQgPSBodG1sLnN1YnN0cmluZygwLCB0ZXh0RW5kKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHRFbmQgPCAwKSB7XG4gICAgICAgIHRleHQgPSBodG1sO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICBhZHZhbmNlKHRleHQubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuY2hhcnMgJiYgdGV4dCkge1xuICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQsIGluZGV4IC0gdGV4dC5sZW5ndGgsIGluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGVuZFRhZ0xlbmd0aCA9IDA7XG4gICAgICB2YXIgc3RhY2tlZFRhZyA9IGxhc3RUYWcudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciByZVN0YWNrZWRUYWcgPSByZUNhY2hlW3N0YWNrZWRUYWddIHx8IChyZUNhY2hlW3N0YWNrZWRUYWddID0gbmV3IFJlZ0V4cCgnKFtcXFxcc1xcXFxTXSo/KSg8LycgKyBzdGFja2VkVGFnICsgJ1tePl0qPiknLCAnaScpKTtcbiAgICAgIHZhciByZXN0JDEgPSBodG1sLnJlcGxhY2UocmVTdGFja2VkVGFnLCBmdW5jdGlvbiAoYWxsLCB0ZXh0LCBlbmRUYWcpIHtcbiAgICAgICAgZW5kVGFnTGVuZ3RoID0gZW5kVGFnLmxlbmd0aDtcbiAgICAgICAgaWYgKCFpc1BsYWluVGV4dEVsZW1lbnQoc3RhY2tlZFRhZykgJiYgc3RhY2tlZFRhZyAhPT0gJ25vc2NyaXB0Jykge1xuICAgICAgICAgIHRleHQgPSB0ZXh0XG4gICAgICAgICAgICAucmVwbGFjZSgvPCFcXC0tKFtcXHNcXFNdKj8pLS0+L2csICckMScpIC8vICM3Mjk4XG4gICAgICAgICAgICAucmVwbGFjZSgvPCFcXFtDREFUQVxcWyhbXFxzXFxTXSo/KV1dPi9nLCAnJDEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YWNrZWRUYWcsIHRleHQpKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnMpIHtcbiAgICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJ1xuICAgICAgfSk7XG4gICAgICBpbmRleCArPSBodG1sLmxlbmd0aCAtIHJlc3QkMS5sZW5ndGg7XG4gICAgICBodG1sID0gcmVzdCQxO1xuICAgICAgcGFyc2VFbmRUYWcoc3RhY2tlZFRhZywgaW5kZXggLSBlbmRUYWdMZW5ndGgsIGluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAoaHRtbCA9PT0gbGFzdCkge1xuICAgICAgb3B0aW9ucy5jaGFycyAmJiBvcHRpb25zLmNoYXJzKGh0bWwpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0YWNrLmxlbmd0aCAmJiBvcHRpb25zLndhcm4pIHtcbiAgICAgICAgb3B0aW9ucy53YXJuKChcIk1hbC1mb3JtYXR0ZWQgdGFnIGF0IGVuZCBvZiB0ZW1wbGF0ZTogXFxcIlwiICsgaHRtbCArIFwiXFxcIlwiKSwgeyBzdGFydDogaW5kZXggKyBodG1sLmxlbmd0aCB9KTtcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gQ2xlYW4gdXAgYW55IHJlbWFpbmluZyB0YWdzXG4gIHBhcnNlRW5kVGFnKCk7XG5cbiAgZnVuY3Rpb24gYWR2YW5jZSAobikge1xuICAgIGluZGV4ICs9IG47XG4gICAgaHRtbCA9IGh0bWwuc3Vic3RyaW5nKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTdGFydFRhZyAoKSB7XG4gICAgdmFyIHN0YXJ0ID0gaHRtbC5tYXRjaChzdGFydFRhZ09wZW4pO1xuICAgIGlmIChzdGFydCkge1xuICAgICAgdmFyIG1hdGNoID0ge1xuICAgICAgICB0YWdOYW1lOiBzdGFydFsxXSxcbiAgICAgICAgYXR0cnM6IFtdLFxuICAgICAgICBzdGFydDogaW5kZXhcbiAgICAgIH07XG4gICAgICBhZHZhbmNlKHN0YXJ0WzBdLmxlbmd0aCk7XG4gICAgICB2YXIgZW5kLCBhdHRyO1xuICAgICAgd2hpbGUgKCEoZW5kID0gaHRtbC5tYXRjaChzdGFydFRhZ0Nsb3NlKSkgJiYgKGF0dHIgPSBodG1sLm1hdGNoKGR5bmFtaWNBcmdBdHRyaWJ1dGUpIHx8IGh0bWwubWF0Y2goYXR0cmlidXRlKSkpIHtcbiAgICAgICAgYXR0ci5zdGFydCA9IGluZGV4O1xuICAgICAgICBhZHZhbmNlKGF0dHJbMF0ubGVuZ3RoKTtcbiAgICAgICAgYXR0ci5lbmQgPSBpbmRleDtcbiAgICAgICAgbWF0Y2guYXR0cnMucHVzaChhdHRyKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgbWF0Y2gudW5hcnlTbGFzaCA9IGVuZFsxXTtcbiAgICAgICAgYWR2YW5jZShlbmRbMF0ubGVuZ3RoKTtcbiAgICAgICAgbWF0Y2guZW5kID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBtYXRjaFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0VGFnIChtYXRjaCkge1xuICAgIHZhciB0YWdOYW1lID0gbWF0Y2gudGFnTmFtZTtcbiAgICB2YXIgdW5hcnlTbGFzaCA9IG1hdGNoLnVuYXJ5U2xhc2g7XG5cbiAgICBpZiAoZXhwZWN0SFRNTCkge1xuICAgICAgaWYgKGxhc3RUYWcgPT09ICdwJyAmJiBpc05vblBocmFzaW5nVGFnKHRhZ05hbWUpKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKGxhc3RUYWcpO1xuICAgICAgfVxuICAgICAgaWYgKGNhbkJlTGVmdE9wZW5UYWckJDEodGFnTmFtZSkgJiYgbGFzdFRhZyA9PT0gdGFnTmFtZSkge1xuICAgICAgICBwYXJzZUVuZFRhZyh0YWdOYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5hcnkgPSBpc1VuYXJ5VGFnJCQxKHRhZ05hbWUpIHx8ICEhdW5hcnlTbGFzaDtcblxuICAgIHZhciBsID0gbWF0Y2guYXR0cnMubGVuZ3RoO1xuICAgIHZhciBhdHRycyA9IG5ldyBBcnJheShsKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFyZ3MgPSBtYXRjaC5hdHRyc1tpXTtcbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3NbM10gfHwgYXJnc1s0XSB8fCBhcmdzWzVdIHx8ICcnO1xuICAgICAgdmFyIHNob3VsZERlY29kZU5ld2xpbmVzID0gdGFnTmFtZSA9PT0gJ2EnICYmIGFyZ3NbMV0gPT09ICdocmVmJ1xuICAgICAgICA/IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmXG4gICAgICAgIDogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lcztcbiAgICAgIGF0dHJzW2ldID0ge1xuICAgICAgICBuYW1lOiBhcmdzWzFdLFxuICAgICAgICB2YWx1ZTogZGVjb2RlQXR0cih2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpXG4gICAgICB9O1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGFyZ3Muc3RhcnQgKyBhcmdzWzBdLm1hdGNoKC9eXFxzKi8pLmxlbmd0aDtcbiAgICAgICAgYXR0cnNbaV0uZW5kID0gYXJncy5lbmQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF1bmFyeSkge1xuICAgICAgc3RhY2sucHVzaCh7IHRhZzogdGFnTmFtZSwgbG93ZXJDYXNlZFRhZzogdGFnTmFtZS50b0xvd2VyQ2FzZSgpLCBhdHRyczogYXR0cnMsIHN0YXJ0OiBtYXRjaC5zdGFydCwgZW5kOiBtYXRjaC5lbmQgfSk7XG4gICAgICBsYXN0VGFnID0gdGFnTmFtZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBhdHRycywgdW5hcnksIG1hdGNoLnN0YXJ0LCBtYXRjaC5lbmQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRW5kVGFnICh0YWdOYW1lLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHBvcywgbG93ZXJDYXNlZFRhZ05hbWU7XG4gICAgaWYgKHN0YXJ0ID09IG51bGwpIHsgc3RhcnQgPSBpbmRleDsgfVxuICAgIGlmIChlbmQgPT0gbnVsbCkgeyBlbmQgPSBpbmRleDsgfVxuXG4gICAgLy8gRmluZCB0aGUgY2xvc2VzdCBvcGVuZWQgdGFnIG9mIHRoZSBzYW1lIHR5cGVcbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgbG93ZXJDYXNlZFRhZ05hbWUgPSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBmb3IgKHBvcyA9IHN0YWNrLmxlbmd0aCAtIDE7IHBvcyA+PSAwOyBwb3MtLSkge1xuICAgICAgICBpZiAoc3RhY2tbcG9zXS5sb3dlckNhc2VkVGFnID09PSBsb3dlckNhc2VkVGFnTmFtZSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm8gdGFnIG5hbWUgaXMgcHJvdmlkZWQsIGNsZWFuIHNob3BcbiAgICAgIHBvcyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAvLyBDbG9zZSBhbGwgdGhlIG9wZW4gZWxlbWVudHMsIHVwIHRoZSBzdGFja1xuICAgICAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gcG9zOyBpLS0pIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAoaSA+IHBvcyB8fCAhdGFnTmFtZSkgJiZcbiAgICAgICAgICBvcHRpb25zLndhcm5cbiAgICAgICAgKSB7XG4gICAgICAgICAgb3B0aW9ucy53YXJuKFxuICAgICAgICAgICAgKFwidGFnIDxcIiArIChzdGFja1tpXS50YWcpICsgXCI+IGhhcyBubyBtYXRjaGluZyBlbmQgdGFnLlwiKSxcbiAgICAgICAgICAgIHsgc3RhcnQ6IHN0YWNrW2ldLnN0YXJ0LCBlbmQ6IHN0YWNrW2ldLmVuZCB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5lbmQpIHtcbiAgICAgICAgICBvcHRpb25zLmVuZChzdGFja1tpXS50YWcsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgb3BlbiBlbGVtZW50cyBmcm9tIHRoZSBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoID0gcG9zO1xuICAgICAgbGFzdFRhZyA9IHBvcyAmJiBzdGFja1twb3MgLSAxXS50YWc7XG4gICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ2JyJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgdHJ1ZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ3AnKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCBmYWxzZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5lbmQpIHtcbiAgICAgICAgb3B0aW9ucy5lbmQodGFnTmFtZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgb25SRSA9IC9eQHxedi1vbjovO1xudmFyIGRpclJFID0gL152LXxeQHxeOi87XG52YXIgZm9yQWxpYXNSRSA9IC8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLztcbnZhciBmb3JJdGVyYXRvclJFID0gLywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvO1xudmFyIHN0cmlwUGFyZW5zUkUgPSAvXlxcKHxcXCkkL2c7XG52YXIgZHluYW1pY0FyZ1JFID0gL15cXFsuKlxcXSQvO1xuXG52YXIgYXJnUkUgPSAvOiguKikkLztcbnZhciBiaW5kUkUgPSAvXjp8XlxcLnxedi1iaW5kOi87XG52YXIgbW9kaWZpZXJSRSA9IC9cXC5bXi5cXF1dKyg/PVteXFxdXSokKS9nO1xuXG52YXIgc2xvdFJFID0gL152LXNsb3QoOnwkKXxeIy87XG5cbnZhciBsaW5lQnJlYWtSRSA9IC9bXFxyXFxuXS87XG52YXIgd2hpdGVzcGFjZVJFJDEgPSAvXFxzKy9nO1xuXG52YXIgaW52YWxpZEF0dHJpYnV0ZVJFID0gL1tcXHNcIic8PlxcLz1dLztcblxudmFyIGRlY29kZUhUTUxDYWNoZWQgPSBjYWNoZWQoaGUuZGVjb2RlKTtcblxudmFyIGVtcHR5U2xvdFNjb3BlVG9rZW4gPSBcIl9lbXB0eV9cIjtcblxuLy8gY29uZmlndXJhYmxlIHN0YXRlXG52YXIgd2FybiQyO1xudmFyIGRlbGltaXRlcnM7XG52YXIgdHJhbnNmb3JtcztcbnZhciBwcmVUcmFuc2Zvcm1zO1xudmFyIHBvc3RUcmFuc2Zvcm1zO1xudmFyIHBsYXRmb3JtSXNQcmVUYWc7XG52YXIgcGxhdGZvcm1NdXN0VXNlUHJvcDtcbnZhciBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZTtcbnZhciBtYXliZUNvbXBvbmVudDtcblxuZnVuY3Rpb24gY3JlYXRlQVNURWxlbWVudCAoXG4gIHRhZyxcbiAgYXR0cnMsXG4gIHBhcmVudFxuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMSxcbiAgICB0YWc6IHRhZyxcbiAgICBhdHRyc0xpc3Q6IGF0dHJzLFxuICAgIGF0dHJzTWFwOiBtYWtlQXR0cnNNYXAoYXR0cnMpLFxuICAgIHJhd0F0dHJzTWFwOiB7fSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBjaGlsZHJlbjogW11cbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgSFRNTCBzdHJpbmcgdG8gQVNULlxuICovXG5mdW5jdGlvbiBwYXJzZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgd2FybiQyID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuXG4gIHBsYXRmb3JtSXNQcmVUYWcgPSBvcHRpb25zLmlzUHJlVGFnIHx8IG5vO1xuICBwbGF0Zm9ybU11c3RVc2VQcm9wID0gb3B0aW9ucy5tdXN0VXNlUHJvcCB8fCBubztcbiAgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UgPSBvcHRpb25zLmdldFRhZ05hbWVzcGFjZSB8fCBubztcbiAgdmFyIGlzUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIG1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuXG4gIHRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybU5vZGUnKTtcbiAgcHJlVHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncHJlVHJhbnNmb3JtTm9kZScpO1xuICBwb3N0VHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncG9zdFRyYW5zZm9ybU5vZGUnKTtcblxuICBkZWxpbWl0ZXJzID0gb3B0aW9ucy5kZWxpbWl0ZXJzO1xuXG4gIHZhciBzdGFjayA9IFtdO1xuICB2YXIgcHJlc2VydmVXaGl0ZXNwYWNlID0gb3B0aW9ucy5wcmVzZXJ2ZVdoaXRlc3BhY2UgIT09IGZhbHNlO1xuICB2YXIgd2hpdGVzcGFjZU9wdGlvbiA9IG9wdGlvbnMud2hpdGVzcGFjZTtcbiAgdmFyIHJvb3Q7XG4gIHZhciBjdXJyZW50UGFyZW50O1xuICB2YXIgaW5WUHJlID0gZmFsc2U7XG4gIHZhciBpblByZSA9IGZhbHNlO1xuICB2YXIgd2FybmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gd2Fybk9uY2UgKG1zZywgcmFuZ2UpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHdhcm4kMihtc2csIHJhbmdlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZUVsZW1lbnQgKGVsZW1lbnQpIHtcbiAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcbiAgICBpZiAoIWluVlByZSAmJiAhZWxlbWVudC5wcm9jZXNzZWQpIHtcbiAgICAgIGVsZW1lbnQgPSBwcm9jZXNzRWxlbWVudChlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gdHJlZSBtYW5hZ2VtZW50XG4gICAgaWYgKCFzdGFjay5sZW5ndGggJiYgZWxlbWVudCAhPT0gcm9vdCkge1xuICAgICAgLy8gYWxsb3cgcm9vdCBlbGVtZW50cyB3aXRoIHYtaWYsIHYtZWxzZS1pZiBhbmQgdi1lbHNlXG4gICAgICBpZiAocm9vdC5pZiAmJiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGFkZElmQ29uZGl0aW9uKHJvb3QsIHtcbiAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuICAgICAgICAgIGJsb2NrOiBlbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgIFwiQ29tcG9uZW50IHRlbXBsYXRlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gXCIgK1xuICAgICAgICAgIFwiSWYgeW91IGFyZSB1c2luZyB2LWlmIG9uIG11bHRpcGxlIGVsZW1lbnRzLCBcIiArXG4gICAgICAgICAgXCJ1c2Ugdi1lbHNlLWlmIHRvIGNoYWluIHRoZW0gaW5zdGVhZC5cIixcbiAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQYXJlbnQgJiYgIWVsZW1lbnQuZm9yYmlkZGVuKSB7XG4gICAgICBpZiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSB7XG4gICAgICAgIHByb2Nlc3NJZkNvbmRpdGlvbnMoZWxlbWVudCwgY3VycmVudFBhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZWxlbWVudC5zbG90U2NvcGUpIHtcbiAgICAgICAgICAvLyBzY29wZWQgc2xvdFxuICAgICAgICAgIC8vIGtlZXAgaXQgaW4gdGhlIGNoaWxkcmVuIGxpc3Qgc28gdGhhdCB2LWVsc2UoLWlmKSBjb25kaXRpb25zIGNhblxuICAgICAgICAgIC8vIGZpbmQgaXQgYXMgdGhlIHByZXYgbm9kZS5cbiAgICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQuc2xvdFRhcmdldCB8fCAnXCJkZWZhdWx0XCInXG4gICAgICAgICAgOyhjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzIHx8IChjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzID0ge30pKVtuYW1lXSA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgICBlbGVtZW50LnBhcmVudCA9IGN1cnJlbnRQYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmluYWwgY2hpbGRyZW4gY2xlYW51cFxuICAgIC8vIGZpbHRlciBvdXQgc2NvcGVkIHNsb3RzXG4gICAgZWxlbWVudC5jaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiAhKGMpLnNsb3RTY29wZTsgfSk7XG4gICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2Ugbm9kZSBhZ2FpblxuICAgIHRyaW1FbmRpbmdXaGl0ZXNwYWNlKGVsZW1lbnQpO1xuXG4gICAgLy8gY2hlY2sgcHJlIHN0YXRlXG4gICAgaWYgKGVsZW1lbnQucHJlKSB7XG4gICAgICBpblZQcmUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7XG4gICAgICBpblByZSA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBhcHBseSBwb3N0LXRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc3RUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwb3N0VHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0cmltRW5kaW5nV2hpdGVzcGFjZSAoZWwpIHtcbiAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlXG4gICAgaWYgKCFpblByZSkge1xuICAgICAgdmFyIGxhc3ROb2RlO1xuICAgICAgd2hpbGUgKFxuICAgICAgICAobGFzdE5vZGUgPSBlbC5jaGlsZHJlbltlbC5jaGlsZHJlbi5sZW5ndGggLSAxXSkgJiZcbiAgICAgICAgbGFzdE5vZGUudHlwZSA9PT0gMyAmJlxuICAgICAgICBsYXN0Tm9kZS50ZXh0ID09PSAnICdcbiAgICAgICkge1xuICAgICAgICBlbC5jaGlsZHJlbi5wb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja1Jvb3RDb25zdHJhaW50cyAoZWwpIHtcbiAgICBpZiAoZWwudGFnID09PSAnc2xvdCcgfHwgZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICB3YXJuT25jZShcbiAgICAgICAgXCJDYW5ub3QgdXNlIDxcIiArIChlbC50YWcpICsgXCI+IGFzIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSBpdCBtYXkgXCIgK1xuICAgICAgICAnY29udGFpbiBtdWx0aXBsZSBub2Rlcy4nLFxuICAgICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZWwuYXR0cnNNYXAuaGFzT3duUHJvcGVydHkoJ3YtZm9yJykpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICAnQ2Fubm90IHVzZSB2LWZvciBvbiBzdGF0ZWZ1bCBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgJyArXG4gICAgICAgICdpdCByZW5kZXJzIG11bHRpcGxlIGVsZW1lbnRzLicsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlSFRNTCh0ZW1wbGF0ZSwge1xuICAgIHdhcm46IHdhcm4kMixcbiAgICBleHBlY3RIVE1MOiBvcHRpb25zLmV4cGVjdEhUTUwsXG4gICAgaXNVbmFyeVRhZzogb3B0aW9ucy5pc1VuYXJ5VGFnLFxuICAgIGNhbkJlTGVmdE9wZW5UYWc6IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyxcbiAgICBzaG91bGREZWNvZGVOZXdsaW5lczogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmLFxuICAgIHNob3VsZEtlZXBDb21tZW50OiBvcHRpb25zLmNvbW1lbnRzLFxuICAgIG91dHB1dFNvdXJjZVJhbmdlOiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlLFxuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCAodGFnLCBhdHRycywgdW5hcnksIHN0YXJ0JDEsIGVuZCkge1xuICAgICAgLy8gY2hlY2sgbmFtZXNwYWNlLlxuICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lXG4gICAgICB2YXIgbnMgPSAoY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50Lm5zKSB8fCBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSh0YWcpO1xuXG4gICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJiBucyA9PT0gJ3N2ZycpIHtcbiAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSBjcmVhdGVBU1RFbGVtZW50KHRhZywgYXR0cnMsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgaWYgKG5zKSB7XG4gICAgICAgIGVsZW1lbnQubnMgPSBucztcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBlbGVtZW50LnN0YXJ0ID0gc3RhcnQkMTtcbiAgICAgICAgICBlbGVtZW50LmVuZCA9IGVuZDtcbiAgICAgICAgICBlbGVtZW50LnJhd0F0dHJzTWFwID0gZWxlbWVudC5hdHRyc0xpc3QucmVkdWNlKGZ1bmN0aW9uIChjdW11bGF0ZWQsIGF0dHIpIHtcbiAgICAgICAgICAgIGN1bXVsYXRlZFthdHRyLm5hbWVdID0gYXR0cjtcbiAgICAgICAgICAgIHJldHVybiBjdW11bGF0ZWRcbiAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgIGlmIChpbnZhbGlkQXR0cmlidXRlUkUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiSW52YWxpZCBkeW5hbWljIGFyZ3VtZW50IGV4cHJlc3Npb246IGF0dHJpYnV0ZSBuYW1lcyBjYW5ub3QgY29udGFpbiBcIiArXG4gICAgICAgICAgICAgIFwic3BhY2VzLCBxdW90ZXMsIDwsID4sIC8gb3IgPS5cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmluZGV4T2YoXCJbXCIpLFxuICAgICAgICAgICAgICAgIGVuZDogYXR0ci5zdGFydCArIGF0dHIubmFtZS5sZW5ndGhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGb3JiaWRkZW5UYWcoZWxlbWVudCkgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkpIHtcbiAgICAgICAgZWxlbWVudC5mb3JiaWRkZW4gPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4kMihcbiAgICAgICAgICAnVGVtcGxhdGVzIHNob3VsZCBvbmx5IGJlIHJlc3BvbnNpYmxlIGZvciBtYXBwaW5nIHRoZSBzdGF0ZSB0byB0aGUgJyArXG4gICAgICAgICAgJ1VJLiBBdm9pZCBwbGFjaW5nIHRhZ3Mgd2l0aCBzaWRlLWVmZmVjdHMgaW4geW91ciB0ZW1wbGF0ZXMsIHN1Y2ggYXMgJyArXG4gICAgICAgICAgXCI8XCIgKyB0YWcgKyBcIj5cIiArICcsIGFzIHRoZXkgd2lsbCBub3QgYmUgcGFyc2VkLicsXG4gICAgICAgICAgeyBzdGFydDogZWxlbWVudC5zdGFydCB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IHByZS10cmFuc2Zvcm1zXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZVRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWxlbWVudCA9IHByZVRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucykgfHwgZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpblZQcmUpIHtcbiAgICAgICAgcHJvY2Vzc1ByZShlbGVtZW50KTtcbiAgICAgICAgaWYgKGVsZW1lbnQucHJlKSB7XG4gICAgICAgICAgaW5WUHJlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7XG4gICAgICAgIGluUHJlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpblZQcmUpIHtcbiAgICAgICAgcHJvY2Vzc1Jhd0F0dHJzKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmICghZWxlbWVudC5wcm9jZXNzZWQpIHtcbiAgICAgICAgLy8gc3RydWN0dXJhbCBkaXJlY3RpdmVzXG4gICAgICAgIHByb2Nlc3NGb3IoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NJZihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc09uY2UoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcm9vdCkge1xuICAgICAgICByb290ID0gZWxlbWVudDtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICAgIGN1cnJlbnRQYXJlbnQgPSBlbGVtZW50O1xuICAgICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAodGFnLCBzdGFydCwgZW5kJDEpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAvLyBwb3Agc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCAtPSAxO1xuICAgICAgY3VycmVudFBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICBlbGVtZW50LmVuZCA9IGVuZCQxO1xuICAgICAgfVxuICAgICAgY2xvc2VFbGVtZW50KGVsZW1lbnQpO1xuICAgIH0sXG5cbiAgICBjaGFyczogZnVuY3Rpb24gY2hhcnMgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmICghY3VycmVudFBhcmVudCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0ZXh0ID09PSB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICdDb21wb25lbnQgdGVtcGxhdGUgcmVxdWlyZXMgYSByb290IGVsZW1lbnQsIHJhdGhlciB0aGFuIGp1c3QgdGV4dC4nLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHRleHQgPSB0ZXh0LnRyaW0oKSkpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAoXCJ0ZXh0IFxcXCJcIiArIHRleHQgKyBcIlxcXCIgb3V0c2lkZSByb290IGVsZW1lbnQgd2lsbCBiZSBpZ25vcmVkLlwiKSxcbiAgICAgICAgICAgICAgeyBzdGFydDogc3RhcnQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvLyBJRSB0ZXh0YXJlYSBwbGFjZWhvbGRlciBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiZcbiAgICAgICAgY3VycmVudFBhcmVudC50YWcgPT09ICd0ZXh0YXJlYScgJiZcbiAgICAgICAgY3VycmVudFBhcmVudC5hdHRyc01hcC5wbGFjZWhvbGRlciA9PT0gdGV4dFxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuID0gY3VycmVudFBhcmVudC5jaGlsZHJlbjtcbiAgICAgIGlmIChpblByZSB8fCB0ZXh0LnRyaW0oKSkge1xuICAgICAgICB0ZXh0ID0gaXNUZXh0VGFnKGN1cnJlbnRQYXJlbnQpID8gdGV4dCA6IGRlY29kZUhUTUxDYWNoZWQodGV4dCk7XG4gICAgICB9IGVsc2UgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSB3aGl0ZXNwYWNlLW9ubHkgbm9kZSByaWdodCBhZnRlciBhbiBvcGVuaW5nIHRhZ1xuICAgICAgICB0ZXh0ID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHdoaXRlc3BhY2VPcHRpb24pIHtcbiAgICAgICAgaWYgKHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAvLyBpbiBjb25kZW5zZSBtb2RlLCByZW1vdmUgdGhlIHdoaXRlc3BhY2Ugbm9kZSBpZiBpdCBjb250YWluc1xuICAgICAgICAgIC8vIGxpbmUgYnJlYWssIG90aGVyd2lzZSBjb25kZW5zZSB0byBhIHNpbmdsZSBzcGFjZVxuICAgICAgICAgIHRleHQgPSBsaW5lQnJlYWtSRS50ZXN0KHRleHQpID8gJycgOiAnICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dCA9ICcgJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IHByZXNlcnZlV2hpdGVzcGFjZSA/ICcgJyA6ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgaWYgKCFpblByZSAmJiB3aGl0ZXNwYWNlT3B0aW9uID09PSAnY29uZGVuc2UnKSB7XG4gICAgICAgICAgLy8gY29uZGVuc2UgY29uc2VjdXRpdmUgd2hpdGVzcGFjZXMgaW50byBzaW5nbGUgc3BhY2VcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHdoaXRlc3BhY2VSRSQxLCAnICcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHZhciBjaGlsZDtcbiAgICAgICAgaWYgKCFpblZQcmUgJiYgdGV4dCAhPT0gJyAnICYmIChyZXMgPSBwYXJzZVRleHQodGV4dCwgZGVsaW1pdGVycykpKSB7XG4gICAgICAgICAgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAyLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogcmVzLmV4cHJlc3Npb24sXG4gICAgICAgICAgICB0b2tlbnM6IHJlcy50b2tlbnMsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0ICE9PSAnICcgfHwgIWNoaWxkcmVuLmxlbmd0aCB8fCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgICBjaGlsZC5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tbWVudDogZnVuY3Rpb24gY29tbWVudCAodGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgLy8gYWRkaW5nIGFueXRpbmcgYXMgYSBzaWJsaW5nIHRvIHRoZSByb290IG5vZGUgaXMgZm9yYmlkZGVuXG4gICAgICAvLyBjb21tZW50cyBzaG91bGQgc3RpbGwgYmUgYWxsb3dlZCwgYnV0IGlnbm9yZWRcbiAgICAgIGlmIChjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZCA9IHtcbiAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgaXNDb21tZW50OiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjaGlsZC5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByb290XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQcmUgKGVsKSB7XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1wcmUnKSAhPSBudWxsKSB7XG4gICAgZWwucHJlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmF3QXR0cnMgKGVsKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICB2YXIgbGVuID0gbGlzdC5sZW5ndGg7XG4gIGlmIChsZW4pIHtcbiAgICB2YXIgYXR0cnMgPSBlbC5hdHRycyA9IG5ldyBBcnJheShsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGF0dHJzW2ldID0ge1xuICAgICAgICBuYW1lOiBsaXN0W2ldLm5hbWUsXG4gICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShsaXN0W2ldLnZhbHVlKVxuICAgICAgfTtcbiAgICAgIGlmIChsaXN0W2ldLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBsaXN0W2ldLnN0YXJ0O1xuICAgICAgICBhdHRyc1tpXS5lbmQgPSBsaXN0W2ldLmVuZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIWVsLnByZSkge1xuICAgIC8vIG5vbiByb290IG5vZGUgaW4gcHJlIGJsb2NrcyB3aXRoIG5vIGF0dHJpYnV0ZXNcbiAgICBlbC5wbGFpbiA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0VsZW1lbnQgKFxuICBlbGVtZW50LFxuICBvcHRpb25zXG4pIHtcbiAgcHJvY2Vzc0tleShlbGVtZW50KTtcblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgcGxhaW4gZWxlbWVudCBhZnRlclxuICAvLyByZW1vdmluZyBzdHJ1Y3R1cmFsIGF0dHJpYnV0ZXNcbiAgZWxlbWVudC5wbGFpbiA9IChcbiAgICAhZWxlbWVudC5rZXkgJiZcbiAgICAhZWxlbWVudC5zY29wZWRTbG90cyAmJlxuICAgICFlbGVtZW50LmF0dHJzTGlzdC5sZW5ndGhcbiAgKTtcblxuICBwcm9jZXNzUmVmKGVsZW1lbnQpO1xuICBwcm9jZXNzU2xvdENvbnRlbnQoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90T3V0bGV0KGVsZW1lbnQpO1xuICBwcm9jZXNzQ29tcG9uZW50KGVsZW1lbnQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICBlbGVtZW50ID0gdHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICB9XG4gIHByb2Nlc3NBdHRycyhlbGVtZW50KTtcbiAgcmV0dXJuIGVsZW1lbnRcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0tleSAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEJpbmRpbmdBdHRyKGVsLCAna2V5Jyk7XG4gIGlmIChleHApIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCI8dGVtcGxhdGU+IGNhbm5vdCBiZSBrZXllZC4gUGxhY2UgdGhlIGtleSBvbiByZWFsIGVsZW1lbnRzIGluc3RlYWQuXCIsXG4gICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGVsLmZvcikge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBlbC5pdGVyYXRvcjIgfHwgZWwuaXRlcmF0b3IxO1xuICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgICAgICBpZiAoaXRlcmF0b3IgJiYgaXRlcmF0b3IgPT09IGV4cCAmJiBwYXJlbnQgJiYgcGFyZW50LnRhZyA9PT0gJ3RyYW5zaXRpb24tZ3JvdXAnKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgXCJEbyBub3QgdXNlIHYtZm9yIGluZGV4IGFzIGtleSBvbiA8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4sIFwiICtcbiAgICAgICAgICAgIFwidGhpcyBpcyB0aGUgc2FtZSBhcyBub3QgdXNpbmcga2V5cy5cIixcbiAgICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JyksXG4gICAgICAgICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWwua2V5ID0gZXhwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWYgKGVsKSB7XG4gIHZhciByZWYgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3JlZicpO1xuICBpZiAocmVmKSB7XG4gICAgZWwucmVmID0gcmVmO1xuICAgIGVsLnJlZkluRm9yID0gY2hlY2tJbkZvcihlbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0ZvciAoZWwpIHtcbiAgdmFyIGV4cDtcbiAgaWYgKChleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKSkpIHtcbiAgICB2YXIgcmVzID0gcGFyc2VGb3IoZXhwKTtcbiAgICBpZiAocmVzKSB7XG4gICAgICBleHRlbmQoZWwsIHJlcyk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIChcIkludmFsaWQgdi1mb3IgZXhwcmVzc2lvbjogXCIgKyBleHApLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbmZ1bmN0aW9uIHBhcnNlRm9yIChleHApIHtcbiAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gIGlmICghaW5NYXRjaCkgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHJlcy5mb3IgPSBpbk1hdGNoWzJdLnRyaW0oKTtcbiAgdmFyIGFsaWFzID0gaW5NYXRjaFsxXS50cmltKCkucmVwbGFjZShzdHJpcFBhcmVuc1JFLCAnJyk7XG4gIHZhciBpdGVyYXRvck1hdGNoID0gYWxpYXMubWF0Y2goZm9ySXRlcmF0b3JSRSk7XG4gIGlmIChpdGVyYXRvck1hdGNoKSB7XG4gICAgcmVzLmFsaWFzID0gYWxpYXMucmVwbGFjZShmb3JJdGVyYXRvclJFLCAnJykudHJpbSgpO1xuICAgIHJlcy5pdGVyYXRvcjEgPSBpdGVyYXRvck1hdGNoWzFdLnRyaW0oKTtcbiAgICBpZiAoaXRlcmF0b3JNYXRjaFsyXSkge1xuICAgICAgcmVzLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcztcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZiAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJyk7XG4gIGlmIChleHApIHtcbiAgICBlbC5pZiA9IGV4cDtcbiAgICBhZGRJZkNvbmRpdGlvbihlbCwge1xuICAgICAgZXhwOiBleHAsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScpICE9IG51bGwpIHtcbiAgICAgIGVsLmVsc2UgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgZWxzZWlmID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicpO1xuICAgIGlmIChlbHNlaWYpIHtcbiAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmQ29uZGl0aW9ucyAoZWwsIHBhcmVudCkge1xuICB2YXIgcHJldiA9IGZpbmRQcmV2RWxlbWVudChwYXJlbnQuY2hpbGRyZW4pO1xuICBpZiAocHJldiAmJiBwcmV2LmlmKSB7XG4gICAgYWRkSWZDb25kaXRpb24ocHJldiwge1xuICAgICAgZXhwOiBlbC5lbHNlaWYsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybiQyKFxuICAgICAgXCJ2LVwiICsgKGVsLmVsc2VpZiA/ICgnZWxzZS1pZj1cIicgKyBlbC5lbHNlaWYgKyAnXCInKSA6ICdlbHNlJykgKyBcIiBcIiArXG4gICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIixcbiAgICAgIGVsLnJhd0F0dHJzTWFwW2VsLmVsc2VpZiA/ICd2LWVsc2UtaWYnIDogJ3YtZWxzZSddXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kUHJldkVsZW1lbnQgKGNoaWxkcmVuKSB7XG4gIHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGNoaWxkcmVuW2ldLnR5cGUgPT09IDEpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbltpXVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbltpXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwidGV4dCBcXFwiXCIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgXCJcXFwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgXCIgK1xuICAgICAgICAgIFwid2lsbCBiZSBpZ25vcmVkLlwiLFxuICAgICAgICAgIGNoaWxkcmVuW2ldXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjaGlsZHJlbi5wb3AoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkSWZDb25kaXRpb24gKGVsLCBjb25kaXRpb24pIHtcbiAgaWYgKCFlbC5pZkNvbmRpdGlvbnMpIHtcbiAgICBlbC5pZkNvbmRpdGlvbnMgPSBbXTtcbiAgfVxuICBlbC5pZkNvbmRpdGlvbnMucHVzaChjb25kaXRpb24pO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzT25jZSAoZWwpIHtcbiAgdmFyIG9uY2UkJDEgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1vbmNlJyk7XG4gIGlmIChvbmNlJCQxICE9IG51bGwpIHtcbiAgICBlbC5vbmNlID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBoYW5kbGUgY29udGVudCBiZWluZyBwYXNzZWQgdG8gYSBjb21wb25lbnQgYXMgc2xvdCxcbi8vIGUuZy4gPHRlbXBsYXRlIHNsb3Q9XCJ4eHhcIj4sIDxkaXYgc2xvdC1zY29wZT1cInh4eFwiPlxuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RDb250ZW50IChlbCkge1xuICB2YXIgc2xvdFNjb3BlO1xuICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2xvdFNjb3BlKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwidGhlIFxcXCJzY29wZVxcXCIgYXR0cmlidXRlIGZvciBzY29wZWQgc2xvdHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQgYW5kIFwiICtcbiAgICAgICAgXCJyZXBsYWNlZCBieSBcXFwic2xvdC1zY29wZVxcXCIgc2luY2UgMi41LiBUaGUgbmV3IFxcXCJzbG90LXNjb3BlXFxcIiBhdHRyaWJ1dGUgXCIgK1xuICAgICAgICBcImNhbiBhbHNvIGJlIHVzZWQgb24gcGxhaW4gZWxlbWVudHMgaW4gYWRkaXRpb24gdG8gPHRlbXBsYXRlPiB0byBcIiArXG4gICAgICAgIFwiZGVub3RlIHNjb3BlZCBzbG90cy5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Njb3BlJ10sXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIGVsLnNsb3RTY29wZSA9IHNsb3RTY29wZSB8fCBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2xvdC1zY29wZScpO1xuICB9IGVsc2UgaWYgKChzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2xvdC1zY29wZScpKSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLmF0dHJzTWFwWyd2LWZvciddKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiQW1iaWd1b3VzIGNvbWJpbmVkIHVzYWdlIG9mIHNsb3Qtc2NvcGUgYW5kIHYtZm9yIG9uIDxcIiArIChlbC50YWcpICsgXCI+IFwiICtcbiAgICAgICAgXCIodi1mb3IgdGFrZXMgaGlnaGVyIHByaW9yaXR5KS4gVXNlIGEgd3JhcHBlciA8dGVtcGxhdGU+IGZvciB0aGUgXCIgK1xuICAgICAgICBcInNjb3BlZCBzbG90IHRvIG1ha2UgaXQgY2xlYXJlci5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlO1xuICB9XG5cbiAgLy8gc2xvdD1cInh4eFwiXG4gIHZhciBzbG90VGFyZ2V0ID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzbG90Jyk7XG4gIGlmIChzbG90VGFyZ2V0KSB7XG4gICAgZWwuc2xvdFRhcmdldCA9IHNsb3RUYXJnZXQgPT09ICdcIlwiJyA/ICdcImRlZmF1bHRcIicgOiBzbG90VGFyZ2V0O1xuICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gISEoZWwuYXR0cnNNYXBbJzpzbG90J10gfHwgZWwuYXR0cnNNYXBbJ3YtYmluZDpzbG90J10pO1xuICAgIC8vIHByZXNlcnZlIHNsb3QgYXMgYW4gYXR0cmlidXRlIGZvciBuYXRpdmUgc2hhZG93IERPTSBjb21wYXRcbiAgICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzLlxuICAgIGlmIChlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgICAgYWRkQXR0cihlbCwgJ3Nsb3QnLCBzbG90VGFyZ2V0LCBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gMi42IHYtc2xvdCBzeW50YXhcbiAge1xuICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIC8vIHYtc2xvdCBvbiA8dGVtcGxhdGU+XG4gICAgICB2YXIgc2xvdEJpbmRpbmcgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTtcbiAgICAgIGlmIChzbG90QmluZGluZykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChlbC5zbG90VGFyZ2V0IHx8IGVsLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuXCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwucGFyZW50ICYmICFtYXliZUNvbXBvbmVudChlbC5wYXJlbnQpKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiPHRlbXBsYXRlIHYtc2xvdD4gY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSByb290IGxldmVsIGluc2lkZSBcIiArXG4gICAgICAgICAgICAgIFwidGhlIHJlY2VpdmluZyB0aGUgY29tcG9uZW50XCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmcpO1xuICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuICAgICAgICB2YXIgZHluYW1pYyA9IHJlZi5keW5hbWljO1xuICAgICAgICBlbC5zbG90VGFyZ2V0ID0gbmFtZTtcbiAgICAgICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljO1xuICAgICAgICBlbC5zbG90U2NvcGUgPSBzbG90QmluZGluZy52YWx1ZSB8fCBlbXB0eVNsb3RTY29wZVRva2VuOyAvLyBmb3JjZSBpdCBpbnRvIGEgc2NvcGVkIHNsb3QgZm9yIHBlcmZcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdi1zbG90IG9uIGNvbXBvbmVudCwgZGVub3RlcyBkZWZhdWx0IHNsb3RcbiAgICAgIHZhciBzbG90QmluZGluZyQxID0gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgoZWwsIHNsb3RSRSk7XG4gICAgICBpZiAoc2xvdEJpbmRpbmckMSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICghbWF5YmVDb21wb25lbnQoZWwpKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwidi1zbG90IGNhbiBvbmx5IGJlIHVzZWQgb24gY29tcG9uZW50cyBvciA8dGVtcGxhdGU+LlwiLFxuICAgICAgICAgICAgICBzbG90QmluZGluZyQxXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2xvdFNjb3BlIHx8IGVsLnNsb3RUYXJnZXQpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLlwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVG8gYXZvaWQgc2NvcGUgYW1iaWd1aXR5LCB0aGUgZGVmYXVsdCBzbG90IHNob3VsZCBhbHNvIHVzZSBcIiArXG4gICAgICAgICAgICAgIFwiPHRlbXBsYXRlPiBzeW50YXggd2hlbiB0aGVyZSBhcmUgb3RoZXIgbmFtZWQgc2xvdHMuXCIsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCB0aGUgY29tcG9uZW50J3MgY2hpbGRyZW4gdG8gaXRzIGRlZmF1bHQgc2xvdFxuICAgICAgICB2YXIgc2xvdHMgPSBlbC5zY29wZWRTbG90cyB8fCAoZWwuc2NvcGVkU2xvdHMgPSB7fSk7XG4gICAgICAgIHZhciByZWYkMSA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nJDEpO1xuICAgICAgICB2YXIgbmFtZSQxID0gcmVmJDEubmFtZTtcbiAgICAgICAgdmFyIGR5bmFtaWMkMSA9IHJlZiQxLmR5bmFtaWM7XG4gICAgICAgIHZhciBzbG90Q29udGFpbmVyID0gc2xvdHNbbmFtZSQxXSA9IGNyZWF0ZUFTVEVsZW1lbnQoJ3RlbXBsYXRlJywgW10sIGVsKTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90VGFyZ2V0ID0gbmFtZSQxO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYyQxO1xuICAgICAgICBzbG90Q29udGFpbmVyLmNoaWxkcmVuID0gZWwuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgaWYgKCFjLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgYy5wYXJlbnQgPSBzbG90Q29udGFpbmVyO1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nJDEudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjtcbiAgICAgICAgLy8gcmVtb3ZlIGNoaWxkcmVuIGFzIHRoZXkgYXJlIHJldHVybmVkIGZyb20gc2NvcGVkU2xvdHMgbm93XG4gICAgICAgIGVsLmNoaWxkcmVuID0gW107XG4gICAgICAgIC8vIG1hcmsgZWwgbm9uLXBsYWluIHNvIGRhdGEgZ2V0cyBnZW5lcmF0ZWRcbiAgICAgICAgZWwucGxhaW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2xvdE5hbWUgKGJpbmRpbmcpIHtcbiAgdmFyIG5hbWUgPSBiaW5kaW5nLm5hbWUucmVwbGFjZShzbG90UkUsICcnKTtcbiAgaWYgKCFuYW1lKSB7XG4gICAgaWYgKGJpbmRpbmcubmFtZVswXSAhPT0gJyMnKSB7XG4gICAgICBuYW1lID0gJ2RlZmF1bHQnO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcInYtc2xvdCBzaG9ydGhhbmQgc3ludGF4IHJlcXVpcmVzIGEgc2xvdCBuYW1lLlwiLFxuICAgICAgICBiaW5kaW5nXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSlcbiAgICAvLyBkeW5hbWljIFtuYW1lXVxuICAgID8geyBuYW1lOiBuYW1lLnNsaWNlKDEsIC0xKSwgZHluYW1pYzogdHJ1ZSB9XG4gICAgLy8gc3RhdGljIG5hbWVcbiAgICA6IHsgbmFtZTogKFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSwgZHluYW1pYzogZmFsc2UgfVxufVxuXG4vLyBoYW5kbGUgPHNsb3QvPiBvdXRsZXRzXG5mdW5jdGlvbiBwcm9jZXNzU2xvdE91dGxldCAoZWwpIHtcbiAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgZWwuc2xvdE5hbWUgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ25hbWUnKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC5rZXkpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJga2V5YCBkb2VzIG5vdCB3b3JrIG9uIDxzbG90PiBiZWNhdXNlIHNsb3RzIGFyZSBhYnN0cmFjdCBvdXRsZXRzIFwiICtcbiAgICAgICAgXCJhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBcIiArXG4gICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCIsXG4gICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gIHZhciBiaW5kaW5nO1xuICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgfVxuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgdmFyIGksIGwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBtb2RpZmllcnMsIHN5bmNHZW4sIGlzRHluYW1pYztcbiAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbmFtZSA9IHJhd05hbWUgPSBsaXN0W2ldLm5hbWU7XG4gICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAvLyBtYXJrIGVsZW1lbnQgYXMgZHluYW1pY1xuICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICBtb2RpZmllcnMgPSBwYXJzZU1vZGlmaWVycyhuYW1lLnJlcGxhY2UoZGlyUkUsICcnKSk7XG4gICAgICAvLyBzdXBwb3J0IC5mb28gc2hvcnRoYW5kIHN5bnRheCBmb3IgdGhlIC5wcm9wIG1vZGlmaWVyXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UobW9kaWZpZXJSRSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKGJpbmRSRS50ZXN0KG5hbWUpKSB7IC8vIHYtYmluZFxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGJpbmRSRSwgJycpO1xuICAgICAgICB2YWx1ZSA9IHBhcnNlRmlsdGVycyh2YWx1ZSk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgdmFsdWUudHJpbSgpLmxlbmd0aCA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAoXCJUaGUgdmFsdWUgZm9yIGEgdi1iaW5kIGV4cHJlc3Npb24gY2Fubm90IGJlIGVtcHR5LiBGb3VuZCBpbiBcXFwidi1iaW5kOlwiICsgbmFtZSArIFwiXFxcIlwiKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgIGlmIChtb2RpZmllcnMucHJvcCAmJiAhaXNEeW5hbWljKSB7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2lubmVySHRtbCcpIHsgbmFtZSA9ICdpbm5lckhUTUwnOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuY2FtZWwgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnN5bmMpIHtcbiAgICAgICAgICAgIHN5bmNHZW4gPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgXCIkZXZlbnRcIik7XG4gICAgICAgICAgICBpZiAoIWlzRHluYW1pYykge1xuICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgIChcInVwZGF0ZTpcIiArIChjYW1lbGl6ZShuYW1lKSkpLFxuICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAoaHlwaGVuYXRlKG5hbWUpICE9PSBjYW1lbGl6ZShuYW1lKSkge1xuICAgICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgIChcInVwZGF0ZTpcIiArIChoeXBoZW5hdGUobmFtZSkpKSxcbiAgICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gaGFuZGxlciB3LyBkeW5hbWljIGV2ZW50IG5hbWVcbiAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAoXCJcXFwidXBkYXRlOlxcXCIrKFwiICsgbmFtZSArIFwiKVwiKSxcbiAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgIGxpc3RbaV0sXG4gICAgICAgICAgICAgICAgdHJ1ZSAvLyBkeW5hbWljXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgobW9kaWZpZXJzICYmIG1vZGlmaWVycy5wcm9wKSB8fCAoXG4gICAgICAgICAgIWVsLmNvbXBvbmVudCAmJiBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSlcbiAgICAgICAgKSkge1xuICAgICAgICAgIGFkZFByb3AoZWwsIG5hbWUsIHZhbHVlLCBsaXN0W2ldLCBpc0R5bmFtaWMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIHZhbHVlLCBsaXN0W2ldLCBpc0R5bmFtaWMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkgeyAvLyB2LW9uXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2Uob25SRSwgJycpO1xuICAgICAgICBpc0R5bmFtaWMgPSBkeW5hbWljQXJnUkUudGVzdChuYW1lKTtcbiAgICAgICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRIYW5kbGVyKGVsLCBuYW1lLCB2YWx1ZSwgbW9kaWZpZXJzLCBmYWxzZSwgd2FybiQyLCBsaXN0W2ldLCBpc0R5bmFtaWMpO1xuICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShkaXJSRSwgJycpO1xuICAgICAgICAvLyBwYXJzZSBhcmdcbiAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG4gICAgICAgIHZhciBhcmcgPSBhcmdNYXRjaCAmJiBhcmdNYXRjaFsxXTtcbiAgICAgICAgaXNEeW5hbWljID0gZmFsc2U7XG4gICAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCAtKGFyZy5sZW5ndGggKyAxKSk7XG4gICAgICAgICAgaWYgKGR5bmFtaWNBcmdSRS50ZXN0KGFyZykpIHtcbiAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICBpc0R5bmFtaWMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGREaXJlY3RpdmUoZWwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIGlzRHluYW1pYywgbW9kaWZpZXJzLCBsaXN0W2ldKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSA9PT0gJ21vZGVsJykge1xuICAgICAgICAgIGNoZWNrRm9yQWxpYXNNb2RlbChlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGxpdGVyYWwgYXR0cmlidXRlXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHZhbHVlLCBkZWxpbWl0ZXJzKTtcbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgaWQ9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDppZD1cInZhbFwiPi4nLFxuICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSwgbGlzdFtpXSk7XG4gICAgICAvLyAjNjg4NyBmaXJlZm94IGRvZXNuJ3QgdXBkYXRlIG11dGVkIHN0YXRlIGlmIHNldCB2aWEgYXR0cmlidXRlXG4gICAgICAvLyBldmVuIGltbWVkaWF0ZWx5IGFmdGVyIGVsZW1lbnQgY3JlYXRpb25cbiAgICAgIGlmICghZWwuY29tcG9uZW50ICYmXG4gICAgICAgICAgbmFtZSA9PT0gJ211dGVkJyAmJlxuICAgICAgICAgIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKSkge1xuICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCAndHJ1ZScsIGxpc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0luRm9yIChlbCkge1xuICB2YXIgcGFyZW50ID0gZWw7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LmZvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwYXJzZU1vZGlmaWVycyAobmFtZSkge1xuICB2YXIgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgbWF0Y2guZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXRbbS5zbGljZSgxKV0gPSB0cnVlOyB9KTtcbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUF0dHJzTWFwIChhdHRycykge1xuICB2YXIgbWFwID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKFxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbWFwW2F0dHJzW2ldLm5hbWVdICYmICFpc0lFICYmICFpc0VkZ2VcbiAgICApIHtcbiAgICAgIHdhcm4kMignZHVwbGljYXRlIGF0dHJpYnV0ZTogJyArIGF0dHJzW2ldLm5hbWUsIGF0dHJzW2ldKTtcbiAgICB9XG4gICAgbWFwW2F0dHJzW2ldLm5hbWVdID0gYXR0cnNbaV0udmFsdWU7XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG4vLyBmb3Igc2NyaXB0IChlLmcuIHR5cGU9XCJ4L3RlbXBsYXRlXCIpIG9yIHN0eWxlLCBkbyBub3QgZGVjb2RlIGNvbnRlbnRcbmZ1bmN0aW9uIGlzVGV4dFRhZyAoZWwpIHtcbiAgcmV0dXJuIGVsLnRhZyA9PT0gJ3NjcmlwdCcgfHwgZWwudGFnID09PSAnc3R5bGUnXG59XG5cbmZ1bmN0aW9uIGlzRm9yYmlkZGVuVGFnIChlbCkge1xuICByZXR1cm4gKFxuICAgIGVsLnRhZyA9PT0gJ3N0eWxlJyB8fFxuICAgIChlbC50YWcgPT09ICdzY3JpcHQnICYmIChcbiAgICAgICFlbC5hdHRyc01hcC50eXBlIHx8XG4gICAgICBlbC5hdHRyc01hcC50eXBlID09PSAndGV4dC9qYXZhc2NyaXB0J1xuICAgICkpXG4gIClcbn1cblxudmFyIGllTlNCdWcgPSAvXnhtbG5zOk5TXFxkKy87XG52YXIgaWVOU1ByZWZpeCA9IC9eTlNcXGQrOi87XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBndWFyZElFU1ZHQnVnIChhdHRycykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGF0dHJzW2ldO1xuICAgIGlmICghaWVOU0J1Zy50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgIGF0dHIubmFtZSA9IGF0dHIubmFtZS5yZXBsYWNlKGllTlNQcmVmaXgsICcnKTtcbiAgICAgIHJlcy5wdXNoKGF0dHIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yQWxpYXNNb2RlbCAoZWwsIHZhbHVlKSB7XG4gIHZhciBfZWwgPSBlbDtcbiAgd2hpbGUgKF9lbCkge1xuICAgIGlmIChfZWwuZm9yICYmIF9lbC5hbGlhcyA9PT0gdmFsdWUpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICAgIFwiWW91IGFyZSBiaW5kaW5nIHYtbW9kZWwgZGlyZWN0bHkgdG8gYSB2LWZvciBpdGVyYXRpb24gYWxpYXMuIFwiICtcbiAgICAgICAgXCJUaGlzIHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IHRoZSB2LWZvciBzb3VyY2UgYXJyYXkgYmVjYXVzZSBcIiArXG4gICAgICAgIFwid3JpdGluZyB0byB0aGUgYWxpYXMgaXMgbGlrZSBtb2RpZnlpbmcgYSBmdW5jdGlvbiBsb2NhbCB2YXJpYWJsZS4gXCIgK1xuICAgICAgICBcIkNvbnNpZGVyIHVzaW5nIGFuIGFycmF5IG9mIG9iamVjdHMgYW5kIHVzZSB2LW1vZGVsIG9uIGFuIG9iamVjdCBwcm9wZXJ0eSBpbnN0ZWFkLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgICApO1xuICAgIH1cbiAgICBfZWwgPSBfZWwucGFyZW50O1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBwcmVUcmFuc2Zvcm1Ob2RlIChlbCwgb3B0aW9ucykge1xuICBpZiAoZWwudGFnID09PSAnaW5wdXQnKSB7XG4gICAgdmFyIG1hcCA9IGVsLmF0dHJzTWFwO1xuICAgIGlmICghbWFwWyd2LW1vZGVsJ10pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciB0eXBlQmluZGluZztcbiAgICBpZiAobWFwWyc6dHlwZSddIHx8IG1hcFsndi1iaW5kOnR5cGUnXSkge1xuICAgICAgdHlwZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3R5cGUnKTtcbiAgICB9XG4gICAgaWYgKCFtYXAudHlwZSAmJiAhdHlwZUJpbmRpbmcgJiYgbWFwWyd2LWJpbmQnXSkge1xuICAgICAgdHlwZUJpbmRpbmcgPSBcIihcIiArIChtYXBbJ3YtYmluZCddKSArIFwiKS50eXBlXCI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVCaW5kaW5nKSB7XG4gICAgICB2YXIgaWZDb25kaXRpb24gPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicsIHRydWUpO1xuICAgICAgdmFyIGlmQ29uZGl0aW9uRXh0cmEgPSBpZkNvbmRpdGlvbiA/IChcIiYmKFwiICsgaWZDb25kaXRpb24gKyBcIilcIikgOiBcIlwiO1xuICAgICAgdmFyIGhhc0Vsc2UgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJywgdHJ1ZSkgIT0gbnVsbDtcbiAgICAgIHZhciBlbHNlSWZDb25kaXRpb24gPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJywgdHJ1ZSk7XG4gICAgICAvLyAxLiBjaGVja2JveFxuICAgICAgdmFyIGJyYW5jaDAgPSBjbG9uZUFTVEVsZW1lbnQoZWwpO1xuICAgICAgLy8gcHJvY2VzcyBmb3Igb24gdGhlIG1haW4gbm9kZVxuICAgICAgcHJvY2Vzc0ZvcihicmFuY2gwKTtcbiAgICAgIGFkZFJhd0F0dHIoYnJhbmNoMCwgJ3R5cGUnLCAnY2hlY2tib3gnKTtcbiAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDAsIG9wdGlvbnMpO1xuICAgICAgYnJhbmNoMC5wcm9jZXNzZWQgPSB0cnVlOyAvLyBwcmV2ZW50IGl0IGZyb20gZG91YmxlLXByb2Nlc3NlZFxuICAgICAgYnJhbmNoMC5pZiA9IFwiKFwiICsgdHlwZUJpbmRpbmcgKyBcIik9PT0nY2hlY2tib3gnXCIgKyBpZkNvbmRpdGlvbkV4dHJhO1xuICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICBleHA6IGJyYW5jaDAuaWYsXG4gICAgICAgIGJsb2NrOiBicmFuY2gwXG4gICAgICB9KTtcbiAgICAgIC8vIDIuIGFkZCByYWRpbyBlbHNlLWlmIGNvbmRpdGlvblxuICAgICAgdmFyIGJyYW5jaDEgPSBjbG9uZUFTVEVsZW1lbnQoZWwpO1xuICAgICAgZ2V0QW5kUmVtb3ZlQXR0cihicmFuY2gxLCAndi1mb3InLCB0cnVlKTtcbiAgICAgIGFkZFJhd0F0dHIoYnJhbmNoMSwgJ3R5cGUnLCAncmFkaW8nKTtcbiAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDEsIG9wdGlvbnMpO1xuICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICBleHA6IFwiKFwiICsgdHlwZUJpbmRpbmcgKyBcIik9PT0ncmFkaW8nXCIgKyBpZkNvbmRpdGlvbkV4dHJhLFxuICAgICAgICBibG9jazogYnJhbmNoMVxuICAgICAgfSk7XG4gICAgICAvLyAzLiBvdGhlclxuICAgICAgdmFyIGJyYW5jaDIgPSBjbG9uZUFTVEVsZW1lbnQoZWwpO1xuICAgICAgZ2V0QW5kUmVtb3ZlQXR0cihicmFuY2gyLCAndi1mb3InLCB0cnVlKTtcbiAgICAgIGFkZFJhd0F0dHIoYnJhbmNoMiwgJzp0eXBlJywgdHlwZUJpbmRpbmcpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMiwgb3B0aW9ucyk7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogaWZDb25kaXRpb24sXG4gICAgICAgIGJsb2NrOiBicmFuY2gyXG4gICAgICB9KTtcblxuICAgICAgaWYgKGhhc0Vsc2UpIHtcbiAgICAgICAgYnJhbmNoMC5lbHNlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZWxzZUlmQ29uZGl0aW9uKSB7XG4gICAgICAgIGJyYW5jaDAuZWxzZWlmID0gZWxzZUlmQ29uZGl0aW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJhbmNoMFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFTVEVsZW1lbnQgKGVsKSB7XG4gIHJldHVybiBjcmVhdGVBU1RFbGVtZW50KGVsLnRhZywgZWwuYXR0cnNMaXN0LnNsaWNlKCksIGVsLnBhcmVudClcbn1cblxudmFyIG1vZGVsJDEgPSB7XG4gIHByZVRyYW5zZm9ybU5vZGU6IHByZVRyYW5zZm9ybU5vZGVcbn07XG5cbnZhciBtb2R1bGVzJDEgPSBbXG4gIGtsYXNzJDEsXG4gIHN0eWxlJDEsXG4gIG1vZGVsJDFcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0ZXh0IChlbCwgZGlyKSB7XG4gIGlmIChkaXIudmFsdWUpIHtcbiAgICBhZGRQcm9wKGVsLCAndGV4dENvbnRlbnQnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpLCBkaXIpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBodG1sIChlbCwgZGlyKSB7XG4gIGlmIChkaXIudmFsdWUpIHtcbiAgICBhZGRQcm9wKGVsLCAnaW5uZXJIVE1MJywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSwgZGlyKTtcbiAgfVxufVxuXG52YXIgZGlyZWN0aXZlcyQxID0ge1xuICBtb2RlbDogbW9kZWwsXG4gIHRleHQ6IHRleHQsXG4gIGh0bWw6IGh0bWxcbn07XG5cbi8qICAqL1xuXG52YXIgYmFzZU9wdGlvbnMgPSB7XG4gIGV4cGVjdEhUTUw6IHRydWUsXG4gIG1vZHVsZXM6IG1vZHVsZXMkMSxcbiAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyQxLFxuICBpc1ByZVRhZzogaXNQcmVUYWcsXG4gIGlzVW5hcnlUYWc6IGlzVW5hcnlUYWcsXG4gIG11c3RVc2VQcm9wOiBtdXN0VXNlUHJvcCxcbiAgY2FuQmVMZWZ0T3BlblRhZzogY2FuQmVMZWZ0T3BlblRhZyxcbiAgaXNSZXNlcnZlZFRhZzogaXNSZXNlcnZlZFRhZyxcbiAgZ2V0VGFnTmFtZXNwYWNlOiBnZXRUYWdOYW1lc3BhY2UsXG4gIHN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMobW9kdWxlcyQxKVxufTtcblxuLyogICovXG5cbnZhciBpc1N0YXRpY0tleTtcbnZhciBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWc7XG5cbnZhciBnZW5TdGF0aWNLZXlzQ2FjaGVkID0gY2FjaGVkKGdlblN0YXRpY0tleXMkMSk7XG5cbi8qKlxuICogR29hbCBvZiB0aGUgb3B0aW1pemVyOiB3YWxrIHRoZSBnZW5lcmF0ZWQgdGVtcGxhdGUgQVNUIHRyZWVcbiAqIGFuZCBkZXRlY3Qgc3ViLXRyZWVzIHRoYXQgYXJlIHB1cmVseSBzdGF0aWMsIGkuZS4gcGFydHMgb2ZcbiAqIHRoZSBET00gdGhhdCBuZXZlciBuZWVkcyB0byBjaGFuZ2UuXG4gKlxuICogT25jZSB3ZSBkZXRlY3QgdGhlc2Ugc3ViLXRyZWVzLCB3ZSBjYW46XG4gKlxuICogMS4gSG9pc3QgdGhlbSBpbnRvIGNvbnN0YW50cywgc28gdGhhdCB3ZSBubyBsb25nZXIgbmVlZCB0b1xuICogICAgY3JlYXRlIGZyZXNoIG5vZGVzIGZvciB0aGVtIG9uIGVhY2ggcmUtcmVuZGVyO1xuICogMi4gQ29tcGxldGVseSBza2lwIHRoZW0gaW4gdGhlIHBhdGNoaW5nIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIG9wdGltaXplIChyb290LCBvcHRpb25zKSB7XG4gIGlmICghcm9vdCkgeyByZXR1cm4gfVxuICBpc1N0YXRpY0tleSA9IGdlblN0YXRpY0tleXNDYWNoZWQob3B0aW9ucy5zdGF0aWNLZXlzIHx8ICcnKTtcbiAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICAvLyBmaXJzdCBwYXNzOiBtYXJrIGFsbCBub24tc3RhdGljIG5vZGVzLlxuICBtYXJrU3RhdGljJDEocm9vdCk7XG4gIC8vIHNlY29uZCBwYXNzOiBtYXJrIHN0YXRpYyByb290cy5cbiAgbWFya1N0YXRpY1Jvb3RzKHJvb3QsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyQxIChrZXlzKSB7XG4gIHJldHVybiBtYWtlTWFwKFxuICAgICd0eXBlLHRhZyxhdHRyc0xpc3QsYXR0cnNNYXAscGxhaW4scGFyZW50LGNoaWxkcmVuLGF0dHJzLHN0YXJ0LGVuZCxyYXdBdHRyc01hcCcgK1xuICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKVxuICApXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMkMSAobm9kZSkge1xuICBub2RlLnN0YXRpYyA9IGlzU3RhdGljKG5vZGUpO1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgLy8gZG8gbm90IG1ha2UgY29tcG9uZW50IHNsb3QgY29udGVudCBzdGF0aWMuIHRoaXMgYXZvaWRzXG4gICAgLy8gMS4gY29tcG9uZW50cyBub3QgYWJsZSB0byBtdXRhdGUgc2xvdCBub2Rlc1xuICAgIC8vIDIuIHN0YXRpYyBzbG90IGNvbnRlbnQgZmFpbHMgZm9yIGhvdC1yZWxvYWRpbmdcbiAgICBpZiAoXG4gICAgICAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJlxuICAgICAgbm9kZS50YWcgIT09ICdzbG90JyAmJlxuICAgICAgbm9kZS5hdHRyc01hcFsnaW5saW5lLXRlbXBsYXRlJ10gPT0gbnVsbFxuICAgICkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICBtYXJrU3RhdGljJDEoY2hpbGQpO1xuICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHtcbiAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgdmFyIGJsb2NrID0gbm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaztcbiAgICAgICAgbWFya1N0YXRpYyQxKGJsb2NrKTtcbiAgICAgICAgaWYgKCFibG9jay5zdGF0aWMpIHtcbiAgICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNSb290cyAobm9kZSwgaXNJbkZvcikge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgaWYgKG5vZGUuc3RhdGljIHx8IG5vZGUub25jZSkge1xuICAgICAgbm9kZS5zdGF0aWNJbkZvciA9IGlzSW5Gb3I7XG4gICAgfVxuICAgIC8vIEZvciBhIG5vZGUgdG8gcXVhbGlmeSBhcyBhIHN0YXRpYyByb290LCBpdCBzaG91bGQgaGF2ZSBjaGlsZHJlbiB0aGF0XG4gICAgLy8gYXJlIG5vdCBqdXN0IHN0YXRpYyB0ZXh0LiBPdGhlcndpc2UgdGhlIGNvc3Qgb2YgaG9pc3Rpbmcgb3V0IHdpbGxcbiAgICAvLyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgYW5kIGl0J3MgYmV0dGVyIG9mZiB0byBqdXN0IGFsd2F5cyByZW5kZXIgaXQgZnJlc2guXG4gICAgaWYgKG5vZGUuc3RhdGljICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoICYmICEoXG4gICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgbm9kZS5jaGlsZHJlblswXS50eXBlID09PSAzXG4gICAgKSkge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gdHJ1ZTtcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuY2hpbGRyZW5baV0sIGlzSW5Gb3IgfHwgISFub2RlLmZvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrLCBpc0luRm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTdGF0aWMgKG5vZGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMikgeyAvLyBleHByZXNzaW9uXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKG5vZGUudHlwZSA9PT0gMykgeyAvLyB0ZXh0XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gISEobm9kZS5wcmUgfHwgKFxuICAgICFub2RlLmhhc0JpbmRpbmdzICYmIC8vIG5vIGR5bmFtaWMgYmluZGluZ3NcbiAgICAhbm9kZS5pZiAmJiAhbm9kZS5mb3IgJiYgLy8gbm90IHYtaWYgb3Igdi1mb3Igb3Igdi1lbHNlXG4gICAgIWlzQnVpbHRJblRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgYnVpbHQtaW5cbiAgICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGNvbXBvbmVudFxuICAgICFpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvcihub2RlKSAmJlxuICAgIE9iamVjdC5rZXlzKG5vZGUpLmV2ZXJ5KGlzU3RhdGljS2V5KVxuICApKVxufVxuXG5mdW5jdGlvbiBpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciAobm9kZSkge1xuICB3aGlsZSAobm9kZS5wYXJlbnQpIHtcbiAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKG5vZGUudGFnICE9PSAndGVtcGxhdGUnKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9yKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbnZhciBmbkV4cFJFID0gL14oW1xcdyRfXSt8XFwoW14pXSo/XFwpKVxccyo9PnxeZnVuY3Rpb25cXHMqKD86W1xcdyRdKyk/XFxzKlxcKC87XG52YXIgZm5JbnZva2VSRSA9IC9cXChbXildKj9cXCk7KiQvO1xudmFyIHNpbXBsZVBhdGhSRSA9IC9eW0EtWmEtel8kXVtcXHckXSooPzpcXC5bQS1aYS16XyRdW1xcdyRdKnxcXFsnW14nXSo/J118XFxbXCJbXlwiXSo/XCJdfFxcW1xcZCtdfFxcW1tBLVphLXpfJF1bXFx3JF0qXSkqJC87XG5cbi8vIEtleWJvYXJkRXZlbnQua2V5Q29kZSBhbGlhc2VzXG52YXIga2V5Q29kZXMgPSB7XG4gIGVzYzogMjcsXG4gIHRhYjogOSxcbiAgZW50ZXI6IDEzLFxuICBzcGFjZTogMzIsXG4gIHVwOiAzOCxcbiAgbGVmdDogMzcsXG4gIHJpZ2h0OiAzOSxcbiAgZG93bjogNDAsXG4gICdkZWxldGUnOiBbOCwgNDZdXG59O1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleSBhbGlhc2VzXG52YXIga2V5TmFtZXMgPSB7XG4gIC8vICM3ODgwOiBJRTExIGFuZCBFZGdlIHVzZSBgRXNjYCBmb3IgRXNjYXBlIGtleSBuYW1lLlxuICBlc2M6IFsnRXNjJywgJ0VzY2FwZSddLFxuICB0YWI6ICdUYWInLFxuICBlbnRlcjogJ0VudGVyJyxcbiAgLy8gIzkxMTI6IElFMTEgdXNlcyBgU3BhY2ViYXJgIGZvciBTcGFjZSBrZXkgbmFtZS5cbiAgc3BhY2U6IFsnICcsICdTcGFjZWJhciddLFxuICAvLyAjNzgwNjogSUUxMSB1c2VzIGtleSBuYW1lcyB3aXRob3V0IGBBcnJvd2AgcHJlZml4IGZvciBhcnJvdyBrZXlzLlxuICB1cDogWydVcCcsICdBcnJvd1VwJ10sXG4gIGxlZnQ6IFsnTGVmdCcsICdBcnJvd0xlZnQnXSxcbiAgcmlnaHQ6IFsnUmlnaHQnLCAnQXJyb3dSaWdodCddLFxuICBkb3duOiBbJ0Rvd24nLCAnQXJyb3dEb3duJ10sXG4gIC8vICM5MTEyOiBJRTExIHVzZXMgYERlbGAgZm9yIERlbGV0ZSBrZXkgbmFtZS5cbiAgJ2RlbGV0ZSc6IFsnQmFja3NwYWNlJywgJ0RlbGV0ZScsICdEZWwnXVxufTtcblxuLy8gIzQ4Njg6IG1vZGlmaWVycyB0aGF0IHByZXZlbnQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgbGlzdGVuZXJcbi8vIG5lZWQgdG8gZXhwbGljaXRseSByZXR1cm4gbnVsbCBzbyB0aGF0IHdlIGNhbiBkZXRlcm1pbmUgd2hldGhlciB0byByZW1vdmVcbi8vIHRoZSBsaXN0ZW5lciBmb3IgLm9uY2VcbnZhciBnZW5HdWFyZCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHsgcmV0dXJuIChcImlmKFwiICsgY29uZGl0aW9uICsgXCIpcmV0dXJuIG51bGw7XCIpOyB9O1xuXG52YXIgbW9kaWZpZXJDb2RlID0ge1xuICBzdG9wOiAnJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOycsXG4gIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLFxuICBzZWxmOiBnZW5HdWFyZChcIiRldmVudC50YXJnZXQgIT09ICRldmVudC5jdXJyZW50VGFyZ2V0XCIpLFxuICBjdHJsOiBnZW5HdWFyZChcIiEkZXZlbnQuY3RybEtleVwiKSxcbiAgc2hpZnQ6IGdlbkd1YXJkKFwiISRldmVudC5zaGlmdEtleVwiKSxcbiAgYWx0OiBnZW5HdWFyZChcIiEkZXZlbnQuYWx0S2V5XCIpLFxuICBtZXRhOiBnZW5HdWFyZChcIiEkZXZlbnQubWV0YUtleVwiKSxcbiAgbGVmdDogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMFwiKSxcbiAgbWlkZGxlOiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAxXCIpLFxuICByaWdodDogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMlwiKVxufTtcblxuZnVuY3Rpb24gZ2VuSGFuZGxlcnMgKFxuICBldmVudHMsXG4gIGlzTmF0aXZlXG4pIHtcbiAgdmFyIHByZWZpeCA9IGlzTmF0aXZlID8gJ25hdGl2ZU9uOicgOiAnb246JztcbiAgdmFyIHN0YXRpY0hhbmRsZXJzID0gXCJcIjtcbiAgdmFyIGR5bmFtaWNIYW5kbGVycyA9IFwiXCI7XG4gIGZvciAodmFyIG5hbWUgaW4gZXZlbnRzKSB7XG4gICAgdmFyIGhhbmRsZXJDb2RlID0gZ2VuSGFuZGxlcihldmVudHNbbmFtZV0pO1xuICAgIGlmIChldmVudHNbbmFtZV0gJiYgZXZlbnRzW25hbWVdLmR5bmFtaWMpIHtcbiAgICAgIGR5bmFtaWNIYW5kbGVycyArPSBuYW1lICsgXCIsXCIgKyBoYW5kbGVyQ29kZSArIFwiLFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aWNIYW5kbGVycyArPSBcIlxcXCJcIiArIG5hbWUgKyBcIlxcXCI6XCIgKyBoYW5kbGVyQ29kZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBzdGF0aWNIYW5kbGVycyA9IFwie1wiICsgKHN0YXRpY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgaWYgKGR5bmFtaWNIYW5kbGVycykge1xuICAgIHJldHVybiBwcmVmaXggKyBcIl9kKFwiICsgc3RhdGljSGFuZGxlcnMgKyBcIixbXCIgKyAoZHluYW1pY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCJcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJlZml4ICsgc3RhdGljSGFuZGxlcnNcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5IYW5kbGVyIChoYW5kbGVyKSB7XG4gIGlmICghaGFuZGxlcikge1xuICAgIHJldHVybiAnZnVuY3Rpb24oKXt9J1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICByZXR1cm4gKFwiW1wiICsgKGhhbmRsZXIubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBnZW5IYW5kbGVyKGhhbmRsZXIpOyB9KS5qb2luKCcsJykpICsgXCJdXCIpXG4gIH1cblxuICB2YXIgaXNNZXRob2RQYXRoID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uRXhwcmVzc2lvbiA9IGZuRXhwUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcbiAgdmFyIGlzRnVuY3Rpb25JbnZvY2F0aW9uID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZS5yZXBsYWNlKGZuSW52b2tlUkUsICcnKSk7XG5cbiAgaWYgKCFoYW5kbGVyLm1vZGlmaWVycykge1xuICAgIGlmIChpc01ldGhvZFBhdGggfHwgaXNGdW5jdGlvbkV4cHJlc3Npb24pIHtcbiAgICAgIHJldHVybiBoYW5kbGVyLnZhbHVlXG4gICAgfVxuICAgIHJldHVybiAoXCJmdW5jdGlvbigkZXZlbnQpe1wiICsgKGlzRnVuY3Rpb25JbnZvY2F0aW9uID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpKSA6IGhhbmRsZXIudmFsdWUpICsgXCJ9XCIpIC8vIGlubGluZSBzdGF0ZW1lbnRcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29kZSA9ICcnO1xuICAgIHZhciBnZW5Nb2RpZmllckNvZGUgPSAnJztcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBoYW5kbGVyLm1vZGlmaWVycykge1xuICAgICAgaWYgKG1vZGlmaWVyQ29kZVtrZXldKSB7XG4gICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBtb2RpZmllckNvZGVba2V5XTtcbiAgICAgICAgLy8gbGVmdC9yaWdodFxuICAgICAgICBpZiAoa2V5Q29kZXNba2V5XSkge1xuICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2V4YWN0Jykge1xuICAgICAgICB2YXIgbW9kaWZpZXJzID0gKGhhbmRsZXIubW9kaWZpZXJzKTtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IGdlbkd1YXJkKFxuICAgICAgICAgIFsnY3RybCcsICdzaGlmdCcsICdhbHQnLCAnbWV0YSddXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gIW1vZGlmaWVyc1trZXlNb2RpZmllcl07IH0pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gKFwiJGV2ZW50LlwiICsga2V5TW9kaWZpZXIgKyBcIktleVwiKTsgfSlcbiAgICAgICAgICAgIC5qb2luKCd8fCcpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICBjb2RlICs9IGdlbktleUZpbHRlcihrZXlzKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIG1vZGlmaWVycyBsaWtlIHByZXZlbnQgYW5kIHN0b3AgZ2V0IGV4ZWN1dGVkIGFmdGVyIGtleSBmaWx0ZXJpbmdcbiAgICBpZiAoZ2VuTW9kaWZpZXJDb2RlKSB7XG4gICAgICBjb2RlICs9IGdlbk1vZGlmaWVyQ29kZTtcbiAgICB9XG4gICAgdmFyIGhhbmRsZXJDb2RlID0gaXNNZXRob2RQYXRoXG4gICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKCRldmVudClcIilcbiAgICAgIDogaXNGdW5jdGlvbkV4cHJlc3Npb25cbiAgICAgICAgPyAoXCJyZXR1cm4gKFwiICsgKGhhbmRsZXIudmFsdWUpICsgXCIpKCRldmVudClcIilcbiAgICAgICAgOiBpc0Z1bmN0aW9uSW52b2NhdGlvblxuICAgICAgICAgID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpKVxuICAgICAgICAgIDogaGFuZGxlci52YWx1ZTtcbiAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIGNvZGUgKyBoYW5kbGVyQ29kZSArIFwifVwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbktleUZpbHRlciAoa2V5cykge1xuICByZXR1cm4gKFxuICAgIC8vIG1ha2Ugc3VyZSB0aGUga2V5IGZpbHRlcnMgb25seSBhcHBseSB0byBLZXlib2FyZEV2ZW50c1xuICAgIC8vICM5NDQxOiBjYW4ndCB1c2UgJ2tleUNvZGUnIGluICRldmVudCBiZWNhdXNlIENocm9tZSBhdXRvZmlsbCBmaXJlcyBmYWtlXG4gICAgLy8ga2V5IGV2ZW50cyB0aGF0IGRvIG5vdCBoYXZlIGtleUNvZGUgcHJvcGVydHkuLi5cbiAgICBcImlmKCEkZXZlbnQudHlwZS5pbmRleE9mKCdrZXknKSYmXCIgK1xuICAgIChrZXlzLm1hcChnZW5GaWx0ZXJDb2RlKS5qb2luKCcmJicpKSArIFwiKXJldHVybiBudWxsO1wiXG4gIClcbn1cblxuZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZSAoa2V5KSB7XG4gIHZhciBrZXlWYWwgPSBwYXJzZUludChrZXksIDEwKTtcbiAgaWYgKGtleVZhbCkge1xuICAgIHJldHVybiAoXCIkZXZlbnQua2V5Q29kZSE9PVwiICsga2V5VmFsKVxuICB9XG4gIHZhciBrZXlDb2RlID0ga2V5Q29kZXNba2V5XTtcbiAgdmFyIGtleU5hbWUgPSBrZXlOYW1lc1trZXldO1xuICByZXR1cm4gKFxuICAgIFwiX2soJGV2ZW50LmtleUNvZGUsXCIgK1xuICAgIChKU09OLnN0cmluZ2lmeShrZXkpKSArIFwiLFwiICtcbiAgICAoSlNPTi5zdHJpbmdpZnkoa2V5Q29kZSkpICsgXCIsXCIgK1xuICAgIFwiJGV2ZW50LmtleSxcIiArXG4gICAgXCJcIiArIChKU09OLnN0cmluZ2lmeShrZXlOYW1lKSkgK1xuICAgIFwiKVwiXG4gIClcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG9uIChlbCwgZGlyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRpci5tb2RpZmllcnMpIHtcbiAgICB3YXJuKFwidi1vbiB3aXRob3V0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgbW9kaWZpZXJzLlwiKTtcbiAgfVxuICBlbC53cmFwTGlzdGVuZXJzID0gZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcIl9nKFwiICsgY29kZSArIFwiLFwiICsgKGRpci52YWx1ZSkgKyBcIilcIik7IH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kJDEgKGVsLCBkaXIpIHtcbiAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoXCJfYihcIiArIGNvZGUgKyBcIiwnXCIgKyAoZWwudGFnKSArIFwiJyxcIiArIChkaXIudmFsdWUpICsgXCIsXCIgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnByb3AgPyAndHJ1ZScgOiAnZmFsc2UnKSArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMuc3luYyA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBiYXNlRGlyZWN0aXZlcyA9IHtcbiAgb246IG9uLFxuICBiaW5kOiBiaW5kJDEsXG4gIGNsb2FrOiBub29wXG59O1xuXG4vKiAgKi9cblxuXG5cblxuXG52YXIgQ29kZWdlblN0YXRlID0gZnVuY3Rpb24gQ29kZWdlblN0YXRlIChvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMud2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdGhpcy50cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Db2RlJyk7XG4gIHRoaXMuZGF0YUdlbkZucyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAnZ2VuRGF0YScpO1xuICB0aGlzLmRpcmVjdGl2ZXMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiYXNlRGlyZWN0aXZlcyksIG9wdGlvbnMuZGlyZWN0aXZlcyk7XG4gIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICB0aGlzLm1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuICB0aGlzLm9uY2VJZCA9IDA7XG4gIHRoaXMuc3RhdGljUmVuZGVyRm5zID0gW107XG4gIHRoaXMucHJlID0gZmFsc2U7XG59O1xuXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGUgKFxuICBhc3QsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgc3RhdGUgPSBuZXcgQ29kZWdlblN0YXRlKG9wdGlvbnMpO1xuICB2YXIgY29kZSA9IGFzdCA/IGdlbkVsZW1lbnQoYXN0LCBzdGF0ZSkgOiAnX2MoXCJkaXZcIiknO1xuICByZXR1cm4ge1xuICAgIHJlbmRlcjogKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyBjb2RlICsgXCJ9XCIpLFxuICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRWxlbWVudCAoZWwsIHN0YXRlKSB7XG4gIGlmIChlbC5wYXJlbnQpIHtcbiAgICBlbC5wcmUgPSBlbC5wcmUgfHwgZWwucGFyZW50LnByZTtcbiAgfVxuXG4gIGlmIChlbC5zdGF0aWNSb290ICYmICFlbC5zdGF0aWNQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbk9uY2UoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQgJiYgIXN0YXRlLnByZSkge1xuICAgIHJldHVybiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd2b2lkIDAnXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICByZXR1cm4gZ2VuU2xvdChlbCwgc3RhdGUpXG4gIH0gZWxzZSB7XG4gICAgLy8gY29tcG9uZW50IG9yIGVsZW1lbnRcbiAgICB2YXIgY29kZTtcbiAgICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgICBjb2RlID0gZ2VuQ29tcG9uZW50KGVsLmNvbXBvbmVudCwgZWwsIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRhdGE7XG4gICAgICBpZiAoIWVsLnBsYWluIHx8IChlbC5wcmUgJiYgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpKSkge1xuICAgICAgICBkYXRhID0gZ2VuRGF0YSQyKGVsLCBzdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gICAgICBjb2RlID0gXCJfYygnXCIgKyAoZWwudGFnKSArIFwiJ1wiICsgKGRhdGEgPyAoXCIsXCIgKyBkYXRhKSA6ICcnKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiO1xuICAgIH1cbiAgICAvLyBtb2R1bGUgdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUudHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29kZSA9IHN0YXRlLnRyYW5zZm9ybXNbaV0oZWwsIGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY29kZVxuICB9XG59XG5cbi8vIGhvaXN0IHN0YXRpYyBzdWItdHJlZXMgb3V0XG5mdW5jdGlvbiBnZW5TdGF0aWMgKGVsLCBzdGF0ZSkge1xuICBlbC5zdGF0aWNQcm9jZXNzZWQgPSB0cnVlO1xuICAvLyBTb21lIGVsZW1lbnRzICh0ZW1wbGF0ZXMpIG5lZWQgdG8gYmVoYXZlIGRpZmZlcmVudGx5IGluc2lkZSBvZiBhIHYtcHJlXG4gIC8vIG5vZGUuICBBbGwgcHJlIG5vZGVzIGFyZSBzdGF0aWMgcm9vdHMsIHNvIHdlIGNhbiB1c2UgdGhpcyBhcyBhIGxvY2F0aW9uIHRvXG4gIC8vIHdyYXAgYSBzdGF0ZSBjaGFuZ2UgYW5kIHJlc2V0IGl0IHVwb24gZXhpdGluZyB0aGUgcHJlIG5vZGUuXG4gIHZhciBvcmlnaW5hbFByZVN0YXRlID0gc3RhdGUucHJlO1xuICBpZiAoZWwucHJlKSB7XG4gICAgc3RhdGUucHJlID0gZWwucHJlO1xuICB9XG4gIHN0YXRlLnN0YXRpY1JlbmRlckZucy5wdXNoKChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgKGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIn1cIikpO1xuICBzdGF0ZS5wcmUgPSBvcmlnaW5hbFByZVN0YXRlO1xuICByZXR1cm4gKFwiX20oXCIgKyAoc3RhdGUuc3RhdGljUmVuZGVyRm5zLmxlbmd0aCAtIDEpICsgKGVsLnN0YXRpY0luRm9yID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxufVxuXG4vLyB2LW9uY2VcbmZ1bmN0aW9uIGdlbk9uY2UgKGVsLCBzdGF0ZSkge1xuICBlbC5vbmNlUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuc3RhdGljSW5Gb3IpIHtcbiAgICB2YXIga2V5ID0gJyc7XG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LmZvcikge1xuICAgICAgICBrZXkgPSBwYXJlbnQua2V5O1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RhdGUud2FybihcbiAgICAgICAgXCJ2LW9uY2UgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgdi1mb3IgdGhhdCBpcyBrZXllZC4gXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW9uY2UnXVxuICAgICAgKTtcbiAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgICB9XG4gICAgcmV0dXJuIChcIl9vKFwiICsgKGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIixcIiArIChzdGF0ZS5vbmNlSWQrKykgKyBcIixcIiArIGtleSArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5TdGF0aWMoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklmIChcbiAgZWwsXG4gIHN0YXRlLFxuICBhbHRHZW4sXG4gIGFsdEVtcHR5XG4pIHtcbiAgZWwuaWZQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIGdlbklmQ29uZGl0aW9ucyhlbC5pZkNvbmRpdGlvbnMuc2xpY2UoKSwgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpXG59XG5cbmZ1bmN0aW9uIGdlbklmQ29uZGl0aW9ucyAoXG4gIGNvbmRpdGlvbnMsXG4gIHN0YXRlLFxuICBhbHRHZW4sXG4gIGFsdEVtcHR5XG4pIHtcbiAgaWYgKCFjb25kaXRpb25zLmxlbmd0aCkge1xuICAgIHJldHVybiBhbHRFbXB0eSB8fCAnX2UoKSdcbiAgfVxuXG4gIHZhciBjb25kaXRpb24gPSBjb25kaXRpb25zLnNoaWZ0KCk7XG4gIGlmIChjb25kaXRpb24uZXhwKSB7XG4gICAgcmV0dXJuIChcIihcIiArIChjb25kaXRpb24uZXhwKSArIFwiKT9cIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpICsgXCI6XCIgKyAoZ2VuSWZDb25kaXRpb25zKGNvbmRpdGlvbnMsIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkpXG4gIH1cblxuICAvLyB2LWlmIHdpdGggdi1vbmNlIHNob3VsZCBnZW5lcmF0ZSBjb2RlIGxpa2UgKGEpP19tKDApOl9tKDEpXG4gIGZ1bmN0aW9uIGdlblRlcm5hcnlFeHAgKGVsKSB7XG4gICAgcmV0dXJuIGFsdEdlblxuICAgICAgPyBhbHRHZW4oZWwsIHN0YXRlKVxuICAgICAgOiBlbC5vbmNlXG4gICAgICAgID8gZ2VuT25jZShlbCwgc3RhdGUpXG4gICAgICAgIDogZ2VuRWxlbWVudChlbCwgc3RhdGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRm9yIChcbiAgZWwsXG4gIHN0YXRlLFxuICBhbHRHZW4sXG4gIGFsdEhlbHBlclxuKSB7XG4gIHZhciBleHAgPSBlbC5mb3I7XG4gIHZhciBhbGlhcyA9IGVsLmFsaWFzO1xuICB2YXIgaXRlcmF0b3IxID0gZWwuaXRlcmF0b3IxID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMSkpIDogJyc7XG4gIHZhciBpdGVyYXRvcjIgPSBlbC5pdGVyYXRvcjIgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IyKSkgOiAnJztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSAmJlxuICAgIGVsLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgZWwudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgIWVsLmtleVxuICApIHtcbiAgICBzdGF0ZS53YXJuKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtZm9yPVxcXCJcIiArIGFsaWFzICsgXCIgaW4gXCIgKyBleHAgKyBcIlxcXCI+OiBjb21wb25lbnQgbGlzdHMgcmVuZGVyZWQgd2l0aCBcIiArXG4gICAgICBcInYtZm9yIHNob3VsZCBoYXZlIGV4cGxpY2l0IGtleXMuIFwiICtcbiAgICAgIFwiU2VlIGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2xpc3QuaHRtbCNrZXkgZm9yIG1vcmUgaW5mby5cIixcbiAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddLFxuICAgICAgdHJ1ZSAvKiB0aXAgKi9cbiAgICApO1xuICB9XG5cbiAgZWwuZm9yUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiAoYWx0SGVscGVyIHx8ICdfbCcpICsgXCIoKFwiICsgZXhwICsgXCIpLFwiICtcbiAgICBcImZ1bmN0aW9uKFwiICsgYWxpYXMgKyBpdGVyYXRvcjEgKyBpdGVyYXRvcjIgKyBcIil7XCIgK1xuICAgICAgXCJyZXR1cm4gXCIgKyAoKGFsdEdlbiB8fCBnZW5FbGVtZW50KShlbCwgc3RhdGUpKSArXG4gICAgJ30pJ1xufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDIgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGF0YSA9ICd7JztcblxuICAvLyBkaXJlY3RpdmVzIGZpcnN0LlxuICAvLyBkaXJlY3RpdmVzIG1heSBtdXRhdGUgdGhlIGVsJ3Mgb3RoZXIgcHJvcGVydGllcyBiZWZvcmUgdGhleSBhcmUgZ2VuZXJhdGVkLlxuICB2YXIgZGlycyA9IGdlbkRpcmVjdGl2ZXMoZWwsIHN0YXRlKTtcbiAgaWYgKGRpcnMpIHsgZGF0YSArPSBkaXJzICsgJywnOyB9XG5cbiAgLy8ga2V5XG4gIGlmIChlbC5rZXkpIHtcbiAgICBkYXRhICs9IFwia2V5OlwiICsgKGVsLmtleSkgKyBcIixcIjtcbiAgfVxuICAvLyByZWZcbiAgaWYgKGVsLnJlZikge1xuICAgIGRhdGEgKz0gXCJyZWY6XCIgKyAoZWwucmVmKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5yZWZJbkZvcikge1xuICAgIGRhdGEgKz0gXCJyZWZJbkZvcjp0cnVlLFwiO1xuICB9XG4gIC8vIHByZVxuICBpZiAoZWwucHJlKSB7XG4gICAgZGF0YSArPSBcInByZTp0cnVlLFwiO1xuICB9XG4gIC8vIHJlY29yZCBvcmlnaW5hbCB0YWcgbmFtZSBmb3IgY29tcG9uZW50cyB1c2luZyBcImlzXCIgYXR0cmlidXRlXG4gIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICBkYXRhICs9IFwidGFnOlxcXCJcIiArIChlbC50YWcpICsgXCJcXFwiLFwiO1xuICB9XG4gIC8vIG1vZHVsZSBkYXRhIGdlbmVyYXRpb24gZnVuY3Rpb25zXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUuZGF0YUdlbkZucy5sZW5ndGg7IGkrKykge1xuICAgIGRhdGEgKz0gc3RhdGUuZGF0YUdlbkZuc1tpXShlbCk7XG4gIH1cbiAgLy8gYXR0cmlidXRlc1xuICBpZiAoZWwuYXR0cnMpIHtcbiAgICBkYXRhICs9IFwiYXR0cnM6XCIgKyAoZ2VuUHJvcHMoZWwuYXR0cnMpKSArIFwiLFwiO1xuICB9XG4gIC8vIERPTSBwcm9wc1xuICBpZiAoZWwucHJvcHMpIHtcbiAgICBkYXRhICs9IFwiZG9tUHJvcHM6XCIgKyAoZ2VuUHJvcHMoZWwucHJvcHMpKSArIFwiLFwiO1xuICB9XG4gIC8vIGV2ZW50IGhhbmRsZXJzXG4gIGlmIChlbC5ldmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5ldmVudHMsIGZhbHNlKSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwubmF0aXZlRXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwubmF0aXZlRXZlbnRzLCB0cnVlKSkgKyBcIixcIjtcbiAgfVxuICAvLyBzbG90IHRhcmdldFxuICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zbG90VGFyZ2V0ICYmICFlbC5zbG90U2NvcGUpIHtcbiAgICBkYXRhICs9IFwic2xvdDpcIiArIChlbC5zbG90VGFyZ2V0KSArIFwiLFwiO1xuICB9XG4gIC8vIHNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICBkYXRhICs9IChnZW5TY29wZWRTbG90cyhlbCwgZWwuc2NvcGVkU2xvdHMsIHN0YXRlKSkgKyBcIixcIjtcbiAgfVxuICAvLyBjb21wb25lbnQgdi1tb2RlbFxuICBpZiAoZWwubW9kZWwpIHtcbiAgICBkYXRhICs9IFwibW9kZWw6e3ZhbHVlOlwiICsgKGVsLm1vZGVsLnZhbHVlKSArIFwiLGNhbGxiYWNrOlwiICsgKGVsLm1vZGVsLmNhbGxiYWNrKSArIFwiLGV4cHJlc3Npb246XCIgKyAoZWwubW9kZWwuZXhwcmVzc2lvbikgKyBcIn0sXCI7XG4gIH1cbiAgLy8gaW5saW5lLXRlbXBsYXRlXG4gIGlmIChlbC5pbmxpbmVUZW1wbGF0ZSkge1xuICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IGdlbklubGluZVRlbXBsYXRlKGVsLCBzdGF0ZSk7XG4gICAgaWYgKGlubGluZVRlbXBsYXRlKSB7XG4gICAgICBkYXRhICs9IGlubGluZVRlbXBsYXRlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoLywkLywgJycpICsgJ30nO1xuICAvLyB2LWJpbmQgZHluYW1pYyBhcmd1bWVudCB3cmFwXG4gIC8vIHYtYmluZCB3aXRoIGR5bmFtaWMgYXJndW1lbnRzIG11c3QgYmUgYXBwbGllZCB1c2luZyB0aGUgc2FtZSB2LWJpbmQgb2JqZWN0XG4gIC8vIG1lcmdlIGhlbHBlciBzbyB0aGF0IGNsYXNzL3N0eWxlL211c3RVc2VQcm9wIGF0dHJzIGFyZSBoYW5kbGVkIGNvcnJlY3RseS5cbiAgaWYgKGVsLmR5bmFtaWNBdHRycykge1xuICAgIGRhdGEgPSBcIl9iKFwiICsgZGF0YSArIFwiLFxcXCJcIiArIChlbC50YWcpICsgXCJcXFwiLFwiICsgKGdlblByb3BzKGVsLmR5bmFtaWNBdHRycykpICsgXCIpXCI7XG4gIH1cbiAgLy8gdi1iaW5kIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcERhdGEpIHtcbiAgICBkYXRhID0gZWwud3JhcERhdGEoZGF0YSk7XG4gIH1cbiAgLy8gdi1vbiBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBMaXN0ZW5lcnMpIHtcbiAgICBkYXRhID0gZWwud3JhcExpc3RlbmVycyhkYXRhKTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBnZW5EaXJlY3RpdmVzIChlbCwgc3RhdGUpIHtcbiAgdmFyIGRpcnMgPSBlbC5kaXJlY3RpdmVzO1xuICBpZiAoIWRpcnMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9ICdkaXJlY3RpdmVzOlsnO1xuICB2YXIgaGFzUnVudGltZSA9IGZhbHNlO1xuICB2YXIgaSwgbCwgZGlyLCBuZWVkUnVudGltZTtcbiAgZm9yIChpID0gMCwgbCA9IGRpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBuZWVkUnVudGltZSA9IHRydWU7XG4gICAgdmFyIGdlbiA9IHN0YXRlLmRpcmVjdGl2ZXNbZGlyLm5hbWVdO1xuICAgIGlmIChnZW4pIHtcbiAgICAgIC8vIGNvbXBpbGUtdGltZSBkaXJlY3RpdmUgdGhhdCBtYW5pcHVsYXRlcyBBU1QuXG4gICAgICAvLyByZXR1cm5zIHRydWUgaWYgaXQgYWxzbyBuZWVkcyBhIHJ1bnRpbWUgY291bnRlcnBhcnQuXG4gICAgICBuZWVkUnVudGltZSA9ICEhZ2VuKGVsLCBkaXIsIHN0YXRlLndhcm4pO1xuICAgIH1cbiAgICBpZiAobmVlZFJ1bnRpbWUpIHtcbiAgICAgIGhhc1J1bnRpbWUgPSB0cnVlO1xuICAgICAgcmVzICs9IFwie25hbWU6XFxcIlwiICsgKGRpci5uYW1lKSArIFwiXFxcIixyYXdOYW1lOlxcXCJcIiArIChkaXIucmF3TmFtZSkgKyBcIlxcXCJcIiArIChkaXIudmFsdWUgPyAoXCIsdmFsdWU6KFwiICsgKGRpci52YWx1ZSkgKyBcIiksZXhwcmVzc2lvbjpcIiArIChKU09OLnN0cmluZ2lmeShkaXIudmFsdWUpKSkgOiAnJykgKyAoZGlyLmFyZyA/IChcIixhcmc6XCIgKyAoZGlyLmlzRHluYW1pY0FyZyA/IGRpci5hcmcgOiAoXCJcXFwiXCIgKyAoZGlyLmFyZykgKyBcIlxcXCJcIikpKSA6ICcnKSArIChkaXIubW9kaWZpZXJzID8gKFwiLG1vZGlmaWVyczpcIiArIChKU09OLnN0cmluZ2lmeShkaXIubW9kaWZpZXJzKSkpIDogJycpICsgXCJ9LFwiO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzUnVudGltZSkge1xuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ10nXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSW5saW5lVGVtcGxhdGUgKGVsLCBzdGF0ZSkge1xuICB2YXIgYXN0ID0gZWwuY2hpbGRyZW5bMF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChcbiAgICBlbC5jaGlsZHJlbi5sZW5ndGggIT09IDEgfHwgYXN0LnR5cGUgIT09IDFcbiAgKSkge1xuICAgIHN0YXRlLndhcm4oXG4gICAgICAnSW5saW5lLXRlbXBsYXRlIGNvbXBvbmVudHMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIGNoaWxkIGVsZW1lbnQuJyxcbiAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICApO1xuICB9XG4gIGlmIChhc3QgJiYgYXN0LnR5cGUgPT09IDEpIHtcbiAgICB2YXIgaW5saW5lUmVuZGVyRm5zID0gZ2VuZXJhdGUoYXN0LCBzdGF0ZS5vcHRpb25zKTtcbiAgICByZXR1cm4gKFwiaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpe1wiICsgKGlubGluZVJlbmRlckZucy5yZW5kZXIpICsgXCJ9LHN0YXRpY1JlbmRlckZuczpbXCIgKyAoaW5saW5lUmVuZGVyRm5zLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcImZ1bmN0aW9uKCl7XCIgKyBjb2RlICsgXCJ9XCIpOyB9KS5qb2luKCcsJykpICsgXCJdfVwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3RzIChcbiAgZWwsXG4gIHNsb3RzLFxuICBzdGF0ZVxuKSB7XG4gIC8vIGJ5IGRlZmF1bHQgc2NvcGVkIHNsb3RzIGFyZSBjb25zaWRlcmVkIFwic3RhYmxlXCIsIHRoaXMgYWxsb3dzIGNoaWxkXG4gIC8vIGNvbXBvbmVudHMgd2l0aCBvbmx5IHNjb3BlZCBzbG90cyB0byBza2lwIGZvcmNlZCB1cGRhdGVzIGZyb20gcGFyZW50LlxuICAvLyBidXQgaW4gc29tZSBjYXNlcyB3ZSBoYXZlIHRvIGJhaWwtb3V0IG9mIHRoaXMgb3B0aW1pemF0aW9uXG4gIC8vIGZvciBleGFtcGxlIGlmIHRoZSBzbG90IGNvbnRhaW5zIGR5bmFtaWMgbmFtZXMsIGhhcyB2LWlmIG9yIHYtZm9yIG9uIHRoZW0uLi5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSBlbC5mb3IgfHwgT2JqZWN0LmtleXMoc2xvdHMpLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzbG90ID0gc2xvdHNba2V5XTtcbiAgICByZXR1cm4gKFxuICAgICAgc2xvdC5zbG90VGFyZ2V0RHluYW1pYyB8fFxuICAgICAgc2xvdC5pZiB8fFxuICAgICAgc2xvdC5mb3IgfHxcbiAgICAgIGNvbnRhaW5zU2xvdENoaWxkKHNsb3QpIC8vIGlzIHBhc3NpbmcgZG93biBzbG90IGZyb20gcGFyZW50IHdoaWNoIG1heSBiZSBkeW5hbWljXG4gICAgKVxuICB9KTtcblxuICAvLyAjOTUzNDogaWYgYSBjb21wb25lbnQgd2l0aCBzY29wZWQgc2xvdHMgaXMgaW5zaWRlIGEgY29uZGl0aW9uYWwgYnJhbmNoLFxuICAvLyBpdCdzIHBvc3NpYmxlIGZvciB0aGUgc2FtZSBjb21wb25lbnQgdG8gYmUgcmV1c2VkIGJ1dCB3aXRoIGRpZmZlcmVudFxuICAvLyBjb21waWxlZCBzbG90IGNvbnRlbnQuIFRvIGF2b2lkIHRoYXQsIHdlIGdlbmVyYXRlIGEgdW5pcXVlIGtleSBiYXNlZCBvblxuICAvLyB0aGUgZ2VuZXJhdGVkIGNvZGUgb2YgYWxsIHRoZSBzbG90IGNvbnRlbnRzLlxuICB2YXIgbmVlZHNLZXkgPSAhIWVsLmlmO1xuXG4gIC8vIE9SIHdoZW4gaXQgaXMgaW5zaWRlIGFub3RoZXIgc2NvcGVkIHNsb3Qgb3Igdi1mb3IgKHRoZSByZWFjdGl2aXR5IG1heSBiZVxuICAvLyBkaXNjb25uZWN0ZWQgZHVlIHRvIHRoZSBpbnRlcm1lZGlhdGUgc2NvcGUgdmFyaWFibGUpXG4gIC8vICM5NDM4LCAjOTUwNlxuICAvLyBUT0RPOiB0aGlzIGNhbiBiZSBmdXJ0aGVyIG9wdGltaXplZCBieSBwcm9wZXJseSBhbmFseXppbmcgaW4tc2NvcGUgYmluZGluZ3NcbiAgLy8gYW5kIHNraXAgZm9yY2UgdXBkYXRpbmcgb25lcyB0aGF0IGRvIG5vdCBhY3R1YWxseSB1c2Ugc2NvcGUgdmFyaWFibGVzLlxuICBpZiAoIW5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKHBhcmVudC5zbG90U2NvcGUgJiYgcGFyZW50LnNsb3RTY29wZSAhPT0gZW1wdHlTbG90U2NvcGVUb2tlbikgfHxcbiAgICAgICAgcGFyZW50LmZvclxuICAgICAgKSB7XG4gICAgICAgIG5lZWRzRm9yY2VVcGRhdGUgPSB0cnVlO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudC5pZikge1xuICAgICAgICBuZWVkc0tleSA9IHRydWU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHZhciBnZW5lcmF0ZWRTbG90cyA9IE9iamVjdC5rZXlzKHNsb3RzKVxuICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZ2VuU2NvcGVkU2xvdChzbG90c1trZXldLCBzdGF0ZSk7IH0pXG4gICAgLmpvaW4oJywnKTtcblxuICByZXR1cm4gKFwic2NvcGVkU2xvdHM6X3UoW1wiICsgZ2VuZXJhdGVkU2xvdHMgKyBcIl1cIiArIChuZWVkc0ZvcmNlVXBkYXRlID8gXCIsbnVsbCx0cnVlXCIgOiBcIlwiKSArICghbmVlZHNGb3JjZVVwZGF0ZSAmJiBuZWVkc0tleSA/IChcIixudWxsLGZhbHNlLFwiICsgKGhhc2goZ2VuZXJhdGVkU2xvdHMpKSkgOiBcIlwiKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICB2YXIgaGFzaCA9IDUzODE7XG4gIHZhciBpID0gc3RyLmxlbmd0aDtcbiAgd2hpbGUoaSkge1xuICAgIGhhc2ggPSAoaGFzaCAqIDMzKSBeIHN0ci5jaGFyQ29kZUF0KC0taSk7XG4gIH1cbiAgcmV0dXJuIGhhc2ggPj4+IDBcbn1cblxuZnVuY3Rpb24gY29udGFpbnNTbG90Q2hpbGQgKGVsKSB7XG4gIGlmIChlbC50eXBlID09PSAxKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZWwuY2hpbGRyZW4uc29tZShjb250YWluc1Nsb3RDaGlsZClcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdCAoXG4gIGVsLFxuICBzdGF0ZVxuKSB7XG4gIHZhciBpc0xlZ2FjeVN5bnRheCA9IGVsLmF0dHJzTWFwWydzbG90LXNjb3BlJ107XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQgJiYgIWlzTGVnYWN5U3ludGF4KSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdCwgXCJudWxsXCIpXG4gIH1cbiAgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUsIGdlblNjb3BlZFNsb3QpXG4gIH1cbiAgdmFyIHNsb3RTY29wZSA9IGVsLnNsb3RTY29wZSA9PT0gZW1wdHlTbG90U2NvcGVUb2tlblxuICAgID8gXCJcIlxuICAgIDogU3RyaW5nKGVsLnNsb3RTY29wZSk7XG4gIHZhciBmbiA9IFwiZnVuY3Rpb24oXCIgKyBzbG90U2NvcGUgKyBcIil7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJ1xuICAgICAgPyBlbC5pZiAmJiBpc0xlZ2FjeVN5bnRheFxuICAgICAgICA/IChcIihcIiArIChlbC5pZikgKyBcIik/XCIgKyAoZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndW5kZWZpbmVkJykgKyBcIjp1bmRlZmluZWRcIilcbiAgICAgICAgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnXG4gICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIn1cIjtcbiAgLy8gcmV2ZXJzZSBwcm94eSB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICB2YXIgcmV2ZXJzZVByb3h5ID0gc2xvdFNjb3BlID8gXCJcIiA6IFwiLHByb3h5OnRydWVcIjtcbiAgcmV0dXJuIChcIntrZXk6XCIgKyAoZWwuc2xvdFRhcmdldCB8fCBcIlxcXCJkZWZhdWx0XFxcIlwiKSArIFwiLGZuOlwiICsgZm4gKyByZXZlcnNlUHJveHkgKyBcIn1cIilcbn1cblxuZnVuY3Rpb24gZ2VuQ2hpbGRyZW4gKFxuICBlbCxcbiAgc3RhdGUsXG4gIGNoZWNrU2tpcCxcbiAgYWx0R2VuRWxlbWVudCxcbiAgYWx0R2VuTm9kZVxuKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xuICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgdmFyIGVsJDEgPSBjaGlsZHJlblswXTtcbiAgICAvLyBvcHRpbWl6ZSBzaW5nbGUgdi1mb3JcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICBlbCQxLmZvciAmJlxuICAgICAgZWwkMS50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAgIGVsJDEudGFnICE9PSAnc2xvdCdcbiAgICApIHtcbiAgICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSA9IGNoZWNrU2tpcFxuICAgICAgICA/IHN0YXRlLm1heWJlQ29tcG9uZW50KGVsJDEpID8gXCIsMVwiIDogXCIsMFwiXG4gICAgICAgIDogXCJcIjtcbiAgICAgIHJldHVybiAoXCJcIiArICgoYWx0R2VuRWxlbWVudCB8fCBnZW5FbGVtZW50KShlbCQxLCBzdGF0ZSkpICsgbm9ybWFsaXphdGlvblR5cGUpXG4gICAgfVxuICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSQxID0gY2hlY2tTa2lwXG4gICAgICA/IGdldE5vcm1hbGl6YXRpb25UeXBlKGNoaWxkcmVuLCBzdGF0ZS5tYXliZUNvbXBvbmVudClcbiAgICAgIDogMDtcbiAgICB2YXIgZ2VuID0gYWx0R2VuTm9kZSB8fCBnZW5Ob2RlO1xuICAgIHJldHVybiAoXCJbXCIgKyAoY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBnZW4oYywgc3RhdGUpOyB9KS5qb2luKCcsJykpICsgXCJdXCIgKyAobm9ybWFsaXphdGlvblR5cGUkMSA/IChcIixcIiArIG5vcm1hbGl6YXRpb25UeXBlJDEpIDogJycpKVxuICB9XG59XG5cbi8vIGRldGVybWluZSB0aGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgZm9yIHRoZSBjaGlsZHJlbiBhcnJheS5cbi8vIDA6IG5vIG5vcm1hbGl6YXRpb24gbmVlZGVkXG4vLyAxOiBzaW1wbGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgKHBvc3NpYmxlIDEtbGV2ZWwgZGVlcCBuZXN0ZWQgYXJyYXkpXG4vLyAyOiBmdWxsIG5vcm1hbGl6YXRpb24gbmVlZGVkXG5mdW5jdGlvbiBnZXROb3JtYWxpemF0aW9uVHlwZSAoXG4gIGNoaWxkcmVuLFxuICBtYXliZUNvbXBvbmVudFxuKSB7XG4gIHZhciByZXMgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGVsLnR5cGUgIT09IDEpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChuZWVkc05vcm1hbGl6YXRpb24oZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG5lZWRzTm9ybWFsaXphdGlvbihjLmJsb2NrKTsgfSkpKSB7XG4gICAgICByZXMgPSAyO1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKG1heWJlQ29tcG9uZW50KGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBtYXliZUNvbXBvbmVudChjLmJsb2NrKTsgfSkpKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5lZWRzTm9ybWFsaXphdGlvbiAoZWwpIHtcbiAgcmV0dXJuIGVsLmZvciAhPT0gdW5kZWZpbmVkIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyB8fCBlbC50YWcgPT09ICdzbG90J1xufVxuXG5mdW5jdGlvbiBnZW5Ob2RlIChub2RlLCBzdGF0ZSkge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGdlbkVsZW1lbnQobm9kZSwgc3RhdGUpXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAzICYmIG5vZGUuaXNDb21tZW50KSB7XG4gICAgcmV0dXJuIGdlbkNvbW1lbnQobm9kZSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuVGV4dChub2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlblRleHQgKHRleHQpIHtcbiAgcmV0dXJuIChcIl92KFwiICsgKHRleHQudHlwZSA9PT0gMlxuICAgID8gdGV4dC5leHByZXNzaW9uIC8vIG5vIG5lZWQgZm9yICgpIGJlY2F1c2UgYWxyZWFkeSB3cmFwcGVkIGluIF9zKClcbiAgICA6IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhKU09OLnN0cmluZ2lmeSh0ZXh0LnRleHQpKSkgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuQ29tbWVudCAoY29tbWVudCkge1xuICByZXR1cm4gKFwiX2UoXCIgKyAoSlNPTi5zdHJpbmdpZnkoY29tbWVudC50ZXh0KSkgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuU2xvdCAoZWwsIHN0YXRlKSB7XG4gIHZhciBzbG90TmFtZSA9IGVsLnNsb3ROYW1lIHx8ICdcImRlZmF1bHRcIic7XG4gIHZhciBjaGlsZHJlbiA9IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSk7XG4gIHZhciByZXMgPSBcIl90KFwiICsgc2xvdE5hbWUgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJyk7XG4gIHZhciBhdHRycyA9IGVsLmF0dHJzIHx8IGVsLmR5bmFtaWNBdHRyc1xuICAgID8gZ2VuUHJvcHMoKGVsLmF0dHJzIHx8IFtdKS5jb25jYXQoZWwuZHluYW1pY0F0dHJzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuICh7XG4gICAgICAgIC8vIHNsb3QgcHJvcHMgYXJlIGNhbWVsaXplZFxuICAgICAgICBuYW1lOiBjYW1lbGl6ZShhdHRyLm5hbWUpLFxuICAgICAgICB2YWx1ZTogYXR0ci52YWx1ZSxcbiAgICAgICAgZHluYW1pYzogYXR0ci5keW5hbWljXG4gICAgICB9KTsgfSkpXG4gICAgOiBudWxsO1xuICB2YXIgYmluZCQkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQnXTtcbiAgaWYgKChhdHRycyB8fCBiaW5kJCQxKSAmJiAhY2hpbGRyZW4pIHtcbiAgICByZXMgKz0gXCIsbnVsbFwiO1xuICB9XG4gIGlmIChhdHRycykge1xuICAgIHJlcyArPSBcIixcIiArIGF0dHJzO1xuICB9XG4gIGlmIChiaW5kJCQxKSB7XG4gICAgcmVzICs9IChhdHRycyA/ICcnIDogJyxudWxsJykgKyBcIixcIiArIGJpbmQkJDE7XG4gIH1cbiAgcmV0dXJuIHJlcyArICcpJ1xufVxuXG4vLyBjb21wb25lbnROYW1lIGlzIGVsLmNvbXBvbmVudCwgdGFrZSBpdCBhcyBhcmd1bWVudCB0byBzaHVuIGZsb3cncyBwZXNzaW1pc3RpYyByZWZpbmVtZW50XG5mdW5jdGlvbiBnZW5Db21wb25lbnQgKFxuICBjb21wb25lbnROYW1lLFxuICBlbCxcbiAgc3RhdGVcbikge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICByZXR1cm4gKFwiX2MoXCIgKyBjb21wb25lbnROYW1lICsgXCIsXCIgKyAoZ2VuRGF0YSQyKGVsLCBzdGF0ZSkpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblByb3BzIChwcm9wcykge1xuICB2YXIgc3RhdGljUHJvcHMgPSBcIlwiO1xuICB2YXIgZHluYW1pY1Byb3BzID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgdmFyIHZhbHVlID0gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKHByb3AudmFsdWUpO1xuICAgIGlmIChwcm9wLmR5bmFtaWMpIHtcbiAgICAgIGR5bmFtaWNQcm9wcyArPSAocHJvcC5uYW1lKSArIFwiLFwiICsgdmFsdWUgKyBcIixcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljUHJvcHMgKz0gXCJcXFwiXCIgKyAocHJvcC5uYW1lKSArIFwiXFxcIjpcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIHN0YXRpY1Byb3BzID0gXCJ7XCIgKyAoc3RhdGljUHJvcHMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICBpZiAoZHluYW1pY1Byb3BzKSB7XG4gICAgcmV0dXJuIChcIl9kKFwiICsgc3RhdGljUHJvcHMgKyBcIixbXCIgKyAoZHluYW1pY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YXRpY1Byb3BzXG4gIH1cbn1cblxuLy8gIzM4OTUsICM0MjY4XG5mdW5jdGlvbiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMgKHRleHQpIHtcbiAgcmV0dXJuIHRleHRcbiAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JylcbiAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jylcbn1cblxuLyogICovXG5cblxuXG4vLyB0aGVzZSBrZXl3b3JkcyBzaG91bGQgbm90IGFwcGVhciBpbnNpZGUgZXhwcmVzc2lvbnMsIGJ1dCBvcGVyYXRvcnMgbGlrZVxuLy8gdHlwZW9mLCBpbnN0YW5jZW9mIGFuZCBpbiBhcmUgYWxsb3dlZFxudmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkbyxpZixmb3IsbGV0LG5ldyx0cnksdmFyLGNhc2UsZWxzZSx3aXRoLGF3YWl0LGJyZWFrLGNhdGNoLGNsYXNzLGNvbnN0LCcgK1xuICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgK1xuICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcbikuc3BsaXQoJywnKS5qb2luKCdcXFxcYnxcXFxcYicpICsgJ1xcXFxiJyk7XG5cbi8vIHRoZXNlIHVuYXJ5IG9wZXJhdG9ycyBzaG91bGQgbm90IGJlIHVzZWQgYXMgcHJvcGVydHkvbWV0aG9kIG5hbWVzXG52YXIgdW5hcnlPcGVyYXRvcnNSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgJ2RlbGV0ZSx0eXBlb2Ysdm9pZCdcbikuc3BsaXQoJywnKS5qb2luKCdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpfFxcXFxiJykgKyAnXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKScpO1xuXG4vLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXG52YXIgc3RyaXBTdHJpbmdSRSA9IC8nKD86W14nXFxcXF18XFxcXC4pKid8XCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifGAoPzpbXmBcXFxcXXxcXFxcLikqXFwkXFx7fFxcfSg/OlteYFxcXFxdfFxcXFwuKSpgfGAoPzpbXmBcXFxcXXxcXFxcLikqYC9nO1xuXG4vLyBkZXRlY3QgcHJvYmxlbWF0aWMgZXhwcmVzc2lvbnMgaW4gYSB0ZW1wbGF0ZVxuZnVuY3Rpb24gZGV0ZWN0RXJyb3JzIChhc3QsIHdhcm4pIHtcbiAgaWYgKGFzdCkge1xuICAgIGNoZWNrTm9kZShhc3QsIHdhcm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrTm9kZSAobm9kZSwgd2Fybikge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG4gICAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmF0dHJzTWFwW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBub2RlLnJhd0F0dHJzTWFwW25hbWVdO1xuICAgICAgICAgIGlmIChuYW1lID09PSAndi1mb3InKSB7XG4gICAgICAgICAgICBjaGVja0Zvcihub2RlLCAoXCJ2LWZvcj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICBjaGVja0V2ZW50KHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoZWNrTm9kZShub2RlLmNoaWxkcmVuW2ldLCB3YXJuKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAyKSB7XG4gICAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbiwgbm9kZS50ZXh0LCB3YXJuLCBub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V2ZW50IChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHZhciBzdGlwcGVkID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpO1xuICB2YXIga2V5d29yZE1hdGNoID0gc3RpcHBlZC5tYXRjaCh1bmFyeU9wZXJhdG9yc1JFKTtcbiAgaWYgKGtleXdvcmRNYXRjaCAmJiBzdGlwcGVkLmNoYXJBdChrZXl3b3JkTWF0Y2guaW5kZXggLSAxKSAhPT0gJyQnKSB7XG4gICAgd2FybihcbiAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCB1bmFyeSBvcGVyYXRvciBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiIGluIGV4cHJlc3Npb24gXCIgKyAodGV4dC50cmltKCkpLFxuICAgICAgcmFuZ2VcbiAgICApO1xuICB9XG4gIGNoZWNrRXhwcmVzc2lvbihleHAsIHRleHQsIHdhcm4sIHJhbmdlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3IgKG5vZGUsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIGNoZWNrRXhwcmVzc2lvbihub2RlLmZvciB8fCAnJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5hbGlhcywgJ3YtZm9yIGFsaWFzJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjEsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IyLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSWRlbnRpZmllciAoXG4gIGlkZW50LFxuICB0eXBlLFxuICB0ZXh0LFxuICB3YXJuLFxuICByYW5nZVxuKSB7XG4gIGlmICh0eXBlb2YgaWRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBGdW5jdGlvbigoXCJ2YXIgXCIgKyBpZGVudCArIFwiPV9cIikpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHdhcm4oKFwiaW52YWxpZCBcIiArIHR5cGUgKyBcIiBcXFwiXCIgKyBpZGVudCArIFwiXFxcIiBpbiBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkpLCByYW5nZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRXhwcmVzc2lvbiAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB0cnkge1xuICAgIG5ldyBGdW5jdGlvbigoXCJyZXR1cm4gXCIgKyBleHApKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBrZXl3b3JkTWF0Y2ggPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJykubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7XG4gICAgaWYgKGtleXdvcmRNYXRjaCkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiXFxuICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpLFxuICAgICAgICByYW5nZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihcbiAgICAgICAgXCJpbnZhbGlkIGV4cHJlc3Npb246IFwiICsgKGUubWVzc2FnZSkgKyBcIiBpblxcblxcblwiICtcbiAgICAgICAgXCIgICAgXCIgKyBleHAgKyBcIlxcblxcblwiICtcbiAgICAgICAgXCIgIFJhdyBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkgKyBcIlxcblwiLFxuICAgICAgICByYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciByYW5nZSA9IDI7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lIChcbiAgc291cmNlLFxuICBzdGFydCxcbiAgZW5kXG4pIHtcbiAgaWYgKCBzdGFydCA9PT0gdm9pZCAwICkgc3RhcnQgPSAwO1xuICBpZiAoIGVuZCA9PT0gdm9pZCAwICkgZW5kID0gc291cmNlLmxlbmd0aDtcblxuICB2YXIgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xccj9cXG4vKTtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY291bnQgKz0gbGluZXNbaV0ubGVuZ3RoICsgMTtcbiAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgIGZvciAodmFyIGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcbiAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKSB7IGNvbnRpbnVlIH1cbiAgICAgICAgcmVzLnB1c2goKFwiXCIgKyAoaiArIDEpICsgKHJlcGVhdCQxKFwiIFwiLCAzIC0gU3RyaW5nKGogKyAxKS5sZW5ndGgpKSArIFwifCAgXCIgKyAobGluZXNbal0pKSk7XG4gICAgICAgIHZhciBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xuICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXG4gICAgICAgICAgdmFyIHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gbGluZUxlbmd0aCkgKyAxO1xuICAgICAgICAgIHZhciBsZW5ndGggPSBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydDtcbiAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCIgXCIsIHBhZCkgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaiA+IGkpIHtcbiAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcbiAgICAgICAgICAgIHZhciBsZW5ndGgkMSA9IE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKFwiICAgfCAgXCIgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoJDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiByZXMuam9pbignXFxuJylcbn1cblxuZnVuY3Rpb24gcmVwZWF0JDEgKHN0ciwgbikge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmIChuID4gMCkge1xuICAgIHdoaWxlICh0cnVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmIChuICYgMSkgeyByZXN1bHQgKz0gc3RyOyB9XG4gICAgICBuID4+Pj0gMTtcbiAgICAgIGlmIChuIDw9IDApIHsgYnJlYWsgfVxuICAgICAgc3RyICs9IHN0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uIChjb2RlLCBlcnJvcnMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKGNvZGUpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9ycy5wdXNoKHsgZXJyOiBlcnIsIGNvZGU6IGNvZGUgfSk7XG4gICAgcmV0dXJuIG5vb3BcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIChjb21waWxlKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyAoXG4gICAgdGVtcGxhdGUsXG4gICAgb3B0aW9ucyxcbiAgICB2bVxuICApIHtcbiAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICB2YXIgd2FybiQkMSA9IG9wdGlvbnMud2FybiB8fCB3YXJuO1xuICAgIGRlbGV0ZSBvcHRpb25zLndhcm47XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkge1xuICAgICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgICAnSXQgc2VlbXMgeW91IGFyZSB1c2luZyB0aGUgc3RhbmRhbG9uZSBidWlsZCBvZiBWdWUuanMgaW4gYW4gJyArXG4gICAgICAgICAgICAnZW52aXJvbm1lbnQgd2l0aCBDb250ZW50IFNlY3VyaXR5IFBvbGljeSB0aGF0IHByb2hpYml0cyB1bnNhZmUtZXZhbC4gJyArXG4gICAgICAgICAgICAnVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGNhbm5vdCB3b3JrIGluIHRoaXMgZW52aXJvbm1lbnQuIENvbnNpZGVyICcgK1xuICAgICAgICAgICAgJ3JlbGF4aW5nIHRoZSBwb2xpY3kgdG8gYWxsb3cgdW5zYWZlLWV2YWwgb3IgcHJlLWNvbXBpbGluZyB5b3VyICcgK1xuICAgICAgICAgICAgJ3RlbXBsYXRlcyBpbnRvIHJlbmRlciBmdW5jdGlvbnMuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjaGVjayBjYWNoZVxuICAgIHZhciBrZXkgPSBvcHRpb25zLmRlbGltaXRlcnNcbiAgICAgID8gU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVycykgKyB0ZW1wbGF0ZVxuICAgICAgOiB0ZW1wbGF0ZTtcbiAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgcmV0dXJuIGNhY2hlW2tleV1cbiAgICB9XG5cbiAgICAvLyBjb21waWxlXG4gICAgdmFyIGNvbXBpbGVkID0gY29tcGlsZSh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG5cbiAgICAvLyBjaGVjayBjb21waWxhdGlvbiBlcnJvcnMvdGlwc1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29tcGlsZWQuZXJyb3JzICYmIGNvbXBpbGVkLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC5lcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICAgXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuXCIgKyAoZS5tc2cpICsgXCJcXG5cXG5cIiArXG4gICAgICAgICAgICAgIGdlbmVyYXRlQ29kZUZyYW1lKHRlbXBsYXRlLCBlLnN0YXJ0LCBlLmVuZCksXG4gICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIHRlbXBsYXRlICsgXCJcXG5cXG5cIiArXG4gICAgICAgICAgICBjb21waWxlZC5lcnJvcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAoXCItIFwiICsgZSk7IH0pLmpvaW4oJ1xcbicpICsgJ1xcbicsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb21waWxlZC50aXBzICYmIGNvbXBpbGVkLnRpcHMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aXAoZS5tc2csIHZtKTsgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChtc2cpIHsgcmV0dXJuIHRpcChtc2csIHZtKTsgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0dXJuIGNvZGUgaW50byBmdW5jdGlvbnNcbiAgICB2YXIgcmVzID0ge307XG4gICAgdmFyIGZuR2VuRXJyb3JzID0gW107XG4gICAgcmVzLnJlbmRlciA9IGNyZWF0ZUZ1bmN0aW9uKGNvbXBpbGVkLnJlbmRlciwgZm5HZW5FcnJvcnMpO1xuICAgIHJlcy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZC5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb24oY29kZSwgZm5HZW5FcnJvcnMpXG4gICAgfSk7XG5cbiAgICAvLyBjaGVjayBmdW5jdGlvbiBnZW5lcmF0aW9uIGVycm9ycy5cbiAgICAvLyB0aGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpZiB0aGVyZSBpcyBhIGJ1ZyBpbiB0aGUgY29tcGlsZXIgaXRzZWxmLlxuICAgIC8vIG1vc3RseSBmb3IgY29kZWdlbiBkZXZlbG9wbWVudCB1c2VcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCghY29tcGlsZWQuZXJyb3JzIHx8ICFjb21waWxlZC5lcnJvcnMubGVuZ3RoKSAmJiBmbkdlbkVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgd2FybiQkMShcbiAgICAgICAgICBcIkZhaWxlZCB0byBnZW5lcmF0ZSByZW5kZXIgZnVuY3Rpb246XFxuXFxuXCIgK1xuICAgICAgICAgIGZuR2VuRXJyb3JzLm1hcChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gcmVmLmVycjtcbiAgICAgICAgICAgIHZhciBjb2RlID0gcmVmLmNvZGU7XG5cbiAgICAgICAgICAgIHJldHVybiAoKGVyci50b1N0cmluZygpKSArIFwiIGluXFxuXFxuXCIgKyBjb2RlICsgXCJcXG5cIik7XG4gICAgICAgIH0pLmpvaW4oJ1xcbicpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChjYWNoZVtrZXldID0gcmVzKVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlckNyZWF0b3IgKGJhc2VDb21waWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVDb21waWxlciAoYmFzZU9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBjb21waWxlIChcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgb3B0aW9uc1xuICAgICkge1xuICAgICAgdmFyIGZpbmFsT3B0aW9ucyA9IE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIHRpcHMgPSBbXTtcblxuICAgICAgdmFyIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7XG4gICAgICAgICh0aXAgPyB0aXBzIDogZXJyb3JzKS5wdXNoKG1zZyk7XG4gICAgICB9O1xuXG4gICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgICAgdmFyIGxlYWRpbmdTcGFjZUxlbmd0aCA9IHRlbXBsYXRlLm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aDtcblxuICAgICAgICAgIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHsgbXNnOiBtc2cgfTtcbiAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuc3RhcnQgPSByYW5nZS5zdGFydCArIGxlYWRpbmdTcGFjZUxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmVuZCA9IHJhbmdlLmVuZCArIGxlYWRpbmdTcGFjZUxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2goZGF0YSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBjdXN0b20gbW9kdWxlc1xuICAgICAgICBpZiAob3B0aW9ucy5tb2R1bGVzKSB7XG4gICAgICAgICAgZmluYWxPcHRpb25zLm1vZHVsZXMgPVxuICAgICAgICAgICAgKGJhc2VPcHRpb25zLm1vZHVsZXMgfHwgW10pLmNvbmNhdChvcHRpb25zLm1vZHVsZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBkaXJlY3RpdmVzXG4gICAgICAgIGlmIChvcHRpb25zLmRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMuZGlyZWN0aXZlcyA9IGV4dGVuZChcbiAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMuZGlyZWN0aXZlcyB8fCBudWxsKSxcbiAgICAgICAgICAgIG9wdGlvbnMuZGlyZWN0aXZlc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29weSBvdGhlciBvcHRpb25zXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gJ21vZHVsZXMnICYmIGtleSAhPT0gJ2RpcmVjdGl2ZXMnKSB7XG4gICAgICAgICAgICBmaW5hbE9wdGlvbnNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmluYWxPcHRpb25zLndhcm4gPSB3YXJuO1xuXG4gICAgICB2YXIgY29tcGlsZWQgPSBiYXNlQ29tcGlsZSh0ZW1wbGF0ZS50cmltKCksIGZpbmFsT3B0aW9ucyk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZXRlY3RFcnJvcnMoY29tcGlsZWQuYXN0LCB3YXJuKTtcbiAgICAgIH1cbiAgICAgIGNvbXBpbGVkLmVycm9ycyA9IGVycm9ycztcbiAgICAgIGNvbXBpbGVkLnRpcHMgPSB0aXBzO1xuICAgICAgcmV0dXJuIGNvbXBpbGVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBpbGU6IGNvbXBpbGUsXG4gICAgICBjb21waWxlVG9GdW5jdGlvbnM6IGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4oY29tcGlsZSlcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8vIGBjcmVhdGVDb21waWxlckNyZWF0b3JgIGFsbG93cyBjcmVhdGluZyBjb21waWxlcnMgdGhhdCB1c2UgYWx0ZXJuYXRpdmVcbi8vIHBhcnNlci9vcHRpbWl6ZXIvY29kZWdlbiwgZS5nIHRoZSBTU1Igb3B0aW1pemluZyBjb21waWxlci5cbi8vIEhlcmUgd2UganVzdCBleHBvcnQgYSBkZWZhdWx0IGNvbXBpbGVyIHVzaW5nIHRoZSBkZWZhdWx0IHBhcnRzLlxudmFyIGNyZWF0ZUNvbXBpbGVyID0gY3JlYXRlQ29tcGlsZXJDcmVhdG9yKGZ1bmN0aW9uIGJhc2VDb21waWxlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgYXN0ID0gcGFyc2UodGVtcGxhdGUudHJpbSgpLCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMub3B0aW1pemUgIT09IGZhbHNlKSB7XG4gICAgb3B0aW1pemUoYXN0LCBvcHRpb25zKTtcbiAgfVxuICB2YXIgY29kZSA9IGdlbmVyYXRlKGFzdCwgb3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgYXN0OiBhc3QsXG4gICAgcmVuZGVyOiBjb2RlLnJlbmRlcixcbiAgICBzdGF0aWNSZW5kZXJGbnM6IGNvZGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiQxID0gY3JlYXRlQ29tcGlsZXIoYmFzZU9wdGlvbnMpO1xudmFyIGNvbXBpbGUgPSByZWYkMS5jb21waWxlO1xudmFyIGNvbXBpbGVUb0Z1bmN0aW9ucyA9IHJlZiQxLmNvbXBpbGVUb0Z1bmN0aW9ucztcblxuLyogICovXG5cbi8vIGNoZWNrIHdoZXRoZXIgY3VycmVudCBicm93c2VyIGVuY29kZXMgYSBjaGFyIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzXG52YXIgZGl2O1xuZnVuY3Rpb24gZ2V0U2hvdWxkRGVjb2RlIChocmVmKSB7XG4gIGRpdiA9IGRpdiB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2LmlubmVySFRNTCA9IGhyZWYgPyBcIjxhIGhyZWY9XFxcIlxcblxcXCIvPlwiIDogXCI8ZGl2IGE9XFxcIlxcblxcXCIvPlwiO1xuICByZXR1cm4gZGl2LmlubmVySFRNTC5pbmRleE9mKCcmIzEwOycpID4gMFxufVxuXG4vLyAjMzY2MzogSUUgZW5jb2RlcyBuZXdsaW5lcyBpbnNpZGUgYXR0cmlidXRlIHZhbHVlcyB3aGlsZSBvdGhlciBicm93c2VycyBkb24ndFxudmFyIHNob3VsZERlY29kZU5ld2xpbmVzID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKGZhbHNlKSA6IGZhbHNlO1xuLy8gIzY4Mjg6IGNocm9tZSBlbmNvZGVzIGNvbnRlbnQgaW4gYVtocmVmXVxudmFyIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiA9IGluQnJvd3NlciA/IGdldFNob3VsZERlY29kZSh0cnVlKSA6IGZhbHNlO1xuXG4vKiAgKi9cblxudmFyIGlkVG9UZW1wbGF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIGVsID0gcXVlcnkoaWQpO1xuICByZXR1cm4gZWwgJiYgZWwuaW5uZXJIVE1MXG59KTtcblxudmFyIG1vdW50ID0gVnVlLnByb3RvdHlwZS4kbW91bnQ7XG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgcXVlcnkoZWwpO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZWwgPT09IGRvY3VtZW50LmJvZHkgfHwgZWwgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gIC8vIHJlc29sdmUgdGVtcGxhdGUvZWwgYW5kIGNvbnZlcnQgdG8gcmVuZGVyIGZ1bmN0aW9uXG4gIGlmICghb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlO1xuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHRlbXBsYXRlLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgICAgdGVtcGxhdGUgPSBpZFRvVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgKFwiVGVtcGxhdGUgZWxlbWVudCBub3QgZm91bmQgb3IgaXMgZW1wdHk6IFwiICsgKG9wdGlvbnMudGVtcGxhdGUpKSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGUubm9kZVR5cGUpIHtcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5pbm5lckhUTUw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOicgKyB0ZW1wbGF0ZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsKSB7XG4gICAgICB0ZW1wbGF0ZSA9IGdldE91dGVySFRNTChlbCk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWYgPSBjb21waWxlVG9GdW5jdGlvbnModGVtcGxhdGUsIHtcbiAgICAgICAgb3V0cHV0U291cmNlUmFuZ2U6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG4gICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBzaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgICAgIGRlbGltaXRlcnM6IG9wdGlvbnMuZGVsaW1pdGVycyxcbiAgICAgICAgY29tbWVudHM6IG9wdGlvbnMuY29tbWVudHNcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyO1xuICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnM7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgbWFyaygnY29tcGlsZSBlbmQnKTtcbiAgICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodGhpcy5fbmFtZSkgKyBcIiBjb21waWxlXCIpLCAnY29tcGlsZScsICdjb21waWxlIGVuZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbW91bnQuY2FsbCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLyoqXG4gKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZVxuICogb2YgU1ZHIGVsZW1lbnRzIGluIElFIGFzIHdlbGwuXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVySFRNTCAoZWwpIHtcbiAgaWYgKGVsLm91dGVySFRNTCkge1xuICAgIHJldHVybiBlbC5vdXRlckhUTUxcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUxcbiAgfVxufVxuXG5WdWUuY29tcGlsZSA9IGNvbXBpbGVUb0Z1bmN0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwiLyoqXG4gKiB2dWV4IHYzLjEuMVxuICogKGMpIDIwMTkgRXZhbiBZb3VcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBhcHBseU1peGluIChWdWUpIHtcbiAgdmFyIHZlcnNpb24gPSBOdW1iZXIoVnVlLnZlcnNpb24uc3BsaXQoJy4nKVswXSk7XG5cbiAgaWYgKHZlcnNpb24gPj0gMikge1xuICAgIFZ1ZS5taXhpbih7IGJlZm9yZUNyZWF0ZTogdnVleEluaXQgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3ZlcnJpZGUgaW5pdCBhbmQgaW5qZWN0IHZ1ZXggaW5pdCBwcm9jZWR1cmVcbiAgICAvLyBmb3IgMS54IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBfaW5pdCA9IFZ1ZS5wcm90b3R5cGUuX2luaXQ7XG4gICAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgb3B0aW9ucy5pbml0ID0gb3B0aW9ucy5pbml0XG4gICAgICAgID8gW3Z1ZXhJbml0XS5jb25jYXQob3B0aW9ucy5pbml0KVxuICAgICAgICA6IHZ1ZXhJbml0O1xuICAgICAgX2luaXQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFZ1ZXggaW5pdCBob29rLCBpbmplY3RlZCBpbnRvIGVhY2ggaW5zdGFuY2VzIGluaXQgaG9va3MgbGlzdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gdnVleEluaXQgKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICAvLyBzdG9yZSBpbmplY3Rpb25cbiAgICBpZiAob3B0aW9ucy5zdG9yZSkge1xuICAgICAgdGhpcy4kc3RvcmUgPSB0eXBlb2Ygb3B0aW9ucy5zdG9yZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9wdGlvbnMuc3RvcmUoKVxuICAgICAgICA6IG9wdGlvbnMuc3RvcmU7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC4kc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gb3B0aW9ucy5wYXJlbnQuJHN0b3JlO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdGFyZ2V0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgPyB3aW5kb3dcbiAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgID8gZ2xvYmFsXG4gICAgOiB7fTtcbnZhciBkZXZ0b29sSG9vayA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG5mdW5jdGlvbiBkZXZ0b29sUGx1Z2luIChzdG9yZSkge1xuICBpZiAoIWRldnRvb2xIb29rKSB7IHJldHVybiB9XG5cbiAgc3RvcmUuX2RldnRvb2xIb29rID0gZGV2dG9vbEhvb2s7XG5cbiAgZGV2dG9vbEhvb2suZW1pdCgndnVleDppbml0Jywgc3RvcmUpO1xuXG4gIGRldnRvb2xIb29rLm9uKCd2dWV4OnRyYXZlbC10by1zdGF0ZScsIGZ1bmN0aW9uICh0YXJnZXRTdGF0ZSkge1xuICAgIHN0b3JlLnJlcGxhY2VTdGF0ZSh0YXJnZXRTdGF0ZSk7XG4gIH0pO1xuXG4gIHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlKSB7XG4gICAgZGV2dG9vbEhvb2suZW1pdCgndnVleDptdXRhdGlvbicsIG11dGF0aW9uLCBzdGF0ZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZmlyc3QgaXRlbSB0aGF0IHBhc3MgdGhlIHRlc3RcbiAqIGJ5IHNlY29uZCBhcmd1bWVudCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZcbiAqIEByZXR1cm4geyp9XG4gKi9cblxuLyoqXG4gKiBmb3JFYWNoIGZvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaFZhbHVlIChvYmosIGZuKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihvYmpba2V5XSwga2V5KTsgfSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbXNnKSB7XG4gIGlmICghY29uZGl0aW9uKSB7IHRocm93IG5ldyBFcnJvcigoXCJbdnVleF0gXCIgKyBtc2cpKSB9XG59XG5cbmZ1bmN0aW9uIHBhcnRpYWwgKGZuLCBhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4oYXJnKVxuICB9XG59XG5cbi8vIEJhc2UgZGF0YSBzdHJ1Y3QgZm9yIHN0b3JlJ3MgbW9kdWxlLCBwYWNrYWdlIHdpdGggc29tZSBhdHRyaWJ1dGUgYW5kIG1ldGhvZFxudmFyIE1vZHVsZSA9IGZ1bmN0aW9uIE1vZHVsZSAocmF3TW9kdWxlLCBydW50aW1lKSB7XG4gIHRoaXMucnVudGltZSA9IHJ1bnRpbWU7XG4gIC8vIFN0b3JlIHNvbWUgY2hpbGRyZW4gaXRlbVxuICB0aGlzLl9jaGlsZHJlbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIFN0b3JlIHRoZSBvcmlnaW4gbW9kdWxlIG9iamVjdCB3aGljaCBwYXNzZWQgYnkgcHJvZ3JhbW1lclxuICB0aGlzLl9yYXdNb2R1bGUgPSByYXdNb2R1bGU7XG4gIHZhciByYXdTdGF0ZSA9IHJhd01vZHVsZS5zdGF0ZTtcblxuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSdzIHN0YXRlXG4gIHRoaXMuc3RhdGUgPSAodHlwZW9mIHJhd1N0YXRlID09PSAnZnVuY3Rpb24nID8gcmF3U3RhdGUoKSA6IHJhd1N0YXRlKSB8fCB7fTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IG5hbWVzcGFjZWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLm5hbWVzcGFjZWQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZFxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkIChrZXksIG1vZHVsZSkge1xuICB0aGlzLl9jaGlsZHJlbltrZXldID0gbW9kdWxlO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkIChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuX2NoaWxkcmVuW2tleV07XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24gZ2V0Q2hpbGQgKGtleSkge1xuICByZXR1cm4gdGhpcy5fY2hpbGRyZW5ba2V5XVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKHJhd01vZHVsZSkge1xuICB0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZCA9IHJhd01vZHVsZS5uYW1lc3BhY2VkO1xuICBpZiAocmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyA9IHJhd01vZHVsZS5hY3Rpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucyA9IHJhd01vZHVsZS5tdXRhdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmdldHRlcnMgPSByYXdNb2R1bGUuZ2V0dGVycztcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiBmb3JFYWNoQ2hpbGQgKGZuKSB7XG4gIGZvckVhY2hWYWx1ZSh0aGlzLl9jaGlsZHJlbiwgZm4pO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoR2V0dGVyID0gZnVuY3Rpb24gZm9yRWFjaEdldHRlciAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEFjdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hBY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hNdXRhdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hNdXRhdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucywgZm4pO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTW9kdWxlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBNb2R1bGVDb2xsZWN0aW9uID0gZnVuY3Rpb24gTW9kdWxlQ29sbGVjdGlvbiAocmF3Um9vdE1vZHVsZSkge1xuICAvLyByZWdpc3RlciByb290IG1vZHVsZSAoVnVleC5TdG9yZSBvcHRpb25zKVxuICB0aGlzLnJlZ2lzdGVyKFtdLCByYXdSb290TW9kdWxlLCBmYWxzZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChtb2R1bGUsIGtleSkge1xuICAgIHJldHVybiBtb2R1bGUuZ2V0Q2hpbGQoa2V5KVxuICB9LCB0aGlzLnJvb3QpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXROYW1lc3BhY2UgPSBmdW5jdGlvbiBnZXROYW1lc3BhY2UgKHBhdGgpIHtcbiAgdmFyIG1vZHVsZSA9IHRoaXMucm9vdDtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGtleSkge1xuICAgIG1vZHVsZSA9IG1vZHVsZS5nZXRDaGlsZChrZXkpO1xuICAgIHJldHVybiBuYW1lc3BhY2UgKyAobW9kdWxlLm5hbWVzcGFjZWQgPyBrZXkgKyAnLycgOiAnJylcbiAgfSwgJycpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUkMSAocmF3Um9vdE1vZHVsZSkge1xuICB1cGRhdGUoW10sIHRoaXMucm9vdCwgcmF3Um9vdE1vZHVsZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyIChwYXRoLCByYXdNb2R1bGUsIHJ1bnRpbWUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICBpZiAoIHJ1bnRpbWUgPT09IHZvaWQgMCApIHJ1bnRpbWUgPSB0cnVlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIHJhd01vZHVsZSk7XG4gIH1cblxuICB2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShyYXdNb2R1bGUsIHJ1bnRpbWUpO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLnJvb3QgPSBuZXdNb2R1bGU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBwYXJlbnQuYWRkQ2hpbGQocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKHJhd01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZS5tb2R1bGVzLCBmdW5jdGlvbiAocmF3Q2hpbGRNb2R1bGUsIGtleSkge1xuICAgICAgdGhpcyQxLnJlZ2lzdGVyKHBhdGguY29uY2F0KGtleSksIHJhd0NoaWxkTW9kdWxlLCBydW50aW1lKTtcbiAgICB9KTtcbiAgfVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIgKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgdmFyIGtleSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgaWYgKCFwYXJlbnQuZ2V0Q2hpbGQoa2V5KS5ydW50aW1lKSB7IHJldHVybiB9XG5cbiAgcGFyZW50LnJlbW92ZUNoaWxkKGtleSk7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGUgKHBhdGgsIHRhcmdldE1vZHVsZSwgbmV3TW9kdWxlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyB1cGRhdGUgdGFyZ2V0IG1vZHVsZVxuICB0YXJnZXRNb2R1bGUudXBkYXRlKG5ld01vZHVsZSk7XG5cbiAgLy8gdXBkYXRlIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChuZXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBuZXdNb2R1bGUubW9kdWxlcykge1xuICAgICAgaWYgKCF0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiW3Z1ZXhdIHRyeWluZyB0byBhZGQgYSBuZXcgbW9kdWxlICdcIiArIGtleSArIFwiJyBvbiBob3QgcmVsb2FkaW5nLCBcIiArXG4gICAgICAgICAgICAnbWFudWFsIHJlbG9hZCBpcyBuZWVkZWQnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShcbiAgICAgICAgcGF0aC5jb25jYXQoa2V5KSxcbiAgICAgICAgdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSksXG4gICAgICAgIG5ld01vZHVsZS5tb2R1bGVzW2tleV1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBmdW5jdGlvbkFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbidcbn07XG5cbnZhciBvYmplY3RBc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUuaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyk7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggXCJoYW5kbGVyXCIgZnVuY3Rpb24nXG59O1xuXG52YXIgYXNzZXJ0VHlwZXMgPSB7XG4gIGdldHRlcnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBtdXRhdGlvbnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBhY3Rpb25zOiBvYmplY3RBc3NlcnRcbn07XG5cbmZ1bmN0aW9uIGFzc2VydFJhd01vZHVsZSAocGF0aCwgcmF3TW9kdWxlKSB7XG4gIE9iamVjdC5rZXlzKGFzc2VydFR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIXJhd01vZHVsZVtrZXldKSB7IHJldHVybiB9XG5cbiAgICB2YXIgYXNzZXJ0T3B0aW9ucyA9IGFzc2VydFR5cGVzW2tleV07XG5cbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlW2tleV0sIGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgICAgYXNzZXJ0KFxuICAgICAgICBhc3NlcnRPcHRpb25zLmFzc2VydCh2YWx1ZSksXG4gICAgICAgIG1ha2VBc3NlcnRpb25NZXNzYWdlKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGFzc2VydE9wdGlvbnMuZXhwZWN0ZWQpXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZUFzc2VydGlvbk1lc3NhZ2UgKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGV4cGVjdGVkKSB7XG4gIHZhciBidWYgPSBrZXkgKyBcIiBzaG91bGQgYmUgXCIgKyBleHBlY3RlZCArIFwiIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIi5cIiArIHR5cGUgKyBcIlxcXCJcIjtcbiAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgIGJ1ZiArPSBcIiBpbiBtb2R1bGUgXFxcIlwiICsgKHBhdGguam9pbignLicpKSArIFwiXFxcIlwiO1xuICB9XG4gIGJ1ZiArPSBcIiBpcyBcIiArIChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpICsgXCIuXCI7XG4gIHJldHVybiBidWZcbn1cblxudmFyIFZ1ZTsgLy8gYmluZCBvbiBpbnN0YWxsXG5cbnZhciBTdG9yZSA9IGZ1bmN0aW9uIFN0b3JlIChvcHRpb25zKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAvLyBBdXRvIGluc3RhbGwgaWYgaXQgaXMgbm90IGRvbmUgeWV0IGFuZCBgd2luZG93YCBoYXMgYFZ1ZWAuXG4gIC8vIFRvIGFsbG93IHVzZXJzIHRvIGF2b2lkIGF1dG8taW5zdGFsbGF0aW9uIGluIHNvbWUgY2FzZXMsXG4gIC8vIHRoaXMgY29kZSBzaG91bGQgYmUgcGxhY2VkIGhlcmUuIFNlZSAjNzMxXG4gIGlmICghVnVlICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHtcbiAgICBpbnN0YWxsKHdpbmRvdy5WdWUpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoVnVlLCBcIm11c3QgY2FsbCBWdWUudXNlKFZ1ZXgpIGJlZm9yZSBjcmVhdGluZyBhIHN0b3JlIGluc3RhbmNlLlwiKTtcbiAgICBhc3NlcnQodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnLCBcInZ1ZXggcmVxdWlyZXMgYSBQcm9taXNlIHBvbHlmaWxsIGluIHRoaXMgYnJvd3Nlci5cIik7XG4gICAgYXNzZXJ0KHRoaXMgaW5zdGFuY2VvZiBTdG9yZSwgXCJzdG9yZSBtdXN0IGJlIGNhbGxlZCB3aXRoIHRoZSBuZXcgb3BlcmF0b3IuXCIpO1xuICB9XG5cbiAgdmFyIHBsdWdpbnMgPSBvcHRpb25zLnBsdWdpbnM7IGlmICggcGx1Z2lucyA9PT0gdm9pZCAwICkgcGx1Z2lucyA9IFtdO1xuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7IGlmICggc3RyaWN0ID09PSB2b2lkIDAgKSBzdHJpY3QgPSBmYWxzZTtcblxuICAvLyBzdG9yZSBpbnRlcm5hbCBzdGF0ZVxuICB0aGlzLl9jb21taXR0aW5nID0gZmFsc2U7XG4gIHRoaXMuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX21vZHVsZXMgPSBuZXcgTW9kdWxlQ29sbGVjdGlvbihvcHRpb25zKTtcbiAgdGhpcy5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX3dhdGNoZXJWTSA9IG5ldyBWdWUoKTtcblxuICAvLyBiaW5kIGNvbW1pdCBhbmQgZGlzcGF0Y2ggdG8gc2VsZlxuICB2YXIgc3RvcmUgPSB0aGlzO1xuICB2YXIgcmVmID0gdGhpcztcbiAgdmFyIGRpc3BhdGNoID0gcmVmLmRpc3BhdGNoO1xuICB2YXIgY29tbWl0ID0gcmVmLmNvbW1pdDtcbiAgdGhpcy5kaXNwYXRjaCA9IGZ1bmN0aW9uIGJvdW5kRGlzcGF0Y2ggKHR5cGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2guY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZClcbiAgfTtcbiAgdGhpcy5jb21taXQgPSBmdW5jdGlvbiBib3VuZENvbW1pdCAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21taXQuY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZCwgb3B0aW9ucylcbiAgfTtcblxuICAvLyBzdHJpY3QgbW9kZVxuICB0aGlzLnN0cmljdCA9IHN0cmljdDtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9tb2R1bGVzLnJvb3Quc3RhdGU7XG5cbiAgLy8gaW5pdCByb290IG1vZHVsZS5cbiAgLy8gdGhpcyBhbHNvIHJlY3Vyc2l2ZWx5IHJlZ2lzdGVycyBhbGwgc3ViLW1vZHVsZXNcbiAgLy8gYW5kIGNvbGxlY3RzIGFsbCBtb2R1bGUgZ2V0dGVycyBpbnNpZGUgdGhpcy5fd3JhcHBlZEdldHRlcnNcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCBzdGF0ZSwgW10sIHRoaXMuX21vZHVsZXMucm9vdCk7XG5cbiAgLy8gaW5pdGlhbGl6ZSB0aGUgc3RvcmUgdm0sIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcmVhY3Rpdml0eVxuICAvLyAoYWxzbyByZWdpc3RlcnMgX3dyYXBwZWRHZXR0ZXJzIGFzIGNvbXB1dGVkIHByb3BlcnRpZXMpXG4gIHJlc2V0U3RvcmVWTSh0aGlzLCBzdGF0ZSk7XG5cbiAgLy8gYXBwbHkgcGx1Z2luc1xuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikgeyByZXR1cm4gcGx1Z2luKHRoaXMkMSk7IH0pO1xuXG4gIHZhciB1c2VEZXZ0b29scyA9IG9wdGlvbnMuZGV2dG9vbHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGV2dG9vbHMgOiBWdWUuY29uZmlnLmRldnRvb2xzO1xuICBpZiAodXNlRGV2dG9vbHMpIHtcbiAgICBkZXZ0b29sUGx1Z2luKHRoaXMpO1xuICB9XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IHN0YXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLnN0YXRlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3ZtLl9kYXRhLiQkc3RhdGVcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLnN0YXRlLnNldCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KGZhbHNlLCBcInVzZSBzdG9yZS5yZXBsYWNlU3RhdGUoKSB0byBleHBsaWNpdCByZXBsYWNlIHN0b3JlIHN0YXRlLlwiKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIGNvbW1pdCAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuICAgIHZhciBvcHRpb25zID0gcmVmLm9wdGlvbnM7XG5cbiAgdmFyIG11dGF0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX211dGF0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIG11dGF0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICBlbnRyeS5mb3JFYWNoKGZ1bmN0aW9uIGNvbW1pdEl0ZXJhdG9yIChoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVyKHBheWxvYWQpO1xuICAgIH0pO1xuICB9KTtcbiAgdGhpcy5fc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIobXV0YXRpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuXG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgb3B0aW9ucyAmJiBvcHRpb25zLnNpbGVudFxuICApIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIlt2dWV4XSBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUgKyBcIi4gU2lsZW50IG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLiBcIiArXG4gICAgICAnVXNlIHRoZSBmaWx0ZXIgZnVuY3Rpb25hbGl0eSBpbiB0aGUgdnVlLWRldnRvb2xzJ1xuICAgICk7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoIChfdHlwZSwgX3BheWxvYWQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgZGlzcGF0Y2hcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkKTtcbiAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgIHZhciBwYXlsb2FkID0gcmVmLnBheWxvYWQ7XG5cbiAgdmFyIGFjdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9hY3Rpb25zW3R5cGVdO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gYWN0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmJlZm9yZTsgfSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmUoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYmVmb3JlIGFjdGlvbiBzdWJzY3JpYmVyczogXCIpO1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gZW50cnkubGVuZ3RoID4gMVxuICAgID8gUHJvbWlzZS5hbGwoZW50cnkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBoYW5kbGVyKHBheWxvYWQpOyB9KSlcbiAgICA6IGVudHJ5WzBdKHBheWxvYWQpO1xuXG4gIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMkMS5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXI7IH0pXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5hZnRlcihhY3Rpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBhZnRlciBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9KVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSAoZm4pIHtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sIHRoaXMuX3N1YnNjcmliZXJzKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZUFjdGlvbiA9IGZ1bmN0aW9uIHN1YnNjcmliZUFjdGlvbiAoZm4pIHtcbiAgdmFyIHN1YnMgPSB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgPyB7IGJlZm9yZTogZm4gfSA6IGZuO1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShzdWJzLCB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIHdhdGNoIChnZXR0ZXIsIGNiLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIGdldHRlciA9PT0gJ2Z1bmN0aW9uJywgXCJzdG9yZS53YXRjaCBvbmx5IGFjY2VwdHMgYSBmdW5jdGlvbi5cIik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX3dhdGNoZXJWTS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0dGVyKHRoaXMkMS5zdGF0ZSwgdGhpcyQxLmdldHRlcnMpOyB9LCBjYiwgb3B0aW9ucylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZXBsYWNlU3RhdGUgPSBmdW5jdGlvbiByZXBsYWNlU3RhdGUgKHN0YXRlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdGhpcyQxLl92bS5fZGF0YS4kJHN0YXRlID0gc3RhdGU7XG4gIH0pO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gcmVnaXN0ZXJNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gICAgYXNzZXJ0KHBhdGgubGVuZ3RoID4gMCwgJ2Nhbm5vdCByZWdpc3RlciB0aGUgcm9vdCBtb2R1bGUgYnkgdXNpbmcgcmVnaXN0ZXJNb2R1bGUuJyk7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnJlZ2lzdGVyKHBhdGgsIHJhd01vZHVsZSk7XG4gIGluc3RhbGxNb2R1bGUodGhpcywgdGhpcy5zdGF0ZSwgcGF0aCwgdGhpcy5fbW9kdWxlcy5nZXQocGF0aCksIG9wdGlvbnMucHJlc2VydmVTdGF0ZSk7XG4gIC8vIHJlc2V0IHN0b3JlIHRvIHVwZGF0ZSBnZXR0ZXJzLi4uXG4gIHJlc2V0U3RvcmVWTSh0aGlzLCB0aGlzLnN0YXRlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS51bnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gdW5yZWdpc3Rlck1vZHVsZSAocGF0aCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIocGF0aCk7XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHRoaXMkMS5zdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIFZ1ZS5kZWxldGUocGFyZW50U3RhdGUsIHBhdGhbcGF0aC5sZW5ndGggLSAxXSk7XG4gIH0pO1xuICByZXNldFN0b3JlKHRoaXMpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmhvdFVwZGF0ZSA9IGZ1bmN0aW9uIGhvdFVwZGF0ZSAobmV3T3B0aW9ucykge1xuICB0aGlzLl9tb2R1bGVzLnVwZGF0ZShuZXdPcHRpb25zKTtcbiAgcmVzZXRTdG9yZSh0aGlzLCB0cnVlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5fd2l0aENvbW1pdCA9IGZ1bmN0aW9uIF93aXRoQ29tbWl0IChmbikge1xuICB2YXIgY29tbWl0dGluZyA9IHRoaXMuX2NvbW1pdHRpbmc7XG4gIHRoaXMuX2NvbW1pdHRpbmcgPSB0cnVlO1xuICBmbigpO1xuICB0aGlzLl9jb21taXR0aW5nID0gY29tbWl0dGluZztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTdG9yZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbmZ1bmN0aW9uIGdlbmVyaWNTdWJzY3JpYmUgKGZuLCBzdWJzKSB7XG4gIGlmIChzdWJzLmluZGV4T2YoZm4pIDwgMCkge1xuICAgIHN1YnMucHVzaChmbik7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IHN1YnMuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkge1xuICAgICAgc3Vicy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmUgKHN0b3JlLCBob3QpIHtcbiAgc3RvcmUuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc3RhdGUgPSBzdG9yZS5zdGF0ZTtcbiAgLy8gaW5pdCBhbGwgbW9kdWxlc1xuICBpbnN0YWxsTW9kdWxlKHN0b3JlLCBzdGF0ZSwgW10sIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHRydWUpO1xuICAvLyByZXNldCB2bVxuICByZXNldFN0b3JlVk0oc3RvcmUsIHN0YXRlLCBob3QpO1xufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlVk0gKHN0b3JlLCBzdGF0ZSwgaG90KSB7XG4gIHZhciBvbGRWbSA9IHN0b3JlLl92bTtcblxuICAvLyBiaW5kIHN0b3JlIHB1YmxpYyBnZXR0ZXJzXG4gIHN0b3JlLmdldHRlcnMgPSB7fTtcbiAgdmFyIHdyYXBwZWRHZXR0ZXJzID0gc3RvcmUuX3dyYXBwZWRHZXR0ZXJzO1xuICB2YXIgY29tcHV0ZWQgPSB7fTtcbiAgZm9yRWFjaFZhbHVlKHdyYXBwZWRHZXR0ZXJzLCBmdW5jdGlvbiAoZm4sIGtleSkge1xuICAgIC8vIHVzZSBjb21wdXRlZCB0byBsZXZlcmFnZSBpdHMgbGF6eS1jYWNoaW5nIG1lY2hhbmlzbVxuICAgIC8vIGRpcmVjdCBpbmxpbmUgZnVuY3Rpb24gdXNlIHdpbGwgbGVhZCB0byBjbG9zdXJlIHByZXNlcnZpbmcgb2xkVm0uXG4gICAgLy8gdXNpbmcgcGFydGlhbCB0byByZXR1cm4gZnVuY3Rpb24gd2l0aCBvbmx5IGFyZ3VtZW50cyBwcmVzZXJ2ZWQgaW4gY2xvc3VyZSBlbnZpcm9tZW50LlxuICAgIGNvbXB1dGVkW2tleV0gPSBwYXJ0aWFsKGZuLCBzdG9yZSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0b3JlLmdldHRlcnMsIGtleSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5fdm1ba2V5XTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUgLy8gZm9yIGxvY2FsIGdldHRlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdXNlIGEgVnVlIGluc3RhbmNlIHRvIHN0b3JlIHRoZSBzdGF0ZSB0cmVlXG4gIC8vIHN1cHByZXNzIHdhcm5pbmdzIGp1c3QgaW4gY2FzZSB0aGUgdXNlciBoYXMgYWRkZWRcbiAgLy8gc29tZSBmdW5reSBnbG9iYWwgbWl4aW5zXG4gIHZhciBzaWxlbnQgPSBWdWUuY29uZmlnLnNpbGVudDtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuICBzdG9yZS5fdm0gPSBuZXcgVnVlKHtcbiAgICBkYXRhOiB7XG4gICAgICAkJHN0YXRlOiBzdGF0ZVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IGNvbXB1dGVkXG4gIH0pO1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHNpbGVudDtcblxuICAvLyBlbmFibGUgc3RyaWN0IG1vZGUgZm9yIG5ldyB2bVxuICBpZiAoc3RvcmUuc3RyaWN0KSB7XG4gICAgZW5hYmxlU3RyaWN0TW9kZShzdG9yZSk7XG4gIH1cblxuICBpZiAob2xkVm0pIHtcbiAgICBpZiAoaG90KSB7XG4gICAgICAvLyBkaXNwYXRjaCBjaGFuZ2VzIGluIGFsbCBzdWJzY3JpYmVkIHdhdGNoZXJzXG4gICAgICAvLyB0byBmb3JjZSBnZXR0ZXIgcmUtZXZhbHVhdGlvbiBmb3IgaG90IHJlbG9hZGluZy5cbiAgICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2xkVm0uX2RhdGEuJCRzdGF0ZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgVnVlLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9sZFZtLiRkZXN0cm95KCk7IH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGxNb2R1bGUgKHN0b3JlLCByb290U3RhdGUsIHBhdGgsIG1vZHVsZSwgaG90KSB7XG4gIHZhciBpc1Jvb3QgPSAhcGF0aC5sZW5ndGg7XG4gIHZhciBuYW1lc3BhY2UgPSBzdG9yZS5fbW9kdWxlcy5nZXROYW1lc3BhY2UocGF0aCk7XG5cbiAgLy8gcmVnaXN0ZXIgaW4gbmFtZXNwYWNlIG1hcFxuICBpZiAobW9kdWxlLm5hbWVzcGFjZWQpIHtcbiAgICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdID0gbW9kdWxlO1xuICB9XG5cbiAgLy8gc2V0IHN0YXRlXG4gIGlmICghaXNSb290ICYmICFob3QpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZShyb290U3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICB2YXIgbW9kdWxlTmFtZSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICBWdWUuc2V0KHBhcmVudFN0YXRlLCBtb2R1bGVOYW1lLCBtb2R1bGUuc3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxvY2FsID0gbW9kdWxlLmNvbnRleHQgPSBtYWtlTG9jYWxDb250ZXh0KHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpO1xuXG4gIG1vZHVsZS5mb3JFYWNoTXV0YXRpb24oZnVuY3Rpb24gKG11dGF0aW9uLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJNdXRhdGlvbihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIG11dGF0aW9uLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQWN0aW9uKGZ1bmN0aW9uIChhY3Rpb24sIGtleSkge1xuICAgIHZhciB0eXBlID0gYWN0aW9uLnJvb3QgPyBrZXkgOiBuYW1lc3BhY2UgKyBrZXk7XG4gICAgdmFyIGhhbmRsZXIgPSBhY3Rpb24uaGFuZGxlciB8fCBhY3Rpb247XG4gICAgcmVnaXN0ZXJBY3Rpb24oc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hHZXR0ZXIoZnVuY3Rpb24gKGdldHRlciwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyR2V0dGVyKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgZ2V0dGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkLCBrZXkpIHtcbiAgICBpbnN0YWxsTW9kdWxlKHN0b3JlLCByb290U3RhdGUsIHBhdGguY29uY2F0KGtleSksIGNoaWxkLCBob3QpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBtYWtlIGxvY2FsaXplZCBkaXNwYXRjaCwgY29tbWl0LCBnZXR0ZXJzIGFuZCBzdGF0ZVxuICogaWYgdGhlcmUgaXMgbm8gbmFtZXNwYWNlLCBqdXN0IHVzZSByb290IG9uZXNcbiAqL1xuZnVuY3Rpb24gbWFrZUxvY2FsQ29udGV4dCAoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCkge1xuICB2YXIgbm9OYW1lc3BhY2UgPSBuYW1lc3BhY2UgPT09ICcnO1xuXG4gIHZhciBsb2NhbCA9IHtcbiAgICBkaXNwYXRjaDogbm9OYW1lc3BhY2UgPyBzdG9yZS5kaXNwYXRjaCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RvcmUuX2FjdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIGFjdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2godHlwZSwgcGF5bG9hZClcbiAgICB9LFxuXG4gICAgY29tbWl0OiBub05hbWVzcGFjZSA/IHN0b3JlLmNvbW1pdCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RvcmUuX211dGF0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgbXV0YXRpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RvcmUuY29tbWl0KHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICAvLyBnZXR0ZXJzIGFuZCBzdGF0ZSBvYmplY3QgbXVzdCBiZSBnb3R0ZW4gbGF6aWx5XG4gIC8vIGJlY2F1c2UgdGhleSB3aWxsIGJlIGNoYW5nZWQgYnkgdm0gdXBkYXRlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGxvY2FsLCB7XG4gICAgZ2V0dGVyczoge1xuICAgICAgZ2V0OiBub05hbWVzcGFjZVxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYWtlTG9jYWxHZXR0ZXJzKHN0b3JlLCBuYW1lc3BhY2UpOyB9XG4gICAgfSxcbiAgICBzdGF0ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXROZXN0ZWRTdGF0ZShzdG9yZS5zdGF0ZSwgcGF0aCk7IH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsb2NhbFxufVxuXG5mdW5jdGlvbiBtYWtlTG9jYWxHZXR0ZXJzIChzdG9yZSwgbmFtZXNwYWNlKSB7XG4gIHZhciBnZXR0ZXJzUHJveHkgPSB7fTtcblxuICB2YXIgc3BsaXRQb3MgPSBuYW1lc3BhY2UubGVuZ3RoO1xuICBPYmplY3Qua2V5cyhzdG9yZS5nZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgLy8gc2tpcCBpZiB0aGUgdGFyZ2V0IGdldHRlciBpcyBub3QgbWF0Y2ggdGhpcyBuYW1lc3BhY2VcbiAgICBpZiAodHlwZS5zbGljZSgwLCBzcGxpdFBvcykgIT09IG5hbWVzcGFjZSkgeyByZXR1cm4gfVxuXG4gICAgLy8gZXh0cmFjdCBsb2NhbCBnZXR0ZXIgdHlwZVxuICAgIHZhciBsb2NhbFR5cGUgPSB0eXBlLnNsaWNlKHNwbGl0UG9zKTtcblxuICAgIC8vIEFkZCBhIHBvcnQgdG8gdGhlIGdldHRlcnMgcHJveHkuXG4gICAgLy8gRGVmaW5lIGFzIGdldHRlciBwcm9wZXJ0eSBiZWNhdXNlXG4gICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gZXZhbHVhdGUgdGhlIGdldHRlcnMgaW4gdGhpcyB0aW1lLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzUHJveHksIGxvY2FsVHlwZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzW3R5cGVdOyB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZ2V0dGVyc1Byb3h5XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTXV0YXRpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fbXV0YXRpb25zW3R5cGVdIHx8IChzdG9yZS5fbXV0YXRpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRNdXRhdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICBoYW5kbGVyLmNhbGwoc3RvcmUsIGxvY2FsLnN0YXRlLCBwYXlsb2FkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQWN0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX2FjdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9hY3Rpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRBY3Rpb25IYW5kbGVyIChwYXlsb2FkLCBjYikge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmNhbGwoc3RvcmUsIHtcbiAgICAgIGRpc3BhdGNoOiBsb2NhbC5kaXNwYXRjaCxcbiAgICAgIGNvbW1pdDogbG9jYWwuY29tbWl0LFxuICAgICAgZ2V0dGVyczogbG9jYWwuZ2V0dGVycyxcbiAgICAgIHN0YXRlOiBsb2NhbC5zdGF0ZSxcbiAgICAgIHJvb3RHZXR0ZXJzOiBzdG9yZS5nZXR0ZXJzLFxuICAgICAgcm9vdFN0YXRlOiBzdG9yZS5zdGF0ZVxuICAgIH0sIHBheWxvYWQsIGNiKTtcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9kZXZ0b29sSG9vaykge1xuICAgICAgcmV0dXJuIHJlcy5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHN0b3JlLl9kZXZ0b29sSG9vay5lbWl0KCd2dWV4OmVycm9yJywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHZXR0ZXIgKHN0b3JlLCB0eXBlLCByYXdHZXR0ZXIsIGxvY2FsKSB7XG4gIGlmIChzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIGdldHRlciBrZXk6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0gPSBmdW5jdGlvbiB3cmFwcGVkR2V0dGVyIChzdG9yZSkge1xuICAgIHJldHVybiByYXdHZXR0ZXIoXG4gICAgICBsb2NhbC5zdGF0ZSwgLy8gbG9jYWwgc3RhdGVcbiAgICAgIGxvY2FsLmdldHRlcnMsIC8vIGxvY2FsIGdldHRlcnNcbiAgICAgIHN0b3JlLnN0YXRlLCAvLyByb290IHN0YXRlXG4gICAgICBzdG9yZS5nZXR0ZXJzIC8vIHJvb3QgZ2V0dGVyc1xuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZSAoc3RvcmUpIHtcbiAgc3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhLiQkc3RhdGUgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBhc3NlcnQoc3RvcmUuX2NvbW1pdHRpbmcsIFwiZG8gbm90IG11dGF0ZSB2dWV4IHN0b3JlIHN0YXRlIG91dHNpZGUgbXV0YXRpb24gaGFuZGxlcnMuXCIpO1xuICAgIH1cbiAgfSwgeyBkZWVwOiB0cnVlLCBzeW5jOiB0cnVlIH0pO1xufVxuXG5mdW5jdGlvbiBnZXROZXN0ZWRTdGF0ZSAoc3RhdGUsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubGVuZ3RoXG4gICAgPyBwYXRoLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGtleSkgeyByZXR1cm4gc3RhdGVba2V5XTsgfSwgc3RhdGUpXG4gICAgOiBzdGF0ZVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnLCAoXCJleHBlY3RzIHN0cmluZyBhcyB0aGUgdHlwZSwgYnV0IGZvdW5kIFwiICsgKHR5cGVvZiB0eXBlKSArIFwiLlwiKSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkLCBvcHRpb25zOiBvcHRpb25zIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbCAoX1Z1ZSkge1xuICBpZiAoVnVlICYmIF9WdWUgPT09IFZ1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnW3Z1ZXhdIGFscmVhZHkgaW5zdGFsbGVkLiBWdWUudXNlKFZ1ZXgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIFZ1ZSA9IF9WdWU7XG4gIGFwcGx5TWl4aW4oVnVlKTtcbn1cblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIHN0YXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gc3RhdGVzICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgc3RhdGUgYW5kIGdldHRlcnMgZm9yIHBhcmFtLCB5b3UgY2FuIGRvIHNvbWV0aGluZyBmb3Igc3RhdGUgYW5kIGdldHRlcnMgaW4gaXQuXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqL1xudmFyIG1hcFN0YXRlID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIHN0YXRlcykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChzdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRTdGF0ZSAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLiRzdG9yZS5zdGF0ZTtcbiAgICAgIHZhciBnZXR0ZXJzID0gdGhpcy4kc3RvcmUuZ2V0dGVycztcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwU3RhdGUnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gbW9kdWxlLmNvbnRleHQuc3RhdGU7XG4gICAgICAgIGdldHRlcnMgPSBtb2R1bGUuY29udGV4dC5nZXR0ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuY2FsbCh0aGlzLCBzdGF0ZSwgZ2V0dGVycylcbiAgICAgICAgOiBzdGF0ZVt2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBjb21taXR0aW5nIHRoZSBtdXRhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbXV0YXRpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGNvbW1pdGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gY29tbWl0IG11dGF0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAobXV0YXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkTXV0YXRpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIEdldCB0aGUgY29tbWl0IG1ldGhvZCBmcm9tIHN0b3JlXG4gICAgICB2YXIgY29tbWl0ID0gdGhpcy4kc3RvcmUuY29tbWl0O1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBNdXRhdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbW1pdCA9IG1vZHVsZS5jb250ZXh0LmNvbW1pdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtjb21taXRdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBjb21taXQuYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBnZXR0ZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBnZXR0ZXJzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBHZXR0ZXJzID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGdldHRlcnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICAvLyBUaGUgbmFtZXNwYWNlIGhhcyBiZWVuIG11dGF0ZWQgYnkgbm9ybWFsaXplTmFtZXNwYWNlXG4gICAgdmFsID0gbmFtZXNwYWNlICsgdmFsO1xuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkR2V0dGVyICgpIHtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwR2V0dGVycycsIG5hbWVzcGFjZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhKHZhbCBpbiB0aGlzLiRzdG9yZS5nZXR0ZXJzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGdldHRlcjogXCIgKyB2YWwpKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1t2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBkaXNwYXRjaCB0aGUgYWN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBhY3Rpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGRpc3BhdGNoYCBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW0sIGl0IGNhbiBhY2NlcHQgYW50aG9yIHBhcmFtcy4gWW91IGNhbiBkaXNwYXRjaCBhY3Rpb24gYW5kIGRvIGFueSBvdGhlciB0aGluZ3MgaW4gdGhpcyBmdW5jdGlvbi4gc3BlY2lhbGx5LCBZb3UgbmVlZCB0byBwYXNzIGFudGhvciBwYXJhbXMgZnJvbSB0aGUgbWFwcGVkIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwQWN0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBhY3Rpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIGdldCBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHN0b3JlXG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLiRzdG9yZS5kaXNwYXRjaDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwQWN0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2ggPSBtb2R1bGUuY29udGV4dC5kaXNwYXRjaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtkaXNwYXRjaF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGRpc3BhdGNoLmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlYmluZGluZyBuYW1lc3BhY2UgcGFyYW0gZm9yIG1hcFhYWCBmdW5jdGlvbiBpbiBzcGVjaWFsIHNjb3BlZCwgYW5kIHJldHVybiB0aGVtIGJ5IHNpbXBsZSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkgeyByZXR1cm4gKHtcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSlcbn0pOyB9O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgbWFwXG4gKiBub3JtYWxpemVNYXAoWzEsIDIsIDNdKSA9PiBbIHsga2V5OiAxLCB2YWw6IDEgfSwgeyBrZXk6IDIsIHZhbDogMiB9LCB7IGtleTogMywgdmFsOiAzIH0gXVxuICogbm9ybWFsaXplTWFwKHthOiAxLCBiOiAyLCBjOiAzfSkgPT4gWyB7IGtleTogJ2EnLCB2YWw6IDEgfSwgeyBrZXk6ICdiJywgdmFsOiAyIH0sIHsga2V5OiAnYycsIHZhbDogMyB9IF1cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBtYXBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKVxuICAgID8gbWFwLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBrZXkgfSk7IH0pXG4gICAgOiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBtYXBba2V5XSB9KTsgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiBleHBlY3QgdHdvIHBhcmFtIGNvbnRhaW5zIG5hbWVzcGFjZSBhbmQgbWFwLiBpdCB3aWxsIG5vcm1hbGl6ZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGVuIHRoZSBwYXJhbSdzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBuZXcgbmFtZXNwYWNlIGFuZCB0aGUgbWFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lc3BhY2UgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXApIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG1hcCA9IG5hbWVzcGFjZTtcbiAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmNoYXJBdChuYW1lc3BhY2UubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgbmFtZXNwYWNlICs9ICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGZuKG5hbWVzcGFjZSwgbWFwKVxuICB9XG59XG5cbi8qKlxuICogU2VhcmNoIGEgc3BlY2lhbCBtb2R1bGUgZnJvbSBzdG9yZSBieSBuYW1lc3BhY2UuIGlmIG1vZHVsZSBub3QgZXhpc3QsIHByaW50IGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWxwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2UgKHN0b3JlLCBoZWxwZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgbW9kdWxlID0gc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1vZHVsZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIG1vZHVsZSBuYW1lc3BhY2Ugbm90IGZvdW5kIGluIFwiICsgaGVscGVyICsgXCIoKTogXCIgKyBuYW1lc3BhY2UpKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlXG59XG5cbnZhciBpbmRleF9lc20gPSB7XG4gIFN0b3JlOiBTdG9yZSxcbiAgaW5zdGFsbDogaW5zdGFsbCxcbiAgdmVyc2lvbjogJzMuMS4xJyxcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucyxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycyxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucyxcbiAgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnM6IGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleF9lc207XG5leHBvcnQgeyBTdG9yZSwgaW5zdGFsbCwgbWFwU3RhdGUsIG1hcE11dGF0aW9ucywgbWFwR2V0dGVycywgbWFwQWN0aW9ucywgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMgfTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YmE1YmQ5MCZcIlxudmFyIHNjcmlwdCA9IHt9XG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHBlcnNvbmFsXFxcXHNpdGVzXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzdiYTViZDkwJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzdiYTViZDkwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzdiYTViZDkwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdiYTViZDkwJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzdiYTViZDkwJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQXBwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTAmXCIiLCJ2YXIgbWFwID0ge1xuXHRcIi4vQmFjay1vZi1DYXJkLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9CYWNrLW9mLUNhcmQuanBnXCIsXG5cdFwiLi9DdWxyb3NzLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9DdWxyb3NzLmpwZ1wiLFxuXHRcIi4vRG91bmVfQ2FzdGxlLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9Eb3VuZV9DYXN0bGUuanBnXCIsXG5cdFwiLi9HbGVuY29lLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9HbGVuY29lLmpwZ1wiLFxuXHRcIi4vYmFjay1idXR0b24ucG5nXCI6IFwiLi9zcmMvYXNzZXRzL2JhY2stYnV0dG9uLnBuZ1wiLFxuXHRcIi4vZGVmYXVsdC1jYXJkLnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy9kZWZhdWx0LWNhcmQucG5nXCIsXG5cdFwiLi9kZWZhdWx0LXByb2ZpbGUuanBnXCI6IFwiLi9zcmMvYXNzZXRzL2RlZmF1bHQtcHJvZmlsZS5qcGdcIixcblx0XCIuL2ZpbGwtbXVycmF5LmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9maWxsLW11cnJheS5qcGdcIixcblx0XCIuL2ZsaXAtY2FyZC1idXR0b24ucG5nXCI6IFwiLi9zcmMvYXNzZXRzL2ZsaXAtY2FyZC1idXR0b24ucG5nXCIsXG5cdFwiLi9ncmV5ZnJpYXJzLWJvYmJ5LWJhY2sucG5nXCI6IFwiLi9zcmMvYXNzZXRzL2dyZXlmcmlhcnMtYm9iYnktYmFjay5wbmdcIixcblx0XCIuL2dyZXlmcmlhcnMtYm9iYnktZnJvbnQucG5nXCI6IFwiLi9zcmMvYXNzZXRzL2dyZXlmcmlhcnMtYm9iYnktZnJvbnQucG5nXCIsXG5cdFwiLi9wbGFjZS1jYWdlLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9wbGFjZS1jYWdlLmpwZ1wiLFxuXHRcIi4vcmFuay1iYWNrZ3JvdW5kLnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy9yYW5rLWJhY2tncm91bmQucG5nXCIsXG5cdFwiLi9yb2JlcnQtYnJ1Y2UtYmFjay5wbmdcIjogXCIuL3NyYy9hc3NldHMvcm9iZXJ0LWJydWNlLWJhY2sucG5nXCIsXG5cdFwiLi9yb2JlcnQtYnJ1Y2UtZnJvbnQucG5nXCI6IFwiLi9zcmMvYXNzZXRzL3JvYmVydC1icnVjZS1mcm9udC5wbmdcIixcblx0XCIuL3JvYmVydC1jYXJkLWJhY2suanBnXCI6IFwiLi9zcmMvYXNzZXRzL3JvYmVydC1jYXJkLWJhY2suanBnXCIsXG5cdFwiLi9yb2JlcnQtdGhlLWJydWNlLWNhcmQtYmFjay5qcGdcIjogXCIuL3NyYy9hc3NldHMvcm9iZXJ0LXRoZS1icnVjZS1jYXJkLWJhY2suanBnXCIsXG5cdFwiLi9yb2JlcnQtdGhlLWJydWNlLWNhcmQtZnJvbnQuanBnXCI6IFwiLi9zcmMvYXNzZXRzL3JvYmVydC10aGUtYnJ1Y2UtY2FyZC1mcm9udC5qcGdcIixcblx0XCIuL3JvYmVydC10aGUtYnJ1Y2UtcHJldmlldy5qcGdcIjogXCIuL3NyYy9hc3NldHMvcm9iZXJ0LXRoZS1icnVjZS1wcmV2aWV3LmpwZ1wiLFxuXHRcIi4vc3RvbmUtYmFjay1idXR0b24ucG5nXCI6IFwiLi9zcmMvYXNzZXRzL3N0b25lLWJhY2stYnV0dG9uLnBuZ1wiLFxuXHRcIi4vc3RvbmUtYmFja2dyb3VuZC5wbmdcIjogXCIuL3NyYy9hc3NldHMvc3RvbmUtYmFja2dyb3VuZC5wbmdcIixcblx0XCIuL3RvbS1yaWRkbGUtZ3MucG5nXCI6IFwiLi9zcmMvYXNzZXRzL3RvbS1yaWRkbGUtZ3MucG5nXCIsXG5cdFwiLi90b3AtcmFuay1iYWNrZ3JvdW5kLnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy90b3AtcmFuay1iYWNrZ3JvdW5kLnBuZ1wiLFxuXHRcIi4vdm9sZGVtb3J0LnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy92b2xkZW1vcnQucG5nXCIsXG5cdFwiLi93ZWUtZ2FpdGhlcmVycy1sb2dvLnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy93ZWUtZ2FpdGhlcmVycy1sb2dvLnBuZ1wiLFxuXHRcIi4vd29vZC1iYWNrZ3JvdW5kLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy93b29kLWJhY2tncm91bmQuanBnXCJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSBcIi4vc3JjL2Fzc2V0cyBzeW5jIFxcXFwuKHBuZ3xqcGcpJFwiOyIsInZhciBtYXAgPSB7XG5cdFwiLi9BcHAgU2tpbiBBc3NldHMvTGVhZGVyYm9hcmQvUmFuay00Ky1iYWNrZ3JvdW5kLnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy9BcHAgU2tpbiBBc3NldHMvTGVhZGVyYm9hcmQvUmFuay00Ky1iYWNrZ3JvdW5kLnBuZ1wiLFxuXHRcIi4vQXBwIFNraW4gQXNzZXRzL0xlYWRlcmJvYXJkL1RvcC0zLVJhbmstYmFja2dyb3VuZC5wbmdcIjogXCIuL3NyYy9hc3NldHMvQXBwIFNraW4gQXNzZXRzL0xlYWRlcmJvYXJkL1RvcC0zLVJhbmstYmFja2dyb3VuZC5wbmdcIixcblx0XCIuL0FwcCBTa2luIEFzc2V0cy9Vbml2ZXJzYWwvU3RvbmUtYmFja2dyb3VuZC0obWVudS1hbmQtbGVhZGVyYm9hcmQpLnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy9BcHAgU2tpbiBBc3NldHMvVW5pdmVyc2FsL1N0b25lLWJhY2tncm91bmQtKG1lbnUtYW5kLWxlYWRlcmJvYXJkKS5wbmdcIixcblx0XCIuL0FwcCBTa2luIEFzc2V0cy9Vbml2ZXJzYWwvV29vZC1CYWNrZ3JvdW5kLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9BcHAgU2tpbiBBc3NldHMvVW5pdmVyc2FsL1dvb2QtQmFja2dyb3VuZC5qcGdcIixcblx0XCIuL0JhY2stb2YtQ2FyZC5qcGdcIjogXCIuL3NyYy9hc3NldHMvQmFjay1vZi1DYXJkLmpwZ1wiLFxuXHRcIi4vQ3Vscm9zcy5qcGdcIjogXCIuL3NyYy9hc3NldHMvQ3Vscm9zcy5qcGdcIixcblx0XCIuL0RvdW5lX0Nhc3RsZS5qcGdcIjogXCIuL3NyYy9hc3NldHMvRG91bmVfQ2FzdGxlLmpwZ1wiLFxuXHRcIi4vRm9udHMvY29vcGVyLWhld2l0dC9Db29wZXJIZXdpdHQtQm9sZC5vdGZcIjogXCIuL3NyYy9hc3NldHMvRm9udHMvY29vcGVyLWhld2l0dC9Db29wZXJIZXdpdHQtQm9sZC5vdGZcIixcblx0XCIuL0ZvbnRzL2Nvb3Blci1oZXdpdHQvQ29vcGVySGV3aXR0LU1lZGl1bS5vdGZcIjogXCIuL3NyYy9hc3NldHMvRm9udHMvY29vcGVyLWhld2l0dC9Db29wZXJIZXdpdHQtTWVkaXVtLm90ZlwiLFxuXHRcIi4vRm9udHMvbW9udHNlcnJhdC9Nb250c2VycmF0LUJvbGQub3RmXCI6IFwiLi9zcmMvYXNzZXRzL0ZvbnRzL21vbnRzZXJyYXQvTW9udHNlcnJhdC1Cb2xkLm90ZlwiLFxuXHRcIi4vRm9udHMvbW9udHNlcnJhdC9Nb250c2VycmF0LU1lZGl1bS5vdGZcIjogXCIuL3NyYy9hc3NldHMvRm9udHMvbW9udHNlcnJhdC9Nb250c2VycmF0LU1lZGl1bS5vdGZcIixcblx0XCIuL0dsZW5jb2UuanBnXCI6IFwiLi9zcmMvYXNzZXRzL0dsZW5jb2UuanBnXCIsXG5cdFwiLi9iYWNrLWJ1dHRvbi5wbmdcIjogXCIuL3NyYy9hc3NldHMvYmFjay1idXR0b24ucG5nXCIsXG5cdFwiLi9kZWZhdWx0LWNhcmQucG5nXCI6IFwiLi9zcmMvYXNzZXRzL2RlZmF1bHQtY2FyZC5wbmdcIixcblx0XCIuL2RlZmF1bHQtcHJvZmlsZS5qcGdcIjogXCIuL3NyYy9hc3NldHMvZGVmYXVsdC1wcm9maWxlLmpwZ1wiLFxuXHRcIi4vZmlsbC1tdXJyYXkuanBnXCI6IFwiLi9zcmMvYXNzZXRzL2ZpbGwtbXVycmF5LmpwZ1wiLFxuXHRcIi4vZmxpcC1jYXJkLWJ1dHRvbi5wbmdcIjogXCIuL3NyYy9hc3NldHMvZmxpcC1jYXJkLWJ1dHRvbi5wbmdcIixcblx0XCIuL2dyZXlmcmlhcnMtYm9iYnktYmFjay5wbmdcIjogXCIuL3NyYy9hc3NldHMvZ3JleWZyaWFycy1ib2JieS1iYWNrLnBuZ1wiLFxuXHRcIi4vZ3JleWZyaWFycy1ib2JieS1mcm9udC5wbmdcIjogXCIuL3NyYy9hc3NldHMvZ3JleWZyaWFycy1ib2JieS1mcm9udC5wbmdcIixcblx0XCIuL3BsYWNlLWNhZ2UuanBnXCI6IFwiLi9zcmMvYXNzZXRzL3BsYWNlLWNhZ2UuanBnXCIsXG5cdFwiLi9wbGFjZS1rZWFudS5zdmdcIjogXCIuL3NyYy9hc3NldHMvcGxhY2Uta2VhbnUuc3ZnXCIsXG5cdFwiLi9yYW5rLWJhY2tncm91bmQucG5nXCI6IFwiLi9zcmMvYXNzZXRzL3JhbmstYmFja2dyb3VuZC5wbmdcIixcblx0XCIuL3JvYmVydC1icnVjZS1iYWNrLnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy9yb2JlcnQtYnJ1Y2UtYmFjay5wbmdcIixcblx0XCIuL3JvYmVydC1icnVjZS1mcm9udC5wbmdcIjogXCIuL3NyYy9hc3NldHMvcm9iZXJ0LWJydWNlLWZyb250LnBuZ1wiLFxuXHRcIi4vcm9iZXJ0LWNhcmQtYmFjay5qcGdcIjogXCIuL3NyYy9hc3NldHMvcm9iZXJ0LWNhcmQtYmFjay5qcGdcIixcblx0XCIuL3JvYmVydC10aGUtYnJ1Y2UtY2FyZC1iYWNrLmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9yb2JlcnQtdGhlLWJydWNlLWNhcmQtYmFjay5qcGdcIixcblx0XCIuL3JvYmVydC10aGUtYnJ1Y2UtY2FyZC1mcm9udC5qcGdcIjogXCIuL3NyYy9hc3NldHMvcm9iZXJ0LXRoZS1icnVjZS1jYXJkLWZyb250LmpwZ1wiLFxuXHRcIi4vcm9iZXJ0LXRoZS1icnVjZS1wcmV2aWV3LmpwZ1wiOiBcIi4vc3JjL2Fzc2V0cy9yb2JlcnQtdGhlLWJydWNlLXByZXZpZXcuanBnXCIsXG5cdFwiLi9zdG9uZS1iYWNrLWJ1dHRvbi5wbmdcIjogXCIuL3NyYy9hc3NldHMvc3RvbmUtYmFjay1idXR0b24ucG5nXCIsXG5cdFwiLi9zdG9uZS1iYWNrZ3JvdW5kLnBuZ1wiOiBcIi4vc3JjL2Fzc2V0cy9zdG9uZS1iYWNrZ3JvdW5kLnBuZ1wiLFxuXHRcIi4vdG9tLXJpZGRsZS1ncy5wbmdcIjogXCIuL3NyYy9hc3NldHMvdG9tLXJpZGRsZS1ncy5wbmdcIixcblx0XCIuL3RvcC1yYW5rLWJhY2tncm91bmQucG5nXCI6IFwiLi9zcmMvYXNzZXRzL3RvcC1yYW5rLWJhY2tncm91bmQucG5nXCIsXG5cdFwiLi92b2xkZW1vcnQucG5nXCI6IFwiLi9zcmMvYXNzZXRzL3ZvbGRlbW9ydC5wbmdcIixcblx0XCIuL3dlZS1nYWl0aGVyZXJzLWxvZ28ucG5nXCI6IFwiLi9zcmMvYXNzZXRzL3dlZS1nYWl0aGVyZXJzLWxvZ28ucG5nXCIsXG5cdFwiLi93b29kLWJhY2tncm91bmQuanBnXCI6IFwiLi9zcmMvYXNzZXRzL3dvb2QtYmFja2dyb3VuZC5qcGdcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiLi9zcmMvYXNzZXRzIHN5bmMgcmVjdXJzaXZlIF5cXFxcLlxcXFwvLiokXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjg5YmEwZDBmODY4YjJhNGQxNWQwZDdmZjg0Y2ZkYmMucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjMwYTE4YTQ0NGNiM2JlNWQ3YjQwMzAyNDNhNmVhZGQucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjk5ODllNGRlNGJjNjI2MzE3YWVjODk5ODc4MmEyNTEucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjgwY2U1ZmY1ZjI5N2E0OTFkNzMyYmFhZjQ3MDE5YWIuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZWQ3MjkyZmU3ODBmNzJiYmZjODRlMTQ4YmMxMmFmMjIuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNTYyYTA5ZmYwOTM4Mjc1ZWNiNWMxMmJjNWI3NTZkNzEuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjg0YTMzMzE0NDRkYzliY2IxNDFjN2QwMTYyZTQ2ZWYuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMjdhY2VlYjc4NjA1ZmMwM2U0NzZhYzUxNGEwNDc4ZWQub3RmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGEyNWEwYzExY2FlODQwMGQ5YmJiNDU2MWUzYmI1YTIub3RmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMjdhY2VlYjc4NjA1ZmMwM2U0NzZhYzUxNGEwNDc4ZWQub3RmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOWM3MWQ0MmI2YTg0MGVjZmRhOGZjNTU1MDQwYTFjNzYub3RmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDgxNWIwYTI5YWRmMzQ1MGM1NWY1NmUyZmI4MTNiZTQub3RmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYTgyNTY1N2E4OWFjYWNkMjRkMzI4ZTQ5ZGYyZDk3ZDQuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMWEzNmEyZGU1Yjk4OGE3ZWQwZTdjNjBmNjQwN2M4MDkucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMTNkM2MxZGY4Yjk2NzY3ZjRhYTU0ODNmZmQ1NzBiYjMucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZTQzZmU4Y2E5Yzg2OWJlZWVhMDZkNjUxYjUwYTAwY2UuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMjUwYjI5NzcyZGNlNzJlY2VlZWQzMmIzYzczN2E0ZTQuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYzZlMDM1MjQxZDA2NDM3YjFkMDQzNmI2ZmZiOGY5MTIucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzUwZDNhOTdiMzA2NjgwMzExZjJlOTRlNTA1MmQ0NzkucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjAzMjUxMTRhODVkMzBlNmZmMzZmMjZiZDg4MDVhYTAucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzMzZjZlNzU3OWU4NDM3MzFiY2IxMGQ3NDM0NTAyZTEuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMjZlZjEzZTRiZmRkYTQ0MmRkMGE5Yjc0NzM0MzMxZWQuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjg5YmEwZDBmODY4YjJhNGQxNWQwZDdmZjg0Y2ZkYmMucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMTgxMzBiNmMzYjlkM2FlZDk5MzhmOWE2MWIxZWZkZjAucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWRmNmM5MzZjYzRlZmQxNDU3NmM0NWEzNzkyMzhhMDcucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjBjYTFiYmFkYjU2YjE0NDA4MmZiMmUwYjYzMjcxMmYuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOWVlMWZkNDcxZWZiMGRlYzRiZWRkNjFjN2Q3YThkMjkuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmYwYTI5ZjQwYmQwMDhmY2QwMmNhMzBiNzVlMGMxOTkuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOGE1MzU0M2JmNDk2ZTZjMDIzNDk2YmJiYjM5ODhlNTQuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMjMyYTQ3N2ZjMGU2NWU1NmZlMjhmM2M4Yjc0YWE1YjQucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjk5ODllNGRlNGJjNjI2MzE3YWVjODk5ODc4MmEyNTEucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMzkyODY3OWE1YmJjMTY3NmM5NDMxYThjYTU0NGEwZjYucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjMwYTE4YTQ0NGNiM2JlNWQ3YjQwMzAyNDNhNmVhZGQucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMzFjZmQ0MDcxOWFlODM0Mjk1MWJlN2ZjNjgwNDllODkucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMDJkZTJiMzgzZjlkMjA5MjA0MDMzMTE0ODliZjk0MzQucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjgwY2U1ZmY1ZjI5N2E0OTFkNzMyYmFhZjQ3MDE5YWIuanBnXCI7IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9DYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NGNkYzE4MCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9DYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQ2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHBlcnNvbmFsXFxcXHNpdGVzXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzU0Y2RjMTgwJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzU0Y2RjMTgwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzU0Y2RjMTgwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9DYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NGNkYzE4MCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1NGNkYzE4MCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudHMvQ2FyZC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU0Y2RjMTgwJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9DYXJkUHJldmlldy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZDU1OGJlZDAmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ2FyZFByZXZpZXcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9DYXJkUHJldmlldy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQ2FyZFByZXZpZXcudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFx2c2RldlxcXFxwZXJzb25hbFxcXFxzaXRlc1xcXFxjb2xsZWN0YWJsZS1jYXJkc1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdkNTU4YmVkMCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdkNTU4YmVkMCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdkNTU4YmVkMCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQ2FyZFByZXZpZXcudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWQ1NThiZWQwJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2Q1NThiZWQwJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50cy9DYXJkUHJldmlldy52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DYXJkUHJldmlldy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmRQcmV2aWV3LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2FyZFByZXZpZXcudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NhcmRQcmV2aWV3LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DYXJkUHJldmlldy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZDU1OGJlZDAmXCIiLCJ2YXIgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnNcbnZhciBzY3JpcHQgPSB7fVxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudHMvR2VvLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03OTBhODhhNiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9MZWFkZXJib2FyZENhcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9MZWFkZXJib2FyZENhcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0xlYWRlcmJvYXJkQ2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHBlcnNvbmFsXFxcXHNpdGVzXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzc5MGE4OGE2JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzc5MGE4OGE2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzc5MGE4OGE2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9MZWFkZXJib2FyZENhcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc5MGE4OGE2JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzc5MGE4OGE2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50cy9MZWFkZXJib2FyZENhcmQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmRDYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9MZWFkZXJib2FyZENhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xlYWRlcmJvYXJkQ2FyZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzkwYTg4YTYmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTgxNDQwYjc4JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9OYXZpZ2F0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9OYXZpZ2F0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTgxNDQwYjc4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiODE0NDBiNzhcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFx2c2RldlxcXFxwZXJzb25hbFxcXFxzaXRlc1xcXFxjb2xsZWN0YWJsZS1jYXJkc1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc4MTQ0MGI3OCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc4MTQ0MGI3OCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc4MTQ0MGI3OCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTmF2aWdhdGlvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ODE0NDBiNzgmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignODE0NDBiNzgnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnRzL05hdmlnYXRpb24udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTmF2aWdhdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05hdmlnYXRpb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9OYXZpZ2F0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTgxNDQwYjc4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9OYXZpZ2F0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTgxNDQwYjc4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9OYXZpZ2F0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04MTQ0MGI3OCZzY29wZWQ9dHJ1ZSZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vU2Nhbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YmRmYTI3YTYmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vU2Nhbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1NjYW4udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL1NjYW4udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YmRmYTI3YTYmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCJiZGZhMjdhNlwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHBlcnNvbmFsXFxcXHNpdGVzXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJ2JkZmEyN2E2JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJ2JkZmEyN2E2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJ2JkZmEyN2E2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9TY2FuLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iZGZhMjdhNiZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdiZGZhMjdhNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudHMvU2Nhbi52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9TY2FuLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU2Nhbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NjYW4udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YmRmYTI3YTYmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NjYW4udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YmRmYTI3YTYmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NjYW4udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWJkZmEyN2E2JnNjb3BlZD10cnVlJlwiIiwiaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnLi4vdmlld3MvQ29sbGVjdGlvbi52dWUnXHJcbmltcG9ydCBMZWFkZXJib2FyZCBmcm9tICcuLi92aWV3cy9MZWFkZXJib2FyZC52dWUnXHJcbmltcG9ydCBMb2NhdGlvbnMgZnJvbSAnLi4vdmlld3MvTG9jYXRpb25zLnZ1ZSdcclxuaW1wb3J0IEhvbWUgZnJvbSAnLi4vdmlld3MvSG9tZS52dWUnXHJcbmltcG9ydCBTaW5nbGVDYXJkIGZyb20gJy4uL3ZpZXdzL1NpbmdsZUNhcmQudnVlJ1xyXG5pbXBvcnQgQXBwIGZyb20gJy4uL0FwcC52dWUnXHJcbmltcG9ydCBBZGRDYXJkIGZyb20gJy4uL3ZpZXdzL0FkZC52dWUnXHJcbmltcG9ydCBTY2FuQWRkIGZyb20gJy4uL2NvbXBvbmVudHMvU2Nhbi52dWUnXHJcbmltcG9ydCBnZW9BZGQgZnJvbSAnLi4vY29tcG9uZW50cy9HZW8udnVlJ1xyXG5jb25zdCByb3V0ZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJycsXHJcbiAgICAgICAgY29tcG9uZW50OiBBcHAsXHJcbiAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAgeyBwYXRoOiAnJywgY29tcG9uZW50OiBIb21lIH0sXHJcbiAgICAgICAgICAgIHsgcGF0aDogJy9jb2xsZWN0aW9uLycsIGNvbXBvbmVudDogQ29sbGVjdGlvbiB9LFxyXG4gICAgICAgICAgICB7IHBhdGg6ICcvbGVhZGVyYm9hcmQnLCBjb21wb25lbnQ6IExlYWRlcmJvYXJkIH0sXHJcbiAgICAgICAgICAgIHsgcGF0aDogJy9sb2NhdGlvbnMnLCBjb21wb25lbnQ6IExvY2F0aW9ucyB9LFxyXG4gICAgICAgICAgICB7IHBhdGg6ICcvYWRkJywgY29tcG9uZW50OiBBZGRDYXJkIH0sXHJcbiAgICAgICAgICAgIHsgcGF0aDogJ2dlb2xvY2F0aW9uJywgY29tcG9uZW50OiBnZW9BZGQgfSxcclxuICAgICAgICAgICAgeyBwYXRoOiAnc2NhbicsIGNvbXBvbmVudDogU2NhbkFkZCB9LFxyXG4gICAgICAgICAgICB7IHBhdGg6ICcvY2FyZC86aWQnLCBjb21wb25lbnQ6IFNpbmdsZUNhcmQsIHByb3BzOiB0cnVlIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbl1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlc1xyXG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXHJcbmNvbnN0IGJhc2VTdG9yZSA9IHtcclxuICAgIHN0YXRlOiB7XHJcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgY2FyZHM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0dyZXlmcmlhcnMgQm9iYnknLFxyXG4gICAgICAgICAgICAgICAgaW1hZ2VQcmV2aWV3OiAnZ3JleWZyaWFycy1ib2JieS1mcm9udC5wbmcnLFxyXG4gICAgICAgICAgICAgICAgaW1hZ2VGcm9udDogJ2dyZXlmcmlhcnMtYm9iYnktZnJvbnQucG5nJyxcclxuICAgICAgICAgICAgICAgIGltYWdlQmFjazogJ2dyZXlmcmlhcnMtYm9iYnktYmFjay5wbmcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZDogMixcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnUm9iZXJ0IHRoZSBCcnVjZScsXHJcbiAgICAgICAgICAgICAgICBpbWFnZVByZXZpZXc6ICdyb2JlcnQtdGhlLWJydWNlLXByZXZpZXcuanBnJyxcclxuICAgICAgICAgICAgICAgIGltYWdlRnJvbnQ6ICdyb2JlcnQtdGhlLWJydWNlLWNhcmQtZnJvbnQuanBnJyxcclxuICAgICAgICAgICAgICAgIGltYWdlQmFjazogJ3JvYmVydC10aGUtYnJ1Y2UtY2FyZC1iYWNrLmpwZycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkOiAzLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdHbGVuY29lJyxcclxuICAgICAgICAgICAgICAgIGltYWdlUHJldmlldzogJ0dsZW5jb2UuanBnJyxcclxuICAgICAgICAgICAgICAgIGltYWdlRnJvbnQ6ICdHbGVuY29lLmpwZycsXHJcbiAgICAgICAgICAgICAgICBpbWFnZUJhY2s6ICdCYWNrLW9mLUNhcmQuanBnJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWQ6IDQsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0N1bHJvc3MnLFxyXG4gICAgICAgICAgICAgICAgaW1hZ2VQcmV2aWV3OiAnQ3Vscm9zcy5qcGcnLFxyXG4gICAgICAgICAgICAgICAgaW1hZ2VGcm9udDogJ0N1bHJvc3MuanBnJyxcclxuICAgICAgICAgICAgICAgIGltYWdlQmFjazogJ0JhY2stb2YtQ2FyZC5qcGcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgbGVhZGVyYm9hcmREYXRhOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHByb2ZpbGVJbWFnZTogJ2ZpbGwtbXVycmF5LmpwZycsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJzEnLFxyXG4gICAgICAgICAgICAgICAgb3JkaW5hbDogJ3N0JyxcclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnVmVua21hbicsXHJcbiAgICAgICAgICAgICAgICBjYXJkc0NvbGxlY3RlZDogMTIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnMicsXHJcbiAgICAgICAgICAgICAgICBvcmRpbmFsOiAnbmQnLFxyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdDeWNsb25lJyxcclxuICAgICAgICAgICAgICAgIGNhcmRzQ29sbGVjdGVkOiAxMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcHJvZmlsZUltYWdlOiAncGxhY2UtY2FnZS5qcGcnLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICczJyxcclxuICAgICAgICAgICAgICAgIG9yZGluYWw6ICdyZCcsXHJcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ0Rvb21BaXInLFxyXG4gICAgICAgICAgICAgICAgY2FyZHNDb2xsZWN0ZWQ6IDksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnNCcsXHJcbiAgICAgICAgICAgICAgICBvcmRpbmFsOiAndGgnLFxyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdGdW5CaXQnLFxyXG4gICAgICAgICAgICAgICAgY2FyZHNDb2xsZWN0ZWQ6IDcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHByb2ZpbGVJbWFnZTogJ3BsYWNlLWtlYW51LnN2ZycsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJzUnLFxyXG4gICAgICAgICAgICAgICAgb3JkaW5hbDogJ3JkJyxcclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnSm9obldpY2snLFxyXG4gICAgICAgICAgICAgICAgY2FyZHNDb2xsZWN0ZWQ6IDcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnNicsXHJcbiAgICAgICAgICAgICAgICBvcmRpbmFsOiAndGgnLFxyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdCaXRGdW4nLFxyXG4gICAgICAgICAgICAgICAgY2FyZHNDb2xsZWN0ZWQ6IDYsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnNycsXHJcbiAgICAgICAgICAgICAgICBvcmRpbmFsOiAndGgnLFxyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdDaGVlc2VjYWtlJyxcclxuICAgICAgICAgICAgICAgIGNhcmRzQ29sbGVjdGVkOiAxLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgcm91dGVsaW5rczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsaW5rOiAnL2NvbGxlY3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogJ0NvbGxlY3Rpb24nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsaW5rOiAnL2xlYWRlcmJvYXJkJyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdMZWFkZXJib2FyZCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxpbms6ICcvYWNjb3VudCcsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnQWNjb3VudCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxpbms6ICcvbG9jYXRpb25zJyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdMb2NhdGlvbnMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsaW5rOiAnL2FkZCcsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnQWRkIGEgQ2FyZCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgICAgICBzdWJSb3V0ZXM6IHtcclxuICAgICAgICAgICAgYWRkOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluazogJy9zY2FuJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnU2NhbiBhIGNhcmQnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5rOiAnL2dlb2xvY2F0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQ2hlY2sgbG9jYXRpb24gY2FyZHMnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIG11dGF0aW9uczoge1xyXG4gICAgICAgIHNldExvYWRpbmcoc3RhdGUsIHN0YXR1cykge1xyXG4gICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gc3RhdHVzXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRDYXJkcyhzdGF0ZSwgY2FyZHMpIHtcclxuICAgICAgICAgICAgc3RhdGUuY2FyZHMgPSBjYXJkc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWRkQ2FyZChzdGF0ZSwgY2FyZCkge1xyXG4gICAgICAgICAgICBzdGF0ZS5jYXJkcy5wdXNoKGNhcmQpXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBhY3Rpb25zOiB7XHJcbiAgICAgICAgZmV0Y2hDYXJkcyhjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCdzZXRMb2FkaW5nJywgdHJ1ZSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNjYW5DYXJkKGNvbnRleHQsIGNhcmQpIHtcclxuICAgICAgICAgICAgY29udGV4dC5jb21taXQoJ2FkZENhcmQnLCBjYXJkKVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZ2V0dGVyczoge1xyXG4gICAgICAgIGdldFVzZXJDYXJkcyhzdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuY2FyZHMuZmlsdGVyKGNhcmQgPT4gY2FyZC5jb2xsZWN0ZWQpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRBbGxDYXJkcyhzdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuY2FyZHNcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYmFzZVN0b3JlXHJcbiIsImltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5pbXBvcnQgVnVlUm91dGVyIGZyb20gJ3Z1ZS1yb3V0ZXInXHJcbmltcG9ydCByb3V0ZXMgZnJvbSAnLi9jb25maWcvcm91dGVzLmpzJ1xyXG5pbXBvcnQgVnVleCBmcm9tICd2dWV4J1xyXG5pbXBvcnQgYmFzZVN0b3JlIGZyb20gJy4vY29uZmlnL3N0b3Jlcy9iYXNlJ1xyXG5cclxuVnVlLnVzZShWdWVSb3V0ZXIpXHJcblZ1ZS51c2UoVnVleClcclxuY29uc3Qgcm91dGVyID0gbmV3IFZ1ZVJvdXRlcih7XHJcbiAgICByb3V0ZXMsXHJcbn0pXHJcblxyXG5jb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHtcclxuICAgIG1vZHVsZXM6IHtcclxuICAgICAgICBiYXNlOiBiYXNlU3RvcmUsXHJcbiAgICB9XHJcbn0pXHJcblxyXG5jb25zdCBhcHAgPSBuZXcgVnVlKHtcclxuICAgIHN0b3JlLFxyXG4gICAgcm91dGVyOiByb3V0ZXIsXHJcbiAgICBlbDogJyNhcHAnLFxyXG59KVxyXG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FkZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzY0YzU1ZDcmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQWRkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQWRkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9BZGQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NzY0YzU1ZDcmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI3NjRjNTVkN1wiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHBlcnNvbmFsXFxcXHNpdGVzXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzc2NGM1NWQ3JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzc2NGM1NWQ3JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzc2NGM1NWQ3JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BZGQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc2NGM1NWQ3JnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzc2NGM1NWQ3Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvdmlld3MvQWRkLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FkZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FkZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FkZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03NjRjNTVkNyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQWRkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc2NGM1NWQ3Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BZGQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc2NGM1NWQ3JnNjb3BlZD10cnVlJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Db2xsZWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NTAyNjE1OCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Db2xsZWN0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQ29sbGVjdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQ29sbGVjdGlvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHBlcnNvbmFsXFxcXHNpdGVzXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzU1MDI2MTU4JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzU1MDI2MTU4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzU1MDI2MTU4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9Db2xsZWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NTAyNjE1OCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1NTAyNjE1OCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL3ZpZXdzL0NvbGxlY3Rpb24udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29sbGVjdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NvbGxlY3Rpb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db2xsZWN0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db2xsZWN0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db2xsZWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NTAyNjE1OCZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vSG9tZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZmFlNWJlY2Umc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vSG9tZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0hvbWUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0hvbWUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZmFlNWJlY2UmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCJmYWU1YmVjZVwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHBlcnNvbmFsXFxcXHNpdGVzXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJ2ZhZTViZWNlJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJ2ZhZTViZWNlJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJ2ZhZTViZWNlJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9Ib21lLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mYWU1YmVjZSZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdmYWU1YmVjZScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL3ZpZXdzL0hvbWUudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSG9tZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hvbWUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ib21lLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWZhZTViZWNlJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ib21lLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWZhZTViZWNlJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ib21lLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mYWU1YmVjZSZzY29wZWQ9dHJ1ZSZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWM3ZmQwZTlhJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWM3ZmQwZTlhJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiYzdmZDBlOWFcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFx2c2RldlxcXFxwZXJzb25hbFxcXFxzaXRlc1xcXFxjb2xsZWN0YWJsZS1jYXJkc1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdjN2ZkMGU5YScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdjN2ZkMGU5YScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdjN2ZkMGU5YScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWM3ZmQwZTlhJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2M3ZmQwZTlhJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvdmlld3MvTGVhZGVyYm9hcmQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9MZWFkZXJib2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xlYWRlcmJvYXJkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWM3ZmQwZTlhJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0yLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9MZWFkZXJib2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1jN2ZkMGU5YSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGVhZGVyYm9hcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWM3ZmQwZTlhJnNjb3BlZD10cnVlJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Mb2NhdGlvbnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNiNDc4MGQ4JnNjb3BlZD10cnVlJlwiXG52YXIgc2NyaXB0ID0ge31cbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vTG9jYXRpb25zLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTNiNDc4MGQ4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiM2I0NzgwZDhcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFx2c2RldlxcXFxwZXJzb25hbFxcXFxzaXRlc1xcXFxjb2xsZWN0YWJsZS1jYXJkc1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCczYjQ3ODBkOCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCczYjQ3ODBkOCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCczYjQ3ODBkOCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTG9jYXRpb25zLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zYjQ3ODBkOCZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCczYjQ3ODBkOCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL3ZpZXdzL0xvY2F0aW9ucy52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xvY2F0aW9ucy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zYjQ3ODBkOCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi0yIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9jYXRpb25zLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTNiNDc4MGQ4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Mb2NhdGlvbnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNiNDc4MGQ4JnNjb3BlZD10cnVlJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9TaW5nbGVDYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NDg5YzUzMiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9TaW5nbGVDYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vU2luZ2xlQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXHZzZGV2XFxcXHBlcnNvbmFsXFxcXHNpdGVzXFxcXGNvbGxlY3RhYmxlLWNhcmRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzU0ODljNTMyJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzU0ODljNTMyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzU0ODljNTMyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9TaW5nbGVDYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NDg5YzUzMiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1NDg5YzUzMicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL3ZpZXdzL1NpbmdsZUNhcmQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU2luZ2xlQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NpbmdsZUNhcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NpbmdsZUNhcmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU0ODljNTMyJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==